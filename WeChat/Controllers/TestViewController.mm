//
//  NewInitViewController.m
//  WeChat
//
//  Created by ray on 2018/12/17.
//  Copyright Â© 2018 ray. All rights reserved.
//

#import "TestViewController.h"
#import "SyncKeyCompare.h"
#import "WCECDH.h"
#import "WC_SHA256.h"
#import "WC_AesGcm128.h"
#import "WC_HKDF.h"
#import "Varint128.h"

@interface TestViewController ()

@end

@implementation TestViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

- (IBAction)Test:(id)sender {

}

- (IBAction)registerr:(id)sender {

}

- (IBAction)register:(id)sender {
    NSData *data = [NSData dataWithHexString:@"8A01B6109D"];


    NSString *binPath = [[NSBundle mainBundle] pathForResource:@"secmanualauth-type-252" ofType:@"bin"];
    NSData *secManualAuth = [NSData dataWithContentsOfFile:binPath];
    ManualAuthRequest *request = [ManualAuthRequest parseFromData:secManualAuth error:nil];

    SyncKey *resp = [[SyncKey alloc] initWithData:[NSData dataWithHexString:[@"081f1208 080110c6 f9d69e02 12080802 10a2f9d6 9e021208 080310cd f6d69e02 12040804 10001204 08051000 12040807 10001208 080810a3 f8d69e02 12080809 10b0f7d6 9e021204 080a1000 1208080b 10fde6d6 9e021208 080d10f1 dcd59e02 1208080e 10f1dcd5 9e021208 081010f1 dcd59e02 12080811 10f1dcd5 9e021204 08651000 12040866 10001204 08671000 12040868 10001204 08691000 1204086b 10001204 086d1000 1204086f 10001204 08701000 12040872 10001209 08c90110 f3f3cae1 05120508 cb011000 120508cc 01100012 0508cd01 10001209 08e80710 a4d1bbe1 05120908 e907108c d3bbe105 120908d1 0f108593 c1e105" stringByReplacingOccurrencesOfString:@" " withString:@""]] error:nil];

    SyncKey *req = [[SyncKey alloc] initWithData:[NSData dataWithHexString:[@"081f1208 080110c6 f9d69e02 12040865 10001208 080210be f9d69e02 12040866 10001208 080d10f1 dcd59e02 120508cc 01100012 08080310 cdf6d69e 02120408 67100012 08080b10 fde6d69e 02120408 6f100012 04080410 00120408 68100012 04080510 00120408 69100012 04080710 00120408 6b100012 08080810 a3f8d69e 02120808 0910b0f7 d69e0212 08081010 f1dcd59e 02120808 1110f1dc d59e0212 04087210 00120808 0e10f1dc d59e0212 04087010 00120408 6d100012 04080a10 00120908 c90110fc 88cce105 120508cd 01100012 0508cb01 10001209 08e80710 a4d1bbe1 05120908 e907108c d3bbe105 120908d1 0f108593 c1e105" stringByReplacingOccurrencesOfString:@" " withString:@""]] error:nil];

    [SyncKeyCompare compaireOldSyncKey:resp newSyncKey:req];
}

- (IBAction)test:(id)sender {
    NSString *path = [[NSBundle mainBundle] pathForResource:@"st_angler_1" ofType:@"bin"];
    NSData *data = [NSData dataWithContentsOfFile:path];
    NSString *str = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    NSLog(@"%@", str);

    [self testNeedRSAPack];
}

#define ARRAY_SIZE(x) sizeof(x)/sizeof((x)[0])

- (void)testNeedRSAPack {
    NSData *pri = [NSData dataWithHexString:[@"0495BC6E 5C1331AD 172D0F35 B1792C3C E63F9157 2ABD2DD6 DF6DAC2D 70195C3F 6627CCA6 0307305D 8495A8C3 8B4416C7 5021E823 B6C97DFF E79C14CB 7C3AF8A5 86" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *pub = [NSData dataWithHexString:[@"30770201 01042013 15E00052 D8219F93 E5C92B46 2835D163 06AA42DC 57B4768E EE02B892 CA7557A0 0A06082A 8648CE3D 030107A1 44034200 04E74914 8BEEDEB5 2CF604C5 9FFEA2F6 5C47F9B5 EE4D5D3F E6AFABFD E1A53100 A0DA74D1 7D2F9D89 3CC1F792 A457E813 D776E53C 6F961DBE AF1995E9 A90B12EB DA" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *ecdhResult = [WCECDH DoEcdh2:415 ServerPubKey:pri LocalPriKey:pub];
    LogVerbose(@"%@", ecdhResult);

    NSData *shaplainText = [NSData dataWithHexString:[@"31343135 04115F2F 4C94BDDC 02F72F46 3B6F6B0E FA5BA4B8 062B1738 FC20BA39 E2FEF8E6 CA5F4C69 1DC5F2A4 5BC0C88D A97A7571 6118B693 998E8843 00AFD091 BE7995C1 C7" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *sha256 = [WC_SHA256 sha256:shaplainText];
    LogVerbose(@"%@", sha256);

    //OK
    NSData *aesPData = [NSData dataWithHexStringstringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *aadData = [NSData dataWithHexString:[@"E1C059A0 604BA42D D829428A B34A7C56 B91F156E C231DE3C AD61C635 4E786FAD" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *keyData = [NSData dataWithHexString:[@"13B065F6 74848CC0 25F15795 9BDED726 6EA97C39 5E6CD5A5" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *ivData = [NSData dataWithHexString:[@"57BC4BC5 C31C7C67 5C3F794B" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *cData = [WC_AesGcm128 aes192gcmEncrypt:aesPData aad:aadData key:keyData ivec:ivData];
    LogVerbose(@"%@", cData);

    //hkdf

    NSData *saltData = [NSData dataWithHexString:[@"73656375 72697479 2068646B 66206578 70616E64" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *ikmData = [NSData dataWithHexString:[@"D2CA9AD2 F718E30E FA580984 C2B3BFAD 538A2986 B4244998 97C44C00 E99426AA" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    NSData *infoData = [NSData dataWithHexString:[@"891BE9A0 5F813B88 3430ACE2 4D63817A 6EDC38B2 386EFB2C B1CC9097 FD3F6F84" stringByReplacingOccurrencesOfString:@" " withString:@""]];
    unsigned char okm[56];
    [WC_HKDF HKDF_salt:(unsigned char *)[saltData bytes] salt_len:[saltData length] ikm:(const unsigned char *)[ikmData bytes] ikm_len:[ikmData length] info:(const unsigned char *)[infoData bytes] info_len:[infoData length] okm:okm okm_len:56];
    NSData *result = [NSData dataWithBytes:okm length:56];
    LogVerbose(@"%@", result);

    NSData *int32Data = [Varint128 dataWithUInt32:1253];
    LogVerbose(@"%@", int32Data);
}

@end

