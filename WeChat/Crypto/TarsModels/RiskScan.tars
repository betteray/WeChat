// 生成各种语言： https://github.com/TarsCloud/TarsCpp
// 各种语言runtime： https://github.com/TarsCloud/TarsTup


// 706版本里JceStruct的子类。 搜// "req" , userinfo , phonetype等
module Report {

struct PhoneType {
    0 optional int BSR; // 固定写死 2
    1 optional int BSS; // 固定写死 201
};

struct WxVersion {
    1 require int majorVersion; // 7
    2 require int mirorVersion; // 0
    3 require int patchVersion; // 6
};

//userinfo
struct UserInfo
{
    0 require string imei; // imei
    1 optional string gUx; // 没有赋值
    2 optional string kOV; // 没有赋值
    3 optional string ip; // 没有赋值
    4 optional string BSW;  // 写死 "7AD75E27CD5842F6"
    5 optional string channelId; //BSX 写死 "105901"
    6 optional string model;  // BSY Build.MODEL
    7 optional int networkType; //BSZ
    8 optional int BTa; // 写死 82
    9 optional WxVersion wxVersion;
    10 optional string guid; // 没有赋值
    11 optional string imsi; // imsi
    12 optional int BTc; // 0
    13 optional int BTd; // 0
    14 optional int BTe; // Build.VERSION.SDK
    15 optional int versionCode; // wechat versionCode
    16 optional string eUN; // 没有赋值
    17 optional short BTg; // 默认值 0
    18 optional double longitude; // 默认值 0
    19 optional double latitude; // 默认值 0
    20 optional string BTh; // 没有赋值
    21 optional int BTi; // 默认值 0
    22 optional string BTj; // 没有赋值
    23 optional string fAS; // 没有赋值
    24 optional string rZC; // android_id
    25 optional string BTk; // /sys/block/mmcblk0/device/MMC
    26 optional string BTl; // getSDCid
};


struct c {
    0 optional int BTQ; // 写死 6
    1 require int BTi; // 写死 1
    2 require int requestType; // 写死 0
    3 optional int BTR; // 写死 0
    4 optional int BTS; // 写死 0
    5 optional byte BTT; // 写死 null
    6 optional int BTU; // 写死 0
    7 optional int fUD; // 写死 0
    8 optional long BTV; // 写死 0
    9 optional byte BTW; // 写死 null
    10 optional int BTX; // 写死 0
    11 optional int BTY; // 写死 1
};

// signature
//PackageInfo packageInfo = this.getPackageManager().getPackageInfo("com.tencent.mm", PackageManager.GET_SIGNATURES);
//X509Certificate x509Certificate = (X509Certificate) a(CertificateFactory.getInstance("X.509"), packageInfo.signatures[0]);
//byte[] encoded = x509Certificate.getEncoded();
//MD5String(encoded)

// extractPkgCertMd5s

// ArrayList arrayList = new ArrayList();
// try {
//     PackageInfo packageInfo = context.getPackageManager().getPackageInfo(str, 64);
//     if (packageInfo != null && packageInfo.signatures != null && packageInfo.signatures.length > 0) {
//         Signature[] signatureArr = packageInfo.signatures;
//         int i = 0;
//         while (true) {
//             int i2 = i;
//             if (i2 >= signatureArr.length || i2 >= 5) {
//                 break;
//             }
//             X509Certificate x509Certificate = (X509Certificate) a(CertificateFactory.getInstance("X.509"), signatureArr[i2]);
//             if (x509Certificate != null) {
//                 arrayList.add(e.cv(x509Certificate.getEncoded()));
//             }
//             i = i2 + 1;
//         }
//     }
// } catch (CertificateEncodingException e2) {
//     h.dG("extractPkgCertMd5s(), CertificateEncodingException: ".concat(String.valueOf(e2)));
// } catch (Throwable th) {
//     h.dG("extractPkgCertMd5s(), Exception: ".concat(String.valueOf(th)));
// }

// 加入
// List<byte[]> cb = com.tencent.e.f.a.cb(context, aVar.crY);
// if (cb.size() > 1) {
//     bVar.BTL = new ArrayList<>();
//     for (byte[] add : cb) {
//         bVar.BTL.add(add);
//     }
// }


// appSourceFlag 生成
// bVar.BTB = 0;
// if (aVar.exx == 1) {
//     bVar.BTB |= 1;
// }
// bVar.BTB |= 2;
// if (!sourceDir.startsWith("/data") && !sourceDir.startsWith("/system")) {
//     bVar.BTB |= 4;
// }

struct Pkg {
    0 require int index; // 包列表索引
    1 optional byte BTu; // 写死 null
    2 optional string packageName; // 包名
    3 optional vector<byte> signature; //见上面代码
    4 optional long fileSize; //apk文件大小
    5 optional string applicationLabel; //应用名称
    6 optional int versionCode; //版本号
    7 optional string versionName; //版本号名称
    8 optional int appSourceFlag; // BTB
    9 optional string BTC; //  写死""
    10 require int BTD; // 写死0
    11 optional int BTE; // 写死 0
    12 optional int BTF; // 写死 0
    13 optional vector<int> BTG; // 写死null
    14 optional int BTH; // 写死 0
    15 require bool BTI; // 写死 false
    16 optional int BTJ; // 写死 0
    17 require int BTK; // 写死 0
    18 optional vector<byte> extractPkgCertMd5s;  //见上面代码
};


struct SysInfo {
    0 optional string fingerprint; //Build.FINGERPRINT
    1 optional string procVersion; // /proc/version 内容
    2 optional string brand; //Build.BRAND
    3 optional string model; //Build.MODEL
    4 optional int sdkInt; //Build.VERSION.SDK_INT
    5 optional string cpuAbi; //Build.CPU_ABI
    6 optional string platform; // ro.board.platform
    7 optional int BUf; // root or something? // SetuidBitChecker s-bit found false=2//或者多抓数据看
};

struct Req {
    0 optional c BTn;
    1 optional vector<Pkg> pkgList;
    2 optional SysInfo sysInfo;
};

struct RequestPacket {
    1 require short iVersion; // 写死3
    2 require byte cPacketType; // 初始值 0
    3 require int iMessageType; // 初始值 0
    4 require int iRequestId; // 3 写死
    5 require string sServantName; // 写死 viruscheck
    6 require string sFuncName; // 写死 RiskCheck
    7 require vector<byte> sBuffer; // 包列表等序列化的数据
    8 require int iTimeout; // 初始值 0
    9 require map<string, string> context; // 初始值 {}
    10 require map<string, string> status; // 初始值 {}
};

}; 
