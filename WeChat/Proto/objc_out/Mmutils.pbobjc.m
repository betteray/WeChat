// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmutils.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmutils.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmutilsRoot

@implementation MmutilsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmutilsRoot_FileDescriptor

static GPBFileDescriptor *MmutilsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - BaseResponseErrMsg

@implementation BaseResponseErrMsg

@dynamic hasShowType, showType;
@dynamic hasContent, content;
@dynamic hasURL, URL;
@dynamic hasDispSec, dispSec;
@dynamic hasTitle, title;
@dynamic hasAction, action;
@dynamic hasDelayConnSec, delayConnSec;
@dynamic hasCountdown, countdown;
@dynamic hasOk, ok;
@dynamic hasCancel, cancel;

typedef struct BaseResponseErrMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t showType;
  int32_t dispSec;
  int32_t action;
  int32_t delayConnSec;
  uint32_t countdown;
  NSString *content;
  NSString *URL;
  NSString *title;
  NSString *ok;
  NSString *cancel;
} BaseResponseErrMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "showType",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_ShowType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dispSec",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_DispSec,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, dispSec),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_Action,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "delayConnSec",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_DelayConnSec,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, delayConnSec),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "countdown",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_Countdown,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, countdown),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ok",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_Ok,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, ok),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cancel",
        .dataTypeSpecific.className = NULL,
        .number = BaseResponseErrMsg_FieldNumber_Cancel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(BaseResponseErrMsg__storage_, cancel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BaseResponseErrMsg class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BaseResponseErrMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001H\000\002G\000\003\001!!\000\004G\000\005E\000\006F\000\007L\000\010I\000\tB\000\nF\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStreamUrlRequest

@implementation GetStreamUrlRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasStreamId, streamId;

typedef struct GetStreamUrlRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *streamId;
} GetStreamUrlRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetStreamUrlRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStreamUrlRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "streamId",
        .dataTypeSpecific.className = NULL,
        .number = GetStreamUrlRequest_FieldNumber_StreamId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStreamUrlRequest__storage_, streamId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStreamUrlRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStreamUrlRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStreamUrlResponse

@implementation GetStreamUrlResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasStreamURL, streamURL;

typedef struct GetStreamUrlResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *streamURL;
} GetStreamUrlResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetStreamUrlResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStreamUrlResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "streamURL",
        .dataTypeSpecific.className = NULL,
        .number = GetStreamUrlResponse_FieldNumber_StreamURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStreamUrlResponse__storage_, streamURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStreamUrlResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStreamUrlResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002G!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PossibleFriend

@implementation PossibleFriend

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasPyinitial, pyinitial;
@dynamic hasQuanPin, quanPin;
@dynamic hasSex, sex;
@dynamic hasImgFlag, imgFlag;
@dynamic hasContactType, contactType;
@dynamic hasDomainList, domainList;
@dynamic hasSource, source;
@dynamic hasFriendScene, friendScene;
@dynamic hasMobile, mobile;

typedef struct PossibleFriend__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t imgFlag;
  uint32_t contactType;
  uint32_t friendScene;
  NSString *userName;
  NSString *nickName;
  NSString *pyinitial;
  NSString *quanPin;
  NSString *domainList;
  NSString *source;
  NSString *mobile;
} PossibleFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pyinitial",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_Pyinitial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, pyinitial),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quanPin",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_QuanPin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, quanPin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgFlag",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_ImgFlag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, imgFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactType",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_ContactType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, contactType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "domainList",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_DomainList,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, domainList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_Source,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendScene",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_FriendScene,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, friendScene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = PossibleFriend_FieldNumber_Mobile,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PossibleFriend__storage_, mobile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PossibleFriend class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PossibleFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001H\000\002H\000\003c\006\000\004G\000\005C\000\006G\000\007K\000\010J\000\tF\000\nK\000\013F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetPushSoundReq

@implementation SetPushSoundReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasType, type;
@dynamic hasSound, sound;

typedef struct SetPushSoundReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  BaseRequest *baseRequest;
  NSString *sound;
} SetPushSoundReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SetPushSoundReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetPushSoundReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SetPushSoundReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetPushSoundReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sound",
        .dataTypeSpecific.className = NULL,
        .number = SetPushSoundReq_FieldNumber_Sound,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SetPushSoundReq__storage_, sound),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetPushSoundReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetPushSoundReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002D\000\003E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetPushSoundResp

@implementation SetPushSoundResp

@dynamic hasBaseResponse, baseResponse;

typedef struct SetPushSoundResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SetPushSoundResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SetPushSoundResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetPushSoundResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetPushSoundResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetPushSoundResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendVerifyEmailRequest

@implementation SendVerifyEmailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;

typedef struct SendVerifyEmailRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  SKBuiltinString_t *userName;
} SendVerifyEmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendVerifyEmailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendVerifyEmailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SendVerifyEmailRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendVerifyEmailRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendVerifyEmailRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendVerifyEmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendVerifyEmailResponse

@implementation SendVerifyEmailResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct SendVerifyEmailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendVerifyEmailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendVerifyEmailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendVerifyEmailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendVerifyEmailResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendVerifyEmailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInviteFriendRequest

@implementation GetInviteFriendRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFriendType, friendType;

typedef struct GetInviteFriendRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t friendType;
  BaseRequest *baseRequest;
} GetInviteFriendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetInviteFriendRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInviteFriendRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendType",
        .dataTypeSpecific.className = NULL,
        .number = GetInviteFriendRequest_FieldNumber_FriendType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInviteFriendRequest__storage_, friendType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInviteFriendRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInviteFriendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteFriend

@implementation InviteFriend

@dynamic hasUin, uin;
@dynamic hasNickName, nickName;
@dynamic hasEmail, email;
@dynamic hasRemark, remark;
@dynamic hasUserName, userName;
@dynamic hasFriendType, friendType;

typedef struct InviteFriend__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uin;
  uint32_t friendType;
  SKBuiltinString_t *nickName;
  NSString *email;
  NSString *remark;
  NSString *userName;
} InviteFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uin",
        .dataTypeSpecific.className = NULL,
        .number = InviteFriend_FieldNumber_Uin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteFriend__storage_, uin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = InviteFriend_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InviteFriend__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = InviteFriend_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InviteFriend__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = InviteFriend_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InviteFriend__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = InviteFriend_FieldNumber_UserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InviteFriend__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendType",
        .dataTypeSpecific.className = NULL,
        .number = InviteFriend_FieldNumber_FriendType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InviteFriend__storage_, friendType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteFriend class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001C\000\002H\000\003E\000\004F\000\005H\000\006J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInviteFriendResponse

@implementation GetInviteFriendResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFriendCount, friendCount;
@dynamic friendListArray, friendListArray_Count;

typedef struct GetInviteFriendResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t friendCount;
  BaseResponse *baseResponse;
  NSMutableArray *friendListArray;
} GetInviteFriendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetInviteFriendResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInviteFriendResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendCount",
        .dataTypeSpecific.className = NULL,
        .number = GetInviteFriendResponse_FieldNumber_FriendCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInviteFriendResponse__storage_, friendCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InviteFriend),
        .number = GetInviteFriendResponse_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetInviteFriendResponse__storage_, friendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInviteFriendResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInviteFriendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002K\000\003\000FriendList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendInviteEmailRequest

@implementation SendInviteEmailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUinCount, uinCount;
@dynamic uinListArray, uinListArray_Count;

typedef struct SendInviteEmailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uinCount;
  BaseRequest *baseRequest;
  GPBUInt32Array *uinListArray;
} SendInviteEmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendInviteEmailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendInviteEmailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uinCount",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteEmailRequest_FieldNumber_UinCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendInviteEmailRequest__storage_, uinCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "uinListArray",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteEmailRequest_FieldNumber_UinListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SendInviteEmailRequest__storage_, uinListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendInviteEmailRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendInviteEmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003\000UinList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendInviteEmailResponse

@implementation SendInviteEmailResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct SendInviteEmailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendInviteEmailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendInviteEmailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendInviteEmailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendInviteEmailResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendInviteEmailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DomainEmailItem

@implementation DomainEmailItem

@dynamic hasStatus, status;
@dynamic hasEmail, email;

typedef struct DomainEmailItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  SKBuiltinString_t *email;
} DomainEmailItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = DomainEmailItem_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DomainEmailItem__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = DomainEmailItem_FieldNumber_Email,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DomainEmailItem__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DomainEmailItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DomainEmailItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendDomainEmailRequest

@implementation SendDomainEmailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasEmail, email;

typedef struct SendDomainEmailRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  SKBuiltinString_t *userName;
  SKBuiltinString_t *email;
} SendDomainEmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendDomainEmailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendDomainEmailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SendDomainEmailRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendDomainEmailRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SendDomainEmailRequest_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendDomainEmailRequest__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendDomainEmailRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendDomainEmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendDomainEmailResponse

@implementation SendDomainEmailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDomainEmailRet, domainEmailRet;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct SendDomainEmailResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t domainEmailRet;
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} SendDomainEmailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendDomainEmailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendDomainEmailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "domainEmailRet",
        .dataTypeSpecific.className = NULL,
        .number = SendDomainEmailResponse_FieldNumber_DomainEmailRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendDomainEmailResponse__storage_, domainEmailRet),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SendDomainEmailResponse_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendDomainEmailResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DomainEmailItem),
        .number = SendDomainEmailResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SendDomainEmailResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendDomainEmailResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendDomainEmailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002N\000\003E\000\004\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SwitchPushMailRequest

@implementation SwitchPushMailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSwitchValue, switchValue;
@dynamic hasSecPwdMd5, secPwdMd5;

typedef struct SwitchPushMailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t switchValue;
  BaseRequest *baseRequest;
  NSString *secPwdMd5;
} SwitchPushMailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SwitchPushMailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SwitchPushMailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "switchValue",
        .dataTypeSpecific.className = NULL,
        .number = SwitchPushMailRequest_FieldNumber_SwitchValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SwitchPushMailRequest__storage_, switchValue),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "secPwdMd5",
        .dataTypeSpecific.className = NULL,
        .number = SwitchPushMailRequest_FieldNumber_SecPwdMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SwitchPushMailRequest__storage_, secPwdMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SwitchPushMailRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SwitchPushMailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002K\000\003I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SwitchPushMailResponse

@implementation SwitchPushMailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSwitchValue, switchValue;

typedef struct SwitchPushMailResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t switchValue;
  BaseResponse *baseResponse;
} SwitchPushMailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SwitchPushMailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SwitchPushMailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "switchValue",
        .dataTypeSpecific.className = NULL,
        .number = SwitchPushMailResponse_FieldNumber_SwitchValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SwitchPushMailResponse__storage_, switchValue),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SwitchPushMailResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SwitchPushMailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendCardRequest

@implementation SendCardRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasContent, content;
@dynamic hasSendCardBitFlag, sendCardBitFlag;
@dynamic hasStyle, style;
@dynamic hasContentEx, contentEx;

typedef struct SendCardRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sendCardBitFlag;
  uint32_t style;
  BaseRequest *baseRequest;
  NSString *userName;
  NSString *content;
  NSString *contentEx;
} SendCardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendCardRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendCardRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = SendCardRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendCardRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = SendCardRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendCardRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendCardBitFlag",
        .dataTypeSpecific.className = NULL,
        .number = SendCardRequest_FieldNumber_SendCardBitFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendCardRequest__storage_, sendCardBitFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "style",
        .dataTypeSpecific.className = NULL,
        .number = SendCardRequest_FieldNumber_Style,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendCardRequest__storage_, style),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contentEx",
        .dataTypeSpecific.className = NULL,
        .number = SendCardRequest_FieldNumber_ContentEx,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendCardRequest__storage_, contentEx),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendCardRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendCardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002H\000\003G\000\004O\000\005E\000\006I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendCardResponse

@implementation SendCardResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct SendCardResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendCardResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendCardResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendCardResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendCardResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendCardResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BindCookie

@implementation BindCookie

@dynamic hasMobile, mobile;
@dynamic hasVerifycode, verifycode;
@dynamic hasExpire, expire;

typedef struct BindCookie__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expire;
  NSString *mobile;
  NSString *verifycode;
} BindCookie__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = BindCookie_FieldNumber_Mobile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BindCookie__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verifycode",
        .dataTypeSpecific.className = NULL,
        .number = BindCookie_FieldNumber_Verifycode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BindCookie__storage_, verifycode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expire",
        .dataTypeSpecific.className = NULL,
        .number = BindCookie_FieldNumber_Expire,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BindCookie__storage_, expire),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BindCookie class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BindCookie__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Mobile

@implementation Mobile

@dynamic hasV, v;

typedef struct Mobile__storage_ {
  uint32_t _has_storage_[1];
  NSString *v;
} Mobile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "v",
        .dataTypeSpecific.className = NULL,
        .number = Mobile_FieldNumber_V,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Mobile__storage_, v),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Mobile class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Mobile__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MEmail

@implementation MEmail

@dynamic hasV, v;

typedef struct MEmail__storage_ {
  uint32_t _has_storage_[1];
  NSString *v;
} MEmail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "v",
        .dataTypeSpecific.className = NULL,
        .number = MEmail_FieldNumber_V,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MEmail__storage_, v),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MEmail class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MEmail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadMContactRequest

@implementation UploadMContactRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasOpcode, opcode;
@dynamic hasMobile, mobile;
@dynamic hasMobileListSize, mobileListSize;
@dynamic mobileListArray, mobileListArray_Count;
@dynamic hasEmailListSize, emailListSize;
@dynamic emailListArray, emailListArray_Count;

typedef struct UploadMContactRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t opcode;
  int32_t mobileListSize;
  int32_t emailListSize;
  BaseRequest *baseRequest;
  NSString *userName;
  NSString *mobile;
  NSMutableArray *mobileListArray;
  NSMutableArray *emailListArray;
} UploadMContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UploadMContactRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UploadMContactRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = UploadMContactRequest_FieldNumber_Opcode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, opcode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = UploadMContactRequest_FieldNumber_Mobile,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, mobile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobileListSize",
        .dataTypeSpecific.className = NULL,
        .number = UploadMContactRequest_FieldNumber_MobileListSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, mobileListSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mobileListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Mobile),
        .number = UploadMContactRequest_FieldNumber_MobileListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, mobileListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emailListSize",
        .dataTypeSpecific.className = NULL,
        .number = UploadMContactRequest_FieldNumber_EmailListSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, emailListSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "emailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MEmail),
        .number = UploadMContactRequest_FieldNumber_EmailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UploadMContactRequest__storage_, emailListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadMContactRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadMContactRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002H\000\003F\000\004F\000\005N\000\006\000MobileList\000\007M\000\010\000EmailL"
        "ist\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadMContactResponse

@implementation UploadMContactResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct UploadMContactResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} UploadMContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UploadMContactResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadMContactResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadMContactResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadMContactResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModifyHeadImgRequest

@implementation ModifyHeadImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasImgBuf, imgBuf;

typedef struct ModifyHeadImgRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *userName;
  SKBuiltinBuffer_t *imgBuf;
} ModifyHeadImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ModifyHeadImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModifyHeadImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ModifyHeadImgRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModifyHeadImgRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ModifyHeadImgRequest_FieldNumber_ImgBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ModifyHeadImgRequest__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModifyHeadImgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModifyHeadImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModifyHeadImgResponse

@implementation ModifyHeadImgResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ModifyHeadImgResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ModifyHeadImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ModifyHeadImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModifyHeadImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModifyHeadImgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModifyHeadImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewGetInviteFriendRequest

@implementation NewGetInviteFriendRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFriendType, friendType;

typedef struct NewGetInviteFriendRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t friendType;
  BaseRequest *baseRequest;
} NewGetInviteFriendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = NewGetInviteFriendRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewGetInviteFriendRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendType",
        .dataTypeSpecific.className = NULL,
        .number = NewGetInviteFriendRequest_FieldNumber_FriendType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewGetInviteFriendRequest__storage_, friendType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewGetInviteFriendRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewGetInviteFriendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewInviteFriend

@implementation NewInviteFriend

@dynamic hasUin, uin;
@dynamic hasNickName, nickName;
@dynamic hasEmail, email;
@dynamic hasRemark, remark;
@dynamic hasUserName, userName;
@dynamic hasFriendType, friendType;
@dynamic hasGroupId, groupId;
@dynamic hasImgIdx, imgIdx;

typedef struct NewInviteFriend__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uin;
  uint32_t friendType;
  uint32_t groupId;
  NSString *nickName;
  NSString *email;
  NSString *remark;
  NSString *userName;
  NSString *imgIdx;
} NewInviteFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uin",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_Uin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, uin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_Remark,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_UserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendType",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_FriendType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, friendType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_GroupId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgIdx",
        .dataTypeSpecific.className = NULL,
        .number = NewInviteFriend_FieldNumber_ImgIdx,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(NewInviteFriend__storage_, imgIdx),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewInviteFriend class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewInviteFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001C\000\002H\000\003E\000\004F\000\005H\000\006J\000\007G\000\010F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendGroup

@implementation FriendGroup

@dynamic hasGroupId, groupId;
@dynamic hasGroupName, groupName;

typedef struct FriendGroup__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupId;
  NSString *groupName;
} FriendGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = FriendGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupName",
        .dataTypeSpecific.className = NULL,
        .number = FriendGroup_FieldNumber_GroupName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FriendGroup__storage_, groupName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendGroup class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewGetInviteFriendResponse

@implementation NewGetInviteFriendResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFriendCount, friendCount;
@dynamic friendListArray, friendListArray_Count;
@dynamic hasGroupCount, groupCount;
@dynamic groupListArray, groupListArray_Count;

typedef struct NewGetInviteFriendResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t friendCount;
  uint32_t groupCount;
  BaseResponse *baseResponse;
  NSMutableArray *friendListArray;
  NSMutableArray *groupListArray;
} NewGetInviteFriendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = NewGetInviteFriendResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewGetInviteFriendResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendCount",
        .dataTypeSpecific.className = NULL,
        .number = NewGetInviteFriendResponse_FieldNumber_FriendCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewGetInviteFriendResponse__storage_, friendCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NewInviteFriend),
        .number = NewGetInviteFriendResponse_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NewGetInviteFriendResponse__storage_, friendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupCount",
        .dataTypeSpecific.className = NULL,
        .number = NewGetInviteFriendResponse_FieldNumber_GroupCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NewGetInviteFriendResponse__storage_, groupCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FriendGroup),
        .number = NewGetInviteFriendResponse_FieldNumber_GroupListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NewGetInviteFriendResponse__storage_, groupListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewGetInviteFriendResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewGetInviteFriendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002K\000\003\000FriendList\000\004J\000\005\000GroupList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyUser

@implementation VerifyUser

@dynamic hasValue, value;
@dynamic hasVerifyUserTicket, verifyUserTicket;
@dynamic hasAntispamTicket, antispamTicket;
@dynamic hasFriendFlag, friendFlag;
@dynamic hasChatRoomUserName, chatRoomUserName;
@dynamic hasSourceUserName, sourceUserName;
@dynamic hasSourceNickName, sourceNickName;
@dynamic hasScanQrcodeFromScene, scanQrcodeFromScene;
@dynamic hasReportInfo, reportInfo;
@dynamic hasShareCardForwardLevel, shareCardForwardLevel;
@dynamic hasShareCardForwardInfo, shareCardForwardInfo;
@dynamic hasOuterURL, outerURL;
@dynamic hasSubScene, subScene;

typedef struct VerifyUser__storage_ {
  uint32_t _has_storage_[1];
  uint32_t friendFlag;
  uint32_t scanQrcodeFromScene;
  uint32_t shareCardForwardLevel;
  uint32_t subScene;
  NSString *value;
  NSString *verifyUserTicket;
  NSString *antispamTicket;
  NSString *chatRoomUserName;
  NSString *sourceUserName;
  NSString *sourceNickName;
  NSString *reportInfo;
  SKBuiltinBuffer_t *shareCardForwardInfo;
  NSString *outerURL;
} VerifyUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verifyUserTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_VerifyUserTicket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, verifyUserTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_AntispamTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendFlag",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_FriendFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, friendFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "chatRoomUserName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_ChatRoomUserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, chatRoomUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceUserName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_SourceUserName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, sourceUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceNickName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_SourceNickName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, sourceNickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scanQrcodeFromScene",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_ScanQrcodeFromScene,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, scanQrcodeFromScene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportInfo",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_ReportInfo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, reportInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shareCardForwardLevel",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_ShareCardForwardLevel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, shareCardForwardLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shareCardForwardInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VerifyUser_FieldNumber_ShareCardForwardInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, shareCardForwardInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outerURL",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_OuterURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, outerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subScene",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUser_FieldNumber_SubScene,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(VerifyUser__storage_, subScene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyUser class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001E\000\002P\000\003N\000\004J\000\005P\000\006N\000\007N\000\010S\000\tJ\000\n\025\000\013T\000\014F!!\000\r"
        "H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyUserInfo

@implementation VerifyUserInfo

@dynamic hasKey, key;
@dynamic hasValue, value;

typedef struct VerifyUserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} VerifyUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserInfo_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyUserInfo__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserInfo_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyUserInfo__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyUserInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyUserRequest

@implementation VerifyUserRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpcode, opcode;
@dynamic hasVerifyUserListSize, verifyUserListSize;
@dynamic verifyUserListArray, verifyUserListArray_Count;
@dynamic hasVerifyContent, verifyContent;
@dynamic hasSceneListCount, sceneListCount;
@dynamic sceneListArray, sceneListArray_Count;
@dynamic hasVerifyInfoListCount, verifyInfoListCount;
@dynamic verifyInfoListArray, verifyInfoListArray_Count;
@dynamic hasClientCheckData, clientCheckData;
@dynamic hasExtSpamInfo, extSpamInfo;
@dynamic hasNeedConfirm, needConfirm;

typedef struct VerifyUserRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opcode;
  uint32_t verifyUserListSize;
  uint32_t sceneListCount;
  uint32_t verifyInfoListCount;
  uint32_t needConfirm;
  BaseRequest *baseRequest;
  NSMutableArray *verifyUserListArray;
  NSString *verifyContent;
  GPBUInt32Array *sceneListArray;
  NSMutableArray *verifyInfoListArray;
  SKBuiltinBuffer_t *clientCheckData;
  SKBuiltinBuffer_t *extSpamInfo;
} VerifyUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VerifyUserRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_Opcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, opcode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyUserListSize",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_VerifyUserListSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, verifyUserListSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyUserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VerifyUser),
        .number = VerifyUserRequest_FieldNumber_VerifyUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, verifyUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "verifyContent",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_VerifyContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, verifyContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sceneListCount",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_SceneListCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, sceneListCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sceneListArray",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_SceneListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, sceneListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfoListCount",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_VerifyInfoListCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, verifyInfoListCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VerifyUserInfo),
        .number = VerifyUserRequest_FieldNumber_VerifyInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, verifyInfoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientCheckData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VerifyUserRequest_FieldNumber_ClientCheckData,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, clientCheckData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extSpamInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VerifyUserRequest_FieldNumber_ExtSpamInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, extSpamInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "needConfirm",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserRequest_FieldNumber_NeedConfirm,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VerifyUserRequest__storage_, needConfirm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyUserRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyUserRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001K\000\002F\000\003R\000\004\000VerifyUserList\000\005M\000\006N\000\007\000Scene"
        "List\000\010S\000\t\000VerifyInfoList\000\nO\000\013K\000\014K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyUserResponse

@implementation VerifyUserResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasUserName, userName;

typedef struct VerifyUserResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *userName;
} VerifyUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VerifyUserResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyUserResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyUserResponse_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyUserResponse__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyUserResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyUserResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QContact

@implementation QContact

@dynamic hasUserName, userName;
@dynamic hasDisplayName, displayName;
@dynamic hasExtInfoSeq, extInfoSeq;
@dynamic hasImgUpdateSeq, imgUpdateSeq;

typedef struct QContact__storage_ {
  uint32_t _has_storage_[1];
  uint32_t extInfoSeq;
  uint32_t imgUpdateSeq;
  NSString *userName;
  NSString *displayName;
} QContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = QContact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QContact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = QContact_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QContact__storage_, displayName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfoSeq",
        .dataTypeSpecific.className = NULL,
        .number = QContact_FieldNumber_ExtInfoSeq,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QContact__storage_, extInfoSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgUpdateSeq",
        .dataTypeSpecific.className = NULL,
        .number = QContact_FieldNumber_ImgUpdateSeq,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QContact__storage_, imgUpdateSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QContact class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QContact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002K\000\003J\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TContact

@implementation TContact

@dynamic hasUserName, userName;
@dynamic hasDisplayName, displayName;
@dynamic hasExtInfoSeq, extInfoSeq;
@dynamic hasImgUpdateSeq, imgUpdateSeq;

typedef struct TContact__storage_ {
  uint32_t _has_storage_[1];
  uint32_t extInfoSeq;
  uint32_t imgUpdateSeq;
  NSString *userName;
  NSString *displayName;
} TContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = TContact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TContact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = TContact_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TContact__storage_, displayName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfoSeq",
        .dataTypeSpecific.className = NULL,
        .number = TContact_FieldNumber_ExtInfoSeq,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TContact__storage_, extInfoSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgUpdateSeq",
        .dataTypeSpecific.className = NULL,
        .number = TContact_FieldNumber_ImgUpdateSeq,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TContact__storage_, imgUpdateSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TContact class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TContact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002K\000\003J\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContactProfile

@implementation ContactProfile

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasPyinitial, pyinitial;
@dynamic hasQuanPin, quanPin;
@dynamic hasSex, sex;
@dynamic hasImgBuf, imgBuf;
@dynamic hasBitMask, bitMask;
@dynamic hasBitVal, bitVal;
@dynamic hasRemark, remark;
@dynamic hasImgRet, imgRet;
@dynamic hasRemarkPyinitial, remarkPyinitial;
@dynamic hasRemarkQuanPin, remarkQuanPin;
@dynamic hasContactType, contactType;
@dynamic hasRoomInfoCount, roomInfoCount;
@dynamic roomInfoListArray, roomInfoListArray_Count;
@dynamic hasDomainList, domainList;
@dynamic hasChatRoomNotify, chatRoomNotify;
@dynamic hasAddContactScene, addContactScene;
@dynamic hasExtInfo, extInfo;
@dynamic hasExtUpdateSeq, extUpdateSeq;
@dynamic hasImgUpdateSeq, imgUpdateSeq;
@dynamic hasAlias, alias;

typedef struct ContactProfile__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t bitMask;
  uint32_t bitVal;
  uint32_t imgRet;
  uint32_t contactType;
  uint32_t roomInfoCount;
  uint32_t chatRoomNotify;
  uint32_t addContactScene;
  uint32_t extUpdateSeq;
  uint32_t imgUpdateSeq;
  NSString *userName;
  NSString *nickName;
  NSString *pyinitial;
  NSString *quanPin;
  SKBuiltinBuffer_t *imgBuf;
  NSString *remark;
  NSString *remarkPyinitial;
  NSString *remarkQuanPin;
  NSMutableArray *roomInfoListArray;
  NSString *domainList;
  NSString *extInfo;
  NSString *alias;
} ContactProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pyinitial",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_Pyinitial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, pyinitial),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quanPin",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_QuanPin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, quanPin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ContactProfile_FieldNumber_ImgBuf,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bitMask",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_BitMask,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, bitMask),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bitVal",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_BitVal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, bitVal),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_Remark,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgRet",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_ImgRet,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, imgRet),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remarkPyinitial",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_RemarkPyinitial,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, remarkPyinitial),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remarkQuanPin",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_RemarkQuanPin,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, remarkQuanPin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactType",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_ContactType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, contactType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roomInfoCount",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_RoomInfoCount,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, roomInfoCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roomInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RoomInfo),
        .number = ContactProfile_FieldNumber_RoomInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, roomInfoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "domainList",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_DomainList,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, domainList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatRoomNotify",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_ChatRoomNotify,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, chatRoomNotify),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "addContactScene",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_AddContactScene,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, addContactScene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_ExtInfo,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extUpdateSeq",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_ExtUpdateSeq,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, extUpdateSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgUpdateSeq",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_ImgUpdateSeq,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, imgUpdateSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = ContactProfile_FieldNumber_Alias,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(ContactProfile__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContactProfile class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContactProfile__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\026\001H\000\002H\000\003c\006\000\004G\000\005C\000\006F\000\007G\000\010F\000\tF\000\nF\000\013Gb\006\000\014M\000"
        "\rK\000\016M\000\017\000RoomInfoList\000\020J\000\021N\000\022O\000\023G\000\024L\000\025L\000\026"
        "E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetContactProfileRequest

@implementation BatchGetContactProfileRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMode, mode;
@dynamic hasCount, count;
@dynamic userNameListArray, userNameListArray_Count;

typedef struct BatchGetContactProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mode;
  uint32_t count;
  BaseRequest *baseRequest;
  NSMutableArray *userNameListArray;
} BatchGetContactProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchGetContactProfileRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetContactProfileRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mode",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetContactProfileRequest_FieldNumber_Mode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetContactProfileRequest__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetContactProfileRequest_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BatchGetContactProfileRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userNameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = BatchGetContactProfileRequest_FieldNumber_UserNameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetContactProfileRequest__storage_, userNameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetContactProfileRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetContactProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002D\000\003E\000\004\000UserNameList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetContactProfileResponse

@implementation BatchGetContactProfileResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic contactProfileBufListArray, contactProfileBufListArray_Count;

typedef struct BatchGetContactProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *contactProfileBufListArray;
} BatchGetContactProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchGetContactProfileResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetContactProfileResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetContactProfileResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetContactProfileResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactProfileBufListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = BatchGetContactProfileResponse_FieldNumber_ContactProfileBufListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetContactProfileResponse__storage_, contactProfileBufListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetContactProfileResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetContactProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000ContactProfileBufList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPSMImgRequest

@implementation GetPSMImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasURL, URL;
@dynamic hasOffset, offset;

typedef struct GetPSMImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
  BaseRequest *baseRequest;
  NSString *URL;
} GetPSMImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetPSMImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPSMImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GetPSMImgRequest_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPSMImgRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetPSMImgRequest_FieldNumber_Offset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPSMImgRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPSMImgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPSMImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002\003\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPSMImgResponse

@implementation GetPSMImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasData_p, data_p;
@dynamic hasTotalLength, totalLength;

typedef struct GetPSMImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLength;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *data_p;
} GetPSMImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetPSMImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPSMImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetPSMImgResponse_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPSMImgResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalLength",
        .dataTypeSpecific.className = NULL,
        .number = GetPSMImgResponse_FieldNumber_TotalLength,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPSMImgResponse__storage_, totalLength),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPSMImgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPSMImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002\000Data\000\003K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PSMStat

@implementation PSMStat

@dynamic hasMtype, mtype;
@dynamic hasAtype, atype;

typedef struct PSMStat__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mtype;
  NSString *atype;
} PSMStat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mtype",
        .dataTypeSpecific.className = NULL,
        .number = PSMStat_FieldNumber_Mtype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PSMStat__storage_, mtype),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "atype",
        .dataTypeSpecific.className = NULL,
        .number = PSMStat_FieldNumber_Atype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PSMStat__storage_, atype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PSMStat class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PSMStat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001b\003\000\002b\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMFriendRequest

@implementation GetMFriendRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpType, opType;
@dynamic hasMd5, md5;
@dynamic hasUpdateMobileListSize, updateMobileListSize;
@dynamic updateMobileListArray, updateMobileListArray_Count;
@dynamic hasUpdateEmailListSize, updateEmailListSize;
@dynamic updateEmailListArray, updateEmailListArray_Count;
@dynamic hasScene, scene;

typedef struct GetMFriendRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  int32_t updateMobileListSize;
  int32_t updateEmailListSize;
  uint32_t scene;
  BaseRequest *baseRequest;
  NSString *md5;
  NSMutableArray *updateMobileListArray;
  NSMutableArray *updateEmailListArray;
} GetMFriendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetMFriendRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendRequest_FieldNumber_OpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendRequest_FieldNumber_Md5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateMobileListSize",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendRequest_FieldNumber_UpdateMobileListSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, updateMobileListSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "updateMobileListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Mobile),
        .number = GetMFriendRequest_FieldNumber_UpdateMobileListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, updateMobileListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateEmailListSize",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendRequest_FieldNumber_UpdateEmailListSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, updateEmailListSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "updateEmailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MEmail),
        .number = GetMFriendRequest_FieldNumber_UpdateEmailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, updateEmailListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendRequest_FieldNumber_Scene,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetMFriendRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMFriendRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMFriendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002F\000\003b\001\000\004T\000\005\000UpdateMobileList\000\006S\000\007\000Up"
        "dateEmailList\000\010E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FBFriend

@implementation FBFriend

@dynamic hasId_p, id_p;
@dynamic hasName, name;
@dynamic hasImgKey, imgKey;

typedef struct FBFriend__storage_ {
  uint32_t _has_storage_[1];
  uint32_t imgKey;
  NSString *name;
  uint64_t id_p;
} FBFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FBFriend_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FBFriend__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FBFriend_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FBFriend__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgKey",
        .dataTypeSpecific.className = NULL,
        .number = FBFriend_FieldNumber_ImgKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FBFriend__storage_, imgKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FBFriend class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FBFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\000ID\000\002D\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MFriend

@implementation MFriend

@dynamic hasUsername, username;
@dynamic hasNickname, nickname;
@dynamic hasMobileMd5, mobileMd5;
@dynamic hasSex, sex;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasPersonalCard, personalCard;
@dynamic hasAlias, alias;
@dynamic hasFbinfo, fbinfo;
@dynamic hasAlbumFlag, albumFlag;
@dynamic hasAlbumStyle, albumStyle;
@dynamic hasAlbumBgimgId, albumBgimgId;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasCountry, country;
@dynamic hasMyBrandList, myBrandList;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct MFriend__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t personalCard;
  uint32_t albumFlag;
  uint32_t albumStyle;
  NSString *username;
  NSString *nickname;
  NSString *mobileMd5;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *alias;
  FBFriend *fbinfo;
  NSString *albumBgimgId;
  SnsUserInfo *snsUserInfo;
  NSString *country;
  NSString *myBrandList;
  CustomizedInfo *customizedInfo;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *antispamTicket;
} MFriend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MFriend__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MFriend__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobileMd5",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_MobileMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MFriend__storage_, mobileMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MFriend__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Province,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MFriend__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_City,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MFriend__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Signature,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MFriend__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "personalCard",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_PersonalCard,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MFriend__storage_, personalCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Alias,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MFriend__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fbinfo",
        .dataTypeSpecific.className = GPBStringifySymbol(FBFriend),
        .number = MFriend_FieldNumber_Fbinfo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MFriend__storage_, fbinfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "albumFlag",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_AlbumFlag,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MFriend__storage_, albumFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumStyle",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_AlbumStyle,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MFriend__storage_, albumStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumBgimgId",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_AlbumBgimgId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(MFriend__storage_, albumBgimgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = MFriend_FieldNumber_SnsUserInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(MFriend__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_Country,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(MFriend__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "myBrandList",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_MyBrandList,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(MFriend__storage_, myBrandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = MFriend_FieldNumber_CustomizedInfo,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(MFriend__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_BigHeadImgURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(MFriend__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_SmallHeadImgURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(MFriend__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = MFriend_FieldNumber_AntispamTicket,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(MFriend__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MFriend class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MFriend__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\001H\000\002H\000\003GB\000\004C\000\005H\000\006D\000\007I\000\010L\000\tE\000\nc\003\000\013I\000\014J\000\r"
        "Fb\003A\000\016K\000\017G\000\020K\000\021N\000\024K!!\000\025M!!\000\026N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMFriendResponse

@implementation GetMFriendResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic friendListArray, friendListArray_Count;
@dynamic hasMd5, md5;

typedef struct GetMFriendResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *friendListArray;
  NSString *md5;
} GetMFriendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetMFriendResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMFriendResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMFriendResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MFriend),
        .number = GetMFriendResponse_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMFriendResponse__storage_, friendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = GetMFriendResponse_FieldNumber_Md5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMFriendResponse__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMFriendResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMFriendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002E\000\003\000FriendList\000\004b\001\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetQQGroupRequest

@implementation GetQQGroupRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpType, opType;
@dynamic hasGroupId, groupId;

typedef struct GetQQGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  uint32_t groupId;
  BaseRequest *baseRequest;
} GetQQGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetQQGroupRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetQQGroupRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = GetQQGroupRequest_FieldNumber_OpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetQQGroupRequest__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = GetQQGroupRequest_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetQQGroupRequest__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetQQGroupRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetQQGroupRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003FA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QQGroup

@implementation QQGroup

@dynamic hasGroupId, groupId;
@dynamic hasGroupName, groupName;
@dynamic hasMd5, md5;
@dynamic hasMemberNum, memberNum;
@dynamic hasWeixinNum, weixinNum;

typedef struct QQGroup__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupId;
  uint32_t memberNum;
  uint32_t weixinNum;
  NSString *groupName;
  NSString *md5;
} QQGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = QQGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QQGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupName",
        .dataTypeSpecific.className = NULL,
        .number = QQGroup_FieldNumber_GroupName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QQGroup__storage_, groupName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = QQGroup_FieldNumber_Md5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QQGroup__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberNum",
        .dataTypeSpecific.className = NULL,
        .number = QQGroup_FieldNumber_MemberNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QQGroup__storage_, memberNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "weixinNum",
        .dataTypeSpecific.className = NULL,
        .number = QQGroup_FieldNumber_WeixinNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QQGroup__storage_, weixinNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QQGroup class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QQGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001FA\000\002I\000\003b\001\000\004I\000\005I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QQGroupList

@implementation QQGroupList

@dynamic hasCount, count;
@dynamic qqgroupsArray, qqgroupsArray_Count;

typedef struct QQGroupList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *qqgroupsArray;
} QQGroupList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = QQGroupList_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QQGroupList__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "qqgroupsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(QQGroup),
        .number = QQGroupList_FieldNumber_QqgroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QQGroupList__storage_, qqgroupsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QQGroupList class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QQGroupList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002\000QQGroups\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QQFriendInGroup

@implementation QQFriendInGroup

@dynamic hasQquin, qquin;
@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasQqnickName, qqnickName;
@dynamic hasWeixinStatus, weixinStatus;
@dynamic hasQqremarkName, qqremarkName;
@dynamic hasSex, sex;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasPersonalCard, personalCard;
@dynamic hasAlias, alias;
@dynamic hasAlbumFlag, albumFlag;
@dynamic hasAlbumStyle, albumStyle;
@dynamic hasAlbumBgimgId, albumBgimgId;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasCountry, country;
@dynamic hasMyBrandList, myBrandList;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct QQFriendInGroup__storage_ {
  uint32_t _has_storage_[1];
  uint32_t qquin;
  uint32_t weixinStatus;
  int32_t sex;
  uint32_t personalCard;
  uint32_t albumFlag;
  uint32_t albumStyle;
  NSString *userName;
  NSString *nickName;
  NSString *qqnickName;
  NSString *qqremarkName;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *alias;
  NSString *albumBgimgId;
  SnsUserInfo *snsUserInfo;
  NSString *country;
  NSString *myBrandList;
  CustomizedInfo *customizedInfo;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *antispamTicket;
} QQFriendInGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "qquin",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_Qquin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, qquin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qqnickName",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_QqnickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, qqnickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weixinStatus",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_WeixinStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, weixinStatus),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "qqremarkName",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_QqremarkName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, qqremarkName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_Sex,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_Province,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_City,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_Signature,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "personalCard",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_PersonalCard,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, personalCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_Alias,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "albumFlag",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_AlbumFlag,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, albumFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumStyle",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_AlbumStyle,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, albumStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumBgimgId",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_AlbumBgimgId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, albumBgimgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = QQFriendInGroup_FieldNumber_SnsUserInfo,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_Country,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "myBrandList",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_MyBrandList,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, myBrandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = QQFriendInGroup_FieldNumber_CustomizedInfo,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_BigHeadImgURL,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_SmallHeadImgURL,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendInGroup_FieldNumber_AntispamTicket,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(QQFriendInGroup__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QQFriendInGroup class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QQFriendInGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\026\001c\002\000\002H\000\003H\000\004c\007\000\005L\000\006c\t\000\007C\000\010H\000\tD\000\nI\000\013L\000\014E\000"
        "\rI\000\016J\000\017Fb\003A\000\020K\000\021G\000\022K\000\023N\000\024K!!\000\025M!!\000\026N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QQFriendList

@implementation QQFriendList

@dynamic hasGroupId, groupId;
@dynamic hasCount, count;
@dynamic qqfriendsArray, qqfriendsArray_Count;

typedef struct QQFriendList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupId;
  uint32_t count;
  NSMutableArray *qqfriendsArray;
} QQFriendList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendList_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QQFriendList__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = QQFriendList_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QQFriendList__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "qqfriendsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(QQFriendInGroup),
        .number = QQFriendList_FieldNumber_QqfriendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QQFriendList__storage_, qqfriendsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QQFriendList class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QQFriendList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001FA\000\002E\000\003\000QQFriends\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetQQGroupResponse

@implementation GetQQGroupResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasOpType, opType;
@dynamic hasQqgroup, qqgroup;
@dynamic hasQqfriend, qqfriend;

typedef struct GetQQGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  BaseResponse *baseResponse;
  QQGroupList *qqgroup;
  QQFriendList *qqfriend;
} GetQQGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetQQGroupResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetQQGroupResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = GetQQGroupResponse_FieldNumber_OpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetQQGroupResponse__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "qqgroup",
        .dataTypeSpecific.className = GPBStringifySymbol(QQGroupList),
        .number = GetQQGroupResponse_FieldNumber_Qqgroup,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetQQGroupResponse__storage_, qqgroup),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qqfriend",
        .dataTypeSpecific.className = GPBStringifySymbol(QQFriendList),
        .number = GetQQGroupResponse_FieldNumber_Qqfriend,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetQQGroupResponse__storage_, qqfriend),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetQQGroupResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetQQGroupResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002F\000\003c\004\000\004c\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFSUrlRequest

@implementation GetFSUrlRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct GetFSUrlRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GetFSUrlRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetFSUrlRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetFSUrlRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFSUrlRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFSUrlRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFSUrlResponse

@implementation GetFSUrlResponse

@dynamic hasFsurl, fsurl;

typedef struct GetFSUrlResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *fsurl;
} GetFSUrlResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fsurl",
        .dataTypeSpecific.className = NULL,
        .number = GetFSUrlResponse_FieldNumber_Fsurl,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetFSUrlResponse__storage_, fsurl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFSUrlResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFSUrlResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001e\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShareCardDestInfo

@implementation ShareCardDestInfo

@dynamic hasUserName, userName;

typedef struct ShareCardDestInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} ShareCardDestInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardDestInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShareCardDestInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShareCardDestInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShareCardDestInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShareCardRequest

@implementation ShareCardRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasSrcFriendUserName, srcFriendUserName;
@dynamic hasDestFriendCount, destFriendCount;
@dynamic destFriendListArray, destFriendListArray_Count;

typedef struct ShareCardRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t destFriendCount;
  BaseRequest *baseRequest;
  NSString *srcFriendUserName;
  NSMutableArray *destFriendListArray;
} ShareCardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShareCardRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShareCardRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShareCardRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcFriendUserName",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardRequest_FieldNumber_SrcFriendUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShareCardRequest__storage_, srcFriendUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destFriendCount",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardRequest_FieldNumber_DestFriendCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShareCardRequest__storage_, destFriendCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "destFriendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShareCardDestInfo),
        .number = ShareCardRequest_FieldNumber_DestFriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShareCardRequest__storage_, destFriendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShareCardRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShareCardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002F\000\003Q\000\004O\000\005\000DestFriendList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShareCardRetInfo

@implementation ShareCardRetInfo

@dynamic hasUserName, userName;
@dynamic hasRetCode, retCode;

typedef struct ShareCardRetInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  NSString *userName;
} ShareCardRetInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardRetInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShareCardRetInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardRetInfo_FieldNumber_RetCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShareCardRetInfo__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShareCardRetInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShareCardRetInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001H\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShareCardResponse

@implementation ShareCardResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRetInfoCount, retInfoCount;
@dynamic retInfoListArray, retInfoListArray_Count;

typedef struct ShareCardResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t retInfoCount;
  BaseResponse *baseResponse;
  NSMutableArray *retInfoListArray;
} ShareCardResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShareCardResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShareCardResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retInfoCount",
        .dataTypeSpecific.className = NULL,
        .number = ShareCardResponse_FieldNumber_RetInfoCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShareCardResponse__storage_, retInfoCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "retInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShareCardRetInfo),
        .number = ShareCardResponse_FieldNumber_RetInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShareCardResponse__storage_, retInfoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShareCardResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShareCardResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002L\000\003\000RetInfoList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCardRequest

@implementation GroupCardRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasGroupNickName, groupNickName;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasGroupUserName, groupUserName;

typedef struct GroupCardRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t memberCount;
  BaseRequest *baseRequest;
  NSString *groupNickName;
  NSMutableArray *memberListArray;
  NSString *groupUserName;
} GroupCardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GroupCardRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupCardRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = GroupCardRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupCardRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupNickName",
        .dataTypeSpecific.className = NULL,
        .number = GroupCardRequest_FieldNumber_GroupNickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupCardRequest__storage_, groupNickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = GroupCardRequest_FieldNumber_MemberCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupCardRequest__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RoomInfo),
        .number = GroupCardRequest_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupCardRequest__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupUserName",
        .dataTypeSpecific.className = NULL,
        .number = GroupCardRequest_FieldNumber_GroupUserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupCardRequest__storage_, groupUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCardRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupCardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002F\000\003M\000\004K\000\005\000MemberList\000\006M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCardResponse

@implementation GroupCardResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasGroupUserName, groupUserName;

typedef struct GroupCardResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *groupUserName;
} GroupCardResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GroupCardResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupCardResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupUserName",
        .dataTypeSpecific.className = NULL,
        .number = GroupCardResponse_FieldNumber_GroupUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupCardResponse__storage_, groupUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCardResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupCardResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendFeedbackRequest

@implementation SendFeedbackRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMachineType, machineType;
@dynamic hasContent, content;
@dynamic hasReportType, reportType;

typedef struct SendFeedbackRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t reportType;
  BaseRequest *baseRequest;
  NSString *machineType;
  NSString *content;
} SendFeedbackRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendFeedbackRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendFeedbackRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "machineType",
        .dataTypeSpecific.className = NULL,
        .number = SendFeedbackRequest_FieldNumber_MachineType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendFeedbackRequest__storage_, machineType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = SendFeedbackRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendFeedbackRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reportType",
        .dataTypeSpecific.className = NULL,
        .number = SendFeedbackRequest_FieldNumber_ReportType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendFeedbackRequest__storage_, reportType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendFeedbackRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendFeedbackRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002K\000\003G\000\004J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendFeedbackResponse

@implementation SendFeedbackResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct SendFeedbackResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendFeedbackResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendFeedbackResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendFeedbackResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendFeedbackResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendFeedbackResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadHDHeadImgRequest

@implementation UploadHDHeadImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasHeadImgType, headImgType;
@dynamic hasData_p, data_p;
@dynamic hasImgHash, imgHash;
@dynamic hasUserName, userName;

typedef struct UploadHDHeadImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t headImgType;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *data_p;
  NSString *imgHash;
  NSString *userName;
} UploadHDHeadImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UploadHDHeadImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgRequest_FieldNumber_TotalLen,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgRequest_FieldNumber_StartPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "headImgType",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgRequest_FieldNumber_HeadImgType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, headImgType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UploadHDHeadImgRequest_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgHash",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgRequest_FieldNumber_ImgHash,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, imgHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgRequest_FieldNumber_UserName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UploadHDHeadImgRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadHDHeadImgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadHDHeadImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002H\000\003H\000\004K\000\005\000Data\000\006G\000\007H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadHDHeadImgResponse

@implementation UploadHDHeadImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasFinalImgMd5Sum, finalImgMd5Sum;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;

typedef struct UploadHDHeadImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  BaseResponse *baseResponse;
  NSString *finalImgMd5Sum;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
} UploadHDHeadImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UploadHDHeadImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadHDHeadImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgResponse_FieldNumber_TotalLen,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadHDHeadImgResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgResponse_FieldNumber_StartPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadHDHeadImgResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "finalImgMd5Sum",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgResponse_FieldNumber_FinalImgMd5Sum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadHDHeadImgResponse__storage_, finalImgMd5Sum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgResponse_FieldNumber_BigHeadImgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadHDHeadImgResponse__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = UploadHDHeadImgResponse_FieldNumber_SmallHeadImgURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadHDHeadImgResponse__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadHDHeadImgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadHDHeadImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002H\000\003H\000\004K#\000\005K!!\000\006M!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHDHeadImgRequest

@implementation GetHDHeadImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasImgWidth, imgWidth;
@dynamic hasImgHeight, imgHeight;
@dynamic hasImgFormat, imgFormat;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasHeadImgType, headImgType;

typedef struct GetHDHeadImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t imgWidth;
  uint32_t imgHeight;
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t headImgType;
  BaseRequest *baseRequest;
  NSString *userName;
  NSString *imgFormat;
} GetHDHeadImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetHDHeadImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgWidth",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_ImgWidth,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, imgWidth),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgHeight",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_ImgHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, imgHeight),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgFormat",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_ImgFormat,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, imgFormat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_TotalLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_StartPos,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "headImgType",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgRequest_FieldNumber_HeadImgType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetHDHeadImgRequest__storage_, headImgType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHDHeadImgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHDHeadImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002H\000\003H\000\004I\000\005I\000\006H\000\007H\000\010K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHDHeadImgResponse

@implementation GetHDHeadImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasUserName, userName;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasData_p, data_p;

typedef struct GetHDHeadImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  BaseResponse *baseResponse;
  NSString *userName;
  SKBuiltinBuffer_t *data_p;
} GetHDHeadImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetHDHeadImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHDHeadImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgResponse_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetHDHeadImgResponse__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgResponse_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetHDHeadImgResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = GetHDHeadImgResponse_FieldNumber_StartPos,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetHDHeadImgResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetHDHeadImgResponse_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetHDHeadImgResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHDHeadImgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHDHeadImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002H\000\003H\000\004H\000\005\000Data\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Package

@implementation Package

@dynamic hasId_p, id_p;
@dynamic hasVersion, version;
@dynamic hasName, name;
@dynamic hasSize, size;
@dynamic hasThumb, thumb;
@dynamic hasPackName, packName;
@dynamic hasExt, ext;
@dynamic hasMd5, md5;

typedef struct Package__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t version;
  uint32_t size;
  NSString *name;
  SKBuiltinBuffer_t *thumb;
  NSString *packName;
  SKBuiltinBuffer_t *ext;
  NSString *md5;
} Package__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Package_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Package__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Package_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Package__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Package_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Package__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = Package_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Package__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumb",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = Package_FieldNumber_Thumb,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Package__storage_, thumb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "packName",
        .dataTypeSpecific.className = NULL,
        .number = Package_FieldNumber_PackName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Package__storage_, packName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ext",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = Package_FieldNumber_Ext,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Package__storage_, ext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = Package_FieldNumber_Md5,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Package__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Package class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Package__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\000Id\000\002G\000\003D\000\004D\000\005E\000\006H\000\007C\000\010C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPackageListRequest

@implementation GetPackageListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasType, type;
@dynamic hasFlag, flag;

typedef struct GetPackageListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t type;
  uint32_t flag;
  BaseRequest *baseRequest;
  NSMutableArray *listArray;
} GetPackageListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetPackageListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPackageListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPackageListRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Package),
        .number = GetPackageListRequest_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPackageListRequest__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListRequest_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPackageListRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListRequest_FieldNumber_Flag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPackageListRequest__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPackageListRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPackageListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002E\000\003\000List\000\004D\000\005D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPackageListResponse

@implementation GetPackageListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasSvrCount, svrCount;
@dynamic hasType, type;

typedef struct GetPackageListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t continueFlag;
  uint32_t svrCount;
  uint32_t type;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} GetPackageListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetPackageListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPackageListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPackageListResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Package),
        .number = GetPackageListResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPackageListResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListResponse_FieldNumber_ContinueFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPackageListResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "svrCount",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListResponse_FieldNumber_SvrCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPackageListResponse__storage_, svrCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetPackageListResponse_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetPackageListResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPackageListResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPackageListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002E\000\003\000List\000\004L\000\005H\000\006D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DownLoadPackageRequest

@implementation DownLoadPackageRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPackage, package;
@dynamic hasOffset, offset;
@dynamic hasLen, len;
@dynamic hasType, type;

typedef struct DownLoadPackageRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
  uint32_t len;
  uint32_t type;
  BaseRequest *baseRequest;
  Package *package;
} DownLoadPackageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = DownLoadPackageRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DownLoadPackageRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "package",
        .dataTypeSpecific.className = GPBStringifySymbol(Package),
        .number = DownLoadPackageRequest_FieldNumber_Package,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DownLoadPackageRequest__storage_, package),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = DownLoadPackageRequest_FieldNumber_Offset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DownLoadPackageRequest__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.className = NULL,
        .number = DownLoadPackageRequest_FieldNumber_Len,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DownLoadPackageRequest__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = DownLoadPackageRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DownLoadPackageRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DownLoadPackageRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DownLoadPackageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002G\000\003F\000\004C\000\005D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DownLoadPackageResponse

@implementation DownLoadPackageResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPackageBuf, packageBuf;
@dynamic hasType, type;
@dynamic hasTotalSize, totalSize;

typedef struct DownLoadPackageResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t totalSize;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *packageBuf;
} DownLoadPackageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = DownLoadPackageResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DownLoadPackageResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "packageBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = DownLoadPackageResponse_FieldNumber_PackageBuf,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DownLoadPackageResponse__storage_, packageBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = DownLoadPackageResponse_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DownLoadPackageResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalSize",
        .dataTypeSpecific.className = NULL,
        .number = DownLoadPackageResponse_FieldNumber_TotalSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DownLoadPackageResponse__storage_, totalSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DownLoadPackageResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DownLoadPackageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002J\000\003D\000\004I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModBottleContact

@implementation ModBottleContact

@dynamic hasUserName, userName;
@dynamic hasType, type;
@dynamic hasSex, sex;
@dynamic hasCity, city;
@dynamic hasProvince, province;
@dynamic hasSignature, signature;
@dynamic hasImgFlag, imgFlag;
@dynamic hasHdimgFlag, hdimgFlag;
@dynamic hasCountry, country;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;

typedef struct ModBottleContact__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t sex;
  uint32_t imgFlag;
  uint32_t hdimgFlag;
  NSString *userName;
  NSString *city;
  NSString *province;
  NSString *signature;
  NSString *country;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
} ModBottleContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_City,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_Province,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_Signature,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgFlag",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_ImgFlag,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, imgFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hdimgFlag",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_HdimgFlag,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, hdimgFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_Country,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_BigHeadImgURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = ModBottleContact_FieldNumber_SmallHeadImgURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ModBottleContact__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModBottleContact class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModBottleContact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001H\000\002D\000\003C\000\004D\000\005H\000\006I\000\007G\000\010c\006\000\tG\000\nK!!\000\013M!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelBottleContact

@implementation DelBottleContact

@dynamic hasUserName, userName;

typedef struct DelBottleContact__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} DelBottleContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = DelBottleContact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelBottleContact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelBottleContact class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelBottleContact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EchoRequest

@implementation EchoRequest

@dynamic hasEchoStr, echoStr;
@dynamic hasPwd, pwd;

typedef struct EchoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *echoStr;
  NSString *pwd;
} EchoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "echoStr",
        .dataTypeSpecific.className = NULL,
        .number = EchoRequest_FieldNumber_EchoStr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EchoRequest__storage_, echoStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = EchoRequest_FieldNumber_Pwd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EchoRequest__storage_, pwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EchoRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EchoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EchoResponse

@implementation EchoResponse

@dynamic hasEchoStr, echoStr;

typedef struct EchoResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *echoStr;
} EchoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "echoStr",
        .dataTypeSpecific.className = NULL,
        .number = EchoResponse_FieldNumber_EchoStr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EchoResponse__storage_, echoStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EchoResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EchoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExposeRequest

@implementation ExposeRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasScene, scene;
@dynamic hasType, type;
@dynamic hasAlbumPhotoId, albumPhotoId;
@dynamic hasAlbumType, albumType;
@dynamic hasSnsId, snsId;
@dynamic hasExposeContent, exposeContent;

typedef struct ExposeRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  uint32_t type;
  uint32_t albumType;
  BaseRequest *baseRequest;
  NSString *userName;
  NSString *albumPhotoId;
  NSString *exposeContent;
  uint64_t snsId;
} ExposeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ExposeRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumPhotoId",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_AlbumPhotoId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, albumPhotoId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "albumType",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_AlbumType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, albumType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "snsId",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_SnsId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, snsId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "exposeContent",
        .dataTypeSpecific.className = NULL,
        .number = ExposeRequest_FieldNumber_ExposeContent,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ExposeRequest__storage_, exposeContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExposeRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExposeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002H\000\003E\000\004D\000\005L\000\006I\000\007E\000\010M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExposeResponse

@implementation ExposeResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ExposeResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ExposeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ExposeResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExposeResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExposeResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExposeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExposeItem

@implementation ExposeItem

@dynamic hasCount, count;
@dynamic uinListArray, uinListArray_Count;
@dynamic timeListArray, timeListArray_Count;
@dynamic countListArray, countListArray_Count;

typedef struct ExposeItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  GPBUInt32Array *uinListArray;
  GPBUInt32Array *timeListArray;
  GPBUInt32Array *countListArray;
} ExposeItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ExposeItem_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExposeItem__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "uinListArray",
        .dataTypeSpecific.className = NULL,
        .number = ExposeItem_FieldNumber_UinListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExposeItem__storage_, uinListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeListArray",
        .dataTypeSpecific.className = NULL,
        .number = ExposeItem_FieldNumber_TimeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExposeItem__storage_, timeListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "countListArray",
        .dataTypeSpecific.className = NULL,
        .number = ExposeItem_FieldNumber_CountListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExposeItem__storage_, countListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExposeItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExposeItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001E\000\002\000UinList\000\003\000TimeList\000\004\000CountList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VUserResponseItem

@implementation VUserResponseItem

@dynamic hasId_p, id_p;
@dynamic hasDesc, desc;
@dynamic hasIcon, icon;
@dynamic hasHdicon, hdicon;

typedef struct VUserResponseItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  NSString *desc;
  SKBuiltinBuffer_t *icon;
  SKBuiltinBuffer_t *hdicon;
} VUserResponseItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = VUserResponseItem_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VUserResponseItem__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = VUserResponseItem_FieldNumber_Desc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VUserResponseItem__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VUserResponseItem_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VUserResponseItem__storage_, icon),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hdicon",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VUserResponseItem_FieldNumber_Hdicon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VUserResponseItem__storage_, hdicon),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VUserResponseItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VUserResponseItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\000ID\000\002D\000\003D\000\004c\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVUserInfoRequest

@implementation GetVUserInfoRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasVersion, version;

typedef struct GetVUserInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  BaseRequest *baseRequest;
} GetVUserInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetVUserInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVUserInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = GetVUserInfoRequest_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVUserInfoRequest__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVUserInfoRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVUserInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVUserInfoResponse

@implementation GetVUserInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasVersion, version;
@dynamic hasVuserCount, vuserCount;
@dynamic vuserListArray, vuserListArray_Count;

typedef struct GetVUserInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  uint32_t vuserCount;
  BaseResponse *baseResponse;
  NSMutableArray *vuserListArray;
} GetVUserInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetVUserInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVUserInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = GetVUserInfoResponse_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVUserInfoResponse__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "vuserCount",
        .dataTypeSpecific.className = NULL,
        .number = GetVUserInfoResponse_FieldNumber_VuserCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVUserInfoResponse__storage_, vuserCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "vuserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VUserResponseItem),
        .number = GetVUserInfoResponse_FieldNumber_VuserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetVUserInfoResponse__storage_, vuserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVUserInfoResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVUserInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002G\000\003b\010\000\004\000VUserList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GmailOperRequest

@implementation GmailOperRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpType, opType;
@dynamic hasGmailAcct, gmailAcct;
@dynamic hasGmailPwd, gmailPwd;

typedef struct GmailOperRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  BaseRequest *baseRequest;
  NSString *gmailAcct;
  NSString *gmailPwd;
} GmailOperRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GmailOperRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GmailOperRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = GmailOperRequest_FieldNumber_OpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GmailOperRequest__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gmailAcct",
        .dataTypeSpecific.className = NULL,
        .number = GmailOperRequest_FieldNumber_GmailAcct,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GmailOperRequest__storage_, gmailAcct),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gmailPwd",
        .dataTypeSpecific.className = NULL,
        .number = GmailOperRequest_FieldNumber_GmailPwd,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GmailOperRequest__storage_, gmailPwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GmailOperRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GmailOperRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003I\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GmailOperResponse

@implementation GmailOperResponse

@dynamic hasRetCode, retCode;

typedef struct GmailOperResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t retCode;
} GmailOperResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = GmailOperResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GmailOperResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GmailOperResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GmailOperResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MailComposeSendRequest

@implementation MailComposeSendRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMailAccount, mailAccount;
@dynamic hasOldMailId, oldMailId;
@dynamic hasSubject, subject;
@dynamic hasRcptTo, rcptTo;
@dynamic hasCc, cc;
@dynamic hasBcc, bcc;
@dynamic hasFrom, from;
@dynamic hasMailContent, mailContent;
@dynamic hasReplyType, replyType;

typedef struct MailComposeSendRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t replyType;
  BaseRequest *baseRequest;
  NSString *mailAccount;
  NSString *oldMailId;
  NSString *subject;
  NSString *rcptTo;
  NSString *cc;
  NSString *bcc;
  NSString *from;
  NSString *mailContent;
} MailComposeSendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = MailComposeSendRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mailAccount",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_MailAccount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, mailAccount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oldMailId",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_OldMailId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, oldMailId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_Subject,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, subject),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rcptTo",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_RcptTo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, rcptTo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cc",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_Cc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, cc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bcc",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_Bcc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, bcc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_From,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mailContent",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_MailContent,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, mailContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "replyType",
        .dataTypeSpecific.className = NULL,
        .number = MailComposeSendRequest_FieldNumber_ReplyType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MailComposeSendRequest__storage_, replyType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MailComposeSendRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MailComposeSendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001K\000\002K\000\003HA\000\004G\000\005F\000\006B\000\007C\000\010D\000\tK\000\nI\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MailComposeSendResponse

@implementation MailComposeSendResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct MailComposeSendResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} MailComposeSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = MailComposeSendResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MailComposeSendResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MailComposeSendResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MailComposeSendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralSetRequest

@implementation GeneralSetRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSetType, setType;
@dynamic hasSetValue, setValue;

typedef struct GeneralSetRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t setType;
  BaseRequest *baseRequest;
  NSString *setValue;
} GeneralSetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GeneralSetRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralSetRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setType",
        .dataTypeSpecific.className = NULL,
        .number = GeneralSetRequest_FieldNumber_SetType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GeneralSetRequest__storage_, setType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "setValue",
        .dataTypeSpecific.className = NULL,
        .number = GeneralSetRequest_FieldNumber_SetValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GeneralSetRequest__storage_, setValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralSetRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralSetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002G\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralSetResponse

@implementation GeneralSetResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct GeneralSetResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} GeneralSetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GeneralSetResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralSetResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralSetResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralSetResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRegStyleRequest

@implementation GetRegStyleRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasClientSeqId, clientSeqId;
@dynamic hasRandomEncryKey, randomEncryKey;

typedef struct GetRegStyleRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *clientSeqId;
  SKBuiltinBuffer_t *randomEncryKey;
} GetRegStyleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetRegStyleRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetRegStyleRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientSeqId",
        .dataTypeSpecific.className = NULL,
        .number = GetRegStyleRequest_FieldNumber_ClientSeqId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetRegStyleRequest__storage_, clientSeqId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetRegStyleRequest_FieldNumber_RandomEncryKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetRegStyleRequest__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRegStyleRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRegStyleRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002JA\000\003N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRegStyleResponse

@implementation GetRegStyleResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRegStyle, regStyle;

typedef struct GetRegStyleResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  ShowStyleKey *regStyle;
} GetRegStyleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetRegStyleResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetRegStyleResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "regStyle",
        .dataTypeSpecific.className = GPBStringifySymbol(ShowStyleKey),
        .number = GetRegStyleResponse_FieldNumber_RegStyle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetRegStyleResponse__storage_, regStyle),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRegStyleResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRegStyleResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMailOAuthUrlRequest

@implementation GetMailOAuthUrlRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMailAccount, mailAccount;

typedef struct GetMailOAuthUrlRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *mailAccount;
} GetMailOAuthUrlRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetMailOAuthUrlRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMailOAuthUrlRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mailAccount",
        .dataTypeSpecific.className = NULL,
        .number = GetMailOAuthUrlRequest_FieldNumber_MailAccount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMailOAuthUrlRequest__storage_, mailAccount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMailOAuthUrlRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMailOAuthUrlRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMailOAuthUrlResponse

@implementation GetMailOAuthUrlResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasOauthURL, oauthURL;

typedef struct GetMailOAuthUrlResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *oauthURL;
} GetMailOAuthUrlResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetMailOAuthUrlResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMailOAuthUrlResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "oauthURL",
        .dataTypeSpecific.className = NULL,
        .number = GetMailOAuthUrlResponse_FieldNumber_OauthURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMailOAuthUrlResponse__storage_, oauthURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMailOAuthUrlResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMailOAuthUrlResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002b\004!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BizRegRequest

@implementation BizRegRequest

@dynamic hasQquin, qquin;
@dynamic hasPwd, pwd;
@dynamic hasPwd2, pwd2;
@dynamic hasImgSid, imgSid;
@dynamic hasImgCode, imgCode;
@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;

typedef struct BizRegRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t qquin;
  NSString *pwd;
  NSString *pwd2;
  NSString *imgSid;
  NSString *imgCode;
  NSString *userName;
  NSString *nickName;
} BizRegRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "qquin",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_Qquin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, qquin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_Pwd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, pwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd2",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_Pwd2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, pwd2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgSid",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_ImgSid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, imgSid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgCode",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_ImgCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, imgCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_UserName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = BizRegRequest_FieldNumber_NickName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(BizRegRequest__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BizRegRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BizRegRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001c\002\000\002C\000\003D\000\004F\000\005G\000\006H\000\007H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BizRegResponse

@implementation BizRegResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasImgSid, imgSid;
@dynamic hasImgBuf, imgBuf;

typedef struct BizRegResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *imgSid;
  SKBuiltinBuffer_t *imgBuf;
} BizRegResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BizRegResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BizRegResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgSid",
        .dataTypeSpecific.className = NULL,
        .number = BizRegResponse_FieldNumber_ImgSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BizRegResponse__storage_, imgSid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = BizRegResponse_FieldNumber_ImgBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BizRegResponse__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BizRegResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BizRegResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002F\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BizAuthRequest

@implementation BizAuthRequest

@dynamic hasQquin, qquin;
@dynamic hasPwd, pwd;
@dynamic hasPwd2, pwd2;
@dynamic hasImgSid, imgSid;
@dynamic hasImgCode, imgCode;

typedef struct BizAuthRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t qquin;
  NSString *pwd;
  NSString *pwd2;
  NSString *imgSid;
  NSString *imgCode;
} BizAuthRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "qquin",
        .dataTypeSpecific.className = NULL,
        .number = BizAuthRequest_FieldNumber_Qquin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BizAuthRequest__storage_, qquin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = BizAuthRequest_FieldNumber_Pwd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BizAuthRequest__storage_, pwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd2",
        .dataTypeSpecific.className = NULL,
        .number = BizAuthRequest_FieldNumber_Pwd2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BizAuthRequest__storage_, pwd2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgSid",
        .dataTypeSpecific.className = NULL,
        .number = BizAuthRequest_FieldNumber_ImgSid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BizAuthRequest__storage_, imgSid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgCode",
        .dataTypeSpecific.className = NULL,
        .number = BizAuthRequest_FieldNumber_ImgCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BizAuthRequest__storage_, imgCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BizAuthRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BizAuthRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001c\002\000\002C\000\003D\000\004F\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BizAuthResponse

@implementation BizAuthResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasImgSid, imgSid;
@dynamic hasImgBuf, imgBuf;

typedef struct BizAuthResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *imgSid;
  SKBuiltinBuffer_t *imgBuf;
} BizAuthResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BizAuthResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BizAuthResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgSid",
        .dataTypeSpecific.className = NULL,
        .number = BizAuthResponse_FieldNumber_ImgSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BizAuthResponse__storage_, imgSid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = BizAuthResponse_FieldNumber_ImgBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BizAuthResponse__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BizAuthResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BizAuthResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002F\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MassSendRequest

@implementation MassSendRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasToList, toList;
@dynamic hasToListMd5, toListMd5;
@dynamic hasClientId, clientId;
@dynamic hasMsgType, msgType;
@dynamic hasMediaTime, mediaTime;
@dynamic hasDataBuffer, dataBuffer;
@dynamic hasDataStartPos, dataStartPos;
@dynamic hasDataTotalLen, dataTotalLen;
@dynamic hasThumbTotalLen, thumbTotalLen;
@dynamic hasThumbStartPos, thumbStartPos;
@dynamic hasThumbData, thumbData;
@dynamic hasCameraType, cameraType;
@dynamic hasVideoSource, videoSource;
@dynamic hasToListCount, toListCount;
@dynamic hasIsSendAgain, isSendAgain;
@dynamic hasCompressType, compressType;
@dynamic hasVoiceFormat, voiceFormat;
@dynamic hasVideoURL, videoURL;
@dynamic hasThumbURL, thumbURL;
@dynamic hasThumbWidth, thumbWidth;
@dynamic hasThumbHeight, thumbHeight;
@dynamic hasThumbAeskey, thumbAeskey;
@dynamic hasVideoAeskey, videoAeskey;
@dynamic hasMd5, md5;

typedef struct MassSendRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgType;
  uint32_t mediaTime;
  uint32_t dataStartPos;
  uint32_t dataTotalLen;
  uint32_t thumbTotalLen;
  uint32_t thumbStartPos;
  uint32_t cameraType;
  uint32_t videoSource;
  uint32_t toListCount;
  uint32_t isSendAgain;
  uint32_t compressType;
  uint32_t voiceFormat;
  uint32_t thumbWidth;
  uint32_t thumbHeight;
  BaseRequest *baseRequest;
  NSString *toList;
  NSString *toListMd5;
  NSString *clientId;
  SKBuiltinBuffer_t *dataBuffer;
  SKBuiltinBuffer_t *thumbData;
  NSString *videoURL;
  NSString *thumbURL;
  NSString *thumbAeskey;
  NSString *videoAeskey;
  NSString *md5;
} MassSendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = MassSendRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toList",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ToList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, toList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toListMd5",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ToListMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, toListMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ClientId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_MsgType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mediaTime",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_MediaTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, mediaTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = MassSendRequest_FieldNumber_DataBuffer,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, dataBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataStartPos",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_DataStartPos,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, dataStartPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataTotalLen",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_DataTotalLen,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, dataTotalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbTotalLen",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ThumbTotalLen,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbTotalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbStartPos",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ThumbStartPos,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbStartPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = MassSendRequest_FieldNumber_ThumbData,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cameraType",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_CameraType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, cameraType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "videoSource",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_VideoSource,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, videoSource),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "toListCount",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ToListCount,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, toListCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isSendAgain",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_IsSendAgain,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, isSendAgain),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "compressType",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_CompressType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, compressType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "voiceFormat",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_VoiceFormat,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, voiceFormat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "videoURL",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_VideoURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, videoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbURL",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ThumbURL,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbWidth",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ThumbWidth,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbWidth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbHeight",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ThumbHeight,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbAeskey",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_ThumbAeskey,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, thumbAeskey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoAeskey",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_VideoAeskey,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, videoAeskey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = MassSendRequest_FieldNumber_Md5,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(MassSendRequest__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MassSendRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MassSendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\031\001K\000\002F\000\003GB\000\004GA\000\005G\000\006I\000\007J\000\010L\000\tL\000\nM\000\013M\000\014I\000\r"
        "J\000\016K\000\017K\000\020K\000\021L\000\022K\000\023F!!\000\024F!!\000\025J\000\026K\000\027Fc\002\000\030F"
        "c\002\000\031b\001\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MassSendResponse

@implementation MassSendResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDataStartPos, dataStartPos;
@dynamic hasThumbStartPos, thumbStartPos;
@dynamic hasMaxSupport, maxSupport;

typedef struct MassSendResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t dataStartPos;
  uint32_t thumbStartPos;
  uint32_t maxSupport;
  BaseResponse *baseResponse;
} MassSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = MassSendResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MassSendResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataStartPos",
        .dataTypeSpecific.className = NULL,
        .number = MassSendResponse_FieldNumber_DataStartPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MassSendResponse__storage_, dataStartPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbStartPos",
        .dataTypeSpecific.className = NULL,
        .number = MassSendResponse_FieldNumber_ThumbStartPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MassSendResponse__storage_, thumbStartPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "maxSupport",
        .dataTypeSpecific.className = NULL,
        .number = MassSendResponse_FieldNumber_MaxSupport,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MassSendResponse__storage_, maxSupport),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MassSendResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MassSendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002L\000\003M\000\004J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BufferId

@implementation BufferId

@dynamic hasMasterBufId, masterBufId;
@dynamic hasSlaveBufId, slaveBufId;

typedef struct BufferId__storage_ {
  uint32_t _has_storage_[1];
  uint64_t masterBufId;
  uint64_t slaveBufId;
} BufferId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "masterBufId",
        .dataTypeSpecific.className = NULL,
        .number = BufferId_FieldNumber_MasterBufId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BufferId__storage_, masterBufId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "slaveBufId",
        .dataTypeSpecific.className = NULL,
        .number = BufferId_FieldNumber_SlaveBufId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BufferId__storage_, slaveBufId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BufferId class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BufferId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadAppAttachRequest

@implementation UploadAppAttachRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasSdkVersion, sdkVersion;
@dynamic hasClientAppDataId, clientAppDataId;
@dynamic hasUserName, userName;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasDataLen, dataLen;
@dynamic hasData_p, data_p;
@dynamic hasType, type;
@dynamic hasMd5, md5;

typedef struct UploadAppAttachRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sdkVersion;
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t dataLen;
  uint32_t type;
  BaseRequest *baseRequest;
  NSString *appId;
  NSString *clientAppDataId;
  NSString *userName;
  SKBuiltinBuffer_t *data_p;
  NSString *md5;
} UploadAppAttachRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UploadAppAttachRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_SdkVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, sdkVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientAppDataId",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_ClientAppDataId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, clientAppDataId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_UserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_TotalLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_StartPos,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_DataLen,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, dataLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UploadAppAttachRequest_FieldNumber_Data_p,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_Type,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachRequest_FieldNumber_Md5,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UploadAppAttachRequest__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadAppAttachRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadAppAttachRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001K\000\002E\000\003J\000\004O\000\005H\000\006H\000\007H\000\010G\000\t\000Data\000\nD\000\013b\001\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadAppAttachResponse

@implementation UploadAppAttachResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasAppId, appId;
@dynamic hasMediaId, mediaId;
@dynamic hasClientAppDataId, clientAppDataId;
@dynamic hasUserName, userName;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasDataLen, dataLen;
@dynamic hasCreateTime, createTime;

typedef struct UploadAppAttachResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t dataLen;
  uint32_t createTime;
  BaseResponse *baseResponse;
  NSString *appId;
  NSString *mediaId;
  NSString *clientAppDataId;
  NSString *userName;
} UploadAppAttachResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UploadAppAttachResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_MediaId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, mediaId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientAppDataId",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_ClientAppDataId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, clientAppDataId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_UserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_TotalLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_StartPos,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_DataLen,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, dataLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = UploadAppAttachResponse_FieldNumber_CreateTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UploadAppAttachResponse__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadAppAttachResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadAppAttachResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001L\000\002E\000\003G\000\004O\000\005H\000\006H\000\007H\000\010G\000\tJ\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImportFriendsRequest

@implementation ImportFriendsRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasSource, source;

typedef struct ImportFriendsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t source;
  BaseRequest *baseRequest;
} ImportFriendsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ImportFriendsRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImportFriendsRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = ImportFriendsRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImportFriendsRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = ImportFriendsRequest_FieldNumber_Source,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImportFriendsRequest__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImportFriendsRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImportFriendsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImportFriendsResponse

@implementation ImportFriendsResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasImportedCount, importedCount;

typedef struct ImportFriendsResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t importedCount;
  BaseResponse *baseResponse;
} ImportFriendsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ImportFriendsResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImportFriendsResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "importedCount",
        .dataTypeSpecific.className = NULL,
        .number = ImportFriendsResponse_FieldNumber_ImportedCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImportFriendsResponse__storage_, importedCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImportFriendsResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImportFriendsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BizBottleInfo

@implementation BizBottleInfo

@dynamic hasBottleId, bottleId;
@dynamic hasMsgType, msgType;
@dynamic hasFromUserName, fromUserName;

typedef struct BizBottleInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgType;
  NSString *bottleId;
  NSString *fromUserName;
} BizBottleInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bottleId",
        .dataTypeSpecific.className = NULL,
        .number = BizBottleInfo_FieldNumber_BottleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BizBottleInfo__storage_, bottleId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = BizBottleInfo_FieldNumber_MsgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BizBottleInfo__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = NULL,
        .number = BizBottleInfo_FieldNumber_FromUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BizBottleInfo__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BizBottleInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BizBottleInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001GA\000\002G\000\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadMediaRequest

@implementation UploadMediaRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasClientMediaId, clientMediaId;
@dynamic hasDataMd5, dataMd5;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasDataLen, dataLen;
@dynamic hasData_p, data_p;
@dynamic hasMediaType, mediaType;
@dynamic hasAudioFormat, audioFormat;
@dynamic hasAudioSamplingRate, audioSamplingRate;
@dynamic hasAudioChannelNum, audioChannelNum;
@dynamic hasAudioBitRate, audioBitRate;

typedef struct UploadMediaRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t dataLen;
  uint32_t mediaType;
  uint32_t audioFormat;
  uint32_t audioSamplingRate;
  uint32_t audioChannelNum;
  uint32_t audioBitRate;
  BaseRequest *baseRequest;
  SKBuiltinString_t *clientMediaId;
  SKBuiltinString_t *dataMd5;
  SKBuiltinBuffer_t *data_p;
} UploadMediaRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UploadMediaRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientMediaId",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UploadMediaRequest_FieldNumber_ClientMediaId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, clientMediaId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataMd5",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UploadMediaRequest_FieldNumber_DataMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, dataMd5),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_TotalLen,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_StartPos,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_DataLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, dataLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UploadMediaRequest_FieldNumber_Data_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaType",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_MediaType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, mediaType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "audioFormat",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_AudioFormat,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, audioFormat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "audioSamplingRate",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_AudioSamplingRate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, audioSamplingRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "audioChannelNum",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_AudioChannelNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, audioChannelNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "audioBitRate",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaRequest_FieldNumber_AudioBitRate,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(UploadMediaRequest__storage_, audioBitRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadMediaRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadMediaRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001K\000\002M\000\003EB\000\004H\000\005H\000\006G\000\007\000Data\000\010I\000\tK\000\nQ\000\013O\000\014"
        "L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadMediaResponse

@implementation UploadMediaResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMediaId, mediaId;
@dynamic hasStartPos, startPos;

typedef struct UploadMediaResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t startPos;
  BaseResponse *baseResponse;
  NSString *mediaId;
} UploadMediaResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UploadMediaResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadMediaResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaResponse_FieldNumber_MediaId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadMediaResponse__storage_, mediaId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadMediaResponse_FieldNumber_StartPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadMediaResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadMediaResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadMediaResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HandleImgMsgRequest

@implementation HandleImgMsgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasClientImgId, clientImgId;
@dynamic hasMediaId, mediaId;
@dynamic hasFromUserName, fromUserName;
@dynamic hasToUserName, toUserName;
@dynamic hasImgLen, imgLen;
@dynamic hasMsgType, msgType;
@dynamic hasMsgSource, msgSource;
@dynamic hasCompressType, compressType;

typedef struct HandleImgMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t imgLen;
  uint32_t msgType;
  uint32_t compressType;
  BaseRequest *baseRequest;
  SKBuiltinString_t *clientImgId;
  NSString *mediaId;
  SKBuiltinString_t *fromUserName;
  SKBuiltinString_t *toUserName;
  NSString *msgSource;
} HandleImgMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = HandleImgMsgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientImgId",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = HandleImgMsgRequest_FieldNumber_ClientImgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, clientImgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgRequest_FieldNumber_MediaId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, mediaId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = HandleImgMsgRequest_FieldNumber_FromUserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = HandleImgMsgRequest_FieldNumber_ToUserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgLen",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgRequest_FieldNumber_ImgLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, imgLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgRequest_FieldNumber_MsgType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgSource",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgRequest_FieldNumber_MsgSource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, msgSource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "compressType",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgRequest_FieldNumber_CompressType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(HandleImgMsgRequest__storage_, compressType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HandleImgMsgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HandleImgMsgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001K\000\002K\000\003G\000\004L\000\005J\000\006F\000\007G\000\010I\000\tL\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HandleImgMsgResponse

@implementation HandleImgMsgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMsgId, msgId;
@dynamic hasClientImgId, clientImgId;
@dynamic hasFromUserName, fromUserName;
@dynamic hasToUserName, toUserName;
@dynamic hasImgLen, imgLen;
@dynamic hasCreateTime, createTime;
@dynamic hasNewMsgId, newMsgId;

typedef struct HandleImgMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgId;
  uint32_t imgLen;
  uint32_t createTime;
  BaseResponse *baseResponse;
  SKBuiltinString_t *clientImgId;
  SKBuiltinString_t *fromUserName;
  SKBuiltinString_t *toUserName;
  uint64_t newMsgId;
} HandleImgMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = HandleImgMsgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgResponse_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientImgId",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = HandleImgMsgResponse_FieldNumber_ClientImgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, clientImgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = HandleImgMsgResponse_FieldNumber_FromUserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = HandleImgMsgResponse_FieldNumber_ToUserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgLen",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgResponse_FieldNumber_ImgLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, imgLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgResponse_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newMsgId",
        .dataTypeSpecific.className = NULL,
        .number = HandleImgMsgResponse_FieldNumber_NewMsgId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HandleImgMsgResponse__storage_, newMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HandleImgMsgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HandleImgMsgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002E\000\003K\000\004L\000\005J\000\006F\000\007J\000\010H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatReportItem

@implementation StatReportItem

@dynamic hasActionId, actionId;
@dynamic hasTime, time;
@dynamic hasIp, ip;
@dynamic hasPort, port;
@dynamic hasIptype, iptype;
@dynamic hasNetType, netType;
@dynamic hasIfSuc, ifSuc;
@dynamic hasFunId, funId;
@dynamic hasCost, cost;
@dynamic hasAliveTime, aliveTime;
@dynamic hasUploadSize, uploadSize;
@dynamic hasDownloadSize, downloadSize;
@dynamic hasCount, count;
@dynamic hasIsWifiFirstConnect, isWifiFirstConnect;
@dynamic hasBeginTimeMs, beginTimeMs;
@dynamic hasEndTimeMs, endTimeMs;
@dynamic hasNotifySyncCount, notifySyncCount;
@dynamic hasPushSyncCount, pushSyncCount;
@dynamic hasSyncCount, syncCount;
@dynamic hasIsDns, isDns;
@dynamic hasIsSocket, isSocket;
@dynamic hasErrCode, errCode;
@dynamic hasSignalStrength, signalStrength;
@dynamic hasIspcode, ispcode;
@dynamic hasIspname, ispname;
@dynamic hasRetryCount, retryCount;
@dynamic hasHost, host;
@dynamic hasIpcnt, ipcnt;
@dynamic hasReserved1, reserved1;
@dynamic hasReserved2, reserved2;
@dynamic hasReserved3, reserved3;
@dynamic hasClientIp, clientIp;
@dynamic hasNetworkCost, networkCost;
@dynamic hasDnsCount, dnsCount;
@dynamic hasDnsCost, dnsCost;
@dynamic hasConnCount, connCount;
@dynamic hasConnCost, connCost;
@dynamic hasNewDnsCostTime, newDnsCostTime;
@dynamic hasNewDnsErrType, newDnsErrType;
@dynamic hasNewDnsErrCode, newDnsErrCode;
@dynamic hasNewDnsSvrIp, newDnsSvrIp;
@dynamic hasFirstPkgTime, firstPkgTime;
@dynamic hasEndFlag, endFlag;
@dynamic hasTotalTime, totalTime;
@dynamic hasConncosttime, conncosttime;
@dynamic hasEndstep, endstep;
@dynamic hasDnscosttime, dnscosttime;
@dynamic hasDnserrtype, dnserrtype;
@dynamic hasNewNetType, newNetType;
@dynamic hasSubNetType, subNetType;
@dynamic hasNetExtraInfo, netExtraInfo;
@dynamic hasStatReportExtraInfo, statReportExtraInfo;
@dynamic hasTotalConnCost, totalConnCost;
@dynamic hasIpIndex, ipIndex;
@dynamic hasInnerIp, innerIp;

typedef struct StatReportItem__storage_ {
  uint32_t _has_storage_[2];
  uint32_t actionId;
  uint32_t time;
  uint32_t ip;
  uint32_t port;
  uint32_t iptype;
  uint32_t netType;
  uint32_t ifSuc;
  uint32_t funId;
  uint32_t cost;
  uint32_t aliveTime;
  uint32_t uploadSize;
  uint32_t downloadSize;
  uint32_t count;
  uint32_t isWifiFirstConnect;
  uint32_t notifySyncCount;
  uint32_t pushSyncCount;
  uint32_t syncCount;
  uint32_t isDns;
  uint32_t isSocket;
  int32_t errCode;
  uint32_t signalStrength;
  uint32_t ispcode;
  uint32_t retryCount;
  uint32_t ipcnt;
  uint32_t clientIp;
  uint32_t networkCost;
  uint32_t dnsCount;
  uint32_t dnsCost;
  uint32_t connCount;
  uint32_t connCost;
  uint32_t newDnsCostTime;
  uint32_t newDnsErrType;
  uint32_t newDnsErrCode;
  uint32_t newDnsSvrIp;
  uint32_t firstPkgTime;
  uint32_t endFlag;
  uint32_t totalTime;
  uint32_t conncosttime;
  uint32_t endstep;
  uint32_t dnscosttime;
  uint32_t dnserrtype;
  int32_t newNetType;
  int32_t subNetType;
  int32_t totalConnCost;
  int32_t ipIndex;
  int32_t innerIp;
  NSString *ispname;
  NSString *host;
  NSString *netExtraInfo;
  NSString *statReportExtraInfo;
  uint64_t beginTimeMs;
  uint64_t endTimeMs;
  uint64_t reserved1;
  uint64_t reserved2;
  uint64_t reserved3;
} StatReportItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "actionId",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_ActionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, actionId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Ip,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, ip),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Port,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, port),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iptype",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Iptype,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, iptype),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NetType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ifSuc",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_IfSuc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, ifSuc),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "funId",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_FunId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, funId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cost",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Cost,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, cost),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "aliveTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_AliveTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, aliveTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "uploadSize",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_UploadSize,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, uploadSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "downloadSize",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_DownloadSize,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, downloadSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Count,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isWifiFirstConnect",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_IsWifiFirstConnect,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, isWifiFirstConnect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "beginTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_BeginTimeMs,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, beginTimeMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_EndTimeMs,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, endTimeMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "notifySyncCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NotifySyncCount,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, notifySyncCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pushSyncCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_PushSyncCount,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, pushSyncCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "syncCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_SyncCount,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, syncCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isDns",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_IsDns,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, isDns),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isSocket",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_IsSocket,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, isSocket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_ErrCode,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "signalStrength",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_SignalStrength,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, signalStrength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ispcode",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Ispcode,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, ispcode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ispname",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Ispname,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, ispname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retryCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_RetryCount,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, retryCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "host",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Host,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, host),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ipcnt",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Ipcnt,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, ipcnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reserved1",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Reserved1,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, reserved1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "reserved2",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Reserved2,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, reserved2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "reserved3",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Reserved3,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, reserved3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "clientIp",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_ClientIp,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, clientIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "networkCost",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NetworkCost,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, networkCost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dnsCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_DnsCount,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, dnsCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dnsCost",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_DnsCost,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, dnsCost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "connCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_ConnCount,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, connCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "connCost",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_ConnCost,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, connCost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newDnsCostTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NewDnsCostTime,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, newDnsCostTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newDnsErrType",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NewDnsErrType,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, newDnsErrType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newDnsErrCode",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NewDnsErrCode,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, newDnsErrCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newDnsSvrIp",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NewDnsSvrIp,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, newDnsSvrIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "firstPkgTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_FirstPkgTime,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, firstPkgTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endFlag",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_EndFlag,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, endFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_TotalTime,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, totalTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "conncosttime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Conncosttime,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, conncosttime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endstep",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Endstep,
        .hasIndex = 45,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, endstep),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dnscosttime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Dnscosttime,
        .hasIndex = 46,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, dnscosttime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dnserrtype",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_Dnserrtype,
        .hasIndex = 47,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, dnserrtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newNetType",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NewNetType,
        .hasIndex = 48,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, newNetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "subNetType",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_SubNetType,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, subNetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "netExtraInfo",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_NetExtraInfo,
        .hasIndex = 50,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, netExtraInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statReportExtraInfo",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_StatReportExtraInfo,
        .hasIndex = 51,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, statReportExtraInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalConnCost",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_TotalConnCost,
        .hasIndex = 52,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, totalConnCost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ipIndex",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_IpIndex,
        .hasIndex = 53,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, ipIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "innerIp",
        .dataTypeSpecific.className = NULL,
        .number = StatReportItem_FieldNumber_InnerIp,
        .hasIndex = 54,
        .offset = (uint32_t)offsetof(StatReportItem__storage_, innerIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatReportItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatReportItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "4\001GA\000\002D\000\003b\000\004D\000\005c\003\000\006G\000\007E\000\010DA\000\tD\000\nI\000\013J\000\014L\000"
        "\rE\000\016R\000\017JA\000\020HA\000\021O\000\022M\000\023I\000\024Cb\000\025H\000\026G\000\027N\000\030d\003\000"
        "\031d\003\000\032J\000\033D\000\034c\002\000 GA\000!K\000\"H\000#G\000$I\000%H\000&N\000\'M\000("
        "M\000)K\000*L\000+G\000,I\000-L\000.G\000/K\0000J\0001J\0002J\0003L\0004S\0005M"
        "\0006G\0007G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatReportInfo

@implementation StatReportInfo

@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct StatReportInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSMutableArray *listArray;
} StatReportInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = StatReportInfo_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatReportInfo__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StatReportItem),
        .number = StatReportInfo_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StatReportInfo__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatReportInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatReportInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatReportExtInfo

@implementation StatReportExtInfo

@dynamic hasBeginTime, beginTime;
@dynamic hasEndTime, endTime;
@dynamic hasClientReportTime, clientReportTime;
@dynamic hasTotalUploadSize, totalUploadSize;
@dynamic hasTotalDownloadSize, totalDownloadSize;
@dynamic hasSyncCount, syncCount;
@dynamic hasSyncFailCount, syncFailCount;
@dynamic hasNotifyCount, notifyCount;
@dynamic hasCgicount, cgicount;
@dynamic hasCgifailCount, cgifailCount;
@dynamic hasPushSyncCount, pushSyncCount;

typedef struct StatReportExtInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t beginTime;
  uint32_t endTime;
  uint32_t clientReportTime;
  uint32_t totalUploadSize;
  uint32_t totalDownloadSize;
  uint32_t syncCount;
  uint32_t syncFailCount;
  uint32_t notifyCount;
  uint32_t cgicount;
  uint32_t cgifailCount;
  uint32_t pushSyncCount;
} StatReportExtInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_BeginTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, beginTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientReportTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_ClientReportTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, clientReportTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalUploadSize",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_TotalUploadSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, totalUploadSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalDownloadSize",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_TotalDownloadSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, totalDownloadSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "syncCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_SyncCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, syncCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "syncFailCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_SyncFailCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, syncFailCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "notifyCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_NotifyCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, notifyCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cgicount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_Cgicount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, cgicount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cgifailCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_CgifailCount,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, cgifailCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pushSyncCount",
        .dataTypeSpecific.className = NULL,
        .number = StatReportExtInfo_FieldNumber_PushSyncCount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(StatReportExtInfo__storage_, pushSyncCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatReportExtInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatReportExtInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001I\000\002G\000\003P\000\004O\000\005Q\000\006I\000\007M\000\010K\000\td\004\000\nd\010\000\013M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatReportRequest

@implementation StatReportRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasInfo, info;
@dynamic hasExtInfo, extInfo;

typedef struct StatReportRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  StatReportInfo *info;
  StatReportExtInfo *extInfo;
} StatReportRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = StatReportRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatReportRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(StatReportInfo),
        .number = StatReportRequest_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatReportRequest__storage_, info),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(StatReportExtInfo),
        .number = StatReportRequest_FieldNumber_ExtInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatReportRequest__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatReportRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatReportRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002D\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatReportResponse

@implementation StatReportResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNextReportTime, nextReportTime;
@dynamic hasReportFlag, reportFlag;

typedef struct StatReportResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nextReportTime;
  uint32_t reportFlag;
  BaseResponse *baseResponse;
} StatReportResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = StatReportResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatReportResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextReportTime",
        .dataTypeSpecific.className = NULL,
        .number = StatReportResponse_FieldNumber_NextReportTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatReportResponse__storage_, nextReportTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportFlag",
        .dataTypeSpecific.className = NULL,
        .number = StatReportResponse_FieldNumber_ReportFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatReportResponse__storage_, reportFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatReportResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatReportResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002N\000\003J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PropertySurveyItem

@implementation PropertySurveyItem

@dynamic hasDeviceModel, deviceModel;
@dynamic hasOsType, osType;
@dynamic hasModule, module;
@dynamic hasSubModule, subModule;
@dynamic hasAvgElapsedTime, avgElapsedTime;
@dynamic hasMaxElapsedTime, maxElapsedTime;
@dynamic hasMinElapsedTime, minElapsedTime;
@dynamic hasUseModuleCount, useModuleCount;
@dynamic hasExpand, expand;
@dynamic hasBeginTime, beginTime;
@dynamic hasEndTime, endTime;

typedef struct PropertySurveyItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t avgElapsedTime;
  uint32_t maxElapsedTime;
  uint32_t minElapsedTime;
  uint32_t useModuleCount;
  uint32_t beginTime;
  uint32_t endTime;
  NSString *deviceModel;
  NSString *osType;
  NSString *module;
  NSString *subModule;
  NSString *expand;
} PropertySurveyItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_DeviceModel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osType",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_OsType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, osType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "module",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_Module,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, module),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subModule",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_SubModule,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, subModule),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avgElapsedTime",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_AvgElapsedTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, avgElapsedTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "maxElapsedTime",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_MaxElapsedTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, maxElapsedTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minElapsedTime",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_MinElapsedTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, minElapsedTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "useModuleCount",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_UseModuleCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, useModuleCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "expand",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_Expand,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, expand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_BeginTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, beginTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyItem_FieldNumber_EndTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PropertySurveyItem__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertySurveyItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PropertySurveyItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001K\000\002F\000\003F\000\004I\000\005N\000\006N\000\007N\000\010N\000\tF\000\nI\000\013G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PropertySurveyInfo

@implementation PropertySurveyInfo

@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct PropertySurveyInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *listArray;
} PropertySurveyInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyInfo_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PropertySurveyInfo__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PropertySurveyItem),
        .number = PropertySurveyInfo_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PropertySurveyInfo__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertySurveyInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PropertySurveyInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PropertySurveyRequest

@implementation PropertySurveyRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasInfo, info;

typedef struct PropertySurveyRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  PropertySurveyInfo *info;
} PropertySurveyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = PropertySurveyRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PropertySurveyRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PropertySurveyInfo),
        .number = PropertySurveyRequest_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PropertySurveyRequest__storage_, info),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertySurveyRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PropertySurveyRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PropertySurveyResponse

@implementation PropertySurveyResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNextReportTime, nextReportTime;
@dynamic hasReportFlag, reportFlag;

typedef struct PropertySurveyResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nextReportTime;
  uint32_t reportFlag;
  BaseResponse *baseResponse;
} PropertySurveyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = PropertySurveyResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PropertySurveyResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextReportTime",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyResponse_FieldNumber_NextReportTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PropertySurveyResponse__storage_, nextReportTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportFlag",
        .dataTypeSpecific.className = NULL,
        .number = PropertySurveyResponse_FieldNumber_ReportFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PropertySurveyResponse__storage_, reportFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertySurveyResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PropertySurveyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002N\000\003J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnbindMobileByQQRequest

@implementation UnbindMobileByQQRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasPwd, pwd;
@dynamic hasPwd2, pwd2;
@dynamic hasImgSid, imgSid;
@dynamic hasImgCode, imgCode;
@dynamic hasImgEncryptKey, imgEncryptKey;
@dynamic hasKsid, ksid;

typedef struct UnbindMobileByQQRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  SKBuiltinString_t *userName;
  NSString *pwd;
  NSString *pwd2;
  SKBuiltinString_t *imgSid;
  SKBuiltinString_t *imgCode;
  SKBuiltinString_t *imgEncryptKey;
  SKBuiltinBuffer_t *ksid;
} UnbindMobileByQQRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UnbindMobileByQQRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UnbindMobileByQQRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = UnbindMobileByQQRequest_FieldNumber_Pwd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, pwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd2",
        .dataTypeSpecific.className = NULL,
        .number = UnbindMobileByQQRequest_FieldNumber_Pwd2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, pwd2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgSid",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UnbindMobileByQQRequest_FieldNumber_ImgSid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, imgSid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgCode",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UnbindMobileByQQRequest_FieldNumber_ImgCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, imgCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgEncryptKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UnbindMobileByQQRequest_FieldNumber_ImgEncryptKey,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, imgEncryptKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ksid",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UnbindMobileByQQRequest_FieldNumber_Ksid,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UnbindMobileByQQRequest__storage_, ksid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnbindMobileByQQRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnbindMobileByQQRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002H\000\003C\000\004D\000\005F\000\006G\000\007M\000\010b\002\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnbindMobileByQQResponse

@implementation UnbindMobileByQQResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasImgSid, imgSid;
@dynamic hasImgBuf, imgBuf;
@dynamic hasImgEncryptKey, imgEncryptKey;
@dynamic hasA2Key, a2Key;
@dynamic hasKsid, ksid;

typedef struct UnbindMobileByQQResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *imgSid;
  SKBuiltinBuffer_t *imgBuf;
  SKBuiltinString_t *imgEncryptKey;
  SKBuiltinBuffer_t *a2Key;
  SKBuiltinBuffer_t *ksid;
} UnbindMobileByQQResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UnbindMobileByQQResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnbindMobileByQQResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgSid",
        .dataTypeSpecific.className = NULL,
        .number = UnbindMobileByQQResponse_FieldNumber_ImgSid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnbindMobileByQQResponse__storage_, imgSid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UnbindMobileByQQResponse_FieldNumber_ImgBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UnbindMobileByQQResponse__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgEncryptKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = UnbindMobileByQQResponse_FieldNumber_ImgEncryptKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UnbindMobileByQQResponse__storage_, imgEncryptKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "a2Key",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UnbindMobileByQQResponse_FieldNumber_A2Key,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UnbindMobileByQQResponse__storage_, a2Key),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ksid",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UnbindMobileByQQResponse_FieldNumber_Ksid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UnbindMobileByQQResponse__storage_, ksid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnbindMobileByQQResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnbindMobileByQQResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002F\000\003F\000\004M\000\005E\000\006b\002\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogOutWebWxRequest

@implementation LogOutWebWxRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;

typedef struct LogOutWebWxRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  BaseRequest *baseRequest;
} LogOutWebWxRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = LogOutWebWxRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogOutWebWxRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = LogOutWebWxRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LogOutWebWxRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogOutWebWxRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogOutWebWxRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogOutWebWxResponse

@implementation LogOutWebWxResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct LogOutWebWxResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} LogOutWebWxResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = LogOutWebWxResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogOutWebWxResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogOutWebWxResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogOutWebWxResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogOutRequest

@implementation LogOutRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasScene, scene;

typedef struct LogOutRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  BaseRequest *baseRequest;
} LogOutRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = LogOutRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogOutRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = LogOutRequest_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LogOutRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogOutRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogOutRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogOutResponse

@implementation LogOutResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct LogOutResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} LogOutResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = LogOutResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogOutResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogOutResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogOutResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModBrandSetting

@implementation ModBrandSetting

@dynamic hasBrandFlag, brandFlag;
@dynamic hasUserName, userName;

typedef struct ModBrandSetting__storage_ {
  uint32_t _has_storage_[1];
  uint32_t brandFlag;
  NSString *userName;
} ModBrandSetting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "brandFlag",
        .dataTypeSpecific.className = NULL,
        .number = ModBrandSetting_FieldNumber_BrandFlag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModBrandSetting__storage_, brandFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ModBrandSetting_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModBrandSetting__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModBrandSetting class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModBrandSetting__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001I\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTag

@implementation SnsTag

@dynamic hasTagId, tagId;
@dynamic hasTagName, tagName;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct SnsTag__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSString *tagName;
  NSMutableArray *listArray;
  uint64_t tagId;
} SnsTag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tagId",
        .dataTypeSpecific.className = NULL,
        .number = SnsTag_FieldNumber_TagId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTag__storage_, tagId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tagName",
        .dataTypeSpecific.className = NULL,
        .number = SnsTag_FieldNumber_TagName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTag__storage_, tagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SnsTag_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTag__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsTag_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTag__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTag class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001E\000\002G\000\003E\000\004\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagOptionRequest

@implementation SnsTagOptionRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasTagId, tagId;
@dynamic hasTagName, tagName;

typedef struct SnsTagOptionRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  BaseRequest *baseRequest;
  NSString *tagName;
  uint64_t tagId;
} SnsTagOptionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsTagOptionRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagOptionRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagOptionRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagOptionRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagOptionRequest_FieldNumber_TagId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTagOptionRequest__storage_, tagId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tagName",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagOptionRequest_FieldNumber_TagName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsTagOptionRequest__storage_, tagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagOptionRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagOptionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003E\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagOptionResponse

@implementation SnsTagOptionResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSnsTag, snsTag;

typedef struct SnsTagOptionResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsTag *snsTag;
} SnsTagOptionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsTagOptionResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagOptionResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsTag",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsTag),
        .number = SnsTagOptionResponse_FieldNumber_SnsTag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagOptionResponse__storage_, snsTag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagOptionResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagOptionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagMemberOptionRequest

@implementation SnsTagMemberOptionRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasTagId, tagId;
@dynamic hasTagName, tagName;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasScene, scene;

typedef struct SnsTagMemberOptionRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t count;
  uint32_t scene;
  BaseRequest *baseRequest;
  NSString *tagName;
  NSMutableArray *listArray;
  uint64_t tagId;
} SnsTagMemberOptionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsTagMemberOptionRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemberOptionRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tagId",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemberOptionRequest_FieldNumber_TagId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, tagId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tagName",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemberOptionRequest_FieldNumber_TagName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, tagName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemberOptionRequest_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsTagMemberOptionRequest_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemberOptionRequest_FieldNumber_Scene,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagMemberOptionRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagMemberOptionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002F\000\003E\000\004G\000\005E\000\006\000List\000\007E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagMemberOptionResponse

@implementation SnsTagMemberOptionResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSnsTag, snsTag;

typedef struct SnsTagMemberOptionResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsTag *snsTag;
} SnsTagMemberOptionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsTagMemberOptionResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsTag",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsTag),
        .number = SnsTagMemberOptionResponse_FieldNumber_SnsTag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagMemberOptionResponse__storage_, snsTag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagMemberOptionResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagMemberOptionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagListRequest

@implementation SnsTagListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasTagListMd5, tagListMd5;

typedef struct SnsTagListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  BaseRequest *baseRequest;
  NSString *tagListMd5;
} SnsTagListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsTagListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagListRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagListRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tagListMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagListRequest_FieldNumber_TagListMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTagListRequest__storage_, tagListMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagListRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagListResponse

@implementation SnsTagListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasOpCode, opCode;
@dynamic hasTagListMd5, tagListMd5;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct SnsTagListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t count;
  BaseResponse *baseResponse;
  NSString *tagListMd5;
  NSMutableArray *listArray;
} SnsTagListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsTagListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagListResponse_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagListResponse__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tagListMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagListResponse_FieldNumber_TagListMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTagListResponse__storage_, tagListMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagListResponse_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsTagListResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsTag),
        .number = SnsTagListResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTagListResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagListResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002F\000\003J\000\004E\000\005\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagMemMutilSetRequest

@implementation SnsTagMemMutilSetRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasModUserName, modUserName;
@dynamic hasCount, count;
@dynamic tagIdListArray, tagIdListArray_Count;

typedef struct SnsTagMemMutilSetRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSString *modUserName;
  NSMutableArray *tagIdListArray;
} SnsTagMemMutilSetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsTagMemMutilSetRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modUserName",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemMutilSetRequest_FieldNumber_ModUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetRequest__storage_, modUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemMutilSetRequest_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tagIdListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinUint64_t),
        .number = SnsTagMemMutilSetRequest_FieldNumber_TagIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetRequest__storage_, tagIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagMemMutilSetRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagMemMutilSetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002K\000\003E\000\004\000TagIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTagMemMutilSetResponse

@implementation SnsTagMemMutilSetResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasModUserName, modUserName;
@dynamic hasCount, count;
@dynamic tagIdListArray, tagIdListArray_Count;

typedef struct SnsTagMemMutilSetResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSString *modUserName;
  NSMutableArray *tagIdListArray;
} SnsTagMemMutilSetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsTagMemMutilSetResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modUserName",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemMutilSetResponse_FieldNumber_ModUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetResponse__storage_, modUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SnsTagMemMutilSetResponse_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tagIdListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinUint64_t),
        .number = SnsTagMemMutilSetResponse_FieldNumber_TagIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTagMemMutilSetResponse__storage_, tagIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTagMemMutilSetResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTagMemMutilSetResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002K\000\003E\000\004\000TagIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfileRequest

@implementation GetProfileRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;

typedef struct GetProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *userName;
} GetProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetProfileRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfileRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = GetProfileRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProfileRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfileRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProfileResponse

@implementation GetProfileResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasUserInfo, userInfo;
@dynamic hasUserInfoExt, userInfoExt;

typedef struct GetProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  ModUserInfo *userInfo;
  UserInfoExt *userInfoExt;
} GetProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetProfileResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProfileResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(ModUserInfo),
        .number = GetProfileResponse_FieldNumber_UserInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProfileResponse__storage_, userInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userInfoExt",
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfoExt),
        .number = GetProfileResponse_FieldNumber_UserInfoExt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProfileResponse__storage_, userInfoExt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProfileResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002H\000\003K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatusNotifyUnreadChat

@implementation StatusNotifyUnreadChat

@dynamic hasUserName, userName;
@dynamic hasLastReadTime, lastReadTime;

typedef struct StatusNotifyUnreadChat__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lastReadTime;
  NSString *userName;
} StatusNotifyUnreadChat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyUnreadChat_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusNotifyUnreadChat__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastReadTime",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyUnreadChat_FieldNumber_LastReadTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusNotifyUnreadChat__storage_, lastReadTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusNotifyUnreadChat class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusNotifyUnreadChat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001H\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatusNotifyFunction

@implementation StatusNotifyFunction

@dynamic hasName, name;
@dynamic hasArg, arg;

typedef struct StatusNotifyFunction__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *arg;
} StatusNotifyFunction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyFunction_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusNotifyFunction__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "arg",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyFunction_FieldNumber_Arg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusNotifyFunction__storage_, arg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusNotifyFunction class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusNotifyFunction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatusNotifyRequest

@implementation StatusNotifyRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCode, code;
@dynamic hasFromUserName, fromUserName;
@dynamic hasToUserName, toUserName;
@dynamic hasClientMsgId, clientMsgId;
@dynamic hasUnreadChatListCount, unreadChatListCount;
@dynamic unreadChatListArray, unreadChatListArray_Count;
@dynamic hasFunction, function;
@dynamic hasUnreadFunctionCount, unreadFunctionCount;
@dynamic unreadFunctionListArray, unreadFunctionListArray_Count;

typedef struct StatusNotifyRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  uint32_t unreadChatListCount;
  uint32_t unreadFunctionCount;
  BaseRequest *baseRequest;
  NSString *fromUserName;
  NSString *toUserName;
  NSString *clientMsgId;
  NSMutableArray *unreadChatListArray;
  StatusNotifyFunction *function;
  NSMutableArray *unreadFunctionListArray;
} StatusNotifyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = StatusNotifyRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyRequest_FieldNumber_FromUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyRequest_FieldNumber_ToUserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientMsgId",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyRequest_FieldNumber_ClientMsgId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, clientMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unreadChatListCount",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyRequest_FieldNumber_UnreadChatListCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, unreadChatListCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "unreadChatListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StatusNotifyUnreadChat),
        .number = StatusNotifyRequest_FieldNumber_UnreadChatListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, unreadChatListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "function",
        .dataTypeSpecific.className = GPBStringifySymbol(StatusNotifyFunction),
        .number = StatusNotifyRequest_FieldNumber_Function,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, function),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unreadFunctionCount",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyRequest_FieldNumber_UnreadFunctionCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, unreadFunctionCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "unreadFunctionListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StatusNotifyFunction),
        .number = StatusNotifyRequest_FieldNumber_UnreadFunctionListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StatusNotifyRequest__storage_, unreadFunctionListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusNotifyRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusNotifyRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001K\000\002D\000\003L\000\004J\000\005K\000\006S\000\007\000UnreadChatList\000\010H\000\t"
        "S\000\n\000UnreadFunctionList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatContact

@implementation ChatContact

@dynamic hasUserName, userName;

typedef struct ChatContact__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} ChatContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ChatContact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatContact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatContact class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatContact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StatusNotifyResponse

@implementation StatusNotifyResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMsgId, msgId;
@dynamic hasNewMsgId, newMsgId;
@dynamic hasChatContactCount, chatContactCount;
@dynamic chatContactListArray, chatContactListArray_Count;

typedef struct StatusNotifyResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgId;
  uint32_t chatContactCount;
  BaseResponse *baseResponse;
  NSMutableArray *chatContactListArray;
  uint64_t newMsgId;
} StatusNotifyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = StatusNotifyResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusNotifyResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyResponse_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusNotifyResponse__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newMsgId",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyResponse_FieldNumber_NewMsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatusNotifyResponse__storage_, newMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "chatContactCount",
        .dataTypeSpecific.className = NULL,
        .number = StatusNotifyResponse_FieldNumber_ChatContactCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StatusNotifyResponse__storage_, chatContactCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "chatContactListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatContact),
        .number = StatusNotifyResponse_FieldNumber_ChatContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StatusNotifyResponse__storage_, chatContactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusNotifyResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusNotifyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002E\000\003H\000\004P\000\005\000ChatContactList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StrategyItem

@implementation StrategyItem

@dynamic hasLogType, logType;
@dynamic hasEnalbe, enalbe;
@dynamic hasCycle, cycle;
@dynamic hasExtInfo, extInfo;

typedef struct StrategyItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logType;
  uint32_t enalbe;
  uint32_t cycle;
  NSString *extInfo;
} StrategyItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logType",
        .dataTypeSpecific.className = NULL,
        .number = StrategyItem_FieldNumber_LogType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StrategyItem__storage_, logType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "enalbe",
        .dataTypeSpecific.className = NULL,
        .number = StrategyItem_FieldNumber_Enalbe,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StrategyItem__storage_, enalbe),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cycle",
        .dataTypeSpecific.className = NULL,
        .number = StrategyItem_FieldNumber_Cycle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StrategyItem__storage_, cycle),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = StrategyItem_FieldNumber_ExtInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StrategyItem__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StrategyItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StrategyItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001G\000\002F\000\003E\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetReportStrategyReq

@implementation GetReportStrategyReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasLogid, logid;

typedef struct GetReportStrategyReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t logid;
  BaseRequest *baseRequest;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
} GetReportStrategyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetReportStrategyReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyReq_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyReq_FieldNumber_DeviceBrand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyReq_FieldNumber_OsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyReq_FieldNumber_OsVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyReq_FieldNumber_LanguageVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logid",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyReq_FieldNumber_Logid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetReportStrategyReq__storage_, logid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetReportStrategyReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetReportStrategyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002K\000\003K\000\004F\000\005I\000\006K\000\007E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetReportStrategyResp

@implementation GetReportStrategyResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCnt, cnt;
@dynamic listArray, listArray_Count;

typedef struct GetReportStrategyResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cnt;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} GetReportStrategyResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetReportStrategyResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetReportStrategyResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cnt",
        .dataTypeSpecific.className = NULL,
        .number = GetReportStrategyResp_FieldNumber_Cnt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetReportStrategyResp__storage_, cnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StrategyItem),
        .number = GetReportStrategyResp_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetReportStrategyResp__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetReportStrategyResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetReportStrategyResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002C\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientPerfItem

@implementation ClientPerfItem

@dynamic hasEventId, eventId;
@dynamic hasAvgElapseTime, avgElapseTime;
@dynamic hasMaxElapseTime, maxElapseTime;
@dynamic hasMinElapseTime, minElapseTime;
@dynamic hasCnt, cnt;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;

typedef struct ClientPerfItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t eventId;
  uint32_t avgElapseTime;
  uint32_t maxElapseTime;
  uint32_t minElapseTime;
  uint32_t cnt;
  uint32_t startTime;
  uint32_t endTime;
} ClientPerfItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventId",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_EventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, eventId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "avgElapseTime",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_AvgElapseTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, avgElapseTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "maxElapseTime",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_MaxElapseTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, maxElapseTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minElapseTime",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_MinElapseTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, minElapseTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cnt",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_Cnt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, cnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_StartTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfItem_FieldNumber_EndTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ClientPerfItem__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientPerfItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientPerfItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001FA\000\002M\000\003M\000\004M\000\005C\000\006I\000\007G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientPerfReportReq

@implementation ClientPerfReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasEventIdCnt, eventIdCnt;
@dynamic listArray, listArray_Count;

typedef struct ClientPerfReportReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t eventIdCnt;
  BaseRequest *baseRequest;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
  NSMutableArray *listArray;
} ClientPerfReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ClientPerfReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfReportReq_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfReportReq_FieldNumber_DeviceBrand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfReportReq_FieldNumber_OsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfReportReq_FieldNumber_OsVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfReportReq_FieldNumber_LanguageVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventIdCnt",
        .dataTypeSpecific.className = NULL,
        .number = ClientPerfReportReq_FieldNumber_EventIdCnt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, eventIdCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ClientPerfItem),
        .number = ClientPerfReportReq_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientPerfReportReq__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientPerfReportReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientPerfReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002K\000\003K\000\004F\000\005I\000\006K\000\007J\000\010\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientPerfReportResp

@implementation ClientPerfReportResp

@dynamic hasBaseResponse, baseResponse;

typedef struct ClientPerfReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ClientPerfReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ClientPerfReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientPerfReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientPerfReportResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientPerfReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgReportRequest

@implementation ShakeTranImgReportRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct ShakeTranImgReportRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} ShakeTranImgReportRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeTranImgReportRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgReportRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgReportRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgReportRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgReportResponse

@implementation ShakeTranImgReportResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasBuffer, buffer;

typedef struct ShakeTranImgReportResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *buffer;
} ShakeTranImgReportResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeTranImgReportResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgReportResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeTranImgReportResponse_FieldNumber_Buffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeTranImgReportResponse__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgReportResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgReportResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgGetRequest

@implementation ShakeTranImgGetRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBuffer, buffer;

typedef struct ShakeTranImgGetRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *buffer;
} ShakeTranImgGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeTranImgGetRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgGetRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeTranImgGetRequest_FieldNumber_Buffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeTranImgGetRequest__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgGetRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgGetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgGetItem

@implementation ShakeTranImgGetItem

@dynamic hasWebURL, webURL;
@dynamic hasThumbURL, thumbURL;
@dynamic hasImgURL, imgURL;

typedef struct ShakeTranImgGetItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *webURL;
  NSString *thumbURL;
  NSString *imgURL;
} ShakeTranImgGetItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "webURL",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgGetItem_FieldNumber_WebURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgGetItem__storage_, webURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbURL",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgGetItem_FieldNumber_ThumbURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeTranImgGetItem__storage_, thumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgURL",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgGetItem_FieldNumber_ImgURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeTranImgGetItem__storage_, imgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgGetItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgGetItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001D!!\000\002F!!\000\003D!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgGetResponse

@implementation ShakeTranImgGetResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPageURL, pageURL;
@dynamic hasCount, count;
@dynamic imgURLListArray, imgURLListArray_Count;
@dynamic hasBuffer, buffer;
@dynamic hasTitle, title;

typedef struct ShakeTranImgGetResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSString *pageURL;
  NSMutableArray *imgURLListArray;
  SKBuiltinBuffer_t *buffer;
  NSString *title;
} ShakeTranImgGetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeTranImgGetResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgGetResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageURL",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgGetResponse_FieldNumber_PageURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeTranImgGetResponse__storage_, pageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgGetResponse_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeTranImgGetResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgURLListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShakeTranImgGetItem),
        .number = ShakeTranImgGetResponse_FieldNumber_ImgURLListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShakeTranImgGetResponse__storage_, imgURLListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeTranImgGetResponse_FieldNumber_Buffer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeTranImgGetResponse__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgGetResponse_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ShakeTranImgGetResponse__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgGetResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgGetResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002E!!\000\003E\000\004\000ImgUrlList\000\005F\000\006E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgUnBindRequest

@implementation ShakeTranImgUnBindRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasScene, scene;
@dynamic hasOpType, opType;

typedef struct ShakeTranImgUnBindRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  uint32_t opType;
  BaseRequest *baseRequest;
} ShakeTranImgUnBindRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeTranImgUnBindRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgUnBindRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgUnBindRequest_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeTranImgUnBindRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = ShakeTranImgUnBindRequest_FieldNumber_OpType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeTranImgUnBindRequest__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgUnBindRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgUnBindRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeTranImgUnBindResponse

@implementation ShakeTranImgUnBindResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ShakeTranImgUnBindResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ShakeTranImgUnBindResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeTranImgUnBindResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeTranImgUnBindResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeTranImgUnBindResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeTranImgUnBindResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetShakeTranImgRequest

@implementation BatchGetShakeTranImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic webURLListArray, webURLListArray_Count;

typedef struct BatchGetShakeTranImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSMutableArray *webURLListArray;
} BatchGetShakeTranImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchGetShakeTranImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetShakeTranImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetShakeTranImgRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetShakeTranImgRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "webURLListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = BatchGetShakeTranImgRequest_FieldNumber_WebURLListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetShakeTranImgRequest__storage_, webURLListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetShakeTranImgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetShakeTranImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003\000WebUrlList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetShakeTranImgResponse

@implementation BatchGetShakeTranImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic imgURLListArray, imgURLListArray_Count;

typedef struct BatchGetShakeTranImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *imgURLListArray;
} BatchGetShakeTranImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchGetShakeTranImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetShakeTranImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetShakeTranImgResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetShakeTranImgResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgURLListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShakeTranImgGetItem),
        .number = BatchGetShakeTranImgResponse_FieldNumber_ImgURLListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetShakeTranImgResponse__storage_, imgURLListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetShakeTranImgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetShakeTranImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000ImgUrlList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVReportItem

@implementation KVReportItem

@dynamic hasLogId, logId;
@dynamic hasValue, value;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic hasCount, count;

typedef struct KVReportItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logId;
  uint32_t startTime;
  uint32_t endTime;
  uint32_t count;
  NSString *value;
} KVReportItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logId",
        .dataTypeSpecific.className = NULL,
        .number = KVReportItem_FieldNumber_LogId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVReportItem__storage_, logId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = KVReportItem_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KVReportItem__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = KVReportItem_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KVReportItem__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = KVReportItem_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KVReportItem__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = KVReportItem_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KVReportItem__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVReportItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVReportItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001DA\000\002E\000\003I\000\004G\000\005E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVReportReq

@implementation KVReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasKvcnt, kvcnt;
@dynamic listArray, listArray_Count;
@dynamic hasRandomEncryKey, randomEncryKey;

typedef struct KVReportReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t kvcnt;
  BaseRequest *baseRequest;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
  NSMutableArray *listArray;
  SKBuiltinBuffer_t *randomEncryKey;
} KVReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = KVReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = KVReportReq_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = KVReportReq_FieldNumber_DeviceBrand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = KVReportReq_FieldNumber_OsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = KVReportReq_FieldNumber_OsVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = KVReportReq_FieldNumber_LanguageVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kvcnt",
        .dataTypeSpecific.className = NULL,
        .number = KVReportReq_FieldNumber_Kvcnt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, kvcnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(KVReportItem),
        .number = KVReportReq_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = KVReportReq_FieldNumber_RandomEncryKey,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(KVReportReq__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVReportReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001K\000\002K\000\003K\000\004F\000\005I\000\006K\000\007c\002\000\010\000List\000\tN\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVReportResp

@implementation KVReportResp

@dynamic hasBaseResponse, baseResponse;

typedef struct KVReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} KVReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = KVReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVReportResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVCommReportReq

@implementation KVCommReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBin, bin;
@dynamic hasKvbuffer, kvbuffer;
@dynamic hasRandomEncryKey, randomEncryKey;
@dynamic hasUuid, uuid;

typedef struct KVCommReportReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t bin;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *kvbuffer;
  SKBuiltinBuffer_t *randomEncryKey;
  SKBuiltinBuffer_t *uuid;
} KVCommReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = KVCommReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVCommReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bin",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportReq_FieldNumber_Bin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KVCommReportReq__storage_, bin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvbuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = KVCommReportReq_FieldNumber_Kvbuffer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KVCommReportReq__storage_, kvbuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = KVCommReportReq_FieldNumber_RandomEncryKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KVCommReportReq__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = KVCommReportReq_FieldNumber_Uuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KVCommReportReq__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVCommReportReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVCommReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002C\000\003c\005\000\004N\000\005d\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVCommReportResp

@implementation KVCommReportResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasKvresponBuffer, kvresponBuffer;

typedef struct KVCommReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *kvresponBuffer;
} KVCommReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = KVCommReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVCommReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kvresponBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = KVCommReportResp_FieldNumber_KvresponBuffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KVCommReportResp__storage_, kvresponBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVCommReportResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVCommReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002c\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameKVReportReq

@implementation GameKVReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasLogId, logId;
@dynamic hasLogExt, logExt;

typedef struct GameKVReportReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logId;
  BaseRequest *baseRequest;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
  NSString *logExt;
} GameKVReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameKVReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_DeviceBrand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_OsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_OsVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_LanguageVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logId",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_LogId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, logId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "logExt",
        .dataTypeSpecific.className = NULL,
        .number = GameKVReportReq_FieldNumber_LogExt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GameKVReportReq__storage_, logExt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameKVReportReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameKVReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002K\000\003K\000\004F\000\005I\000\006K\000\007E\000\010F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameKVReportResp

@implementation GameKVReportResp

@dynamic hasBaseResponse, baseResponse;

typedef struct GameKVReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} GameKVReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameKVReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameKVReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameKVReportResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameKVReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserActionItem

@implementation UserActionItem

@dynamic hasEventId, eventId;
@dynamic hasClickCnt, clickCnt;
@dynamic hasActionPath, actionPath;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;

typedef struct UserActionItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t eventId;
  uint32_t clickCnt;
  uint32_t startTime;
  uint32_t endTime;
  NSString *actionPath;
} UserActionItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventId",
        .dataTypeSpecific.className = NULL,
        .number = UserActionItem_FieldNumber_EventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserActionItem__storage_, eventId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clickCnt",
        .dataTypeSpecific.className = NULL,
        .number = UserActionItem_FieldNumber_ClickCnt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserActionItem__storage_, clickCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actionPath",
        .dataTypeSpecific.className = NULL,
        .number = UserActionItem_FieldNumber_ActionPath,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserActionItem__storage_, actionPath),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = UserActionItem_FieldNumber_StartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserActionItem__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = UserActionItem_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserActionItem__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserActionItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserActionItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001FA\000\002H\000\003J\000\004I\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserActionReportReq

@implementation UserActionReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasActionCnt, actionCnt;
@dynamic listArray, listArray_Count;

typedef struct UserActionReportReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actionCnt;
  BaseRequest *baseRequest;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
  NSMutableArray *listArray;
} UserActionReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UserActionReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = UserActionReportReq_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = UserActionReportReq_FieldNumber_DeviceBrand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = UserActionReportReq_FieldNumber_OsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = UserActionReportReq_FieldNumber_OsVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = UserActionReportReq_FieldNumber_LanguageVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actionCnt",
        .dataTypeSpecific.className = NULL,
        .number = UserActionReportReq_FieldNumber_ActionCnt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, actionCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserActionItem),
        .number = UserActionReportReq_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserActionReportReq__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserActionReportReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserActionReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002K\000\003K\000\004F\000\005I\000\006K\000\007I\000\010\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserActionReportResp

@implementation UserActionReportResp

@dynamic hasBaseResponse, baseResponse;

typedef struct UserActionReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} UserActionReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UserActionReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserActionReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserActionReportResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserActionReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoiceRemindInfo

@implementation VoiceRemindInfo

@dynamic hasRemindId, remindId;

typedef struct VoiceRemindInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t remindId;
} VoiceRemindInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remindId",
        .dataTypeSpecific.className = NULL,
        .number = VoiceRemindInfo_FieldNumber_RemindId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoiceRemindInfo__storage_, remindId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoiceRemindInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoiceRemindInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OpVoiceReminderReq

@implementation OpVoiceReminderReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasRemindInfoNum, remindInfoNum;
@dynamic remindInfoListArray, remindInfoListArray_Count;

typedef struct OpVoiceReminderReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t opCode;
  uint32_t remindInfoNum;
  BaseRequest *baseRequest;
  NSMutableArray *remindInfoListArray;
} OpVoiceReminderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = OpVoiceReminderReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OpVoiceReminderReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = OpVoiceReminderReq_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OpVoiceReminderReq__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "remindInfoNum",
        .dataTypeSpecific.className = NULL,
        .number = OpVoiceReminderReq_FieldNumber_RemindInfoNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OpVoiceReminderReq__storage_, remindInfoNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remindInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoiceRemindInfo),
        .number = OpVoiceReminderReq_FieldNumber_RemindInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OpVoiceReminderReq__storage_, remindInfoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpVoiceReminderReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpVoiceReminderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003M\000\004\000RemindInfoList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OpVoiceReminderResp

@implementation OpVoiceReminderResp

@dynamic hasBaseResponse, baseResponse;

typedef struct OpVoiceReminderResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} OpVoiceReminderResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = OpVoiceReminderResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OpVoiceReminderResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpVoiceReminderResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpVoiceReminderResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GrantBigChatRoomReq

@implementation GrantBigChatRoomReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasToUserName, toUserName;

typedef struct GrantBigChatRoomReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *toUserName;
} GrantBigChatRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GrantBigChatRoomReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GrantBigChatRoomReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = NULL,
        .number = GrantBigChatRoomReq_FieldNumber_ToUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GrantBigChatRoomReq__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GrantBigChatRoomReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrantBigChatRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GrantBigChatRoomResp

@implementation GrantBigChatRoomResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasQuota, quota;

typedef struct GrantBigChatRoomResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t quota;
  BaseResponse *baseResponse;
} GrantBigChatRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GrantBigChatRoomResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GrantBigChatRoomResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quota",
        .dataTypeSpecific.className = NULL,
        .number = GrantBigChatRoomResp_FieldNumber_Quota,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GrantBigChatRoomResp__storage_, quota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GrantBigChatRoomResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrantBigChatRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClickCommandRequest

@implementation ClickCommandRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasClickType, clickType;
@dynamic hasClickInfo, clickInfo;
@dynamic hasBizUserName, bizUserName;

typedef struct ClickCommandRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t clickType;
  BaseRequest *baseRequest;
  NSString *clickInfo;
  NSString *bizUserName;
} ClickCommandRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ClickCommandRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClickCommandRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clickType",
        .dataTypeSpecific.className = NULL,
        .number = ClickCommandRequest_FieldNumber_ClickType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClickCommandRequest__storage_, clickType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clickInfo",
        .dataTypeSpecific.className = NULL,
        .number = ClickCommandRequest_FieldNumber_ClickInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClickCommandRequest__storage_, clickInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bizUserName",
        .dataTypeSpecific.className = NULL,
        .number = ClickCommandRequest_FieldNumber_BizUserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClickCommandRequest__storage_, bizUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClickCommandRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClickCommandRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002I\000\003I\000\004K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClickCommandResponse

@implementation ClickCommandResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ClickCommandResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ClickCommandResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ClickCommandResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClickCommandResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClickCommandResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClickCommandResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModSnsBlackList

@implementation ModSnsBlackList

@dynamic hasContactUsername, contactUsername;
@dynamic hasModType, modType;

typedef struct ModSnsBlackList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t modType;
  NSString *contactUsername;
} ModSnsBlackList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactUsername",
        .dataTypeSpecific.className = NULL,
        .number = ModSnsBlackList_FieldNumber_ContactUsername,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModSnsBlackList__storage_, contactUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modType",
        .dataTypeSpecific.className = NULL,
        .number = ModSnsBlackList_FieldNumber_ModType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModSnsBlackList__storage_, modType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModSnsBlackList class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModSnsBlackList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001O\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModSnsNotInterestList

@implementation ModSnsNotInterestList

@dynamic hasContactUsername, contactUsername;
@dynamic hasModType, modType;

typedef struct ModSnsNotInterestList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t modType;
  NSString *contactUsername;
} ModSnsNotInterestList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactUsername",
        .dataTypeSpecific.className = NULL,
        .number = ModSnsNotInterestList_FieldNumber_ContactUsername,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModSnsNotInterestList__storage_, contactUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modType",
        .dataTypeSpecific.className = NULL,
        .number = ModSnsNotInterestList_FieldNumber_ModType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModSnsNotInterestList__storage_, modType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModSnsNotInterestList class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModSnsNotInterestList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001O\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteSnsOldGroup

@implementation DeleteSnsOldGroup

@dynamic hasGroupCount, groupCount;
@dynamic groupIdsArray, groupIdsArray_Count;

typedef struct DeleteSnsOldGroup__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupCount;
  GPBUInt64Array *groupIdsArray;
} DeleteSnsOldGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupCount",
        .dataTypeSpecific.className = NULL,
        .number = DeleteSnsOldGroup_FieldNumber_GroupCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteSnsOldGroup__storage_, groupCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = DeleteSnsOldGroup_FieldNumber_GroupIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteSnsOldGroup__storage_, groupIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteSnsOldGroup class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteSnsOldGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001J\000\002\000GroupIds\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmsgSyncRequest

@implementation SubmsgSyncRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSelector, selector;
@dynamic hasKeyBuf, keyBuf;

typedef struct SubmsgSyncRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t selector;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *keyBuf;
} SubmsgSyncRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SubmsgSyncRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmsgSyncRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = SubmsgSyncRequest_FieldNumber_Selector,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubmsgSyncRequest__storage_, selector),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SubmsgSyncRequest_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubmsgSyncRequest__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmsgSyncRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmsgSyncRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmsgSyncResponse

@implementation SubmsgSyncResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCmdList, cmdList;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasKeyBuf, keyBuf;

typedef struct SubmsgSyncResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t continueFlag;
  BaseResponse *baseResponse;
  CmdList *cmdList;
  SKBuiltinBuffer_t *keyBuf;
} SubmsgSyncResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SubmsgSyncResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmsgSyncResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cmdList",
        .dataTypeSpecific.className = GPBStringifySymbol(CmdList),
        .number = SubmsgSyncResponse_FieldNumber_CmdList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubmsgSyncResponse__storage_, cmdList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = SubmsgSyncResponse_FieldNumber_ContinueFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubmsgSyncResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SubmsgSyncResponse_FieldNumber_KeyBuf,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SubmsgSyncResponse__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmsgSyncResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmsgSyncResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002G\000\003L\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NBSInfo

@implementation NBSInfo

@dynamic hasNbsid, nbsid;
@dynamic hasSummary, summary;
@dynamic hasCardFlag, cardFlag;
@dynamic hasDistance, distance;
@dynamic hasCategory, category;
@dynamic hasRank, rank;
@dynamic hasStatus, status;

typedef struct NBSInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbsid;
  uint32_t cardFlag;
  float distance;
  uint32_t rank;
  uint32_t status;
  NSString *summary;
  NSString *category;
} NBSInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nbsid",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_Nbsid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, nbsid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_Summary,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, summary),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardFlag",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_CardFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, cardFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_Distance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, distance),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_Category,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_Rank,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, rank),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NBSInfo_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NBSInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NBSInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NBSInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001d\001\000\002G\000\003H\000\004H\000\005H\000\006D\000\007F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NBSConfigInfo

@implementation NBSConfigInfo

@dynamic hasConfId, confId;
@dynamic hasType, type;
@dynamic hasSummary, summary;

typedef struct NBSConfigInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t confId;
  uint32_t type;
  NSString *summary;
} NBSConfigInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confId",
        .dataTypeSpecific.className = NULL,
        .number = NBSConfigInfo_FieldNumber_ConfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NBSConfigInfo__storage_, confId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = NBSConfigInfo_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NBSConfigInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = NULL,
        .number = NBSConfigInfo_FieldNumber_Summary,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NBSConfigInfo__storage_, summary),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NBSConfigInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NBSConfigInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002D\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FindNBSRequest

@implementation FindNBSRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasNbstype, nbstype;
@dynamic hasUserPos, userPos;
@dynamic hasPageBuff, pageBuff;

typedef struct FindNBSRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbstype;
  BaseRequest *baseRequest;
  PositionInfo *userPos;
  SKBuiltinBuffer_t *pageBuff;
} FindNBSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = FindNBSRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FindNBSRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbstype",
        .dataTypeSpecific.className = NULL,
        .number = FindNBSRequest_FieldNumber_Nbstype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FindNBSRequest__storage_, nbstype),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userPos",
        .dataTypeSpecific.className = GPBStringifySymbol(PositionInfo),
        .number = FindNBSRequest_FieldNumber_UserPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FindNBSRequest__storage_, userPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageBuff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = FindNBSRequest_FieldNumber_PageBuff,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FindNBSRequest__storage_, pageBuff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FindNBSRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FindNBSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002d\003\000\003G\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FindNBSResponse

@implementation FindNBSResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNbscount, nbscount;
@dynamic nbslistArray, nbslistArray_Count;
@dynamic hasNbsconfigCount, nbsconfigCount;
@dynamic nbsconfigListArray, nbsconfigListArray_Count;
@dynamic hasPageBuff, pageBuff;

typedef struct FindNBSResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbscount;
  uint32_t nbsconfigCount;
  BaseResponse *baseResponse;
  NSMutableArray *nbslistArray;
  NSMutableArray *nbsconfigListArray;
  SKBuiltinBuffer_t *pageBuff;
} FindNBSResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = FindNBSResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FindNBSResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbscount",
        .dataTypeSpecific.className = NULL,
        .number = FindNBSResponse_FieldNumber_Nbscount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FindNBSResponse__storage_, nbscount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nbslistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NBSInfo),
        .number = FindNBSResponse_FieldNumber_NbslistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FindNBSResponse__storage_, nbslistArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbsconfigCount",
        .dataTypeSpecific.className = NULL,
        .number = FindNBSResponse_FieldNumber_NbsconfigCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FindNBSResponse__storage_, nbsconfigCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nbsconfigListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NBSConfigInfo),
        .number = FindNBSResponse_FieldNumber_NbsconfigListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FindNBSResponse__storage_, nbsconfigListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageBuff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = FindNBSResponse_FieldNumber_PageBuff,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FindNBSResponse__storage_, pageBuff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FindNBSResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FindNBSResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002d\004\000\003\000NBSList\000\004d\n\000\005\000NBSConfigList\000\006H"
        "\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchNBSRequest

@implementation SearchNBSRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasKeyWord, keyWord;
@dynamic hasTags, tags;
@dynamic hasBizMarkets, bizMarkets;
@dynamic hasUserPos, userPos;
@dynamic hasPageBuff, pageBuff;

typedef struct SearchNBSRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *keyWord;
  NSString *tags;
  NSString *bizMarkets;
  PositionInfo *userPos;
  SKBuiltinBuffer_t *pageBuff;
} SearchNBSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SearchNBSRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchNBSRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyWord",
        .dataTypeSpecific.className = NULL,
        .number = SearchNBSRequest_FieldNumber_KeyWord,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchNBSRequest__storage_, keyWord),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tags",
        .dataTypeSpecific.className = NULL,
        .number = SearchNBSRequest_FieldNumber_Tags,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchNBSRequest__storage_, tags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bizMarkets",
        .dataTypeSpecific.className = NULL,
        .number = SearchNBSRequest_FieldNumber_BizMarkets,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchNBSRequest__storage_, bizMarkets),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userPos",
        .dataTypeSpecific.className = GPBStringifySymbol(PositionInfo),
        .number = SearchNBSRequest_FieldNumber_UserPos,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchNBSRequest__storage_, userPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageBuff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchNBSRequest_FieldNumber_PageBuff,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SearchNBSRequest__storage_, pageBuff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchNBSRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchNBSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002G\000\003D\000\004J\000\005G\000\006H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchNBSResponse

@implementation SearchNBSResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNbscount, nbscount;
@dynamic nbslistArray, nbslistArray_Count;
@dynamic hasPageBuff, pageBuff;

typedef struct SearchNBSResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbscount;
  BaseResponse *baseResponse;
  NSMutableArray *nbslistArray;
  SKBuiltinBuffer_t *pageBuff;
} SearchNBSResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SearchNBSResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchNBSResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbscount",
        .dataTypeSpecific.className = NULL,
        .number = SearchNBSResponse_FieldNumber_Nbscount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchNBSResponse__storage_, nbscount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nbslistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NBSInfo),
        .number = SearchNBSResponse_FieldNumber_NbslistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchNBSResponse__storage_, nbslistArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageBuff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchNBSResponse_FieldNumber_PageBuff,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchNBSResponse__storage_, pageBuff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchNBSResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchNBSResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002d\004\000\003\000NBSList\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNBSDetailRequest

@implementation GetNBSDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasNbsid, nbsid;

typedef struct GetNBSDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbsid;
  BaseRequest *baseRequest;
} GetNBSDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetNBSDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNBSDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbsid",
        .dataTypeSpecific.className = NULL,
        .number = GetNBSDetailRequest_FieldNumber_Nbsid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetNBSDetailRequest__storage_, nbsid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNBSDetailRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNBSDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002d\001\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNBSDetailResponse

@implementation GetNBSDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDetailInfo, detailInfo;
@dynamic hasCardInfo, cardInfo;

typedef struct GetNBSDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *detailInfo;
  NSString *cardInfo;
} GetNBSDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetNBSDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNBSDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detailInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetNBSDetailResponse_FieldNumber_DetailInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetNBSDetailResponse__storage_, detailInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetNBSDetailResponse_FieldNumber_CardInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetNBSDetailResponse__storage_, cardInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNBSDetailResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNBSDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002J\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShowcaseInfo

@implementation ShowcaseInfo

@dynamic hasObjectId, objectId;
@dynamic hasSummary, summary;

typedef struct ShowcaseInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t objectId;
  NSString *summary;
} ShowcaseInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "objectId",
        .dataTypeSpecific.className = NULL,
        .number = ShowcaseInfo_FieldNumber_ObjectId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShowcaseInfo__storage_, objectId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = NULL,
        .number = ShowcaseInfo_FieldNumber_Summary,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShowcaseInfo__storage_, summary),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShowcaseInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShowcaseInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001H\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetShowcaseInfoRequest

@implementation GetShowcaseInfoRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasNbsid, nbsid;
@dynamic hasPageBuff, pageBuff;

typedef struct GetShowcaseInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbsid;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *pageBuff;
} GetShowcaseInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetShowcaseInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetShowcaseInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbsid",
        .dataTypeSpecific.className = NULL,
        .number = GetShowcaseInfoRequest_FieldNumber_Nbsid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetShowcaseInfoRequest__storage_, nbsid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageBuff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetShowcaseInfoRequest_FieldNumber_PageBuff,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetShowcaseInfoRequest__storage_, pageBuff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetShowcaseInfoRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetShowcaseInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002d\001\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetShowcaseInfoResponse

@implementation GetShowcaseInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasObjectCount, objectCount;
@dynamic objectListArray, objectListArray_Count;
@dynamic hasPageBuff, pageBuff;

typedef struct GetShowcaseInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t objectCount;
  BaseResponse *baseResponse;
  NSMutableArray *objectListArray;
  SKBuiltinBuffer_t *pageBuff;
} GetShowcaseInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetShowcaseInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetShowcaseInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectCount",
        .dataTypeSpecific.className = NULL,
        .number = GetShowcaseInfoResponse_FieldNumber_ObjectCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetShowcaseInfoResponse__storage_, objectCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShowcaseInfo),
        .number = GetShowcaseInfoResponse_FieldNumber_ObjectListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetShowcaseInfoResponse__storage_, objectListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageBuff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetShowcaseInfoResponse_FieldNumber_PageBuff,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetShowcaseInfoResponse__storage_, pageBuff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetShowcaseInfoResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetShowcaseInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002K\000\003\000ObjectList\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetObjectDetailRequest

@implementation GetObjectDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasNbsid, nbsid;
@dynamic hasObjectId, objectId;

typedef struct GetObjectDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nbsid;
  uint32_t objectId;
  BaseRequest *baseRequest;
} GetObjectDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetObjectDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetObjectDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nbsid",
        .dataTypeSpecific.className = NULL,
        .number = GetObjectDetailRequest_FieldNumber_Nbsid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetObjectDetailRequest__storage_, nbsid),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectId",
        .dataTypeSpecific.className = NULL,
        .number = GetObjectDetailRequest_FieldNumber_ObjectId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetObjectDetailRequest__storage_, objectId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetObjectDetailRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetObjectDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002d\001\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetObjectDetailResponse

@implementation GetObjectDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDetailInfo, detailInfo;

typedef struct GetObjectDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *detailInfo;
} GetObjectDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetObjectDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetObjectDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detailInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetObjectDetailResponse_FieldNumber_DetailInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetObjectDetailResponse__storage_, detailInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetObjectDetailResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetObjectDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppCommentRequest

@implementation AppCommentRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasStatus, status;

typedef struct AppCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  BaseRequest *baseRequest;
} AppCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AppCommentRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppCommentRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = AppCommentRequest_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppCommentRequest__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppCommentRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppCommentResponse

@implementation AppCommentResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct AppCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} AppCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AppCommentResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppCommentResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppCommentResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppCommentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WebWxLoginConfirmRequest

@implementation WebWxLoginConfirmRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct WebWxLoginConfirmRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} WebWxLoginConfirmRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = WebWxLoginConfirmRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WebWxLoginConfirmRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WebWxLoginConfirmRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WebWxLoginConfirmRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WebWxLoginConfirmResponse

@implementation WebWxLoginConfirmResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct WebWxLoginConfirmResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} WebWxLoginConfirmResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = WebWxLoginConfirmResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WebWxLoginConfirmResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WebWxLoginConfirmResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WebWxLoginConfirmResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SyncCheckResponse

@implementation SyncCheckResponse

@dynamic hasErrMsg, errMsg;
@dynamic hasSignature, signature;

typedef struct SyncCheckResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *errMsg;
  NSString *signature;
} SyncCheckResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errMsg",
        .dataTypeSpecific.className = NULL,
        .number = SyncCheckResponse_FieldNumber_ErrMsg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SyncCheckResponse__storage_, errMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = SyncCheckResponse_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SyncCheckResponse__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SyncCheckResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SyncCheckResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMFriendMobileInfo

@implementation ListMFriendMobileInfo

@dynamic hasValue, value;
@dynamic hasUserName, userName;
@dynamic hasStatus, status;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasNickName, nickName;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct ListMFriendMobileInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *value;
  NSString *userName;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *nickName;
  NSString *antispamTicket;
} ListMFriendMobileInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_BigHeadImgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_SmallHeadImgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_NickName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendMobileInfo_FieldNumber_AntispamTicket,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ListMFriendMobileInfo__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMFriendMobileInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListMFriendMobileInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001E\000\002H\000\003F\000\004K!!\000\005M!!\000\006H\000\007N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMFriendReq

@implementation ListMFriendReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTicket, ticket;
@dynamic hasMobileCount, mobileCount;
@dynamic mobileListArray, mobileListArray_Count;
@dynamic hasEmailCount, emailCount;
@dynamic emailListArray, emailListArray_Count;

typedef struct ListMFriendReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mobileCount;
  uint32_t emailCount;
  BaseRequest *baseRequest;
  NSString *ticket;
  NSMutableArray *mobileListArray;
  NSMutableArray *emailListArray;
} ListMFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ListMFriendReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListMFriendReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendReq_FieldNumber_Ticket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListMFriendReq__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobileCount",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendReq_FieldNumber_MobileCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListMFriendReq__storage_, mobileCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobileListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = ListMFriendReq_FieldNumber_MobileListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListMFriendReq__storage_, mobileListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emailCount",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendReq_FieldNumber_EmailCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ListMFriendReq__storage_, emailCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "emailListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = ListMFriendReq_FieldNumber_EmailListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListMFriendReq__storage_, emailListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMFriendReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListMFriendReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002F\000\003K\000\004\000MobileList\000\005b\010\000\006\000EMailList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMFriendResp

@implementation ListMFriendResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTicket, ticket;
@dynamic hasMobileCount, mobileCount;
@dynamic mobileInfoArray, mobileInfoArray_Count;
@dynamic hasEmailCount, emailCount;
@dynamic emailInfoArray, emailInfoArray_Count;

typedef struct ListMFriendResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mobileCount;
  uint32_t emailCount;
  BaseResponse *baseResponse;
  NSString *ticket;
  NSMutableArray *mobileInfoArray;
  NSMutableArray *emailInfoArray;
} ListMFriendResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ListMFriendResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListMFriendResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendResp_FieldNumber_Ticket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListMFriendResp__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobileCount",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendResp_FieldNumber_MobileCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListMFriendResp__storage_, mobileCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobileInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ListMFriendMobileInfo),
        .number = ListMFriendResp_FieldNumber_MobileInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListMFriendResp__storage_, mobileInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emailCount",
        .dataTypeSpecific.className = NULL,
        .number = ListMFriendResp_FieldNumber_EmailCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ListMFriendResp__storage_, emailCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "emailInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ListMFriendMobileInfo),
        .number = ListMFriendResp_FieldNumber_EmailInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListMFriendResp__storage_, emailInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMFriendResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListMFriendResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002F\000\003K\000\004\000MobileInfo\000\005b\010\000\006\000EMailInfo\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendSmsToMFriendReq

@implementation SendSmsToMFriendReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTicket, ticket;
@dynamic hasMobileCount, mobileCount;
@dynamic mobileListArray, mobileListArray_Count;

typedef struct SendSmsToMFriendReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mobileCount;
  BaseRequest *baseRequest;
  NSString *ticket;
  NSMutableArray *mobileListArray;
} SendSmsToMFriendReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendSmsToMFriendReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendSmsToMFriendReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = SendSmsToMFriendReq_FieldNumber_Ticket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendSmsToMFriendReq__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobileCount",
        .dataTypeSpecific.className = NULL,
        .number = SendSmsToMFriendReq_FieldNumber_MobileCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendSmsToMFriendReq__storage_, mobileCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobileListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SendSmsToMFriendReq_FieldNumber_MobileListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SendSmsToMFriendReq__storage_, mobileListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendSmsToMFriendReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendSmsToMFriendReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003K\000\004\000MobileList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendSmsToMFriendResp

@implementation SendSmsToMFriendResp

@dynamic hasBaseResponse, baseResponse;

typedef struct SendSmsToMFriendResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendSmsToMFriendResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendSmsToMFriendResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendSmsToMFriendResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendSmsToMFriendResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendSmsToMFriendResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendPhoto2FBWallRequest

@implementation SendPhoto2FBWallRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMessage, message;
@dynamic hasPicture, picture;
@dynamic hasLink, link;
@dynamic hasName, name;
@dynamic hasDescription_p, description_p;
@dynamic hasCaption, caption;

typedef struct SendPhoto2FBWallRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *message;
  NSString *picture;
  NSString *name;
  NSString *link;
  NSString *description_p;
  NSString *caption;
} SendPhoto2FBWallRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendPhoto2FBWallRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendPhoto2FBWallRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = SendPhoto2FBWallRequest_FieldNumber_Picture,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, picture),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SendPhoto2FBWallRequest_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = SendPhoto2FBWallRequest_FieldNumber_Link,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, link),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = SendPhoto2FBWallRequest_FieldNumber_Description_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "caption",
        .dataTypeSpecific.className = NULL,
        .number = SendPhoto2FBWallRequest_FieldNumber_Caption,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallRequest__storage_, caption),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendPhoto2FBWallRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendPhoto2FBWallRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002G\000\003G\000\004D\000\005D\000\006\000Description\000\007G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendPhoto2FBWallResp

@implementation SendPhoto2FBWallResp

@dynamic hasBaseResponse, baseResponse;

typedef struct SendPhoto2FBWallResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendPhoto2FBWallResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendPhoto2FBWallResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendPhoto2FBWallResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendPhoto2FBWallResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendPhoto2FBWallResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchOrRecommendItem

@implementation SearchOrRecommendItem

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasSex, sex;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasPersonalCard, personalCard;
@dynamic hasVerifyFlag, verifyFlag;
@dynamic hasVerifyInfo, verifyInfo;
@dynamic hasWeibo, weibo;
@dynamic hasAlias, alias;
@dynamic hasWeiboNickname, weiboNickname;
@dynamic hasWeiboFlag, weiboFlag;
@dynamic hasCountry, country;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;

typedef struct SearchOrRecommendItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t personalCard;
  uint32_t verifyFlag;
  uint32_t weiboFlag;
  SKBuiltinString_t *userName;
  SKBuiltinString_t *nickName;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *verifyInfo;
  NSString *weibo;
  NSString *alias;
  NSString *weiboNickname;
  NSString *country;
  CustomizedInfo *customizedInfo;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
} SearchOrRecommendItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchOrRecommendItem_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchOrRecommendItem_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_Province,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_City,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_Signature,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "personalCard",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_PersonalCard,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, personalCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_VerifyFlag,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, verifyFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfo",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_VerifyInfo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, verifyInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weibo",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_Weibo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, weibo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_Alias,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboNickname",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_WeiboNickname,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, weiboNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_WeiboFlag,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, weiboFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_Country,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = SearchOrRecommendItem_FieldNumber_CustomizedInfo,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_BigHeadImgURL,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendItem_FieldNumber_SmallHeadImgURL,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SearchOrRecommendItem__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchOrRecommendItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchOrRecommendItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\021\001H\000\002H\000\003C\000\004H\000\005D\000\006I\000\007L\000\010J\000\tJ\000\nE\000\013E\000\014M\000\rI\000"
        "\016G\000\017N\000\020K!!\000\021M!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchOrRecommendBizRequest

@implementation SearchOrRecommendBizRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasNickName, nickName;
@dynamic hasOpCode, opCode;
@dynamic hasEntryFlag, entryFlag;
@dynamic hasReqBuf, reqBuf;

typedef struct SearchOrRecommendBizRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t entryFlag;
  BaseRequest *baseRequest;
  SKBuiltinString_t *nickName;
  SKBuiltinBuffer_t *reqBuf;
} SearchOrRecommendBizRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SearchOrRecommendBizRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchOrRecommendBizRequest_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizRequest__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendBizRequest_FieldNumber_OpCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "entryFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendBizRequest_FieldNumber_EntryFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizRequest__storage_, entryFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reqBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchOrRecommendBizRequest_FieldNumber_ReqBuf,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizRequest__storage_, reqBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchOrRecommendBizRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchOrRecommendBizRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002H\000\003F\000\004I\000\005F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchOrRecommendBizResp

@implementation SearchOrRecommendBizResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasBizCount, bizCount;
@dynamic bizListArray, bizListArray_Count;
@dynamic hasShowFlag, showFlag;
@dynamic hasIsEnd, isEnd;
@dynamic hasResBuf, resBuf;

typedef struct SearchOrRecommendBizResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t bizCount;
  uint32_t showFlag;
  uint32_t isEnd;
  BaseResponse *baseResponse;
  NSMutableArray *bizListArray;
  SKBuiltinBuffer_t *resBuf;
} SearchOrRecommendBizResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SearchOrRecommendBizResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bizCount",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendBizResp_FieldNumber_BizCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizResp__storage_, bizCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bizListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchOrRecommendItem),
        .number = SearchOrRecommendBizResp_FieldNumber_BizListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizResp__storage_, bizListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "showFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendBizResp_FieldNumber_ShowFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizResp__storage_, showFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isEnd",
        .dataTypeSpecific.className = NULL,
        .number = SearchOrRecommendBizResp_FieldNumber_IsEnd,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizResp__storage_, isEnd),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchOrRecommendBizResp_FieldNumber_ResBuf,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchOrRecommendBizResp__storage_, resBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchOrRecommendBizResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchOrRecommendBizResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002H\000\003\000BizList\000\004H\000\005E\000\006F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupRecommendBizRequest

@implementation GroupRecommendBizRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct GroupRecommendBizRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GroupRecommendBizRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GroupRecommendBizRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupRecommendBizRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupRecommendBizRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupRecommendBizRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecommendGroup

@implementation RecommendGroup

@dynamic hasGroupName, groupName;
@dynamic hasMemCount, memCount;
@dynamic membersArray, membersArray_Count;

typedef struct RecommendGroup__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memCount;
  SKBuiltinString_t *groupName;
  NSMutableArray *membersArray;
} RecommendGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RecommendGroup_FieldNumber_GroupName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecommendGroup__storage_, groupName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memCount",
        .dataTypeSpecific.className = NULL,
        .number = RecommendGroup_FieldNumber_MemCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RecommendGroup__storage_, memCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchOrRecommendItem),
        .number = RecommendGroup_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RecommendGroup__storage_, membersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecommendGroup class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecommendGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001I\000\002H\000\003\000Members\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecommendGroups

@implementation RecommendGroups

@dynamic hasGroupCount, groupCount;
@dynamic groupsArray, groupsArray_Count;

typedef struct RecommendGroups__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupCount;
  NSMutableArray *groupsArray;
} RecommendGroups__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupCount",
        .dataTypeSpecific.className = NULL,
        .number = RecommendGroups_FieldNumber_GroupCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecommendGroups__storage_, groupCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RecommendGroup),
        .number = RecommendGroups_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RecommendGroups__storage_, groupsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecommendGroups class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecommendGroups__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001J\000\002\000Groups\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupRecommendBizResp

@implementation GroupRecommendBizResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasGroupList, groupList;

typedef struct GroupRecommendBizResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  RecommendGroups *groupList;
} GroupRecommendBizResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GroupRecommendBizResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupRecommendBizResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupList",
        .dataTypeSpecific.className = GPBStringifySymbol(RecommendGroups),
        .number = GroupRecommendBizResp_FieldNumber_GroupList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupRecommendBizResp__storage_, groupList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupRecommendBizResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupRecommendBizResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralShareBaseInfo

@implementation GeneralShareBaseInfo

@dynamic hasDestType, destType;

typedef struct GeneralShareBaseInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t destType;
} GeneralShareBaseInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "destType",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareBaseInfo_FieldNumber_DestType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralShareBaseInfo__storage_, destType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralShareBaseInfo class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralShareBaseInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralShareContent

@implementation GeneralShareContent

@dynamic hasContentType, contentType;
@dynamic hasTitle, title;
@dynamic hasContent, content;
@dynamic hasDescription_p, description_p;
@dynamic hasImageURL, imageURL;
@dynamic hasLinkURL, linkURL;
@dynamic hasDataURL, dataURL;
@dynamic hasExtInfo, extInfo;

typedef struct GeneralShareContent__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contentType;
  NSString *title;
  NSString *content;
  NSString *description_p;
  NSString *imageURL;
  NSString *linkURL;
  NSString *dataURL;
  NSString *extInfo;
} GeneralShareContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_ContentType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_ImageURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "linkURL",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_LinkURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, linkURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataURL",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_DataURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, dataURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = GeneralShareContent_FieldNumber_ExtInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GeneralShareContent__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralShareContent class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralShareContent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\013\000\002E\000\003G\000\004\000Description\000\005F!!\000\006E!!\000\007E!!\000\010"
        "G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralShareRequest

@implementation GeneralShareRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBaseInfo, baseInfo;
@dynamic hasContent, content;

typedef struct GeneralShareRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  GeneralShareBaseInfo *baseInfo;
  GeneralShareContent *content;
} GeneralShareRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GeneralShareRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralShareRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(GeneralShareBaseInfo),
        .number = GeneralShareRequest_FieldNumber_BaseInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GeneralShareRequest__storage_, baseInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(GeneralShareContent),
        .number = GeneralShareRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GeneralShareRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralShareRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralShareRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralShareResponse

@implementation GeneralShareResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct GeneralShareResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} GeneralShareResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GeneralShareResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralShareResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralShareResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralShareResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HardDeviceAttr

@implementation HardDeviceAttr

@dynamic hasBrandName, brandName;
@dynamic hasAuthKey, authKey;
@dynamic hasMac, mac;
@dynamic hasConnProto, connProto;
@dynamic hasConnStrategy, connStrategy;
@dynamic hasCloseStrategy, closeStrategy;
@dynamic hasManuMacPos, manuMacPos;
@dynamic hasSerMacPos, serMacPos;
@dynamic hasHardDeviceAttrDesc, hardDeviceAttrDesc;
@dynamic hasAlias, alias;
@dynamic hasIconURL, iconURL;
@dynamic hasJumpURL, jumpURL;
@dynamic hasDeviceTitle, deviceTitle;
@dynamic hasDeviceDesc, deviceDesc;
@dynamic hasCategory, category;
@dynamic hasDeviceTypeMainDevice, deviceTypeMainDevice;
@dynamic hasIsEnterMyDevice, isEnterMyDevice;
@dynamic hasBleSimpleProtocol, bleSimpleProtocol;

typedef struct HardDeviceAttr__storage_ {
  uint32_t _has_storage_[1];
  uint32_t connStrategy;
  uint32_t closeStrategy;
  int32_t manuMacPos;
  int32_t serMacPos;
  uint32_t deviceTypeMainDevice;
  uint32_t isEnterMyDevice;
  NSString *brandName;
  NSString *authKey;
  NSString *mac;
  NSString *connProto;
  NSString *hardDeviceAttrDesc;
  NSString *alias;
  NSString *iconURL;
  NSString *jumpURL;
  NSString *deviceTitle;
  NSString *deviceDesc;
  NSString *category;
  int64_t bleSimpleProtocol;
} HardDeviceAttr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "brandName",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_BrandName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, brandName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authKey",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_AuthKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, authKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mac",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_Mac,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, mac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connProto",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_ConnProto,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, connProto),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connStrategy",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_ConnStrategy,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, connStrategy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "closeStrategy",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_CloseStrategy,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, closeStrategy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "manuMacPos",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_ManuMacPos,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, manuMacPos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serMacPos",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_SerMacPos,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, serMacPos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hardDeviceAttrDesc",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_HardDeviceAttrDesc,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, hardDeviceAttrDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_Alias,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_IconURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jumpURL",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_JumpURL,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, jumpURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceTitle",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_DeviceTitle,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, deviceTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceDesc",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_DeviceDesc,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, deviceDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_Category,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceTypeMainDevice",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_DeviceTypeMainDevice,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, deviceTypeMainDevice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isEnterMyDevice",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_IsEnterMyDevice,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, isEnterMyDevice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bleSimpleProtocol",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAttr_FieldNumber_BleSimpleProtocol,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(HardDeviceAttr__storage_, bleSimpleProtocol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HardDeviceAttr class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HardDeviceAttr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\022\001I\000\002G\000\003C\000\004I\000\005L\000\006M\000\007J\000\010I\000\tR\000\nE\000\013E!!\000\014E!!"
        "\000\rK\000\016J\000\017H\000\020T\000\021\017\000\022\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModHardDevice

@implementation ModHardDevice

@dynamic hasHardDevice, hardDevice;
@dynamic hasHardDeviceAttr, hardDeviceAttr;
@dynamic hasBindFlag, bindFlag;

typedef struct ModHardDevice__storage_ {
  uint32_t _has_storage_[1];
  uint32_t bindFlag;
  HardDevice *hardDevice;
  HardDeviceAttr *hardDeviceAttr;
} ModHardDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hardDevice",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDevice),
        .number = ModHardDevice_FieldNumber_HardDevice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModHardDevice__storage_, hardDevice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDeviceAttr",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDeviceAttr),
        .number = ModHardDevice_FieldNumber_HardDeviceAttr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModHardDevice__storage_, hardDeviceAttr),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bindFlag",
        .dataTypeSpecific.className = NULL,
        .number = ModHardDevice_FieldNumber_BindFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ModHardDevice__storage_, bindFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModHardDevice class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModHardDevice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001J\000\002N\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HardDeviceMsg

@implementation HardDeviceMsg

@dynamic hasSessionId, sessionId;
@dynamic hasCreateTime, createTime;
@dynamic hasBuffer, buffer;
@dynamic hasType, type;

typedef struct HardDeviceMsg__storage_ {
  uint32_t _has_storage_[1];
  uint32_t createTime;
  uint32_t type;
  SKBuiltinBuffer_t *buffer;
  uint64_t sessionId;
} HardDeviceMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceMsg_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HardDeviceMsg__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceMsg_FieldNumber_CreateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HardDeviceMsg__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = HardDeviceMsg_FieldNumber_Buffer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HardDeviceMsg__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceMsg_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HardDeviceMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HardDeviceMsg class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HardDeviceMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001HA\000\002J\000\003F\000\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HardDeviceAuthRequest

@implementation HardDeviceAuthRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasHardDevice, hardDevice;
@dynamic hasAuthVer, authVer;
@dynamic hasAuthBuffer, authBuffer;

typedef struct HardDeviceAuthRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t authVer;
  BaseRequest *baseRequest;
  HardDevice *hardDevice;
  SKBuiltinBuffer_t *authBuffer;
} HardDeviceAuthRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = HardDeviceAuthRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HardDeviceAuthRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDevice",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDevice),
        .number = HardDeviceAuthRequest_FieldNumber_HardDevice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HardDeviceAuthRequest__storage_, hardDevice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authVer",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAuthRequest_FieldNumber_AuthVer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HardDeviceAuthRequest__storage_, authVer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "authBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = HardDeviceAuthRequest_FieldNumber_AuthBuffer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HardDeviceAuthRequest__storage_, authBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HardDeviceAuthRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HardDeviceAuthRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002J\000\003G\000\004J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HardDeviceAuthResponse

@implementation HardDeviceAuthResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSessionKey, sessionKey;
@dynamic hasSessionBuffer, sessionBuffer;
@dynamic hasKeyBuffer, keyBuffer;
@dynamic hasCacheTimeout, cacheTimeout;
@dynamic hasBlockTimeout, blockTimeout;
@dynamic hasCryptMethod, cryptMethod;

typedef struct HardDeviceAuthResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cacheTimeout;
  uint32_t blockTimeout;
  uint32_t cryptMethod;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *sessionKey;
  SKBuiltinBuffer_t *sessionBuffer;
  SKBuiltinBuffer_t *keyBuffer;
} HardDeviceAuthResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = HardDeviceAuthResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = HardDeviceAuthResponse_FieldNumber_SessionKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, sessionKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = HardDeviceAuthResponse_FieldNumber_SessionBuffer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, sessionBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = HardDeviceAuthResponse_FieldNumber_KeyBuffer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, keyBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cacheTimeout",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAuthResponse_FieldNumber_CacheTimeout,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, cacheTimeout),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "blockTimeout",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAuthResponse_FieldNumber_BlockTimeout,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, blockTimeout),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cryptMethod",
        .dataTypeSpecific.className = NULL,
        .number = HardDeviceAuthResponse_FieldNumber_CryptMethod,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HardDeviceAuthResponse__storage_, cryptMethod),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HardDeviceAuthResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HardDeviceAuthResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001L\000\002J\000\003M\000\004I\000\005L\000\006L\000\007K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BindHardDeviceRequest

@implementation BindHardDeviceRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBindTicket, bindTicket;

typedef struct BindHardDeviceRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *bindTicket;
} BindHardDeviceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BindHardDeviceRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BindHardDeviceRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bindTicket",
        .dataTypeSpecific.className = NULL,
        .number = BindHardDeviceRequest_FieldNumber_BindTicket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BindHardDeviceRequest__storage_, bindTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BindHardDeviceRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BindHardDeviceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\004J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BindHardDeviceResponse

@implementation BindHardDeviceResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasHardDevice, hardDevice;
@dynamic hasHardDeviceAttr, hardDeviceAttr;
@dynamic hasFlag, flag;

typedef struct BindHardDeviceResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t flag;
  BaseResponse *baseResponse;
  HardDevice *hardDevice;
  HardDeviceAttr *hardDeviceAttr;
} BindHardDeviceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BindHardDeviceResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BindHardDeviceResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDevice",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDevice),
        .number = BindHardDeviceResponse_FieldNumber_HardDevice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BindHardDeviceResponse__storage_, hardDevice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDeviceAttr",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDeviceAttr),
        .number = BindHardDeviceResponse_FieldNumber_HardDeviceAttr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BindHardDeviceResponse__storage_, hardDeviceAttr),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = BindHardDeviceResponse_FieldNumber_Flag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BindHardDeviceResponse__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BindHardDeviceResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BindHardDeviceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002J\000\003N\000\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendHardDeviceMsgRequest

@implementation SendHardDeviceMsgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasHardDevice, hardDevice;
@dynamic hasHardDeviceMsg, hardDeviceMsg;
@dynamic hasSessionBuffer, sessionBuffer;

typedef struct SendHardDeviceMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  HardDevice *hardDevice;
  HardDeviceMsg *hardDeviceMsg;
  SKBuiltinBuffer_t *sessionBuffer;
} SendHardDeviceMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendHardDeviceMsgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendHardDeviceMsgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDevice",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDevice),
        .number = SendHardDeviceMsgRequest_FieldNumber_HardDevice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendHardDeviceMsgRequest__storage_, hardDevice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDeviceMsg",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDeviceMsg),
        .number = SendHardDeviceMsgRequest_FieldNumber_HardDeviceMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendHardDeviceMsgRequest__storage_, hardDeviceMsg),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SendHardDeviceMsgRequest_FieldNumber_SessionBuffer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendHardDeviceMsgRequest__storage_, sessionBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendHardDeviceMsgRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendHardDeviceMsgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002J\000\003M\000\004M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendHardDeviceMsgResponse

@implementation SendHardDeviceMsgResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct SendHardDeviceMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SendHardDeviceMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendHardDeviceMsgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendHardDeviceMsgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendHardDeviceMsgResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendHardDeviceMsgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnbindHardDeviceRequest

@implementation UnbindHardDeviceRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasHardDevice, hardDevice;
@dynamic hasFlag, flag;

typedef struct UnbindHardDeviceRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t flag;
  BaseRequest *baseRequest;
  HardDevice *hardDevice;
} UnbindHardDeviceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UnbindHardDeviceRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnbindHardDeviceRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDevice",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDevice),
        .number = UnbindHardDeviceRequest_FieldNumber_HardDevice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnbindHardDeviceRequest__storage_, hardDevice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = UnbindHardDeviceRequest_FieldNumber_Flag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UnbindHardDeviceRequest__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnbindHardDeviceRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnbindHardDeviceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002J\000\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnbindHardDeviceResponse

@implementation UnbindHardDeviceResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFlag, flag;

typedef struct UnbindHardDeviceResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t flag;
  BaseResponse *baseResponse;
} UnbindHardDeviceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UnbindHardDeviceResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnbindHardDeviceResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = UnbindHardDeviceResponse_FieldNumber_Flag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnbindHardDeviceResponse__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnbindHardDeviceResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnbindHardDeviceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\004D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBoundHardDevicesRequest

@implementation GetBoundHardDevicesRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasVersion, version;

typedef struct GetBoundHardDevicesRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  BaseRequest *baseRequest;
} GetBoundHardDevicesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetBoundHardDevicesRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = GetBoundHardDevicesRequest_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesRequest__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBoundHardDevicesRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBoundHardDevicesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBoundHardDevicesResponse

@implementation GetBoundHardDevicesResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic deviceListArray, deviceListArray_Count;
@dynamic hasVersion, version;
@dynamic hasContinueFlag, continueFlag;

typedef struct GetBoundHardDevicesResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t version;
  uint32_t continueFlag;
  BaseResponse *baseResponse;
  NSMutableArray *deviceListArray;
} GetBoundHardDevicesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetBoundHardDevicesResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetBoundHardDevicesResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "deviceListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ModHardDevice),
        .number = GetBoundHardDevicesResponse_FieldNumber_DeviceListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesResponse__storage_, deviceListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = GetBoundHardDevicesResponse_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesResponse__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetBoundHardDevicesResponse_FieldNumber_ContinueFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetBoundHardDevicesResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBoundHardDevicesResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBoundHardDevicesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002E\000\005\000DeviceList\000\006G\000\007L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchHardDeviceRequest

@implementation SearchHardDeviceRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasHardDeviceQrcode, hardDeviceQrcode;

typedef struct SearchHardDeviceRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *hardDeviceQrcode;
} SearchHardDeviceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SearchHardDeviceRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchHardDeviceRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDeviceQrcode",
        .dataTypeSpecific.className = NULL,
        .number = SearchHardDeviceRequest_FieldNumber_HardDeviceQrcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchHardDeviceRequest__storage_, hardDeviceQrcode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchHardDeviceRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchHardDeviceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002Kb\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchHardDeviceResponse

@implementation SearchHardDeviceResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasContact, contact;
@dynamic hasHardDevice, hardDevice;
@dynamic hasHardDeviceAttr, hardDeviceAttr;
@dynamic hasBindTicket, bindTicket;

typedef struct SearchHardDeviceResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  ModContact *contact;
  HardDevice *hardDevice;
  HardDeviceAttr *hardDeviceAttr;
  NSString *bindTicket;
} SearchHardDeviceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SearchHardDeviceResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchHardDeviceResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contact",
        .dataTypeSpecific.className = GPBStringifySymbol(ModContact),
        .number = SearchHardDeviceResponse_FieldNumber_Contact,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchHardDeviceResponse__storage_, contact),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDevice",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDevice),
        .number = SearchHardDeviceResponse_FieldNumber_HardDevice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchHardDeviceResponse__storage_, hardDevice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hardDeviceAttr",
        .dataTypeSpecific.className = GPBStringifySymbol(HardDeviceAttr),
        .number = SearchHardDeviceResponse_FieldNumber_HardDeviceAttr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchHardDeviceResponse__storage_, hardDeviceAttr),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bindTicket",
        .dataTypeSpecific.className = NULL,
        .number = SearchHardDeviceResponse_FieldNumber_BindTicket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchHardDeviceResponse__storage_, bindTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchHardDeviceResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchHardDeviceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002G\000\003J\000\004N\000\005J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoiceTransRes

@implementation VoiceTransRes

@dynamic hasSequence, sequence;
@dynamic hasEndFlag, endFlag;
@dynamic hasResult, result;

typedef struct VoiceTransRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sequence;
  uint32_t endFlag;
  NSString *result;
} VoiceTransRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.className = NULL,
        .number = VoiceTransRes_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoiceTransRes__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endFlag",
        .dataTypeSpecific.className = NULL,
        .number = VoiceTransRes_FieldNumber_EndFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoiceTransRes__storage_, endFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = VoiceTransRes_FieldNumber_Result,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoiceTransRes__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoiceTransRes class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoiceTransRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002G\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadVoiceCtx

@implementation UploadVoiceCtx

@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasDataLen, dataLen;

typedef struct UploadVoiceCtx__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t dataLen;
} UploadVoiceCtx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadVoiceCtx_FieldNumber_TotalLen,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadVoiceCtx__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadVoiceCtx_FieldNumber_StartPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadVoiceCtx__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadVoiceCtx_FieldNumber_DataLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadVoiceCtx__storage_, dataLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadVoiceCtx class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadVoiceCtx__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002H\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryResCtx

@implementation QueryResCtx

@dynamic hasInterval, interval;

typedef struct QueryResCtx__storage_ {
  uint32_t _has_storage_[1];
  uint32_t interval;
} QueryResCtx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "interval",
        .dataTypeSpecific.className = NULL,
        .number = QueryResCtx_FieldNumber_Interval,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryResCtx__storage_, interval),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryResCtx class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryResCtx__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoiceAttr

@implementation VoiceAttr

@dynamic hasFileType, fileType;
@dynamic hasEncodeType, encodeType;
@dynamic hasSampleRate, sampleRate;
@dynamic hasBitsPerSample, bitsPerSample;

typedef struct VoiceAttr__storage_ {
  uint32_t _has_storage_[1];
  int32_t fileType;
  int32_t encodeType;
  int32_t sampleRate;
  int32_t bitsPerSample;
} VoiceAttr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileType",
        .dataTypeSpecific.className = NULL,
        .number = VoiceAttr_FieldNumber_FileType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoiceAttr__storage_, fileType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "encodeType",
        .dataTypeSpecific.className = NULL,
        .number = VoiceAttr_FieldNumber_EncodeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoiceAttr__storage_, encodeType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sampleRate",
        .dataTypeSpecific.className = NULL,
        .number = VoiceAttr_FieldNumber_SampleRate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoiceAttr__storage_, sampleRate),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bitsPerSample",
        .dataTypeSpecific.className = NULL,
        .number = VoiceAttr_FieldNumber_BitsPerSample,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoiceAttr__storage_, bitsPerSample),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoiceAttr class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoiceAttr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002J\000\003J\000\004M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckVoiceTransRequest

@implementation CheckVoiceTransRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasVoiceId, voiceId;
@dynamic hasTotalLen, totalLen;
@dynamic hasMsgId, msgId;
@dynamic hasVoiceAttr, voiceAttr;
@dynamic hasNewMsgId, newMsgId;

typedef struct CheckVoiceTransRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t msgId;
  BaseRequest *baseRequest;
  NSString *voiceId;
  VoiceAttr *voiceAttr;
  uint64_t newMsgId;
} CheckVoiceTransRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CheckVoiceTransRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckVoiceTransRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceId",
        .dataTypeSpecific.className = NULL,
        .number = CheckVoiceTransRequest_FieldNumber_VoiceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckVoiceTransRequest__storage_, voiceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = CheckVoiceTransRequest_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CheckVoiceTransRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = CheckVoiceTransRequest_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CheckVoiceTransRequest__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "voiceAttr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoiceAttr),
        .number = CheckVoiceTransRequest_FieldNumber_VoiceAttr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CheckVoiceTransRequest__storage_, voiceAttr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newMsgId",
        .dataTypeSpecific.className = NULL,
        .number = CheckVoiceTransRequest_FieldNumber_NewMsgId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CheckVoiceTransRequest__storage_, newMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckVoiceTransRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckVoiceTransRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002G\000\003H\000\004E\000\005I\000\006H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckVoiceTransResponse

@implementation CheckVoiceTransResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasStatus, status;
@dynamic hasTransRes, transRes;
@dynamic hasUploadCtx, uploadCtx;
@dynamic hasQueryCtx, queryCtx;
@dynamic hasNotifyId, notifyId;

typedef struct CheckVoiceTransResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  uint32_t notifyId;
  BaseResponse *baseResponse;
  VoiceTransRes *transRes;
  UploadVoiceCtx *uploadCtx;
  QueryResCtx *queryCtx;
} CheckVoiceTransResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CheckVoiceTransResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckVoiceTransResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CheckVoiceTransResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckVoiceTransResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "transRes",
        .dataTypeSpecific.className = GPBStringifySymbol(VoiceTransRes),
        .number = CheckVoiceTransResponse_FieldNumber_TransRes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CheckVoiceTransResponse__storage_, transRes),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uploadCtx",
        .dataTypeSpecific.className = GPBStringifySymbol(UploadVoiceCtx),
        .number = CheckVoiceTransResponse_FieldNumber_UploadCtx,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CheckVoiceTransResponse__storage_, uploadCtx),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "queryCtx",
        .dataTypeSpecific.className = GPBStringifySymbol(QueryResCtx),
        .number = CheckVoiceTransResponse_FieldNumber_QueryCtx,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CheckVoiceTransResponse__storage_, queryCtx),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notifyId",
        .dataTypeSpecific.className = NULL,
        .number = CheckVoiceTransResponse_FieldNumber_NotifyId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CheckVoiceTransResponse__storage_, notifyId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckVoiceTransResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckVoiceTransResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002F\000\003H\000\004I\000\005H\000\006H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadVoiceForTransRequest

@implementation UploadVoiceForTransRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasVoiceId, voiceId;
@dynamic hasVoiceAttr, voiceAttr;
@dynamic hasUploadCtx, uploadCtx;
@dynamic hasData_p, data_p;

typedef struct UploadVoiceForTransRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *voiceId;
  VoiceAttr *voiceAttr;
  UploadVoiceCtx *uploadCtx;
  SKBuiltinBuffer_t *data_p;
} UploadVoiceForTransRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UploadVoiceForTransRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadVoiceForTransRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceId",
        .dataTypeSpecific.className = NULL,
        .number = UploadVoiceForTransRequest_FieldNumber_VoiceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadVoiceForTransRequest__storage_, voiceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "voiceAttr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoiceAttr),
        .number = UploadVoiceForTransRequest_FieldNumber_VoiceAttr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadVoiceForTransRequest__storage_, voiceAttr),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uploadCtx",
        .dataTypeSpecific.className = GPBStringifySymbol(UploadVoiceCtx),
        .number = UploadVoiceForTransRequest_FieldNumber_UploadCtx,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadVoiceForTransRequest__storage_, uploadCtx),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UploadVoiceForTransRequest_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadVoiceForTransRequest__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadVoiceForTransRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadVoiceForTransRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002G\000\003I\000\004I\000\005\000Data\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadVoiceForTransResponse

@implementation UploadVoiceForTransResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasUploadCtx, uploadCtx;

typedef struct UploadVoiceForTransResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  UploadVoiceCtx *uploadCtx;
} UploadVoiceForTransResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UploadVoiceForTransResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadVoiceForTransResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uploadCtx",
        .dataTypeSpecific.className = GPBStringifySymbol(UploadVoiceCtx),
        .number = UploadVoiceForTransResponse_FieldNumber_UploadCtx,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadVoiceForTransResponse__storage_, uploadCtx),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadVoiceForTransResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadVoiceForTransResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoiceTransResRequest

@implementation GetVoiceTransResRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasVoiceId, voiceId;

typedef struct GetVoiceTransResRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *voiceId;
} GetVoiceTransResRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetVoiceTransResRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoiceTransResRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceId",
        .dataTypeSpecific.className = NULL,
        .number = GetVoiceTransResRequest_FieldNumber_VoiceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoiceTransResRequest__storage_, voiceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoiceTransResRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoiceTransResRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoiceTransResResponse

@implementation GetVoiceTransResResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTransRes, transRes;
@dynamic hasQueryCtx, queryCtx;

typedef struct GetVoiceTransResResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  VoiceTransRes *transRes;
  QueryResCtx *queryCtx;
} GetVoiceTransResResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetVoiceTransResResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoiceTransResResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transRes",
        .dataTypeSpecific.className = GPBStringifySymbol(VoiceTransRes),
        .number = GetVoiceTransResResponse_FieldNumber_TransRes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoiceTransResResponse__storage_, transRes),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "queryCtx",
        .dataTypeSpecific.className = GPBStringifySymbol(QueryResCtx),
        .number = GetVoiceTransResResponse_FieldNumber_QueryCtx,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVoiceTransResResponse__storage_, queryCtx),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoiceTransResResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoiceTransResResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002H\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WhatsNewsRequest

@implementation WhatsNewsRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct WhatsNewsRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} WhatsNewsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = WhatsNewsRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WhatsNewsRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WhatsNewsRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WhatsNewsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WhatsNewsResponse

@implementation WhatsNewsResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRegistTime, registTime;
@dynamic hasFstSnstime, fstSnstime;
@dynamic hasCount, count;
@dynamic picURLListArray, picURLListArray_Count;

typedef struct WhatsNewsResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t registTime;
  uint32_t fstSnstime;
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *picURLListArray;
} WhatsNewsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = WhatsNewsResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WhatsNewsResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "registTime",
        .dataTypeSpecific.className = NULL,
        .number = WhatsNewsResponse_FieldNumber_RegistTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WhatsNewsResponse__storage_, registTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fstSnstime",
        .dataTypeSpecific.className = NULL,
        .number = WhatsNewsResponse_FieldNumber_FstSnstime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WhatsNewsResponse__storage_, fstSnstime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = WhatsNewsResponse_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WhatsNewsResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "picURLListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = WhatsNewsResponse_FieldNumber_PicURLListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WhatsNewsResponse__storage_, picURLListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WhatsNewsResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WhatsNewsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002J\000\003Dc\003\000\004E\000\005\000PicUrlList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommVerifyUserTicket

@implementation CommVerifyUserTicket

@dynamic hasTicketType, ticketType;
@dynamic hasSource, source;
@dynamic hasFromUin, fromUin;
@dynamic hasToUin, toUin;
@dynamic hasExtInfo, extInfo;
@dynamic hasTimeStamp, timeStamp;
@dynamic hasFriendFlag, friendFlag;

typedef struct CommVerifyUserTicket__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ticketType;
  uint32_t source;
  uint32_t fromUin;
  uint32_t toUin;
  uint32_t timeStamp;
  uint32_t friendFlag;
  SKBuiltinString_t *extInfo;
} CommVerifyUserTicket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ticketType",
        .dataTypeSpecific.className = NULL,
        .number = CommVerifyUserTicket_FieldNumber_TicketType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, ticketType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = CommVerifyUserTicket_FieldNumber_Source,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fromUin",
        .dataTypeSpecific.className = NULL,
        .number = CommVerifyUserTicket_FieldNumber_FromUin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, fromUin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "toUin",
        .dataTypeSpecific.className = NULL,
        .number = CommVerifyUserTicket_FieldNumber_ToUin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, toUin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CommVerifyUserTicket_FieldNumber_ExtInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = CommVerifyUserTicket_FieldNumber_TimeStamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "friendFlag",
        .dataTypeSpecific.className = NULL,
        .number = CommVerifyUserTicket_FieldNumber_FriendFlag,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CommVerifyUserTicket__storage_, friendFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommVerifyUserTicket class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommVerifyUserTicket__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001J\000\002F\000\003G\000\004E\000\005G\000\006I\000\007J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TranslateOrgMsg

@implementation TranslateOrgMsg

@dynamic hasClientMsgId, clientMsgId;
@dynamic hasTextMsg, textMsg;
@dynamic hasChatRoomId, chatRoomId;
@dynamic hasScene, scene;

typedef struct TranslateOrgMsg__storage_ {
  uint32_t _has_storage_[1];
  uint32_t clientMsgId;
  uint32_t scene;
  NSString *textMsg;
  NSString *chatRoomId;
} TranslateOrgMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientMsgId",
        .dataTypeSpecific.className = NULL,
        .number = TranslateOrgMsg_FieldNumber_ClientMsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TranslateOrgMsg__storage_, clientMsgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "textMsg",
        .dataTypeSpecific.className = NULL,
        .number = TranslateOrgMsg_FieldNumber_TextMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TranslateOrgMsg__storage_, textMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatRoomId",
        .dataTypeSpecific.className = NULL,
        .number = TranslateOrgMsg_FieldNumber_ChatRoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TranslateOrgMsg__storage_, chatRoomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = TranslateOrgMsg_FieldNumber_Scene,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TranslateOrgMsg__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TranslateOrgMsg class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TranslateOrgMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001JA\000\002G\000\003IA\000\004E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TranslatedMsg

@implementation TranslatedMsg

@dynamic hasClientMsgId, clientMsgId;
@dynamic hasTranslatedText, translatedText;
@dynamic hasRet, ret;
@dynamic hasBrandWording, brandWording;

typedef struct TranslatedMsg__storage_ {
  uint32_t _has_storage_[1];
  uint32_t clientMsgId;
  int32_t ret;
  NSString *translatedText;
  NSString *brandWording;
} TranslatedMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientMsgId",
        .dataTypeSpecific.className = NULL,
        .number = TranslatedMsg_FieldNumber_ClientMsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TranslatedMsg__storage_, clientMsgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "translatedText",
        .dataTypeSpecific.className = NULL,
        .number = TranslatedMsg_FieldNumber_TranslatedText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TranslatedMsg__storage_, translatedText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = TranslatedMsg_FieldNumber_Ret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TranslatedMsg__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "brandWording",
        .dataTypeSpecific.className = NULL,
        .number = TranslatedMsg_FieldNumber_BrandWording,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TranslatedMsg__storage_, brandWording),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TranslatedMsg class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TranslatedMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001JA\000\002N\000\003C\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransTextRequest

@implementation GetTransTextRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMsgCount, msgCount;
@dynamic msgListArray, msgListArray_Count;

typedef struct GetTransTextRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgCount;
  BaseRequest *baseRequest;
  NSMutableArray *msgListArray;
} GetTransTextRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetTransTextRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransTextRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgCount",
        .dataTypeSpecific.className = NULL,
        .number = GetTransTextRequest_FieldNumber_MsgCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransTextRequest__storage_, msgCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TranslateOrgMsg),
        .number = GetTransTextRequest_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransTextRequest__storage_, msgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransTextRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransTextRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003\000MsgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransTextResponse

@implementation GetTransTextResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMsgCount, msgCount;
@dynamic msgListArray, msgListArray_Count;
@dynamic hasToLang, toLang;

typedef struct GetTransTextResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgCount;
  BaseResponse *baseResponse;
  NSMutableArray *msgListArray;
  NSString *toLang;
} GetTransTextResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetTransTextResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransTextResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgCount",
        .dataTypeSpecific.className = NULL,
        .number = GetTransTextResponse_FieldNumber_MsgCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransTextResponse__storage_, msgCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TranslatedMsg),
        .number = GetTransTextResponse_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransTextResponse__storage_, msgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toLang",
        .dataTypeSpecific.className = NULL,
        .number = GetTransTextResponse_FieldNumber_ToLang,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTransTextResponse__storage_, toLang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransTextResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransTextResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002H\000\003\000MsgList\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TVTopicCommentItem

@implementation TVTopicCommentItem

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasBigHeadURL, bigHeadURL;
@dynamic hasSmallHeadURL, smallHeadURL;
@dynamic hasTimeStamp, timeStamp;
@dynamic hasContent, content;
@dynamic hasCommentId, commentId;

typedef struct TVTopicCommentItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t timeStamp;
  uint32_t commentId;
  NSString *userName;
  NSString *nickName;
  NSString *bigHeadURL;
  NSString *smallHeadURL;
  NSString *content;
} TVTopicCommentItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_BigHeadURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, bigHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_SmallHeadURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, smallHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_TimeStamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = TVTopicCommentItem_FieldNumber_CommentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TVTopicCommentItem__storage_, commentId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TVTopicCommentItem class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TVTopicCommentItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001H\000\002H\000\003H!!\000\004J!!\000\005I\000\006G\000\007I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTVTopicCommentRequest

@implementation GetTVTopicCommentRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTvtopic, tvtopic;
@dynamic hasLastCommentId, lastCommentId;

typedef struct GetTVTopicCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lastCommentId;
  BaseRequest *baseRequest;
  NSString *tvtopic;
} GetTVTopicCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetTVTopicCommentRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTVTopicCommentRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tvtopic",
        .dataTypeSpecific.className = NULL,
        .number = GetTVTopicCommentRequest_FieldNumber_Tvtopic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTVTopicCommentRequest__storage_, tvtopic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastCommentId",
        .dataTypeSpecific.className = NULL,
        .number = GetTVTopicCommentRequest_FieldNumber_LastCommentId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTVTopicCommentRequest__storage_, lastCommentId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTVTopicCommentRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTVTopicCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002c\004\000\003M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTVTopicCommentResponse

@implementation GetTVTopicCommentResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasLastCommentId, lastCommentId;
@dynamic hasTotalCommentCount, totalCommentCount;
@dynamic hasLeftCommentCount, leftCommentCount;

typedef struct GetTVTopicCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t lastCommentId;
  uint32_t totalCommentCount;
  uint32_t leftCommentCount;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} GetTVTopicCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetTVTopicCommentResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTVTopicCommentResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetTVTopicCommentResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTVTopicCommentResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TVTopicCommentItem),
        .number = GetTVTopicCommentResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTVTopicCommentResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastCommentId",
        .dataTypeSpecific.className = NULL,
        .number = GetTVTopicCommentResponse_FieldNumber_LastCommentId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTVTopicCommentResponse__storage_, lastCommentId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalCommentCount",
        .dataTypeSpecific.className = NULL,
        .number = GetTVTopicCommentResponse_FieldNumber_TotalCommentCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetTVTopicCommentResponse__storage_, totalCommentCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "leftCommentCount",
        .dataTypeSpecific.className = NULL,
        .number = GetTVTopicCommentResponse_FieldNumber_LeftCommentCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetTVTopicCommentResponse__storage_, leftCommentCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTVTopicCommentResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTVTopicCommentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002E\000\003\000List\000\004M\000\005Q\000\006P\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostTVTopicCommentRequest

@implementation PostTVTopicCommentRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTvtopic, tvtopic;
@dynamic hasContent, content;

typedef struct PostTVTopicCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *tvtopic;
  NSString *content;
} PostTVTopicCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = PostTVTopicCommentRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostTVTopicCommentRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tvtopic",
        .dataTypeSpecific.className = NULL,
        .number = PostTVTopicCommentRequest_FieldNumber_Tvtopic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PostTVTopicCommentRequest__storage_, tvtopic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PostTVTopicCommentRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PostTVTopicCommentRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostTVTopicCommentRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostTVTopicCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002c\004\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostTVTopicCommentResponse

@implementation PostTVTopicCommentResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct PostTVTopicCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} PostTVTopicCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = PostTVTopicCommentResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostTVTopicCommentResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostTVTopicCommentResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostTVTopicCommentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IBeaconBoardcastRequest

@implementation IBeaconBoardcastRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBizUsername, bizUsername;
@dynamic hasContent, content;

typedef struct IBeaconBoardcastRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *bizUsername;
  NSString *content;
} IBeaconBoardcastRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = IBeaconBoardcastRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IBeaconBoardcastRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bizUsername",
        .dataTypeSpecific.className = NULL,
        .number = IBeaconBoardcastRequest_FieldNumber_BizUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IBeaconBoardcastRequest__storage_, bizUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = IBeaconBoardcastRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IBeaconBoardcastRequest__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IBeaconBoardcastRequest class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IBeaconBoardcastRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002K\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IBeaconNotification

@implementation IBeaconNotification

@dynamic hasResult, result;
@dynamic hasTips, tips;
@dynamic hasMessage, message;

typedef struct IBeaconNotification__storage_ {
  uint32_t _has_storage_[1];
  int32_t result;
  NSString *tips;
  NSString *message;
} IBeaconNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = IBeaconNotification_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IBeaconNotification__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = IBeaconNotification_FieldNumber_Tips,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IBeaconNotification__storage_, tips),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = IBeaconNotification_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IBeaconNotification__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IBeaconNotification class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IBeaconNotification__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002D\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IBeaconBoardcastResponse

@implementation IBeaconBoardcastResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNotification, notification;

typedef struct IBeaconBoardcastResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  IBeaconNotification *notification;
} IBeaconBoardcastResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = IBeaconBoardcastResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IBeaconBoardcastResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notification",
        .dataTypeSpecific.className = GPBStringifySymbol(IBeaconNotification),
        .number = IBeaconBoardcastResponse_FieldNumber_Notification,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IBeaconBoardcastResponse__storage_, notification),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IBeaconBoardcastResponse class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IBeaconBoardcastResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RealTimeKVReportReq

@implementation RealTimeKVReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasLogId, logId;
@dynamic hasValue, value;

typedef struct RealTimeKVReportReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logId;
  BaseRequest *baseRequest;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
  NSString *value;
} RealTimeKVReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RealTimeKVReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_DeviceBrand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_OsName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_OsVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_LanguageVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logId",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_LogId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, logId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = RealTimeKVReportReq_FieldNumber_Value,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RealTimeKVReportReq__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RealTimeKVReportReq class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RealTimeKVReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002K\000\003K\000\004F\000\005I\000\006K\000\007DA\000\010E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RealTimeKVReportResp

@implementation RealTimeKVReportResp

@dynamic hasBaseResponse, baseResponse;

typedef struct RealTimeKVReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} RealTimeKVReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RealTimeKVReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RealTimeKVReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RealTimeKVReportResp class]
                                     rootClass:[MmutilsRoot class]
                                          file:MmutilsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RealTimeKVReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
