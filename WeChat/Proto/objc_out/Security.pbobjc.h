// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: security.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ClientSpamInfo_IOS_Content;
@class FPKeyVal;
@class FPKeyVals;
@class InstalledPackageInfo;
@class SKBuiltinBuffer_t;
@class ST;
@class ST_CheckAddIn7019;
@class SensorData2_GroupItem;
@class SensorData2_SensorEvent;
@class SpamBuff_Soft;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ClientCheckData_DataType

typedef GPB_ENUM(ClientCheckData_DataType) {
  /** xml 格式 */
  ClientCheckData_DataType_CcdataXml = 0,

  /** 文本 格式 */
  ClientCheckData_DataType_CcdataText = 1,

  /** 二进制 */
  ClientCheckData_DataType_CcdataBinary = 2,

  /** PB */
  ClientCheckData_DataType_CcdataPbRaw = 3,

  /** PB => ZIP */
  ClientCheckData_DataType_CcdataPbZip = 4,

  /** PB => ZIP => WhiteBoxAes(003) */
  ClientCheckData_DataType_CcdataPbZipWb = 5,

  /** PB => WhiteBoxAes(003) */
  ClientCheckData_DataType_CcdataPbWb = 6,
};

GPBEnumDescriptor *ClientCheckData_DataType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ClientCheckData_DataType_IsValidValue(int32_t value);

#pragma mark - Enum ClientCheckData_Status

typedef GPB_ENUM(ClientCheckData_Status) {
  ClientCheckData_Status_CcdataSuccess = 0,
  ClientCheckData_Status_CcdataFail = 1,
};

GPBEnumDescriptor *ClientCheckData_Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ClientCheckData_Status_IsValidValue(int32_t value);

#pragma mark - SecurityRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface SecurityRoot : GPBRootObject
@end

#pragma mark - InstalledPackageInfo

typedef GPB_ENUM(InstalledPackageInfo_FieldNumber) {
  InstalledPackageInfo_FieldNumber_PackageName = 1,
  InstalledPackageInfo_FieldNumber_Label = 2,
  InstalledPackageInfo_FieldNumber_SigMd5 = 3,
  InstalledPackageInfo_FieldNumber_FileSize = 4,
  InstalledPackageInfo_FieldNumber_ApplicationFlag = 5,
};

@interface InstalledPackageInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *packageName;
/** Test to see if @c packageName has been set. */
@property(nonatomic, readwrite) BOOL hasPackageName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sigMd5;
/** Test to see if @c sigMd5 has been set. */
@property(nonatomic, readwrite) BOOL hasSigMd5;

@property(nonatomic, readwrite) uint32_t fileSize;

@property(nonatomic, readwrite) BOOL hasFileSize;
@property(nonatomic, readwrite) uint32_t applicationFlag;

@property(nonatomic, readwrite) BOOL hasApplicationFlag;
@end

#pragma mark - ST

typedef GPB_ENUM(ST_FieldNumber) {
  ST_FieldNumber_IsMorkLocOpen = 1,
  ST_FieldNumber_MsgLevel = 2,
  ST_FieldNumber_IsDbgConnected = 3,
  ST_FieldNumber_PkgHash3 = 4,
  ST_FieldNumber_RatioFwVer = 5,
  ST_FieldNumber_OsRelVer = 6,
  ST_FieldNumber_Imei = 7,
  ST_FieldNumber_AndroidId = 8,
  ST_FieldNumber_PhoneSerial = 9,
  ST_FieldNumber_PhoneModel = 10,
  ST_FieldNumber_CpuCoreCount = 11,
  ST_FieldNumber_CpuHw = 12,
  ST_FieldNumber_CpuFeatures = 13,
  ST_FieldNumber_SelfMac = 14,
  ST_FieldNumber_Ssid = 15,
  ST_FieldNumber_Bssid = 16,
  ST_FieldNumber_SpInfo = 17,
  ST_FieldNumber_Apninfo = 18,
  ST_FieldNumber_BuildFp = 19,
  ST_FieldNumber_BuildBoard = 20,
  ST_FieldNumber_BuildBootloader = 21,
  ST_FieldNumber_BuildBrand = 22,
  ST_FieldNumber_BuildDevice = 23,
  ST_FieldNumber_BuildHw = 24,
  ST_FieldNumber_BuildProduct = 25,
  ST_FieldNumber_Manufacturer = 26,
  ST_FieldNumber_PhoneNum = 27,
  ST_FieldNumber_NetType = 28,
  ST_FieldNumber_IsQemuEnv = 29,
  ST_FieldNumber_HasDupPkg = 30,
  ST_FieldNumber_HasQikuShadow = 31,
  ST_FieldNumber_PkgName = 32,
  ST_FieldNumber_AppName = 33,
  ST_FieldNumber_DataRoot = 34,
  ST_FieldNumber_EntranceClassLoaderName = 35,
  ST_FieldNumber_MmprocLoadedFilesArray = 36,
  ST_FieldNumber_RiskScanReqBuffer = 37,
  ST_FieldNumber_EnvBits = 38,
  ST_FieldNumber_EnabledAccessibilityServiceIds = 39,
  ST_FieldNumber_InstalledPackageInfosArray = 40,
  ST_FieldNumber_AccessibilityClickCount = 41,
  ST_FieldNumber_ApkleadingMd5 = 42,
  ST_FieldNumber_ClientVersion = 43,
  ST_FieldNumber_Wxtag = 44,
  ST_FieldNumber_ClientIp = 45,
  ST_FieldNumber_Language = 46,
  ST_FieldNumber_IsInCalling = 47,
  ST_FieldNumber_IsSetScreenLock = 48,
  ST_FieldNumber_NeighborBssidlistArray = 49,
  ST_FieldNumber_IsWifiOpen = 50,
  ST_FieldNumber_HasXposedStackTrace = 51,
  ST_FieldNumber_XposedHookedMethods = 52,
  ST_FieldNumber_IsAdbswitchEnabled = 53,
  ST_FieldNumber_IsRunningByMonkey = 54,
  ST_FieldNumber_AppInstrumentationClassName = 55,
  ST_FieldNumber_AmsbinderClassName = 56,
  ST_FieldNumber_AmssingletonClassName = 57,
  ST_FieldNumber_IsVpnused = 58,
  ST_FieldNumber_IsVpnconnected = 59,
  ST_FieldNumber_Pcodes = 60,
  ST_FieldNumber_HasQcodes = 61,
  ST_FieldNumber_Rcodes0 = 62,
  ST_FieldNumber_Rcodes1 = 63,
  ST_FieldNumber_Stid = 64,
  ST_FieldNumber_KernelReleaseNumber = 65,
  ST_FieldNumber_UsbState = 66,
  ST_FieldNumber_ApkSignatureMd5 = 67,
  ST_FieldNumber_GoogleServiceState = 68,
  ST_FieldNumber_Timeval1 = 69,
  ST_FieldNumber_SpamInfoVersionSeq = 70,
  ST_FieldNumber_TbVersionCrc = 71,
  ST_FieldNumber_SystemFrameworkMd5 = 72,
  ST_FieldNumber_SystemFrameworkArmMd5 = 73,
  ST_FieldNumber_SystemFrameworkArm64Md5 = 74,
  ST_FieldNumber_SystemBinMd5 = 75,
  ST_FieldNumber_SoterUid = 76,
  ST_FieldNumber_WidevineDeviceId = 77,
  ST_FieldNumber_StorageId = 78,
  ST_FieldNumber_Oaid = 79,
  ST_FieldNumber_UnknownTag80 = 80,
  ST_FieldNumber_MagiskBitCheck = 81,
  ST_FieldNumber_FilesModifiedInFrameworkArray = 82,
  ST_FieldNumber_WeChatInstallTime = 83,
  ST_FieldNumber_SoftConfig = 84,
  ST_FieldNumber_SoftData = 85,
  ST_FieldNumber_Tag86 = 86,
  ST_FieldNumber_NetWorkInterface = 87,
  ST_FieldNumber_TvSec88 = 88,
  ST_FieldNumber_TvUsec89 = 89,
  ST_FieldNumber_Tag90 = 90,
  ST_FieldNumber_PkgHash3Encrypt = 91,
  ST_FieldNumber_PkgHash3Crc = 92,
  ST_FieldNumber_EntranceClassLoaderNameEncrypt = 93,
  ST_FieldNumber_EntranceClassLoaderNameCrc = 94,
  ST_FieldNumber_ApkleadingMd5Encrypt = 95,
  ST_FieldNumber_ApkleadingMd5Crc = 96,
  ST_FieldNumber_AppInstrumentationClassNameEncrypt = 97,
  ST_FieldNumber_AppInstrumentationClassNameCrc = 98,
  ST_FieldNumber_AmsbinderClassNameEncrypt = 99,
  ST_FieldNumber_AmsbinderClassNameCrc = 100,
  ST_FieldNumber_AmssingletonClassNameEncrypt = 101,
  ST_FieldNumber_AmssingletonClassNameCrc = 102,
  ST_FieldNumber_ApkSignatureMd5Encrypt = 103,
  ST_FieldNumber_ApkSignatureMd5Crc = 104,
  ST_FieldNumber_SystemFrameworkMd5Encrypt = 105,
  ST_FieldNumber_SystemFrameworkMd5Crc = 106,
  ST_FieldNumber_SystemFrameworkArmMd5Encrypt = 107,
  ST_FieldNumber_SystemFrameworkArmMd5Crc = 108,
  ST_FieldNumber_SystemFrameworkArm64Md5Encrypt = 109,
  ST_FieldNumber_SystemFrameworkArm64Md5Crc = 110,
  ST_FieldNumber_SystemBinMd5Encrypt = 111,
  ST_FieldNumber_SystemBinMd5Crc = 112,
  ST_FieldNumber_StorageIdencrypt = 113,
  ST_FieldNumber_StorageIdcrc = 114,
  ST_FieldNumber_TvUsec115 = 115,
  ST_FieldNumber_Uid = 116,
  ST_FieldNumber_Tag117 = 117,
  ST_FieldNumber_SourceDirEncrypt = 118,
  ST_FieldNumber_SourceDirCrc = 119,
  ST_FieldNumber_SourceDir2Encrypt = 120,
  ST_FieldNumber_SourceDir2Crc = 121,
  ST_FieldNumber_IllegalLibEncryptArray = 122,
  ST_FieldNumber_IllegalLibCrc = 123,
  ST_FieldNumber_StackTraceEncrypt = 124,
  ST_FieldNumber_StackTraceCrc = 125,
  ST_FieldNumber_Check7019 = 126,
  ST_FieldNumber_ProcSelfMountsCheck = 127,
  ST_FieldNumber_InlineHookingLibsBits = 128,
  ST_FieldNumber_InlineHookingLibsEncryptArray = 129,
  ST_FieldNumber_InlineHookingLibsCrc = 130,
  ST_FieldNumber_AllLibsEncryptArray = 131,
  ST_FieldNumber_AllLibsCrc = 132,
  ST_FieldNumber_Timeval133 = 133,
};

@interface ST : GPBMessage

@property(nonatomic, readwrite) uint32_t isMorkLocOpen;

@property(nonatomic, readwrite) BOOL hasIsMorkLocOpen;
@property(nonatomic, readwrite) uint32_t msgLevel;

@property(nonatomic, readwrite) BOOL hasMsgLevel;
@property(nonatomic, readwrite) uint32_t isDbgConnected;

@property(nonatomic, readwrite) BOOL hasIsDbgConnected;
@property(nonatomic, readwrite, copy, null_resettable) NSString *pkgHash3;
/** Test to see if @c pkgHash3 has been set. */
@property(nonatomic, readwrite) BOOL hasPkgHash3;

@property(nonatomic, readwrite, copy, null_resettable) NSString *ratioFwVer;
/** Test to see if @c ratioFwVer has been set. */
@property(nonatomic, readwrite) BOOL hasRatioFwVer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *osRelVer;
/** Test to see if @c osRelVer has been set. */
@property(nonatomic, readwrite) BOOL hasOsRelVer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *imei;
/** Test to see if @c imei has been set. */
@property(nonatomic, readwrite) BOOL hasImei;

@property(nonatomic, readwrite, copy, null_resettable) NSString *androidId;
/** Test to see if @c androidId has been set. */
@property(nonatomic, readwrite) BOOL hasAndroidId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *phoneSerial;
/** Test to see if @c phoneSerial has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneSerial;

@property(nonatomic, readwrite, copy, null_resettable) NSString *phoneModel;
/** Test to see if @c phoneModel has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneModel;

@property(nonatomic, readwrite) uint32_t cpuCoreCount;

@property(nonatomic, readwrite) BOOL hasCpuCoreCount;
@property(nonatomic, readwrite, copy, null_resettable) NSString *cpuHw;
/** Test to see if @c cpuHw has been set. */
@property(nonatomic, readwrite) BOOL hasCpuHw;

@property(nonatomic, readwrite, copy, null_resettable) NSString *cpuFeatures;
/** Test to see if @c cpuFeatures has been set. */
@property(nonatomic, readwrite) BOOL hasCpuFeatures;

@property(nonatomic, readwrite, copy, null_resettable) NSString *selfMac;
/** Test to see if @c selfMac has been set. */
@property(nonatomic, readwrite) BOOL hasSelfMac;

@property(nonatomic, readwrite, copy, null_resettable) NSString *ssid;
/** Test to see if @c ssid has been set. */
@property(nonatomic, readwrite) BOOL hasSsid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *bssid;
/** Test to see if @c bssid has been set. */
@property(nonatomic, readwrite) BOOL hasBssid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *spInfo;
/** Test to see if @c spInfo has been set. */
@property(nonatomic, readwrite) BOOL hasSpInfo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *apninfo;
/** Test to see if @c apninfo has been set. */
@property(nonatomic, readwrite) BOOL hasApninfo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildFp;
/** Test to see if @c buildFp has been set. */
@property(nonatomic, readwrite) BOOL hasBuildFp;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildBoard;
/** Test to see if @c buildBoard has been set. */
@property(nonatomic, readwrite) BOOL hasBuildBoard;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildBootloader;
/** Test to see if @c buildBootloader has been set. */
@property(nonatomic, readwrite) BOOL hasBuildBootloader;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildBrand;
/** Test to see if @c buildBrand has been set. */
@property(nonatomic, readwrite) BOOL hasBuildBrand;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildDevice;
/** Test to see if @c buildDevice has been set. */
@property(nonatomic, readwrite) BOOL hasBuildDevice;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildHw;
/** Test to see if @c buildHw has been set. */
@property(nonatomic, readwrite) BOOL hasBuildHw;

@property(nonatomic, readwrite, copy, null_resettable) NSString *buildProduct;
/** Test to see if @c buildProduct has been set. */
@property(nonatomic, readwrite) BOOL hasBuildProduct;

@property(nonatomic, readwrite, copy, null_resettable) NSString *manufacturer;
/** Test to see if @c manufacturer has been set. */
@property(nonatomic, readwrite) BOOL hasManufacturer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *phoneNum;
/** Test to see if @c phoneNum has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneNum;

@property(nonatomic, readwrite, copy, null_resettable) NSString *netType;
/** Test to see if @c netType has been set. */
@property(nonatomic, readwrite) BOOL hasNetType;

@property(nonatomic, readwrite) uint32_t isQemuEnv;

@property(nonatomic, readwrite) BOOL hasIsQemuEnv;
@property(nonatomic, readwrite) uint32_t hasDupPkg;

@property(nonatomic, readwrite) BOOL hasHasDupPkg;
@property(nonatomic, readwrite) uint32_t hasQikuShadow;

@property(nonatomic, readwrite) BOOL hasHasQikuShadow;
@property(nonatomic, readwrite, copy, null_resettable) NSString *pkgName;
/** Test to see if @c pkgName has been set. */
@property(nonatomic, readwrite) BOOL hasPkgName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *appName;
/** Test to see if @c appName has been set. */
@property(nonatomic, readwrite) BOOL hasAppName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *dataRoot;
/** Test to see if @c dataRoot has been set. */
@property(nonatomic, readwrite) BOOL hasDataRoot;

@property(nonatomic, readwrite, copy, null_resettable) NSString *entranceClassLoaderName;
/** Test to see if @c entranceClassLoaderName has been set. */
@property(nonatomic, readwrite) BOOL hasEntranceClassLoaderName;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *mmprocLoadedFilesArray;
/** The number of items in @c mmprocLoadedFilesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger mmprocLoadedFilesArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *riskScanReqBuffer;
/** Test to see if @c riskScanReqBuffer has been set. */
@property(nonatomic, readwrite) BOOL hasRiskScanReqBuffer;

@property(nonatomic, readwrite) uint32_t envBits;

@property(nonatomic, readwrite) BOOL hasEnvBits;
@property(nonatomic, readwrite, copy, null_resettable) NSString *enabledAccessibilityServiceIds;
/** Test to see if @c enabledAccessibilityServiceIds has been set. */
@property(nonatomic, readwrite) BOOL hasEnabledAccessibilityServiceIds;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<InstalledPackageInfo*> *installedPackageInfosArray;
/** The number of items in @c installedPackageInfosArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger installedPackageInfosArray_Count;

@property(nonatomic, readwrite) uint32_t accessibilityClickCount;

@property(nonatomic, readwrite) BOOL hasAccessibilityClickCount;
/** APK 前 102400 字节MD5 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *apkleadingMd5;
/** Test to see if @c apkleadingMd5 has been set. */
@property(nonatomic, readwrite) BOOL hasApkleadingMd5;

@property(nonatomic, readwrite, copy, null_resettable) NSString *clientVersion;
/** Test to see if @c clientVersion has been set. */
@property(nonatomic, readwrite) BOOL hasClientVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *wxtag;
/** Test to see if @c wxtag has been set. */
@property(nonatomic, readwrite) BOOL hasWxtag;

@property(nonatomic, readwrite, copy, null_resettable) NSString *clientIp;
/** Test to see if @c clientIp has been set. */
@property(nonatomic, readwrite) BOOL hasClientIp;

@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

@property(nonatomic, readwrite) uint32_t isInCalling;

@property(nonatomic, readwrite) BOOL hasIsInCalling;
@property(nonatomic, readwrite) uint32_t isSetScreenLock;

@property(nonatomic, readwrite) BOOL hasIsSetScreenLock;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *neighborBssidlistArray;
/** The number of items in @c neighborBssidlistArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger neighborBssidlistArray_Count;

@property(nonatomic, readwrite) uint32_t isWifiOpen;

@property(nonatomic, readwrite) BOOL hasIsWifiOpen;
@property(nonatomic, readwrite) uint32_t hasXposedStackTrace;

@property(nonatomic, readwrite) BOOL hasHasXposedStackTrace;
@property(nonatomic, readwrite, copy, null_resettable) NSString *xposedHookedMethods;
/** Test to see if @c xposedHookedMethods has been set. */
@property(nonatomic, readwrite) BOOL hasXposedHookedMethods;

@property(nonatomic, readwrite) uint32_t isAdbswitchEnabled;

@property(nonatomic, readwrite) BOOL hasIsAdbswitchEnabled;
@property(nonatomic, readwrite) uint32_t isRunningByMonkey;

@property(nonatomic, readwrite) BOOL hasIsRunningByMonkey;
@property(nonatomic, readwrite, copy, null_resettable) NSString *appInstrumentationClassName;
/** Test to see if @c appInstrumentationClassName has been set. */
@property(nonatomic, readwrite) BOOL hasAppInstrumentationClassName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *amsbinderClassName;
/** Test to see if @c amsbinderClassName has been set. */
@property(nonatomic, readwrite) BOOL hasAmsbinderClassName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *amssingletonClassName;
/** Test to see if @c amssingletonClassName has been set. */
@property(nonatomic, readwrite) BOOL hasAmssingletonClassName;

@property(nonatomic, readwrite) uint32_t isVpnused;

@property(nonatomic, readwrite) BOOL hasIsVpnused;
@property(nonatomic, readwrite) uint32_t isVpnconnected;

@property(nonatomic, readwrite) BOOL hasIsVpnconnected;
@property(nonatomic, readwrite, copy, null_resettable) NSString *pcodes;
/** Test to see if @c pcodes has been set. */
@property(nonatomic, readwrite) BOOL hasPcodes;

@property(nonatomic, readwrite, copy, null_resettable) NSString *hasQcodes;
/** Test to see if @c hasQcodes has been set. */
@property(nonatomic, readwrite) BOOL hasHasQcodes;

@property(nonatomic, readwrite, copy, null_resettable) NSString *rcodes0;
/** Test to see if @c rcodes0 has been set. */
@property(nonatomic, readwrite) BOOL hasRcodes0;

@property(nonatomic, readwrite, copy, null_resettable) NSString *rcodes1;
/** Test to see if @c rcodes1 has been set. */
@property(nonatomic, readwrite) BOOL hasRcodes1;

@property(nonatomic, readwrite, copy, null_resettable) NSString *stid;
/** Test to see if @c stid has been set. */
@property(nonatomic, readwrite) BOOL hasStid;

/** uname -r //65: "4.4.153-perf+"  // uname获取   和/proc/version 数据有关联 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *kernelReleaseNumber;
/** Test to see if @c kernelReleaseNumber has been set. */
@property(nonatomic, readwrite) BOOL hasKernelReleaseNumber;

/** 66: 0 //sys/class/android_usb/android0/state  usb连上为2，未连接为1, c8方法false时为0。 【0：啥都没连，1是充电。可选择0、1都算比较真实。】 */
@property(nonatomic, readwrite) uint32_t usbState;

@property(nonatomic, readwrite) BOOL hasUsbState;
/** 67: "18c867f0717aa67b2ab7347505ba07ed"    //签名md5 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *apkSignatureMd5;
/** Test to see if @c apkSignatureMd5 has been set. */
@property(nonatomic, readwrite) BOOL hasApkSignatureMd5;

/**
 * 68: 14 //目前测试情况： com.android.vending     8
 *       //com.google.android.gsf.login          1
 *       //com.google.android.gsf         2
 *       //com.google.android.gms         4
 *       //这四个包微信会去单独检测，如果存在则加上对应的数据， 测试miui11 （不包含com.google.android.gsf.login）为14  zui11也为14
 **/
@property(nonatomic, readwrite) uint32_t googleServiceState;

@property(nonatomic, readwrite) BOOL hasGoogleServiceState;
/** 69: 954783 // struct timeval 中微秒数值, gettimeofday获取. 0xffffff -> 4294963711 4294963711 4294963711 */
@property(nonatomic, readwrite) uint32_t timeval1;

@property(nonatomic, readwrite) BOOL hasTimeval1;
/** 708 、709 、【7010｜7011】 分别对应 123。 7012是4. 7015=6 */
@property(nonatomic, readwrite) uint32_t spamInfoVersionSeq;

@property(nonatomic, readwrite) BOOL hasSpamInfoVersionSeq;
/** 71: 556011293 //   可能与资源下载有关，不做pm clear 数据不会变化 不清楚，需另看。？ */
@property(nonatomic, readwrite) uint32_t tbVersionCrc;

@property(nonatomic, readwrite) BOOL hasTbVersionCrc;
/** 72: "a8de294f819234ee723148f6f3d003a6"//根据目录生成的md5 /system/framework/ */
@property(nonatomic, readwrite, copy, null_resettable) NSString *systemFrameworkMd5;
/** Test to see if @c systemFrameworkMd5 has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkMd5;

/** 73: "a7cae61554b3c3596c073782ac5d69d1"//根据目录生成的md5 /system/framework/arm */
@property(nonatomic, readwrite, copy, null_resettable) NSString *systemFrameworkArmMd5;
/** Test to see if @c systemFrameworkArmMd5 has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkArmMd5;

/** 74: "0d922e4d36ecfdce95da6257798320ab"//根据目录生成的md5 /system/framework/arm64 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *systemFrameworkArm64Md5;
/** Test to see if @c systemFrameworkArm64Md5 has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkArm64Md5;

/** 75: "22bb890943c1c673ccc5246b8a888819"//根据目录生成的md5 /system/bin */
@property(nonatomic, readwrite, copy, null_resettable) NSString *systemBinMd5;
/** Test to see if @c systemBinMd5 has been set. */
@property(nonatomic, readwrite) BOOL hasSystemBinMd5;

/** 76: "" //soteruid 暂时写 "" 字符串。 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *soterUid;
/** Test to see if @c soterUid has been set. */
@property(nonatomic, readwrite) BOOL hasSoterUid;

/** 77: "304334a25f546b42df65319978c5dbd2f8b42a3899f0973b0813735dd71795ad"  //java/util/UUID mediaDrm  getPropertyByteArray      => WidevineDeviceID //皖南会生成。 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *widevineDeviceId;
/** Test to see if @c widevineDeviceId has been set. */
@property(nonatomic, readwrite) BOOL hasWidevineDeviceId;

/**
 * 78: "1535763623|1535763679\@664854922a684596|fa114cb9f80068d980d8d89e708bbddd\@8b1106cd1d6c932a|1b295f3b9b7ba7f5f8e0275a9a3c1c32"
 * stat -c "%X|%Y" /storage/emulated
 * stat -f -c "%i" /system/etc
 * stat -f -c "%i %b %f %a %c %d" /system/etc  => md5
 * stat -f -c "%i" /storage/emulated
 * stat -f -c "%i %b %f %a %c %d" /storage/emulated  => md5  以\@和|连接
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *storageId;
/** Test to see if @c storageId has been set. */
@property(nonatomic, readwrite) BOOL hasStorageId;

/** 79: ""// c14 ?    OAID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *oaid;
/** Test to see if @c oaid has been set. */
@property(nonatomic, readwrite) BOOL hasOaid;

/** 80: 0 // 一直为0 不知道是啥 */
@property(nonatomic, readwrite) uint32_t unknownTag80;

@property(nonatomic, readwrite) BOOL hasUnknownTag80;
/** 81: 242379 // struct timeval 中微秒数值, gettimeofday获取. 0xffffffff -> 4294966271 4294966271 4294966271 第二遍 4294967295 */
@property(nonatomic, readwrite) uint32_t magiskBitCheck;

@property(nonatomic, readwrite) BOOL hasMagiskBitCheck;
/** 82: 检测framework中文件修改时间是否有变化   fstatat64获取修改时间判断。不该有此值，只有非法时才设置。 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *filesModifiedInFrameworkArray;
/** The number of items in @c filesModifiedInFrameworkArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger filesModifiedInFrameworkArray_Count;

/** 微信安装时间. */
@property(nonatomic, readwrite) uint32_t weChatInstallTime;

@property(nonatomic, readwrite) BOOL hasWeChatInstallTime;
/** 7015 开始 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *softConfig;
/** Test to see if @c softConfig has been set. */
@property(nonatomic, readwrite) BOOL hasSoftConfig;

@property(nonatomic, readwrite, copy, null_resettable) NSData *softData;
/** Test to see if @c softData has been set. */
@property(nonatomic, readwrite) BOOL hasSoftData;

/** 7014 struct timeval 中微秒数值, gettimeofday获取. 开始 0xffffffff -> 4294966955 4294966955 4294966955 */
@property(nonatomic, readwrite) uint32_t tag86;

@property(nonatomic, readwrite) BOOL hasTag86;
@property(nonatomic, readwrite, copy, null_resettable) NSString *netWorkInterface;
/** Test to see if @c netWorkInterface has been set. */
@property(nonatomic, readwrite) BOOL hasNetWorkInterface;

/** key */
@property(nonatomic, readwrite) uint32_t tvSec88;

@property(nonatomic, readwrite) BOOL hasTvSec88;
@property(nonatomic, readwrite) uint32_t tvUsec89;

@property(nonatomic, readwrite) BOOL hasTvUsec89;
@property(nonatomic, readwrite) uint32_t tag90;

@property(nonatomic, readwrite) BOOL hasTag90;
@property(nonatomic, readwrite, copy, null_resettable) NSData *pkgHash3Encrypt;
/** Test to see if @c pkgHash3Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasPkgHash3Encrypt;

@property(nonatomic, readwrite) uint32_t pkgHash3Crc;

@property(nonatomic, readwrite) BOOL hasPkgHash3Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *entranceClassLoaderNameEncrypt;
/** Test to see if @c entranceClassLoaderNameEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasEntranceClassLoaderNameEncrypt;

@property(nonatomic, readwrite) uint32_t entranceClassLoaderNameCrc;

@property(nonatomic, readwrite) BOOL hasEntranceClassLoaderNameCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *apkleadingMd5Encrypt;
/** Test to see if @c apkleadingMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasApkleadingMd5Encrypt;

@property(nonatomic, readwrite) uint32_t apkleadingMd5Crc;

@property(nonatomic, readwrite) BOOL hasApkleadingMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *appInstrumentationClassNameEncrypt;
/** Test to see if @c appInstrumentationClassNameEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasAppInstrumentationClassNameEncrypt;

@property(nonatomic, readwrite) uint32_t appInstrumentationClassNameCrc;

@property(nonatomic, readwrite) BOOL hasAppInstrumentationClassNameCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *amsbinderClassNameEncrypt;
/** Test to see if @c amsbinderClassNameEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasAmsbinderClassNameEncrypt;

@property(nonatomic, readwrite) uint32_t amsbinderClassNameCrc;

@property(nonatomic, readwrite) BOOL hasAmsbinderClassNameCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *amssingletonClassNameEncrypt;
/** Test to see if @c amssingletonClassNameEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasAmssingletonClassNameEncrypt;

@property(nonatomic, readwrite) uint32_t amssingletonClassNameCrc;

@property(nonatomic, readwrite) BOOL hasAmssingletonClassNameCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *apkSignatureMd5Encrypt;
/** Test to see if @c apkSignatureMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasApkSignatureMd5Encrypt;

@property(nonatomic, readwrite) uint32_t apkSignatureMd5Crc;

@property(nonatomic, readwrite) BOOL hasApkSignatureMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemFrameworkMd5Encrypt;
/** Test to see if @c systemFrameworkMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkMd5Encrypt;

@property(nonatomic, readwrite) uint32_t systemFrameworkMd5Crc;

@property(nonatomic, readwrite) BOOL hasSystemFrameworkMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemFrameworkArmMd5Encrypt;
/** Test to see if @c systemFrameworkArmMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkArmMd5Encrypt;

@property(nonatomic, readwrite) uint32_t systemFrameworkArmMd5Crc;

@property(nonatomic, readwrite) BOOL hasSystemFrameworkArmMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemFrameworkArm64Md5Encrypt;
/** Test to see if @c systemFrameworkArm64Md5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkArm64Md5Encrypt;

@property(nonatomic, readwrite) uint32_t systemFrameworkArm64Md5Crc;

@property(nonatomic, readwrite) BOOL hasSystemFrameworkArm64Md5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemBinMd5Encrypt;
/** Test to see if @c systemBinMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemBinMd5Encrypt;

@property(nonatomic, readwrite) uint32_t systemBinMd5Crc;

@property(nonatomic, readwrite) BOOL hasSystemBinMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *storageIdencrypt;
/** Test to see if @c storageIdencrypt has been set. */
@property(nonatomic, readwrite) BOOL hasStorageIdencrypt;

@property(nonatomic, readwrite) uint32_t storageIdcrc;

@property(nonatomic, readwrite) BOOL hasStorageIdcrc;
@property(nonatomic, readwrite) uint32_t tvUsec115;

@property(nonatomic, readwrite) BOOL hasTvUsec115;
/** getuid32() */
@property(nonatomic, readwrite) uint32_t uid;

@property(nonatomic, readwrite) BOOL hasUid;
/** */
@property(nonatomic, readwrite) uint32_t tag117;

@property(nonatomic, readwrite) BOOL hasTag117;
@property(nonatomic, readwrite, copy, null_resettable) NSData *sourceDirEncrypt;
/** Test to see if @c sourceDirEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSourceDirEncrypt;

@property(nonatomic, readwrite) uint32_t sourceDirCrc;

@property(nonatomic, readwrite) BOOL hasSourceDirCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *sourceDir2Encrypt;
/** Test to see if @c sourceDir2Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSourceDir2Encrypt;

@property(nonatomic, readwrite) uint32_t sourceDir2Crc;

@property(nonatomic, readwrite) BOOL hasSourceDir2Crc;
/** ===================== 7018 ========================== */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *illegalLibEncryptArray;
/** The number of items in @c illegalLibEncryptArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger illegalLibEncryptArray_Count;

/** 0 */
@property(nonatomic, readwrite) uint32_t illegalLibCrc;

@property(nonatomic, readwrite) BOOL hasIllegalLibCrc;
/** ===================== 7019 ========================== */
@property(nonatomic, readwrite, copy, null_resettable) NSData *stackTraceEncrypt;
/** Test to see if @c stackTraceEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasStackTraceEncrypt;

@property(nonatomic, readwrite) uint32_t stackTraceCrc;

@property(nonatomic, readwrite) BOOL hasStackTraceCrc;
@property(nonatomic, readwrite, strong, null_resettable) ST_CheckAddIn7019 *check7019;
/** Test to see if @c check7019 has been set. */
@property(nonatomic, readwrite) BOOL hasCheck7019;

@property(nonatomic, readwrite) uint32_t procSelfMountsCheck;

@property(nonatomic, readwrite) BOOL hasProcSelfMountsCheck;
@property(nonatomic, readwrite) uint32_t inlineHookingLibsBits;

@property(nonatomic, readwrite) BOOL hasInlineHookingLibsBits;
/** /proc/self/maps  带rwxp的so  /apex/com.android.runtime/bin/linker, /apex/com.android.runtime/lib/bionic/libc.so, /apex/com.android.runtime/lib/libart.so, /data/app/com.tencent.mm-9wf3arIby_cU-KqdRQ2LOQ==/lib/arm/libwechatnormsg.so, /system/lib/libandroid_runtime.so */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *inlineHookingLibsEncryptArray;
/** The number of items in @c inlineHookingLibsEncryptArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inlineHookingLibsEncryptArray_Count;

@property(nonatomic, readwrite) uint32_t inlineHookingLibsCrc;

@property(nonatomic, readwrite) BOOL hasInlineHookingLibsCrc;
/** add in 8.0.2 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *allLibsEncryptArray;
/** The number of items in @c allLibsEncryptArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger allLibsEncryptArray_Count;

@property(nonatomic, readwrite) uint32_t allLibsCrc;

@property(nonatomic, readwrite) BOOL hasAllLibsCrc;
@property(nonatomic, readwrite) uint32_t timeval133;

@property(nonatomic, readwrite) BOOL hasTimeval133;
@end

#pragma mark - ST_CheckAddIn7019

typedef GPB_ENUM(ST_CheckAddIn7019_FieldNumber) {
  ST_CheckAddIn7019_FieldNumber_ServiceListMd5Encrypt = 1,
  ST_CheckAddIn7019_FieldNumber_ServiceListMd5Crc = 2,
  ST_CheckAddIn7019_FieldNumber_SystemAppMd5Encrypt = 3,
  ST_CheckAddIn7019_FieldNumber_SystemAppMd5Crc = 4,
  ST_CheckAddIn7019_FieldNumber_SystemPrivAppMd5Encrypt = 5,
  ST_CheckAddIn7019_FieldNumber_SystemPrivAppMd5Crc = 6,
  ST_CheckAddIn7019_FieldNumber_VendorAppMd5Encrypt = 7,
  ST_CheckAddIn7019_FieldNumber_VendorAppMd5Crc = 8,
  ST_CheckAddIn7019_FieldNumber_ProductAppMd5Encrypt = 9,
  ST_CheckAddIn7019_FieldNumber_ProductAppMd5Crc = 10,
  ST_CheckAddIn7019_FieldNumber_SystemBinLsEncrypt = 11,
  ST_CheckAddIn7019_FieldNumber_SystemBinLsCrc = 12,
  ST_CheckAddIn7019_FieldNumber_SystemFrameworkFrameworkResEncrypt = 13,
  ST_CheckAddIn7019_FieldNumber_SystemFrameworkFrameworkResCrc = 14,
  ST_CheckAddIn7019_FieldNumber_SystemLibLibcPlusPlusEncrypt = 15,
  ST_CheckAddIn7019_FieldNumber_SystemLibLibcPlusPlusCrc = 16,
  ST_CheckAddIn7019_FieldNumber_SystemBinLinkerEncrypt = 17,
  ST_CheckAddIn7019_FieldNumber_SystemBinLinkerCrc = 18,
  ST_CheckAddIn7019_FieldNumber_RootEncrypt = 19,
  ST_CheckAddIn7019_FieldNumber_RootCrc = 20,
  ST_CheckAddIn7019_FieldNumber_SystemEncrypt = 21,
  ST_CheckAddIn7019_FieldNumber_SystemCrc = 22,
  ST_CheckAddIn7019_FieldNumber_DataEncrypt = 23,
  ST_CheckAddIn7019_FieldNumber_DataCrc = 24,
  ST_CheckAddIn7019_FieldNumber_BuildFinderPrintEncrypt = 25,
  ST_CheckAddIn7019_FieldNumber_BuildFinderPrintCrc = 26,
  ST_CheckAddIn7019_FieldNumber_ProcVersionEncrypt = 27,
  ST_CheckAddIn7019_FieldNumber_ProcVersionCrc = 28,
  ST_CheckAddIn7019_FieldNumber_AllPkgNameMd5Encrypt = 29,
  ST_CheckAddIn7019_FieldNumber_AllPkgNameMd5Crc = 30,
  ST_CheckAddIn7019_FieldNumber_BuildDisplayIdEncrypt = 31,
  ST_CheckAddIn7019_FieldNumber_BuildDisplayIdCrc = 32,
  ST_CheckAddIn7019_FieldNumber_BuildFlavorEncrypt = 33,
  ST_CheckAddIn7019_FieldNumber_BuildFlavorCrc = 34,
  ST_CheckAddIn7019_FieldNumber_SystemLibLibandroidRuntimeEncrypt = 35,
  ST_CheckAddIn7019_FieldNumber_SystemLibLibandroidRuntimeCrc = 36,
  ST_CheckAddIn7019_FieldNumber_SystemLibLibcameraserviceEncrypt = 37,
  ST_CheckAddIn7019_FieldNumber_SystemLibLibcameraserviceCrc = 38,
};

@interface ST_CheckAddIn7019 : GPBMessage

/** ServiceManager->listServices 拼接做md5，再做加密 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *serviceListMd5Encrypt;
/** Test to see if @c serviceListMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasServiceListMd5Encrypt;

@property(nonatomic, readwrite) uint32_t serviceListMd5Crc;

@property(nonatomic, readwrite) BOOL hasServiceListMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemAppMd5Encrypt;
/** Test to see if @c systemAppMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemAppMd5Encrypt;

@property(nonatomic, readwrite) uint32_t systemAppMd5Crc;

@property(nonatomic, readwrite) BOOL hasSystemAppMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemPrivAppMd5Encrypt;
/** Test to see if @c systemPrivAppMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemPrivAppMd5Encrypt;

@property(nonatomic, readwrite) uint32_t systemPrivAppMd5Crc;

@property(nonatomic, readwrite) BOOL hasSystemPrivAppMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *vendorAppMd5Encrypt;
/** Test to see if @c vendorAppMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasVendorAppMd5Encrypt;

@property(nonatomic, readwrite) uint32_t vendorAppMd5Crc;

@property(nonatomic, readwrite) BOOL hasVendorAppMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *productAppMd5Encrypt;
/** Test to see if @c productAppMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasProductAppMd5Encrypt;

@property(nonatomic, readwrite) uint32_t productAppMd5Crc;

@property(nonatomic, readwrite) BOOL hasProductAppMd5Crc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemBinLsEncrypt;
/** Test to see if @c systemBinLsEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemBinLsEncrypt;

@property(nonatomic, readwrite) uint32_t systemBinLsCrc;

@property(nonatomic, readwrite) BOOL hasSystemBinLsCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemFrameworkFrameworkResEncrypt;
/** Test to see if @c systemFrameworkFrameworkResEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemFrameworkFrameworkResEncrypt;

@property(nonatomic, readwrite) uint32_t systemFrameworkFrameworkResCrc;

@property(nonatomic, readwrite) BOOL hasSystemFrameworkFrameworkResCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemLibLibcPlusPlusEncrypt;
/** Test to see if @c systemLibLibcPlusPlusEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemLibLibcPlusPlusEncrypt;

@property(nonatomic, readwrite) uint32_t systemLibLibcPlusPlusCrc;

@property(nonatomic, readwrite) BOOL hasSystemLibLibcPlusPlusCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemBinLinkerEncrypt;
/** Test to see if @c systemBinLinkerEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemBinLinkerEncrypt;

@property(nonatomic, readwrite) uint32_t systemBinLinkerCrc;

@property(nonatomic, readwrite) BOOL hasSystemBinLinkerCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *rootEncrypt;
/** Test to see if @c rootEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasRootEncrypt;

@property(nonatomic, readwrite) uint32_t rootCrc;

@property(nonatomic, readwrite) BOOL hasRootCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemEncrypt;
/** Test to see if @c systemEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemEncrypt;

@property(nonatomic, readwrite) uint32_t systemCrc;

@property(nonatomic, readwrite) BOOL hasSystemCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *dataEncrypt;
/** Test to see if @c dataEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasDataEncrypt;

@property(nonatomic, readwrite) uint32_t dataCrc;

@property(nonatomic, readwrite) BOOL hasDataCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *buildFinderPrintEncrypt;
/** Test to see if @c buildFinderPrintEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasBuildFinderPrintEncrypt;

@property(nonatomic, readwrite) uint32_t buildFinderPrintCrc;

@property(nonatomic, readwrite) BOOL hasBuildFinderPrintCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *procVersionEncrypt;
/** Test to see if @c procVersionEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasProcVersionEncrypt;

@property(nonatomic, readwrite) uint32_t procVersionCrc;

@property(nonatomic, readwrite) BOOL hasProcVersionCrc;
/** add in 7.0.21 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *allPkgNameMd5Encrypt;
/** Test to see if @c allPkgNameMd5Encrypt has been set. */
@property(nonatomic, readwrite) BOOL hasAllPkgNameMd5Encrypt;

@property(nonatomic, readwrite) uint32_t allPkgNameMd5Crc;

@property(nonatomic, readwrite) BOOL hasAllPkgNameMd5Crc;
/** add in 8.0.2 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *buildDisplayIdEncrypt;
/** Test to see if @c buildDisplayIdEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasBuildDisplayIdEncrypt;

@property(nonatomic, readwrite) uint32_t buildDisplayIdCrc;

@property(nonatomic, readwrite) BOOL hasBuildDisplayIdCrc;
@property(nonatomic, readwrite, copy, null_resettable) NSData *buildFlavorEncrypt;
/** Test to see if @c buildFlavorEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasBuildFlavorEncrypt;

@property(nonatomic, readwrite) uint32_t buildFlavorCrc;

@property(nonatomic, readwrite) BOOL hasBuildFlavorCrc;
/** /system/lib/libandroid_runtime.so */
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemLibLibandroidRuntimeEncrypt;
/** Test to see if @c systemLibLibandroidRuntimeEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemLibLibandroidRuntimeEncrypt;

@property(nonatomic, readwrite) uint32_t systemLibLibandroidRuntimeCrc;

@property(nonatomic, readwrite) BOOL hasSystemLibLibandroidRuntimeCrc;
/** /system/lib/libcameraservice.so */
@property(nonatomic, readwrite, copy, null_resettable) NSData *systemLibLibcameraserviceEncrypt;
/** Test to see if @c systemLibLibcameraserviceEncrypt has been set. */
@property(nonatomic, readwrite) BOOL hasSystemLibLibcameraserviceEncrypt;

@property(nonatomic, readwrite) uint32_t systemLibLibcameraserviceCrc;

@property(nonatomic, readwrite) BOOL hasSystemLibLibcameraserviceCrc;
@end

#pragma mark - ClientSpamInfo

typedef GPB_ENUM(ClientSpamInfo_FieldNumber) {
  ClientSpamInfo_FieldNumber_Ccdcc = 1,
  ClientSpamInfo_FieldNumber_Ccdts = 2,
  ClientSpamInfo_FieldNumber_St = 3,
};

@interface ClientSpamInfo : GPBMessage

@property(nonatomic, readwrite) uint32_t ccdcc;

@property(nonatomic, readwrite) BOOL hasCcdcc;
@property(nonatomic, readwrite) uint32_t ccdts;

@property(nonatomic, readwrite) BOOL hasCcdts;
@property(nonatomic, readwrite, strong, null_resettable) ST *st;
/** Test to see if @c st has been set. */
@property(nonatomic, readwrite) BOOL hasSt;

@end

#pragma mark - WCSTF

typedef GPB_ENUM(WCSTF_FieldNumber) {
  WCSTF_FieldNumber_St = 1,
  WCSTF_FieldNumber_Et = 2,
  WCSTF_FieldNumber_Cc = 3,
  WCSTF_FieldNumber_CtArray = 4,
};

@interface WCSTF : GPBMessage

@property(nonatomic, readwrite) uint64_t st;

@property(nonatomic, readwrite) BOOL hasSt;
@property(nonatomic, readwrite) uint64_t et;

@property(nonatomic, readwrite) BOOL hasEt;
@property(nonatomic, readwrite) uint64_t cc;

@property(nonatomic, readwrite) BOOL hasCc;
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *ctArray;
/** The number of items in @c ctArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ctArray_Count;

@end

#pragma mark - WCSTE

typedef GPB_ENUM(WCSTE_FieldNumber) {
  WCSTE_FieldNumber_Context = 1,
  WCSTE_FieldNumber_St = 2,
  WCSTE_FieldNumber_Et = 3,
  WCSTE_FieldNumber_Iec = 4,
  WCSTE_FieldNumber_Tec = 5,
  WCSTE_FieldNumber_Asst = 6,
  WCSTE_FieldNumber_Pss = 7,
  WCSTE_FieldNumber_Tlmj = 8,
  WCSTE_FieldNumber_Tlmn = 9,
  WCSTE_FieldNumber_Thmj = 10,
  WCSTE_FieldNumber_Thmn = 11,
  WCSTE_FieldNumber_Sz = 12,
};

@interface WCSTE : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) uint32_t st;

@property(nonatomic, readwrite) BOOL hasSt;
@property(nonatomic, readwrite) uint32_t et;

@property(nonatomic, readwrite) BOOL hasEt;
@property(nonatomic, readwrite) uint32_t iec;

@property(nonatomic, readwrite) BOOL hasIec;
@property(nonatomic, readwrite) uint32_t tec;

@property(nonatomic, readwrite) BOOL hasTec;
@property(nonatomic, readwrite) uint32_t asst;

@property(nonatomic, readwrite) BOOL hasAsst;
@property(nonatomic, readwrite) uint64_t pss;

@property(nonatomic, readwrite) BOOL hasPss;
@property(nonatomic, readwrite) uint64_t tlmj;

@property(nonatomic, readwrite) BOOL hasTlmj;
@property(nonatomic, readwrite) uint64_t tlmn;

@property(nonatomic, readwrite) BOOL hasTlmn;
@property(nonatomic, readwrite) uint64_t thmj;

@property(nonatomic, readwrite) BOOL hasThmj;
@property(nonatomic, readwrite) uint64_t thmn;

@property(nonatomic, readwrite) BOOL hasThmn;
@property(nonatomic, readwrite) uint64_t sz;

@property(nonatomic, readwrite) BOOL hasSz;
@end

#pragma mark - SensorData2

typedef GPB_ENUM(SensorData2_FieldNumber) {
  SensorData2_FieldNumber_Where = 1,
  SensorData2_FieldNumber_Context = 2,
  SensorData2_FieldNumber_Count = 3,
  SensorData2_FieldNumber_StartTime = 4,
  SensorData2_FieldNumber_EndTime = 5,
  SensorData2_FieldNumber_CollectTime = 6,
  SensorData2_FieldNumber_Tag7 = 7,
  SensorData2_FieldNumber_GroupItemsArray = 10,
  SensorData2_FieldNumber_Tag11 = 11,
};

@interface SensorData2 : GPBMessage

/** com.tencent.mm.normsg.c$p::fa(Login_f5f5be2e-e287-4338-af84-945236c6fa58,2,200) 第二个参数：//Register:1, Login:2, VerifyUser:3, Unknown:defualt */
@property(nonatomic, readwrite) uint32_t where;

@property(nonatomic, readwrite) BOOL hasWhere;
/** Login_a10c3d0e-25ab-4a4e-b038-c170b5e818f7 为 "Login" + "_" + uuid. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** 固定 200。 com.tencent.mm.normsg.c$p::fa(Login_f5f5be2e-e287-4338-af84-945236c6fa58,2,200) 第三个参数，代码里写死的 200。 //每组收集的个数？ */
@property(nonatomic, readwrite) uint32_t count;

@property(nonatomic, readwrite) BOOL hasCount;
/** tv.sec * 1000 + tv.usec / 1000 */
@property(nonatomic, readwrite) uint64_t startTime;

@property(nonatomic, readwrite) BOOL hasStartTime;
/** tv.sec * 1000 + tv.usec / 1000 */
@property(nonatomic, readwrite) uint64_t endTime;

@property(nonatomic, readwrite) BOOL hasEndTime;
/** tv.sec * 1000 + tv.usec / 1000 */
@property(nonatomic, readwrite) uint64_t collectTime;

@property(nonatomic, readwrite) BOOL hasCollectTime;
@property(nonatomic, readwrite) uint32_t tag7;

@property(nonatomic, readwrite) BOOL hasTag7;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SensorData2_GroupItem*> *groupItemsArray;
/** The number of items in @c groupItemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger groupItemsArray_Count;

@property(nonatomic, readwrite) uint32_t tag11;

@property(nonatomic, readwrite) BOOL hasTag11;
@end

#pragma mark - SensorData2_SensorEvent

typedef GPB_ENUM(SensorData2_SensorEvent_FieldNumber) {
  SensorData2_SensorEvent_FieldNumber_Value1 = 1,
  SensorData2_SensorEvent_FieldNumber_Value2 = 2,
  SensorData2_SensorEvent_FieldNumber_Value3 = 3,
  SensorData2_SensorEvent_FieldNumber_Timestamp = 4,
};

@interface SensorData2_SensorEvent : GPBMessage

@property(nonatomic, readwrite) float value1;

@property(nonatomic, readwrite) BOOL hasValue1;
@property(nonatomic, readwrite) float value2;

@property(nonatomic, readwrite) BOOL hasValue2;
@property(nonatomic, readwrite) float value3;

@property(nonatomic, readwrite) BOOL hasValue3;
@property(nonatomic, readwrite) uint32_t timestamp;

@property(nonatomic, readwrite) BOOL hasTimestamp;
@end

#pragma mark - SensorData2_GroupItem

typedef GPB_ENUM(SensorData2_GroupItem_FieldNumber) {
  SensorData2_GroupItem_FieldNumber_SensorType = 1,
  SensorData2_GroupItem_FieldNumber_EventsArray = 2,
};

@interface SensorData2_GroupItem : GPBMessage

/** 1->1, 4->2, 9->3, 10->4, 11->5. | {1, 4, 9, 10, 11};  TYPE_ACCELEROMETER, TYPE_GYROSCOPE, TYPE_GRAVITY, TYPE_LINEAR_ACCELERATION ,TYPE_ROTATION_VECTOR */
@property(nonatomic, readwrite) uint32_t sensorType;

@property(nonatomic, readwrite) BOOL hasSensorType;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SensorData2_SensorEvent*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

@end

#pragma mark - FPKeyVal

typedef GPB_ENUM(FPKeyVal_FieldNumber) {
  FPKeyVal_FieldNumber_Key = 1,
  FPKeyVal_FieldNumber_Value = 2,
};

@interface FPKeyVal : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

@end

#pragma mark - FPKeyVals

typedef GPB_ENUM(FPKeyVals_FieldNumber) {
  FPKeyVals_FieldNumber_KeyValArray = 1,
};

@interface FPKeyVals : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FPKeyVal*> *keyValArray;
/** The number of items in @c keyValArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keyValArray_Count;

@end

#pragma mark - FPDevice

typedef GPB_ENUM(FPDevice_FieldNumber) {
  FPDevice_FieldNumber_Keyvals = 1,
  FPDevice_FieldNumber_Unknown2 = 2,
};

@interface FPDevice : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) FPKeyVals *keyvals;
/** Test to see if @c keyvals has been set. */
@property(nonatomic, readwrite) BOOL hasKeyvals;

/** 未知 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *unknown2;
/** Test to see if @c unknown2 has been set. */
@property(nonatomic, readwrite) BOOL hasUnknown2;

@end

#pragma mark - ClientCheckData

typedef GPB_ENUM(ClientCheckData_FieldNumber) {
  ClientCheckData_FieldNumber_Version = 1,
  ClientCheckData_FieldNumber_Type = 2,
  ClientCheckData_FieldNumber_ClientCheckData = 3,
  ClientCheckData_FieldNumber_TimeStamp = 4,
  ClientCheckData_FieldNumber_DataType = 5,
  ClientCheckData_FieldNumber_Status = 6,
};

/**
 *  用于加密完填充字端用。
 **/
@interface ClientCheckData : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *version;
/** Test to see if @c version has been set. */
@property(nonatomic, readwrite) BOOL hasVersion;

@property(nonatomic, readwrite) uint32_t type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSData *clientCheckData;
/** Test to see if @c clientCheckData has been set. */
@property(nonatomic, readwrite) BOOL hasClientCheckData;

/** 706没有 , 7011有 System.currentTimeMillis() / 1000L; */
@property(nonatomic, readwrite) uint64_t timeStamp;

@property(nonatomic, readwrite) BOOL hasTimeStamp;
/** dataType=5: 003加密； dataType=4: 经过压缩的数据，不用设置version；dataType=2: 有时候为空，但devicetoken会用此格式，可能是proto明文数据。 */
@property(nonatomic, readwrite) uint32_t dataType;

@property(nonatomic, readwrite) BOOL hasDataType;
/** 0 = 成功， 1 = 失败 定位字符串：ae.d("MicroMsg.SecInfoReporterImpl", "compressed and base64 result is still too large with length " + v0_3.length); */
@property(nonatomic, readwrite) uint32_t status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - SpamBuff

typedef GPB_ENUM(SpamBuff_FieldNumber) {
  SpamBuff_FieldNumber_Soft = 2,
  SpamBuff_FieldNumber_Devicetoken = 3,
  SpamBuff_FieldNumber_Timestamp = 4,
};

@interface SpamBuff : GPBMessage

/** 还不清楚这个数据是干啥用的，下次刷新token会用吗? 是的，用来计算类似于md5之类的那个东西。 */
@property(nonatomic, readwrite, strong, null_resettable) SpamBuff_Soft *soft;
/** Test to see if @c soft has been set. */
@property(nonatomic, readwrite) BOOL hasSoft;

@property(nonatomic, readwrite, copy, null_resettable) NSString *devicetoken;
/** Test to see if @c devicetoken has been set. */
@property(nonatomic, readwrite) BOOL hasDevicetoken;

@property(nonatomic, readwrite) uint32_t timestamp;

@property(nonatomic, readwrite) BOOL hasTimestamp;
@end

#pragma mark - SpamBuff_Soft

typedef GPB_ENUM(SpamBuff_Soft_FieldNumber) {
  SpamBuff_Soft_FieldNumber_SoftData = 1,
  SpamBuff_Soft_FieldNumber_SoftConfig = 2,
};

@interface SpamBuff_Soft : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *softData;
/** Test to see if @c softData has been set. */
@property(nonatomic, readwrite) BOOL hasSoftData;

@property(nonatomic, readwrite, copy, null_resettable) NSData *softConfig;
/** Test to see if @c softConfig has been set. */
@property(nonatomic, readwrite) BOOL hasSoftConfig;

@end

#pragma mark - ClientSpamInfo_IOS

typedef GPB_ENUM(ClientSpamInfo_IOS_FieldNumber) {
  ClientSpamInfo_IOS_FieldNumber_Ccdcc = 1,
  ClientSpamInfo_IOS_FieldNumber_Ccdts = 2,
  ClientSpamInfo_IOS_FieldNumber_Content = 3,
};

@interface ClientSpamInfo_IOS : GPBMessage

@property(nonatomic, readwrite) uint32_t ccdcc;

@property(nonatomic, readwrite) BOOL hasCcdcc;
@property(nonatomic, readwrite) uint32_t ccdts;

@property(nonatomic, readwrite) BOOL hasCcdts;
@property(nonatomic, readwrite, strong, null_resettable) ClientSpamInfo_IOS_Content *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

@end

#pragma mark - ClientSpamInfo_IOS_Content

typedef GPB_ENUM(ClientSpamInfo_IOS_Content_FieldNumber) {
  ClientSpamInfo_IOS_Content_FieldNumber_Tag3 = 3,
  ClientSpamInfo_IOS_Content_FieldNumber_Tag51 = 11,
};

@interface ClientSpamInfo_IOS_Content : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *tag3;
/** Test to see if @c tag3 has been set. */
@property(nonatomic, readwrite) BOOL hasTag3;

@property(nonatomic, readwrite, copy, null_resettable) NSData *tag51;
/** Test to see if @c tag51 has been set. */
@property(nonatomic, readwrite) BOOL hasTag51;

@end

#pragma mark - wcaes

typedef GPB_ENUM(wcaes_FieldNumber) {
  wcaes_FieldNumber_Type = 1,
  wcaes_FieldNumber_Iv = 2,
  wcaes_FieldNumber_Len = 3,
  wcaes_FieldNumber_Mztkey = 4,
  wcaes_FieldNumber_Mztkeyvalue = 5,
  wcaes_FieldNumber_Unkown6 = 6,
  wcaes_FieldNumber_Unkown7 = 7,
  wcaes_FieldNumber_Unkown8 = 8,
  wcaes_FieldNumber_Unkown9 = 9,
  wcaes_FieldNumber_Tablekey = 10,
  wcaes_FieldNumber_Unkown11 = 11,
  wcaes_FieldNumber_Tablevalue = 12,
  wcaes_FieldNumber_Unkown13 = 13,
  wcaes_FieldNumber_Unkown14 = 14,
  wcaes_FieldNumber_Unkown15 = 15,
  wcaes_FieldNumber_Unkown16 = 16,
  wcaes_FieldNumber_Unkown17 = 17,
  wcaes_FieldNumber_Unkown18 = 18,
  wcaes_FieldNumber_Unkown19 = 19,
  wcaes_FieldNumber_Unkown20 = 20,
  wcaes_FieldNumber_Unkown21 = 21,
  wcaes_FieldNumber_Unkown22 = 22,
  wcaes_FieldNumber_Unkown23 = 23,
  wcaes_FieldNumber_Unkown24 = 24,
  wcaes_FieldNumber_Unkown25 = 25,
};

@interface wcaes : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *type;
/** Test to see if @c type has been set. */
@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, copy, null_resettable) NSData *iv;
/** Test to see if @c iv has been set. */
@property(nonatomic, readwrite) BOOL hasIv;

@property(nonatomic, readwrite) int32_t len;

@property(nonatomic, readwrite) BOOL hasLen;
@property(nonatomic, readwrite, copy, null_resettable) NSData *mztkey;
/** Test to see if @c mztkey has been set. */
@property(nonatomic, readwrite) BOOL hasMztkey;

@property(nonatomic, readwrite, copy, null_resettable) NSData *mztkeyvalue;
/** Test to see if @c mztkeyvalue has been set. */
@property(nonatomic, readwrite) BOOL hasMztkeyvalue;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown6;
/** Test to see if @c unkown6 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown6;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown7;
/** Test to see if @c unkown7 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown7;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown8;
/** Test to see if @c unkown8 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown8;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown9;
/** Test to see if @c unkown9 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown9;

@property(nonatomic, readwrite, copy, null_resettable) NSData *tablekey;
/** Test to see if @c tablekey has been set. */
@property(nonatomic, readwrite) BOOL hasTablekey;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown11;
/** Test to see if @c unkown11 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown11;

@property(nonatomic, readwrite, copy, null_resettable) NSData *tablevalue;
/** Test to see if @c tablevalue has been set. */
@property(nonatomic, readwrite) BOOL hasTablevalue;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown13;
/** Test to see if @c unkown13 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown13;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown14;
/** Test to see if @c unkown14 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown14;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown15;
/** Test to see if @c unkown15 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown15;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown16;
/** Test to see if @c unkown16 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown16;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown17;
/** Test to see if @c unkown17 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown17;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown18;
/** Test to see if @c unkown18 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown18;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown19;
/** Test to see if @c unkown19 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown19;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown20;
/** Test to see if @c unkown20 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown20;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown21;
/** Test to see if @c unkown21 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown21;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown22;
/** Test to see if @c unkown22 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown22;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown23;
/** Test to see if @c unkown23 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown23;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown24;
/** Test to see if @c unkown24 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown24;

@property(nonatomic, readwrite, copy, null_resettable) NSData *unkown25;
/** Test to see if @c unkown25 has been set. */
@property(nonatomic, readwrite) BOOL hasUnkown25;

@end

#pragma mark - ACgiDeviceInfo

typedef GPB_ENUM(ACgiDeviceInfo_FieldNumber) {
  ACgiDeviceInfo_FieldNumber_Manufacturer = 1,
  ACgiDeviceInfo_FieldNumber_Model = 2,
  ACgiDeviceInfo_FieldNumber_VersionRelease = 3,
  ACgiDeviceInfo_FieldNumber_VersionIncremental = 4,
  ACgiDeviceInfo_FieldNumber_Display = 5,
  ACgiDeviceInfo_FieldNumber_FingerPrint = 6,
  ACgiDeviceInfo_FieldNumber_Ndm = 7,
};

@interface ACgiDeviceInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *manufacturer;
/** Test to see if @c manufacturer has been set. */
@property(nonatomic, readwrite) BOOL hasManufacturer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *model;
/** Test to see if @c model has been set. */
@property(nonatomic, readwrite) BOOL hasModel;

@property(nonatomic, readwrite, copy, null_resettable) NSString *versionRelease;
/** Test to see if @c versionRelease has been set. */
@property(nonatomic, readwrite) BOOL hasVersionRelease;

@property(nonatomic, readwrite, copy, null_resettable) NSString *versionIncremental;
/** Test to see if @c versionIncremental has been set. */
@property(nonatomic, readwrite) BOOL hasVersionIncremental;

@property(nonatomic, readwrite, copy, null_resettable) NSString *display;
/** Test to see if @c display has been set. */
@property(nonatomic, readwrite) BOOL hasDisplay;

@property(nonatomic, readwrite, copy, null_resettable) NSString *fingerPrint;
/** Test to see if @c fingerPrint has been set. */
@property(nonatomic, readwrite) BOOL hasFingerPrint;

@property(nonatomic, readwrite, copy, null_resettable) NSString *ndm;
/** Test to see if @c ndm has been set. */
@property(nonatomic, readwrite) BOOL hasNdm;

@end

#pragma mark - WCExtInfo

typedef GPB_ENUM(WCExtInfo_FieldNumber) {
  WCExtInfo_FieldNumber_Wcstf = 1,
  WCExtInfo_FieldNumber_Wcste = 2,
  WCExtInfo_FieldNumber_CcData = 3,
  WCExtInfo_FieldNumber_RegInfo = 4,
  WCExtInfo_FieldNumber_AcgiDeviceInfo = 5,
  WCExtInfo_FieldNumber_AcgiTuring = 6,
  WCExtInfo_FieldNumber_DeviceToken = 7,
  WCExtInfo_FieldNumber_SensorDataContext = 8,
  WCExtInfo_FieldNumber_SensorData = 9,
  WCExtInfo_FieldNumber_TuringOwner = 10,
  WCExtInfo_FieldNumber_IosturingHuman = 101,
  WCExtInfo_FieldNumber_IosturingOwner = 102,
};

@interface WCExtInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *wcstf;
/** Test to see if @c wcstf has been set. */
@property(nonatomic, readwrite) BOOL hasWcstf;

@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *wcste;
/** Test to see if @c wcste has been set. */
@property(nonatomic, readwrite) BOOL hasWcste;

/** buffer = 003 clientCheckData, ReportContext：manualauth 时为 0x203F0000 ,autoauth 时为 0， 注册时为： 0x203F0001 */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *ccData;
/** Test to see if @c ccData has been set. */
@property(nonatomic, readwrite) BOOL hasCcData;

/** RegUserAttrInfo */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *regInfo;
/** Test to see if @c regInfo has been set. */
@property(nonatomic, readwrite) BOOL hasRegInfo;

/** buffer = ClientCheckData. DataType = 4, ReportContext = 18446744071562067970 = 0x80000002, ACgiDeviceInfo */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *acgiDeviceInfo;
/** Test to see if @c acgiDeviceInfo has been set. */
@property(nonatomic, readwrite) BOOL hasAcgiDeviceInfo;

/** buffer = ClientCheckData */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *acgiTuring;
/** Test to see if @c acgiTuring has been set. */
@property(nonatomic, readwrite) BOOL hasAcgiTuring;

/** buffer = ClientCheckData */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *deviceToken;
/** Test to see if @c deviceToken has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceToken;

/** buffer = "Login_0feff24c-f695-44ad-8369-93729225c2c5" | ReportContext = 540999687 */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *sensorDataContext;
/** Test to see if @c sensorDataContext has been set. */
@property(nonatomic, readwrite) BOOL hasSensorDataContext;

/** buffer = ClientCheckData ClientCheckData = devicetoken.getBytes() */
@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *sensorData;
/** Test to see if @c sensorData has been set. */
@property(nonatomic, readwrite) BOOL hasSensorData;

@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *turingOwner;
/** Test to see if @c turingOwner has been set. */
@property(nonatomic, readwrite) BOOL hasTuringOwner;

@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *iosturingHuman;
/** Test to see if @c iosturingHuman has been set. */
@property(nonatomic, readwrite) BOOL hasIosturingHuman;

@property(nonatomic, readwrite, strong, null_resettable) SKBuiltinBuffer_t *iosturingOwner;
/** Test to see if @c iosturingOwner has been set. */
@property(nonatomic, readwrite) BOOL hasIosturingOwner;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
