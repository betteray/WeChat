// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmhongbao.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmhongbao.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmhongbaoRoot

@implementation MmhongbaoRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmhongbaoRoot_FileDescriptor

static GPBFileDescriptor *MmhongbaoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - HongBaoReq

@implementation HongBaoReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCgiCmd, cgiCmd;
@dynamic hasOutPutType, outPutType;
@dynamic hasReqText, reqText;

typedef struct HongBaoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cgiCmd;
  uint32_t outPutType;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *reqText;
} HongBaoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = HongBaoReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HongBaoReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cgiCmd",
        .dataTypeSpecific.className = NULL,
        .number = HongBaoReq_FieldNumber_CgiCmd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HongBaoReq__storage_, cgiCmd),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "outPutType",
        .dataTypeSpecific.className = NULL,
        .number = HongBaoReq_FieldNumber_OutPutType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HongBaoReq__storage_, outPutType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reqText",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = HongBaoReq_FieldNumber_ReqText,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HongBaoReq__storage_, reqText),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HongBaoReq class]
                                     rootClass:[MmhongbaoRoot class]
                                          file:MmhongbaoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HongBaoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003J\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TenPayRequest

@implementation TenPayRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCgiCmd, cgiCmd;
@dynamic hasOutPutType, outPutType;
@dynamic hasReqText, reqText;
@dynamic hasReqTextWx, reqTextWx;
@dynamic hasSign, sign;
@dynamic hasCrtNo, crtNo;

typedef struct TenPayRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cgiCmd;
  uint32_t outPutType;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *reqText;
  SKBuiltinBuffer_t *reqTextWx;
  NSString *sign;
  NSString *crtNo;
} TenPayRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = TenPayRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cgiCmd",
        .dataTypeSpecific.className = NULL,
        .number = TenPayRequest_FieldNumber_CgiCmd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, cgiCmd),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "outPutType",
        .dataTypeSpecific.className = NULL,
        .number = TenPayRequest_FieldNumber_OutPutType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, outPutType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reqText",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = TenPayRequest_FieldNumber_ReqText,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, reqText),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reqTextWx",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = TenPayRequest_FieldNumber_ReqTextWx,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, reqTextWx),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = TenPayRequest_FieldNumber_Sign,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, sign),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "crtNo",
        .dataTypeSpecific.className = NULL,
        .number = TenPayRequest_FieldNumber_CrtNo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TenPayRequest__storage_, crtNo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TenPayRequest class]
                                     rootClass:[MmhongbaoRoot class]
                                          file:MmhongbaoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TenPayRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002F\000\003J\000\004\007\000\005\t\000\006D\000\007E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
