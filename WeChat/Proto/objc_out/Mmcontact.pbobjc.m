// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmcontact.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmcontact.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmcontactRoot

@implementation MmcontactRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmcontactRoot_FileDescriptor

static GPBFileDescriptor *MmcontactRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - GetBrandListRequestBuffer

@implementation GetBrandListRequestBuffer

@dynamic hasCount, count;
@dynamic hasHiddenCount, hiddenCount;

typedef struct GetBrandListRequestBuffer__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t hiddenCount;
} GetBrandListRequestBuffer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetBrandListRequestBuffer_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBrandListRequestBuffer__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hiddenCount",
        .dataTypeSpecific.className = NULL,
        .number = GetBrandListRequestBuffer_FieldNumber_HiddenCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBrandListRequestBuffer__storage_, hiddenCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBrandListRequestBuffer class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBrandListRequestBuffer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBrandListRequest

@implementation GetBrandListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasRequestBuffer, requestBuffer;

typedef struct GetBrandListRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *userName;
  SKBuiltinBuffer_t *requestBuffer;
} GetBrandListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetBrandListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBrandListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = GetBrandListRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBrandListRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetBrandListRequest_FieldNumber_RequestBuffer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetBrandListRequest__storage_, requestBuffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBrandListRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBrandListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBrandListResponse

@implementation GetBrandListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasBrandList, brandList;
@dynamic hasRequestBuffer, requestBuffer;

typedef struct GetBrandListResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *brandList;
  SKBuiltinBuffer_t *requestBuffer;
} GetBrandListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetBrandListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBrandListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "brandList",
        .dataTypeSpecific.className = NULL,
        .number = GetBrandListResponse_FieldNumber_BrandList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBrandListResponse__storage_, brandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetBrandListResponse_FieldNumber_RequestBuffer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetBrandListResponse__storage_, requestBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBrandListResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBrandListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002I\000\003M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APPItem

@implementation APPItem

@dynamic hasUserName, userName;

typedef struct APPItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} APPItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = APPItem_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APPItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APPItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APPItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAPPListRequest

@implementation SetAPPListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct SetAPPListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSMutableArray *listArray;
} SetAPPListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SetAPPListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAPPListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SetAPPListRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetAPPListRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(APPItem),
        .number = SetAPPListRequest_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SetAPPListRequest__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAPPListRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAPPListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAPPListResponse

@implementation SetAPPListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasHash_p, hash_p;

typedef struct SetAPPListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hash_p;
  BaseResponse *baseResponse;
} SetAPPListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SetAPPListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAPPListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = SetAPPListResponse_FieldNumber_Hash_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetAPPListResponse__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAPPListResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAPPListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002\000Hash\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAPPListRequest

@implementation GetAPPListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasHash_p, hash_p;

typedef struct GetAPPListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hash_p;
  BaseRequest *baseRequest;
} GetAPPListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetAPPListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAPPListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = GetAPPListRequest_FieldNumber_Hash_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAPPListRequest__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAPPListRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAPPListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002\000Hash\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAPPListResponse

@implementation GetAPPListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasHash_p, hash_p;

typedef struct GetAPPListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t hash_p;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} GetAPPListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetAPPListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAPPListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetAPPListResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAPPListResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(APPItem),
        .number = GetAPPListResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAPPListResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = GetAPPListResponse_FieldNumber_Hash_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetAPPListResponse__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAPPListResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAPPListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002E\000\003\000List\000\004\000Hash\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchQRCodeReq

@implementation SearchQRCodeReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasQrcode, qrcode;

typedef struct SearchQRCodeReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *qrcode;
} SearchQRCodeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SearchQRCodeReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchQRCodeReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qrcode",
        .dataTypeSpecific.className = NULL,
        .number = SearchQRCodeReq_FieldNumber_Qrcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchQRCodeReq__storage_, qrcode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchQRCodeReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchQRCodeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002c\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchQRCodeResp

@implementation SearchQRCodeResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasType, type;
@dynamic hasURL, URL;

typedef struct SearchQRCodeResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  BaseResponse *baseResponse;
  NSString *URL;
} SearchQRCodeResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SearchQRCodeResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchQRCodeResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SearchQRCodeResp_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchQRCodeResp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = SearchQRCodeResp_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchQRCodeResp__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchQRCodeResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchQRCodeResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002D\000\003\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchContactRequest

@implementation SearchContactRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasOpCode, opCode;
@dynamic hasReqBuf, reqBuf;
@dynamic hasFromScene, fromScene;
@dynamic hasSearchScene, searchScene;

typedef struct SearchContactRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t fromScene;
  uint32_t searchScene;
  BaseRequest *baseRequest;
  SKBuiltinString_t *userName;
  SKBuiltinBuffer_t *reqBuf;
} SearchContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SearchContactRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchContactRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchContactRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactRequest_FieldNumber_OpCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchContactRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reqBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchContactRequest_FieldNumber_ReqBuf,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchContactRequest__storage_, reqBuf),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromScene",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactRequest_FieldNumber_FromScene,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchContactRequest__storage_, fromScene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "searchScene",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactRequest_FieldNumber_SearchScene,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SearchContactRequest__storage_, searchScene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchContactRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchContactRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002H\000\003F\000\004F\000\005I\000\006K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchContactItem

@implementation SearchContactItem

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasPyinitial, pyinitial;
@dynamic hasQuanPin, quanPin;
@dynamic hasSex, sex;
@dynamic hasImgBuf, imgBuf;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasPersonalCard, personalCard;
@dynamic hasVerifyFlag, verifyFlag;
@dynamic hasVerifyInfo, verifyInfo;
@dynamic hasWeibo, weibo;
@dynamic hasAlias, alias;
@dynamic hasWeiboNickname, weiboNickname;
@dynamic hasWeiboFlag, weiboFlag;
@dynamic hasAlbumStyle, albumStyle;
@dynamic hasAlbumFlag, albumFlag;
@dynamic hasAlbumBgimgId, albumBgimgId;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasCountry, country;
@dynamic hasMyBrandList, myBrandList;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasAntispamTicket, antispamTicket;
@dynamic hasMatchType, matchType;

typedef struct SearchContactItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t personalCard;
  uint32_t verifyFlag;
  uint32_t weiboFlag;
  int32_t albumStyle;
  int32_t albumFlag;
  uint32_t matchType;
  SKBuiltinString_t *userName;
  SKBuiltinString_t *nickName;
  SKBuiltinString_t *pyinitial;
  SKBuiltinString_t *quanPin;
  SKBuiltinBuffer_t *imgBuf;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *verifyInfo;
  NSString *weibo;
  NSString *alias;
  NSString *weiboNickname;
  NSString *albumBgimgId;
  SnsUserInfo *snsUserInfo;
  NSString *country;
  NSString *myBrandList;
  CustomizedInfo *customizedInfo;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *antispamTicket;
} SearchContactItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactItem_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactItem_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pyinitial",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactItem_FieldNumber_Pyinitial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, pyinitial),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quanPin",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactItem_FieldNumber_QuanPin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, quanPin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_Sex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchContactItem_FieldNumber_ImgBuf,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_Province,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_City,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_Signature,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "personalCard",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_PersonalCard,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, personalCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_VerifyFlag,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, verifyFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfo",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_VerifyInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, verifyInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weibo",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_Weibo,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, weibo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_Alias,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboNickname",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_WeiboNickname,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, weiboNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_WeiboFlag,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, weiboFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumStyle",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_AlbumStyle,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, albumStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "albumFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_AlbumFlag,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, albumFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "albumBgimgId",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_AlbumBgimgId,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, albumBgimgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = SearchContactItem_FieldNumber_SnsUserInfo,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_Country,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "myBrandList",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_MyBrandList,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, myBrandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = SearchContactItem_FieldNumber_CustomizedInfo,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_BigHeadImgURL,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_SmallHeadImgURL,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_AntispamTicket,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "matchType",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactItem_FieldNumber_MatchType,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(SearchContactItem__storage_, matchType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchContactItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchContactItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\033\001H\000\002H\000\003c\006\000\004G\000\005C\000\006F\000\007H\000\010D\000\tI\000\nL\000\013J\000\014J\000\rE"
        "\000\016E\000\017M\000\020I\000\021J\000\022I\000\023Fb\003A\000\024K\000\025G\000\026K\000\027N\000\030K!!\000\031"
        "M!!\000\032N\000\033I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchContactResponse

@implementation SearchContactResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasPyinitial, pyinitial;
@dynamic hasQuanPin, quanPin;
@dynamic hasSex, sex;
@dynamic hasImgBuf, imgBuf;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasPersonalCard, personalCard;
@dynamic hasVerifyFlag, verifyFlag;
@dynamic hasVerifyInfo, verifyInfo;
@dynamic hasWeibo, weibo;
@dynamic hasAlias, alias;
@dynamic hasWeiboNickname, weiboNickname;
@dynamic hasWeiboFlag, weiboFlag;
@dynamic hasAlbumStyle, albumStyle;
@dynamic hasAlbumFlag, albumFlag;
@dynamic hasAlbumBgimgId, albumBgimgId;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasCountry, country;
@dynamic hasMyBrandList, myBrandList;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasContactCount, contactCount;
@dynamic contactListArray, contactListArray_Count;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasResBuf, resBuf;
@dynamic hasAntispamTicket, antispamTicket;
@dynamic hasKfworkerId, kfworkerId;
@dynamic hasMatchType, matchType;

typedef struct SearchContactResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t personalCard;
  uint32_t verifyFlag;
  uint32_t weiboFlag;
  int32_t albumStyle;
  int32_t albumFlag;
  uint32_t contactCount;
  uint32_t matchType;
  BaseResponse *baseResponse;
  SKBuiltinString_t *userName;
  SKBuiltinString_t *nickName;
  SKBuiltinString_t *pyinitial;
  SKBuiltinString_t *quanPin;
  SKBuiltinBuffer_t *imgBuf;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *verifyInfo;
  NSString *weibo;
  NSString *alias;
  NSString *weiboNickname;
  NSString *albumBgimgId;
  SnsUserInfo *snsUserInfo;
  NSString *country;
  NSString *myBrandList;
  CustomizedInfo *customizedInfo;
  NSMutableArray *contactListArray;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  SKBuiltinBuffer_t *resBuf;
  NSString *antispamTicket;
  NSString *kfworkerId;
} SearchContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SearchContactResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactResponse_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactResponse_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pyinitial",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactResponse_FieldNumber_Pyinitial,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, pyinitial),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quanPin",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SearchContactResponse_FieldNumber_QuanPin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, quanPin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_Sex,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchContactResponse_FieldNumber_ImgBuf,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_Province,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_City,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_Signature,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "personalCard",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_PersonalCard,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, personalCard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_VerifyFlag,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, verifyFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfo",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_VerifyInfo,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, verifyInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weibo",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_Weibo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, weibo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_Alias,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboNickname",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_WeiboNickname,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, weiboNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_WeiboFlag,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, weiboFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "albumStyle",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_AlbumStyle,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, albumStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "albumFlag",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_AlbumFlag,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, albumFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "albumBgimgId",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_AlbumBgimgId,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, albumBgimgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = SearchContactResponse_FieldNumber_SnsUserInfo,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_Country,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "myBrandList",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_MyBrandList,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, myBrandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = SearchContactResponse_FieldNumber_CustomizedInfo,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactCount",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_ContactCount,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, contactCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchContactItem),
        .number = SearchContactResponse_FieldNumber_ContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, contactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_BigHeadImgURL,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_SmallHeadImgURL,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SearchContactResponse_FieldNumber_ResBuf,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, resBuf),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_AntispamTicket,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kfworkerId",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_KfworkerId,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, kfworkerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "matchType",
        .dataTypeSpecific.className = NULL,
        .number = SearchContactResponse_FieldNumber_MatchType,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(SearchContactResponse__storage_, matchType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchContactResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchContactResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        " \001L\000\002H\000\003H\000\004c\006\000\005G\000\006C\000\007F\000\010H\000\tD\000\nI\000\013L\000\014J\000\rJ"
        "\000\016E\000\017E\000\020M\000\021I\000\022J\000\023I\000\024Fb\003A\000\025K\000\026G\000\027K\000\030N\000\031L\000"
        "\032\000ContactList\000\033K!!\000\034M!!\000\035F\000\036N\000\037c\006A\000 I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCardReq

@implementation GroupCardReq

@dynamic hasGroupCardName, groupCardName;

typedef struct GroupCardReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupCardName;
} GroupCardReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupCardName",
        .dataTypeSpecific.className = NULL,
        .number = GroupCardReq_FieldNumber_GroupCardName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupCardReq__storage_, groupCardName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCardReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupCardReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarMember

@implementation RadarMember

@dynamic hasMemberName, memberName;

typedef struct RadarMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberName;
} RadarMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberName",
        .dataTypeSpecific.className = NULL,
        .number = RadarMember_FieldNumber_MemberName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarMember__storage_, memberName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarMember class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarCreateChatRoomParameter

@implementation RadarCreateChatRoomParameter

@dynamic hasTicket, ticket;
@dynamic hasRadarMemberCount, radarMemberCount;
@dynamic radarMemberListArray, radarMemberListArray_Count;

typedef struct RadarCreateChatRoomParameter__storage_ {
  uint32_t _has_storage_[1];
  uint32_t radarMemberCount;
  NSString *ticket;
  NSMutableArray *radarMemberListArray;
} RadarCreateChatRoomParameter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomParameter_FieldNumber_Ticket,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomParameter__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "radarMemberCount",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomParameter_FieldNumber_RadarMemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomParameter__storage_, radarMemberCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "radarMemberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RadarMember),
        .number = RadarCreateChatRoomParameter_FieldNumber_RadarMemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomParameter__storage_, radarMemberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarCreateChatRoomParameter class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarCreateChatRoomParameter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002P\000\003\000RadarMemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateChatRoomRequest

@implementation CreateChatRoomRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTopic, topic;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasScene, scene;
@dynamic hasExtBuffer, extBuffer;

typedef struct CreateChatRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  uint32_t scene;
  BaseRequest *baseRequest;
  SKBuiltinString_t *topic;
  NSMutableArray *memberListArray;
  SKBuiltinBuffer_t *extBuffer;
} CreateChatRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CreateChatRoomRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateChatRoomRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CreateChatRoomRequest_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateChatRoomRequest__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = CreateChatRoomRequest_FieldNumber_MemberCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateChatRoomRequest__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberReq),
        .number = CreateChatRoomRequest_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CreateChatRoomRequest__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = CreateChatRoomRequest_FieldNumber_Scene,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateChatRoomRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "extBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = CreateChatRoomRequest_FieldNumber_ExtBuffer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateChatRoomRequest__storage_, extBuffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateChatRoomRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateChatRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002E\000\003K\000\004\000MemberList\000\005E\000\006I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateChatRoomResponse

@implementation CreateChatRoomResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTopic, topic;
@dynamic hasPyinitial, pyinitial;
@dynamic hasQuanPin, quanPin;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasImgBuf, imgBuf;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;

typedef struct CreateChatRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseResponse *baseResponse;
  SKBuiltinString_t *topic;
  SKBuiltinString_t *pyinitial;
  SKBuiltinString_t *quanPin;
  NSMutableArray *memberListArray;
  SKBuiltinString_t *chatRoomName;
  SKBuiltinBuffer_t *imgBuf;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
} CreateChatRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CreateChatRoomResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CreateChatRoomResponse_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pyinitial",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CreateChatRoomResponse_FieldNumber_Pyinitial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, pyinitial),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quanPin",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CreateChatRoomResponse_FieldNumber_QuanPin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, quanPin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = CreateChatRoomResponse_FieldNumber_MemberCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberResp),
        .number = CreateChatRoomResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CreateChatRoomResponse_FieldNumber_ChatRoomName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = CreateChatRoomResponse_FieldNumber_ImgBuf,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = CreateChatRoomResponse_FieldNumber_BigHeadImgURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = CreateChatRoomResponse_FieldNumber_SmallHeadImgURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CreateChatRoomResponse__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateChatRoomResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateChatRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001L\000\002E\000\003c\006\000\004G\000\005K\000\006\000MemberList\000\007L\000\010F\000\tK!!"
        "\000\nM!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddChatRoomMemberRequest

@implementation AddChatRoomMemberRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasLastRoomMsgTimeStamp, lastRoomMsgTimeStamp;
@dynamic hasAccessApplicationDesp, accessApplicationDesp;

typedef struct AddChatRoomMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  uint32_t lastRoomMsgTimeStamp;
  BaseRequest *baseRequest;
  NSMutableArray *memberListArray;
  SKBuiltinString_t *chatRoomName;
  NSString *accessApplicationDesp;
} AddChatRoomMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AddChatRoomMemberRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddChatRoomMemberRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomMemberRequest_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddChatRoomMemberRequest__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberReq),
        .number = AddChatRoomMemberRequest_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddChatRoomMemberRequest__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = AddChatRoomMemberRequest_FieldNumber_ChatRoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddChatRoomMemberRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastRoomMsgTimeStamp",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomMemberRequest_FieldNumber_LastRoomMsgTimeStamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddChatRoomMemberRequest__storage_, lastRoomMsgTimeStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "accessApplicationDesp",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomMemberRequest_FieldNumber_AccessApplicationDesp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddChatRoomMemberRequest__storage_, accessApplicationDesp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddChatRoomMemberRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddChatRoomMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002K\000\003\000MemberList\000\004L\000\005T\000\006\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddChatRoomMemberResponse

@implementation AddChatRoomMemberResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;

typedef struct AddChatRoomMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseResponse *baseResponse;
  NSMutableArray *memberListArray;
} AddChatRoomMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AddChatRoomMemberResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddChatRoomMemberResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomMemberResponse_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddChatRoomMemberResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberResp),
        .number = AddChatRoomMemberResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddChatRoomMemberResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddChatRoomMemberResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddChatRoomMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002K\000\003\000MemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelChatRoomMemberRequest

@implementation DelChatRoomMemberRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasScene, scene;

typedef struct DelChatRoomMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  uint32_t scene;
  BaseRequest *baseRequest;
  NSMutableArray *memberListArray;
  NSString *chatRoomName;
} DelChatRoomMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = DelChatRoomMemberRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelChatRoomMemberRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = DelChatRoomMemberRequest_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelChatRoomMemberRequest__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DelMemberReq),
        .number = DelChatRoomMemberRequest_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DelChatRoomMemberRequest__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = DelChatRoomMemberRequest_FieldNumber_ChatRoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DelChatRoomMemberRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = DelChatRoomMemberRequest_FieldNumber_Scene,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DelChatRoomMemberRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelChatRoomMemberRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelChatRoomMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002K\000\003\000MemberList\000\004L\000\005E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelChatRoomMemberResponse

@implementation DelChatRoomMemberResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;

typedef struct DelChatRoomMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseResponse *baseResponse;
  NSMutableArray *memberListArray;
} DelChatRoomMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = DelChatRoomMemberResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelChatRoomMemberResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = DelChatRoomMemberResponse_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelChatRoomMemberResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DelMemberResp),
        .number = DelChatRoomMemberResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DelChatRoomMemberResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelChatRoomMemberResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelChatRoomMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002K\000\003\000MemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CollectChatRoomReq

@implementation CollectChatRoomReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasGroupCardCount, groupCardCount;
@dynamic groupCardListArray, groupCardListArray_Count;

typedef struct CollectChatRoomReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupCardCount;
  BaseRequest *baseRequest;
  NSMutableArray *groupCardListArray;
} CollectChatRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CollectChatRoomReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CollectChatRoomReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupCardCount",
        .dataTypeSpecific.className = NULL,
        .number = CollectChatRoomReq_FieldNumber_GroupCardCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CollectChatRoomReq__storage_, groupCardCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupCardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupCardReq),
        .number = CollectChatRoomReq_FieldNumber_GroupCardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CollectChatRoomReq__storage_, groupCardListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CollectChatRoomReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CollectChatRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002N\000\003\000GroupCardList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CollectChatRoomResp

@implementation CollectChatRoomResp

@dynamic hasBaseResponse, baseResponse;

typedef struct CollectChatRoomResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} CollectChatRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CollectChatRoomResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CollectChatRoomResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CollectChatRoomResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CollectChatRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetHeadImgRequest

@implementation BatchGetHeadImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic userNameListArray, userNameListArray_Count;

typedef struct BatchGetHeadImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSMutableArray *userNameListArray;
} BatchGetHeadImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchGetHeadImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetHeadImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetHeadImgRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetHeadImgRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userNameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = BatchGetHeadImgRequest_FieldNumber_UserNameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetHeadImgRequest__storage_, userNameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetHeadImgRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetHeadImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003\000UserNameList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImgPair

@implementation ImgPair

@dynamic hasImgBuf, imgBuf;
@dynamic hasUsername, username;

typedef struct ImgPair__storage_ {
  uint32_t _has_storage_[1];
  SKBuiltinBuffer_t *imgBuf;
  SKBuiltinString_t *username;
} ImgPair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imgBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ImgPair_FieldNumber_ImgBuf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImgPair__storage_, imgBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = ImgPair_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImgPair__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImgPair class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImgPair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetHeadImgResponse

@implementation BatchGetHeadImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic imgPairListArray, imgPairListArray_Count;

typedef struct BatchGetHeadImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *imgPairListArray;
} BatchGetHeadImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchGetHeadImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetHeadImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetHeadImgResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetHeadImgResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgPairListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ImgPair),
        .number = BatchGetHeadImgResponse_FieldNumber_ImgPairListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetHeadImgResponse__storage_, imgPairListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetHeadImgResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetHeadImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000ImgPairList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchFriendRequest

@implementation SearchFriendRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;

typedef struct SearchFriendRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *userName;
} SearchFriendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SearchFriendRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchFriendRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = SearchFriendRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchFriendRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchFriendRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchFriendRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FriendInfo

@implementation FriendInfo

@dynamic hasDisplayUserName, displayUserName;
@dynamic hasDisplayNickName, displayNickName;
@dynamic hasDisplayRemark, displayRemark;
@dynamic hasWxuserName, wxuserName;
@dynamic hasWxnickName, wxnickName;
@dynamic hasWxremark, wxremark;
@dynamic hasType, type;
@dynamic hasStatus, status;
@dynamic hasSource, source;
@dynamic hasMatchField, matchField;
@dynamic hasAlias, alias;

typedef struct FriendInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t status;
  uint32_t matchField;
  NSString *displayUserName;
  NSString *displayNickName;
  NSString *displayRemark;
  NSString *wxuserName;
  NSString *wxnickName;
  NSString *wxremark;
  NSString *source;
  NSString *alias;
} FriendInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "displayUserName",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_DisplayUserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, displayUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayNickName",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_DisplayNickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, displayNickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayRemark",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_DisplayRemark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, displayRemark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wxuserName",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_WxuserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, wxuserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wxnickName",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_WxnickName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, wxnickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wxremark",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_Wxremark,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, wxremark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_Source,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "matchField",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_MatchField,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, matchField),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = FriendInfo_FieldNumber_Alias,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(FriendInfo__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FriendInfo class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FriendInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001O\000\002O\000\003M\000\004c\007\000\005c\007\000\006c\005\000\007D\000\010F\000\tF\000\nJ\000\013E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchFriendResponse

@implementation SearchFriendResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFriendCount, friendCount;
@dynamic friendListArray, friendListArray_Count;

typedef struct SearchFriendResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t friendCount;
  BaseResponse *baseResponse;
  NSMutableArray *friendListArray;
} SearchFriendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SearchFriendResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchFriendResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendCount",
        .dataTypeSpecific.className = NULL,
        .number = SearchFriendResponse_FieldNumber_FriendCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchFriendResponse__storage_, friendCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FriendInfo),
        .number = SearchFriendResponse_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchFriendResponse__storage_, friendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchFriendResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchFriendResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002K\000\003\000FriendList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomUpgradeInfoReq

@implementation GetChatRoomUpgradeInfoReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasScene, scene;

typedef struct GetChatRoomUpgradeInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} GetChatRoomUpgradeInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatRoomUpgradeInfoReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeInfoReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeInfoReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeInfoReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeInfoReq_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeInfoReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomUpgradeInfoReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomUpgradeInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002L\000\003E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomUpgradeInfoResp

@implementation GetChatRoomUpgradeInfoResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasChatRoomUpgradeInfo, chatRoomUpgradeInfo;

typedef struct GetChatRoomUpgradeInfoResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *chatRoomUpgradeInfo;
} GetChatRoomUpgradeInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatRoomUpgradeInfoResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeInfoResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomUpgradeInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeInfoResp_FieldNumber_ChatRoomUpgradeInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeInfoResp__storage_, chatRoomUpgradeInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomUpgradeInfoResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomUpgradeInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002S\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyValStr

@implementation KeyValStr

@dynamic hasKey, key;
@dynamic hasVal, val;

typedef struct KeyValStr__storage_ {
  uint32_t _has_storage_[1];
  uint32_t key;
  NSString *val;
} KeyValStr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = KeyValStr_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyValStr__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = KeyValStr_FieldNumber_Val,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyValStr__storage_, val),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyValStr class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyValStr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDonateInfoReq

@implementation GetDonateInfoReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasType, type;
@dynamic hasScene, scene;
@dynamic hasExtInfo, extInfo;

typedef struct GetDonateInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t scene;
  BaseRequest *baseRequest;
  NSString *extInfo;
} GetDonateInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetDonateInfoReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDonateInfoReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetDonateInfoReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetDonateInfoReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = GetDonateInfoReq_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetDonateInfoReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetDonateInfoReq_FieldNumber_ExtInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetDonateInfoReq__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDonateInfoReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDonateInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002D\000\003E\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDonateInfoResp

@implementation GetDonateInfoResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDonateInfo, donateInfo;

typedef struct GetDonateInfoResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *donateInfo;
} GetDonateInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetDonateInfoResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDonateInfoResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "donateInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetDonateInfoResp_FieldNumber_DonateInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetDonateInfoResp__storage_, donateInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDonateInfoResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDonateInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\003J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPayPurchasePackageReq

@implementation GetPayPurchasePackageReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasType, type;
@dynamic hasPrice, price;
@dynamic hasPriceType, priceType;
@dynamic hasExtInfo, extInfo;

typedef struct GetPayPurchasePackageReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t price;
  BaseRequest *baseRequest;
  NSString *priceType;
  NSString *extInfo;
} GetPayPurchasePackageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetPayPurchasePackageReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GetPayPurchasePackageReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = GetPayPurchasePackageReq_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageReq__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceType",
        .dataTypeSpecific.className = NULL,
        .number = GetPayPurchasePackageReq_FieldNumber_PriceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageReq__storage_, priceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetPayPurchasePackageReq_FieldNumber_ExtInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageReq__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPayPurchasePackageReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPayPurchasePackageReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002D\000\003E\000\004I\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPayPurchasePackageResp

@implementation GetPayPurchasePackageResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPackage, package;
@dynamic hasExtInfo, extInfo;

typedef struct GetPayPurchasePackageResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *package;
  NSString *extInfo;
} GetPayPurchasePackageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetPayPurchasePackageResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "package",
        .dataTypeSpecific.className = NULL,
        .number = GetPayPurchasePackageResp_FieldNumber_Package,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageResp__storage_, package),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetPayPurchasePackageResp_FieldNumber_ExtInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPayPurchasePackageResp__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPayPurchasePackageResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPayPurchasePackageResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyPayTransitionReq

@implementation VerifyPayTransitionReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasType, type;
@dynamic hasOutTradeNo, outTradeNo;
@dynamic hasExtInfo, extInfo;

typedef struct VerifyPayTransitionReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  BaseRequest *baseRequest;
  NSString *outTradeNo;
  NSString *extInfo;
} VerifyPayTransitionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VerifyPayTransitionReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyPayTransitionReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPayTransitionReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyPayTransitionReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "outTradeNo",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPayTransitionReq_FieldNumber_OutTradeNo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyPayTransitionReq__storage_, outTradeNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPayTransitionReq_FieldNumber_ExtInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyPayTransitionReq__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyPayTransitionReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyPayTransitionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002D\000\003J\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyPayTransitionResp

@implementation VerifyPayTransitionResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasResultMsg, resultMsg;

typedef struct VerifyPayTransitionResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *resultMsg;
} VerifyPayTransitionResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VerifyPayTransitionResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyPayTransitionResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resultMsg",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPayTransitionResp_FieldNumber_ResultMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyPayTransitionResp__storage_, resultMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyPayTransitionResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyPayTransitionResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomDonateHistoryReq

@implementation GetChatRoomDonateHistoryReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct GetChatRoomDonateHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} GetChatRoomDonateHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatRoomDonateHistoryReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomDonateHistoryReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomDonateHistoryReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomDonateHistoryReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomDonateHistoryReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomDonateHistoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Donor

@implementation Donor

@dynamic hasTime, time;
@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasDonateTitle, donateTitle;
@dynamic hasDonateURL, donateURL;

typedef struct Donor__storage_ {
  uint32_t _has_storage_[1];
  uint32_t time;
  NSString *userName;
  NSString *nickName;
  NSString *donateTitle;
  NSString *donateURL;
} Donor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Donor_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Donor__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = Donor_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Donor__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = Donor_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Donor__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "donateTitle",
        .dataTypeSpecific.className = NULL,
        .number = Donor_FieldNumber_DonateTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Donor__storage_, donateTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "donateURL",
        .dataTypeSpecific.className = NULL,
        .number = Donor_FieldNumber_DonateURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Donor__storage_, donateURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Donor class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Donor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001D\000\002H\000\003H\000\004K\000\005G!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomDonateHistoryResp

@implementation GetChatRoomDonateHistoryResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTotalCount, totalCount;
@dynamic listArray, listArray_Count;

typedef struct GetChatRoomDonateHistoryResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalCount;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} GetChatRoomDonateHistoryResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatRoomDonateHistoryResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomDonateHistoryResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalCount",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomDonateHistoryResp_FieldNumber_TotalCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomDonateHistoryResp__storage_, totalCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Donor),
        .number = GetChatRoomDonateHistoryResp_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetChatRoomDonateHistoryResp__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomDonateHistoryResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomDonateHistoryResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002J\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomPresentHistoryReq

@implementation GetChatRoomPresentHistoryReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct GetChatRoomPresentHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} GetChatRoomPresentHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatRoomPresentHistoryReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomPresentHistoryReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomPresentHistoryReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomPresentHistoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Presentation

@implementation Presentation

@dynamic hasTime, time;
@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasTitle, title;
@dynamic hasPrice, price;
@dynamic hasWebURL, webURL;
@dynamic hasNum, num;

typedef struct Presentation__storage_ {
  uint32_t _has_storage_[1];
  uint32_t time;
  uint32_t price;
  uint32_t num;
  NSString *userName;
  NSString *nickName;
  NSString *title;
  NSString *webURL;
} Presentation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Presentation__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Presentation__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Presentation__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Presentation__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_Price,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Presentation__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "webURL",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_WebURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Presentation__storage_, webURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = Presentation_FieldNumber_Num,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Presentation__storage_, num),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Presentation class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Presentation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001D\000\002H\000\003H\000\004E\000\005E\000\006D!!\000\007C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomPresentHistoryResp

@implementation GetChatRoomPresentHistoryResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTotalCount, totalCount;
@dynamic listArray, listArray_Count;
@dynamic hasURL, URL;
@dynamic hasDonateStatus, donateStatus;

typedef struct GetChatRoomPresentHistoryResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalCount;
  uint32_t donateStatus;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
  NSString *URL;
} GetChatRoomPresentHistoryResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatRoomPresentHistoryResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalCount",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomPresentHistoryResp_FieldNumber_TotalCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryResp__storage_, totalCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Presentation),
        .number = GetChatRoomPresentHistoryResp_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryResp__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomPresentHistoryResp_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryResp__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "donateStatus",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomPresentHistoryResp_FieldNumber_DonateStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetChatRoomPresentHistoryResp__storage_, donateStatus),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomPresentHistoryResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomPresentHistoryResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002J\000\003\000List\000\004\001!!\000\005L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPersonalDonateHistoryReq

@implementation GetPersonalDonateHistoryReq

@dynamic hasBaseRequest, baseRequest;

typedef struct GetPersonalDonateHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GetPersonalDonateHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetPersonalDonateHistoryReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPersonalDonateHistoryReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPersonalDonateHistoryReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPersonalDonateHistoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DonateHistory

@implementation DonateHistory

@dynamic hasTime, time;
@dynamic hasDonateTitle, donateTitle;
@dynamic hasDonateURL, donateURL;
@dynamic hasPrice, price;
@dynamic hasDonateThumbURL, donateThumbURL;

typedef struct DonateHistory__storage_ {
  uint32_t _has_storage_[1];
  uint32_t time;
  uint32_t price;
  NSString *donateTitle;
  NSString *donateURL;
  NSString *donateThumbURL;
} DonateHistory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = DonateHistory_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DonateHistory__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "donateTitle",
        .dataTypeSpecific.className = NULL,
        .number = DonateHistory_FieldNumber_DonateTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DonateHistory__storage_, donateTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "donateURL",
        .dataTypeSpecific.className = NULL,
        .number = DonateHistory_FieldNumber_DonateURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DonateHistory__storage_, donateURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = DonateHistory_FieldNumber_Price,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DonateHistory__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "donateThumbURL",
        .dataTypeSpecific.className = NULL,
        .number = DonateHistory_FieldNumber_DonateThumbURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DonateHistory__storage_, donateThumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DonateHistory class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DonateHistory__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001D\000\002K\000\003G!!\000\004E\000\005L!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPersonalDonateHistoryResp

@implementation GetPersonalDonateHistoryResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTotalAmount, totalAmount;
@dynamic hasTotalCount, totalCount;
@dynamic listArray, listArray_Count;

typedef struct GetPersonalDonateHistoryResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalAmount;
  uint32_t totalCount;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} GetPersonalDonateHistoryResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetPersonalDonateHistoryResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPersonalDonateHistoryResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalAmount",
        .dataTypeSpecific.className = NULL,
        .number = GetPersonalDonateHistoryResp_FieldNumber_TotalAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPersonalDonateHistoryResp__storage_, totalAmount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalCount",
        .dataTypeSpecific.className = NULL,
        .number = GetPersonalDonateHistoryResp_FieldNumber_TotalCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPersonalDonateHistoryResp__storage_, totalCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DonateHistory),
        .number = GetPersonalDonateHistoryResp_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPersonalDonateHistoryResp__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPersonalDonateHistoryResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPersonalDonateHistoryResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002K\000\003J\000\004\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyPersonalInfoReq

@implementation VerifyPersonalInfoReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserRealName, userRealName;
@dynamic hasUserIdcardType, userIdcardType;
@dynamic hasUserIdcardNum, userIdcardNum;

typedef struct VerifyPersonalInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userIdcardType;
  BaseRequest *baseRequest;
  NSString *userRealName;
  NSString *userIdcardNum;
} VerifyPersonalInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VerifyPersonalInfoReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyPersonalInfoReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userRealName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPersonalInfoReq_FieldNumber_UserRealName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyPersonalInfoReq__storage_, userRealName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userIdcardType",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPersonalInfoReq_FieldNumber_UserIdcardType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyPersonalInfoReq__storage_, userIdcardType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userIdcardNum",
        .dataTypeSpecific.className = NULL,
        .number = VerifyPersonalInfoReq_FieldNumber_UserIdcardNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyPersonalInfoReq__storage_, userIdcardNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyPersonalInfoReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyPersonalInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002L\000\003Eb\007\000\004Eb\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyPersonalInfoResp

@implementation VerifyPersonalInfoResp

@dynamic hasBaseResponse, baseResponse;

typedef struct VerifyPersonalInfoResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} VerifyPersonalInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VerifyPersonalInfoResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyPersonalInfoResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyPersonalInfoResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyPersonalInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyChatRoomReq

@implementation VerifyChatRoomReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasApplyUserName, applyUserName;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasTicket, ticket;

typedef struct VerifyChatRoomReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  BaseRequest *baseRequest;
  NSString *applyUserName;
  NSString *chatRoomName;
  NSString *ticket;
} VerifyChatRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VerifyChatRoomReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyChatRoomReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = VerifyChatRoomReq_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyChatRoomReq__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "applyUserName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyChatRoomReq_FieldNumber_ApplyUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyChatRoomReq__storage_, applyUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = VerifyChatRoomReq_FieldNumber_ChatRoomName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyChatRoomReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyChatRoomReq_FieldNumber_Ticket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VerifyChatRoomReq__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyChatRoomReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyChatRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002F\000\003M\000\004L\000\005F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyChatRoomResp

@implementation VerifyChatRoomResp

@dynamic hasBaseResponse, baseResponse;

typedef struct VerifyChatRoomResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} VerifyChatRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VerifyChatRoomResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyChatRoomResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyChatRoomResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyChatRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuitChatRoomReq

@implementation QuitChatRoomReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct QuitChatRoomReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} QuitChatRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = QuitChatRoomReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuitChatRoomReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = QuitChatRoomReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QuitChatRoomReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QuitChatRoomReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuitChatRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuitChatRoomResp

@implementation QuitChatRoomResp

@dynamic hasBaseResponse, baseResponse;

typedef struct QuitChatRoomResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} QuitChatRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = QuitChatRoomResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuitChatRoomResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QuitChatRoomResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuitChatRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomUpgradeStatusReq

@implementation GetChatRoomUpgradeStatusReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct GetChatRoomUpgradeStatusReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} GetChatRoomUpgradeStatusReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatRoomUpgradeStatusReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomUpgradeStatusReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomUpgradeStatusReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomUpgradeStatusResp

@implementation GetChatRoomUpgradeStatusResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasStatus, status;
@dynamic hasMobileQuota, mobileQuota;
@dynamic hasCardQuota, cardQuota;
@dynamic hasDonateQuota, donateQuota;
@dynamic hasMaxCount, maxCount;
@dynamic hasResultMsg, resultMsg;
@dynamic hasTotalQuota, totalQuota;

typedef struct GetChatRoomUpgradeStatusResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t mobileQuota;
  uint32_t cardQuota;
  uint32_t donateQuota;
  uint32_t maxCount;
  uint32_t totalQuota;
  BaseResponse *baseResponse;
  NSString *resultMsg;
} GetChatRoomUpgradeStatusResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobileQuota",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_MobileQuota,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, mobileQuota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cardQuota",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_CardQuota,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, cardQuota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "donateQuota",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_DonateQuota,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, donateQuota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "maxCount",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_MaxCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, maxCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultMsg",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_ResultMsg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, resultMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalQuota",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomUpgradeStatusResp_FieldNumber_TotalQuota,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetChatRoomUpgradeStatusResp__storage_, totalQuota),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomUpgradeStatusResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomUpgradeStatusResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002F\000\003K\000\004I\000\005K\000\006H\000\007I\000\010J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpgradeChatRoomReq

@implementation UpgradeChatRoomReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct UpgradeChatRoomReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} UpgradeChatRoomReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UpgradeChatRoomReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpgradeChatRoomReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpgradeChatRoomReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpgradeChatRoomReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpgradeChatRoomReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpgradeChatRoomResp

@implementation UpgradeChatRoomResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasChatRoomData, chatRoomData;
@dynamic hasResultMsg, resultMsg;
@dynamic hasMaxCount, maxCount;
@dynamic hasMobileQuota, mobileQuota;
@dynamic hasCardQuota, cardQuota;
@dynamic hasDonateQuota, donateQuota;
@dynamic hasTotalQuota, totalQuota;

typedef struct UpgradeChatRoomResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t maxCount;
  uint32_t mobileQuota;
  uint32_t cardQuota;
  uint32_t donateQuota;
  uint32_t totalQuota;
  BaseResponse *baseResponse;
  NSString *chatRoomData;
  NSString *resultMsg;
} UpgradeChatRoomResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UpgradeChatRoomResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomData",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_ChatRoomData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, chatRoomData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resultMsg",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_ResultMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, resultMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxCount",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_MaxCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, maxCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobileQuota",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_MobileQuota,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, mobileQuota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cardQuota",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_CardQuota,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, cardQuota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "donateQuota",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_DonateQuota,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, donateQuota),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalQuota",
        .dataTypeSpecific.className = NULL,
        .number = UpgradeChatRoomResp_FieldNumber_TotalQuota,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UpgradeChatRoomResp__storage_, totalQuota),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpgradeChatRoomResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpgradeChatRoomResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002L\000\003I\000\004H\000\005K\000\006I\000\007K\000\010J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddChatRoomDonateRecordReq

@implementation AddChatRoomDonateRecordReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasTransId, transId;
@dynamic hasTitle, title;
@dynamic hasWebURL, webURL;

typedef struct AddChatRoomDonateRecordReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
  NSString *transId;
  NSString *title;
  NSString *webURL;
} AddChatRoomDonateRecordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AddChatRoomDonateRecordReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomDonateRecordReq_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordReq__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transId",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomDonateRecordReq_FieldNumber_TransId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordReq__storage_, transId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomDonateRecordReq_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordReq__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "webURL",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomDonateRecordReq_FieldNumber_WebURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordReq__storage_, webURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddChatRoomDonateRecordReq class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddChatRoomDonateRecordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002L\000\003FA\000\004E\000\005D!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddChatRoomDonateRecordResp

@implementation AddChatRoomDonateRecordResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMaxCount, maxCount;

typedef struct AddChatRoomDonateRecordResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t maxCount;
  BaseResponse *baseResponse;
} AddChatRoomDonateRecordResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AddChatRoomDonateRecordResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxCount",
        .dataTypeSpecific.className = NULL,
        .number = AddChatRoomDonateRecordResp_FieldNumber_MaxCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddChatRoomDonateRecordResp__storage_, maxCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddChatRoomDonateRecordResp class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddChatRoomDonateRecordResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GoogleContactUploadItem

@implementation GoogleContactUploadItem

@dynamic hasGoogleContactName, googleContactName;

typedef struct GoogleContactUploadItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *googleContactName;
} GoogleContactUploadItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "googleContactName",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactUploadItem_FieldNumber_GoogleContactName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GoogleContactUploadItem__storage_, googleContactName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GoogleContactUploadItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GoogleContactUploadItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001Q\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGoogleContactRequest

@implementation ListGoogleContactRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasClickSource, clickSource;

typedef struct ListGoogleContactRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t continueFlag;
  uint32_t clickSource;
  BaseRequest *baseRequest;
  NSMutableArray *listArray;
} ListGoogleContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ListGoogleContactRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListGoogleContactRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ListGoogleContactRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListGoogleContactRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GoogleContactUploadItem),
        .number = ListGoogleContactRequest_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListGoogleContactRequest__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = ListGoogleContactRequest_FieldNumber_ContinueFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListGoogleContactRequest__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clickSource",
        .dataTypeSpecific.className = NULL,
        .number = ListGoogleContactRequest_FieldNumber_ClickSource,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ListGoogleContactRequest__storage_, clickSource),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGoogleContactRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGoogleContactRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002E\000\003\000List\000\004L\000\005K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GoogleContactItem

@implementation GoogleContactItem

@dynamic hasGoogleContactName, googleContactName;
@dynamic hasUserName, userName;
@dynamic hasBigHeadURL, bigHeadURL;
@dynamic hasSmallHeadURL, smallHeadURL;
@dynamic hasRet, ret;
@dynamic hasNickName, nickName;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct GoogleContactItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t ret;
  NSString *googleContactName;
  NSString *userName;
  NSString *bigHeadURL;
  NSString *smallHeadURL;
  NSString *nickName;
  NSString *antispamTicket;
} GoogleContactItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "googleContactName",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_GoogleContactName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, googleContactName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_BigHeadURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, bigHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_SmallHeadURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, smallHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_Ret,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_NickName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = GoogleContactItem_FieldNumber_AntispamTicket,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GoogleContactItem__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GoogleContactItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GoogleContactItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001Q\000\002H\000\003H!!\000\004J!!\000\005C\000\006H\000\007N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGoogleContactResponse

@implementation ListGoogleContactResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct ListGoogleContactResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} ListGoogleContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ListGoogleContactResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListGoogleContactResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ListGoogleContactResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListGoogleContactResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GoogleContactItem),
        .number = ListGoogleContactResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListGoogleContactResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGoogleContactResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGoogleContactResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteGoogleContactItem

@implementation InviteGoogleContactItem

@dynamic hasGoogleContactName, googleContactName;

typedef struct InviteGoogleContactItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *googleContactName;
} InviteGoogleContactItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "googleContactName",
        .dataTypeSpecific.className = NULL,
        .number = InviteGoogleContactItem_FieldNumber_GoogleContactName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteGoogleContactItem__storage_, googleContactName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteGoogleContactItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteGoogleContactItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001Q\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteGoogleContactRequest

@implementation InviteGoogleContactRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct InviteGoogleContactRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSMutableArray *listArray;
} InviteGoogleContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = InviteGoogleContactRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteGoogleContactRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = InviteGoogleContactRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InviteGoogleContactRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InviteGoogleContactItem),
        .number = InviteGoogleContactRequest_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InviteGoogleContactRequest__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteGoogleContactRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteGoogleContactRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteGoogleContactResponse

@implementation InviteGoogleContactResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic retsArray, retsArray_Count;

typedef struct InviteGoogleContactResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  GPBInt32Array *retsArray;
} InviteGoogleContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = InviteGoogleContactResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteGoogleContactResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = InviteGoogleContactResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InviteGoogleContactResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "retsArray",
        .dataTypeSpecific.className = NULL,
        .number = InviteGoogleContactResponse_FieldNumber_RetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InviteGoogleContactResponse__storage_, retsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteGoogleContactResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteGoogleContactResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000Rets\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BBMContactUploadItem

@implementation BBMContactUploadItem

@dynamic hasBbppid, bbppid;
@dynamic hasBbpin, bbpin;
@dynamic hasBbmnickName, bbmnickName;

typedef struct BBMContactUploadItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *bbppid;
  NSString *bbpin;
  NSString *bbmnickName;
} BBMContactUploadItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bbppid",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactUploadItem_FieldNumber_Bbppid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BBMContactUploadItem__storage_, bbppid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bbpin",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactUploadItem_FieldNumber_Bbpin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BBMContactUploadItem__storage_, bbpin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bbmnickName",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactUploadItem_FieldNumber_BbmnickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BBMContactUploadItem__storage_, bbmnickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BBMContactUploadItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BBMContactUploadItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001f\000\002e\000\003d\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListBBMContactRequest

@implementation ListBBMContactRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasClickSource, clickSource;
@dynamic hasOpcode, opcode;

typedef struct ListBBMContactRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t continueFlag;
  uint32_t clickSource;
  uint32_t opcode;
  BaseRequest *baseRequest;
  NSMutableArray *listArray;
} ListBBMContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ListBBMContactRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListBBMContactRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ListBBMContactRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListBBMContactRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BBMContactUploadItem),
        .number = ListBBMContactRequest_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListBBMContactRequest__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = ListBBMContactRequest_FieldNumber_ContinueFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListBBMContactRequest__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clickSource",
        .dataTypeSpecific.className = NULL,
        .number = ListBBMContactRequest_FieldNumber_ClickSource,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ListBBMContactRequest__storage_, clickSource),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = ListBBMContactRequest_FieldNumber_Opcode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ListBBMContactRequest__storage_, opcode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListBBMContactRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListBBMContactRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002E\000\003\000List\000\004L\000\005K\000\006F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BBMContactItem

@implementation BBMContactItem

@dynamic hasBbppid, bbppid;
@dynamic hasUserName, userName;
@dynamic hasBigHeadURL, bigHeadURL;
@dynamic hasSmallHeadURL, smallHeadURL;
@dynamic hasBbpin, bbpin;
@dynamic hasBbmnickName, bbmnickName;
@dynamic hasRet, ret;
@dynamic hasNickName, nickName;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct BBMContactItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t ret;
  NSString *bbppid;
  NSString *userName;
  NSString *bigHeadURL;
  NSString *smallHeadURL;
  NSString *bbpin;
  NSString *bbmnickName;
  NSString *nickName;
  NSString *antispamTicket;
} BBMContactItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bbppid",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_Bbppid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, bbppid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_BigHeadURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, bigHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadURL",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_SmallHeadURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, smallHeadURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bbpin",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_Bbpin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, bbpin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bbmnickName",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_BbmnickName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, bbmnickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_Ret,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_NickName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = BBMContactItem_FieldNumber_AntispamTicket,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(BBMContactItem__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BBMContactItem class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BBMContactItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001f\000\002H\000\003H!!\000\004J!!\000\005e\000\006d\007\000\007C\000\010H\000\tN\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListBBMContactResponse

@implementation ListBBMContactResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct ListBBMContactResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} ListBBMContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ListBBMContactResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListBBMContactResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ListBBMContactResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListBBMContactResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BBMContactItem),
        .number = ListBBMContactResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListBBMContactResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListBBMContactResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListBBMContactResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OnlineInfo

@implementation OnlineInfo

@dynamic hasDeviceType, deviceType;
@dynamic hasDeviceId, deviceId;
@dynamic hasWordingXml, wordingXml;
@dynamic hasClientKey, clientKey;
@dynamic hasOnlineStatus, onlineStatus;
@dynamic hasDeviceHelperType, deviceHelperType;

typedef struct OnlineInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t deviceType;
  uint32_t onlineStatus;
  uint32_t deviceHelperType;
  NSData *deviceId;
  NSString *wordingXml;
  SKBuiltinBuffer_t *clientKey;
} OnlineInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = OnlineInfo_FieldNumber_DeviceType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OnlineInfo__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = OnlineInfo_FieldNumber_DeviceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OnlineInfo__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "wordingXml",
        .dataTypeSpecific.className = NULL,
        .number = OnlineInfo_FieldNumber_WordingXml,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OnlineInfo__storage_, wordingXml),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = OnlineInfo_FieldNumber_ClientKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OnlineInfo__storage_, clientKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "onlineStatus",
        .dataTypeSpecific.className = NULL,
        .number = OnlineInfo_FieldNumber_OnlineStatus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OnlineInfo__storage_, onlineStatus),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "deviceHelperType",
        .dataTypeSpecific.className = NULL,
        .number = OnlineInfo_FieldNumber_DeviceHelperType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OnlineInfo__storage_, deviceHelperType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OnlineInfo class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OnlineInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001J\000\002GA\000\003Hb\000\004I\000\005L\000\006P\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOnlineInfoRequest

@implementation GetOnlineInfoRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLanguage, language;

typedef struct GetOnlineInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *language;
} GetOnlineInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetOnlineInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOnlineInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = GetOnlineInfoRequest_FieldNumber_Language,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOnlineInfoRequest__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOnlineInfoRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOnlineInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOnlineInfoResponse

@implementation GetOnlineInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasOnlineCount, onlineCount;
@dynamic onlineListArray, onlineListArray_Count;
@dynamic hasSummaryXml, summaryXml;
@dynamic hasFlag, flag;
@dynamic hasIconType, iconType;

typedef struct GetOnlineInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t onlineCount;
  uint32_t flag;
  uint32_t iconType;
  BaseResponse *baseResponse;
  NSMutableArray *onlineListArray;
  NSString *summaryXml;
} GetOnlineInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetOnlineInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOnlineInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "onlineCount",
        .dataTypeSpecific.className = NULL,
        .number = GetOnlineInfoResponse_FieldNumber_OnlineCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOnlineInfoResponse__storage_, onlineCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "onlineListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OnlineInfo),
        .number = GetOnlineInfoResponse_FieldNumber_OnlineListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOnlineInfoResponse__storage_, onlineListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "summaryXml",
        .dataTypeSpecific.className = NULL,
        .number = GetOnlineInfoResponse_FieldNumber_SummaryXml,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOnlineInfoResponse__storage_, summaryXml),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = GetOnlineInfoResponse_FieldNumber_Flag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetOnlineInfoResponse__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iconType",
        .dataTypeSpecific.className = NULL,
        .number = GetOnlineInfoResponse_FieldNumber_IconType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetOnlineInfoResponse__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOnlineInfoResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOnlineInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002K\000\003\000OnlineList\000\004Hb\000\005D\000\006b\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatroomMemberDetailRequest

@implementation GetChatroomMemberDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatroomUserName, chatroomUserName;
@dynamic hasClientVersion, clientVersion;

typedef struct GetChatroomMemberDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t clientVersion;
  BaseRequest *baseRequest;
  NSString *chatroomUserName;
} GetChatroomMemberDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatroomMemberDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatroomUserName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatroomMemberDetailRequest_FieldNumber_ChatroomUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailRequest__storage_, chatroomUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetChatroomMemberDetailRequest_FieldNumber_ClientVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailRequest__storage_, clientVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatroomMemberDetailRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatroomMemberDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002P\000\003M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatroomMemberDetailResponse

@implementation GetChatroomMemberDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasChatroomUserName, chatroomUserName;
@dynamic hasServerVersion, serverVersion;
@dynamic hasNewChatroomData, newChatroomData;

typedef struct GetChatroomMemberDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serverVersion;
  BaseResponse *baseResponse;
  NSString *chatroomUserName;
  ChatRoomMemberData *newChatroomData;
} GetChatroomMemberDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatroomMemberDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatroomUserName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatroomMemberDetailResponse_FieldNumber_ChatroomUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailResponse__storage_, chatroomUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serverVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetChatroomMemberDetailResponse_FieldNumber_ServerVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailResponse__storage_, serverVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "newChatroomData",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatRoomMemberData),
        .number = GetChatroomMemberDetailResponse_FieldNumber_NewChatroomData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetChatroomMemberDetailResponse__storage_, newChatroomData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatroomMemberDetailResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatroomMemberDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002P\000\003M\000\004O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetContactRequest

@implementation GetContactRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserCount, userCount;
@dynamic userNameListArray, userNameListArray_Count;
@dynamic hasAntispamTicketCount, antispamTicketCount;
@dynamic antispamTicketArray, antispamTicketArray_Count;
@dynamic hasFromChatRoomCount, fromChatRoomCount;
@dynamic fromChatRoomArray, fromChatRoomArray_Count;

typedef struct GetContactRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userCount;
  uint32_t antispamTicketCount;
  uint32_t fromChatRoomCount;
  BaseRequest *baseRequest;
  NSMutableArray *userNameListArray;
  NSMutableArray *antispamTicketArray;
  NSMutableArray *fromChatRoomArray;
} GetContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetContactRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userCount",
        .dataTypeSpecific.className = NULL,
        .number = GetContactRequest_FieldNumber_UserCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, userCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userNameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GetContactRequest_FieldNumber_UserNameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, userNameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "antispamTicketCount",
        .dataTypeSpecific.className = NULL,
        .number = GetContactRequest_FieldNumber_AntispamTicketCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, antispamTicketCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "antispamTicketArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GetContactRequest_FieldNumber_AntispamTicketArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, antispamTicketArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromChatRoomCount",
        .dataTypeSpecific.className = NULL,
        .number = GetContactRequest_FieldNumber_FromChatRoomCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, fromChatRoomCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fromChatRoomArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GetContactRequest_FieldNumber_FromChatRoomArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetContactRequest__storage_, fromChatRoomArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetContactRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetContactRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002I\000\003\000UserNameList\000\004S\000\005\000AntispamTicke"
        "t\000\006Q\000\007\000FromChatRoom\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetContactResponse

@implementation GetContactResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasContactCount, contactCount;
@dynamic contactListArray, contactListArray_Count;
@dynamic retArray, retArray_Count;

typedef struct GetContactResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contactCount;
  BaseResponse *baseResponse;
  NSMutableArray *contactListArray;
  GPBInt32Array *retArray;
} GetContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetContactResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetContactResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactCount",
        .dataTypeSpecific.className = NULL,
        .number = GetContactResponse_FieldNumber_ContactCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetContactResponse__storage_, contactCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ModContact),
        .number = GetContactResponse_FieldNumber_ContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetContactResponse__storage_, contactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retArray",
        .dataTypeSpecific.className = NULL,
        .number = GetContactResponse_FieldNumber_RetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetContactResponse__storage_, retArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetContactResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetContactResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002L\000\003\000ContactList\000\004\000Ret\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadCardImgRequest

@implementation UploadCardImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasClientId, clientId;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasDataLen, dataLen;
@dynamic hasData_p, data_p;
@dynamic hasContactUserName, contactUserName;

typedef struct UploadCardImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t totalLen;
  uint32_t startPos;
  uint32_t dataLen;
  BaseRequest *baseRequest;
  NSString *clientId;
  SKBuiltinBuffer_t *data_p;
  NSString *contactUserName;
} UploadCardImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UploadCardImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgRequest_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgRequest_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgRequest_FieldNumber_StartPos,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgRequest_FieldNumber_DataLen,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, dataLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = UploadCardImgRequest_FieldNumber_Data_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactUserName",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgRequest_FieldNumber_ContactUserName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UploadCardImgRequest__storage_, contactUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadCardImgRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadCardImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002H\000\003H\000\004H\000\005G\000\006\000Data\000\007O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadCardImgResponse

@implementation UploadCardImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasStartPos, startPos;
@dynamic hasTotalLen, totalLen;
@dynamic hasClientId, clientId;
@dynamic hasCardImgURL, cardImgURL;

typedef struct UploadCardImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t startPos;
  uint32_t totalLen;
  BaseResponse *baseResponse;
  NSString *clientId;
  NSString *cardImgURL;
} UploadCardImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UploadCardImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadCardImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgResponse_FieldNumber_StartPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadCardImgResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgResponse_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadCardImgResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgResponse_FieldNumber_ClientId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadCardImgResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardImgURL",
        .dataTypeSpecific.className = NULL,
        .number = UploadCardImgResponse_FieldNumber_CardImgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadCardImgResponse__storage_, cardImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadCardImgResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadCardImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002H\000\003H\000\004H\000\005H!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteCardImgRequest

@implementation DeleteCardImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasContactUserName, contactUserName;

typedef struct DeleteCardImgRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *contactUserName;
} DeleteCardImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = DeleteCardImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteCardImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactUserName",
        .dataTypeSpecific.className = NULL,
        .number = DeleteCardImgRequest_FieldNumber_ContactUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeleteCardImgRequest__storage_, contactUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteCardImgRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteCardImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteCardImgResponse

@implementation DeleteCardImgResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct DeleteCardImgResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} DeleteCardImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = DeleteCardImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteCardImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteCardImgResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteCardImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteChatRoomMemberRequest

@implementation InviteChatRoomMemberRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasChatRoomName, chatRoomName;

typedef struct InviteChatRoomMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseRequest *baseRequest;
  NSMutableArray *memberListArray;
  SKBuiltinString_t *chatRoomName;
} InviteChatRoomMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = InviteChatRoomMemberRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteChatRoomMemberRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = InviteChatRoomMemberRequest_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InviteChatRoomMemberRequest__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberReq),
        .number = InviteChatRoomMemberRequest_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InviteChatRoomMemberRequest__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = InviteChatRoomMemberRequest_FieldNumber_ChatRoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InviteChatRoomMemberRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteChatRoomMemberRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteChatRoomMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002K\000\003\000MemberList\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteChatRoomMemberResponse

@implementation InviteChatRoomMemberResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct InviteChatRoomMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} InviteChatRoomMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = InviteChatRoomMemberResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteChatRoomMemberResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteChatRoomMemberResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteChatRoomMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LabelPair

@implementation LabelPair

@dynamic hasLabelName, labelName;
@dynamic hasLabelId, labelId;

typedef struct LabelPair__storage_ {
  uint32_t _has_storage_[1];
  uint32_t labelId;
  NSString *labelName;
} LabelPair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "labelName",
        .dataTypeSpecific.className = NULL,
        .number = LabelPair_FieldNumber_LabelName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LabelPair__storage_, labelName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labelId",
        .dataTypeSpecific.className = NULL,
        .number = LabelPair_FieldNumber_LabelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LabelPair__storage_, labelId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LabelPair class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LabelPair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001I\000\002FA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddContactLabelRequest

@implementation AddContactLabelRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLabelCount, labelCount;
@dynamic labelPairListArray, labelPairListArray_Count;

typedef struct AddContactLabelRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t labelCount;
  BaseRequest *baseRequest;
  NSMutableArray *labelPairListArray;
} AddContactLabelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AddContactLabelRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddContactLabelRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelCount",
        .dataTypeSpecific.className = NULL,
        .number = AddContactLabelRequest_FieldNumber_LabelCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddContactLabelRequest__storage_, labelCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "labelPairListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LabelPair),
        .number = AddContactLabelRequest_FieldNumber_LabelPairListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddContactLabelRequest__storage_, labelPairListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddContactLabelRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddContactLabelRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002J\000\003\000LabelPairList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddContactLabelResponse

@implementation AddContactLabelResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLabelCount, labelCount;
@dynamic labelPairListArray, labelPairListArray_Count;

typedef struct AddContactLabelResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t labelCount;
  BaseResponse *baseResponse;
  NSMutableArray *labelPairListArray;
} AddContactLabelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AddContactLabelResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddContactLabelResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelCount",
        .dataTypeSpecific.className = NULL,
        .number = AddContactLabelResponse_FieldNumber_LabelCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddContactLabelResponse__storage_, labelCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "labelPairListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LabelPair),
        .number = AddContactLabelResponse_FieldNumber_LabelPairListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddContactLabelResponse__storage_, labelPairListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddContactLabelResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddContactLabelResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002J\000\003\000LabelPairList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelContactLabelRequest

@implementation DelContactLabelRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLabelIdlist, labelIdlist;

typedef struct DelContactLabelRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *labelIdlist;
} DelContactLabelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = DelContactLabelRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelContactLabelRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelIdlist",
        .dataTypeSpecific.className = NULL,
        .number = DelContactLabelRequest_FieldNumber_LabelIdlist,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelContactLabelRequest__storage_, labelIdlist),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelContactLabelRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelContactLabelRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002Fb\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelContactLabelResponse

@implementation DelContactLabelResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct DelContactLabelResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} DelContactLabelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = DelContactLabelResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelContactLabelResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelContactLabelResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelContactLabelResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateContactLabelRequest

@implementation UpdateContactLabelRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLabelPair, labelPair;

typedef struct UpdateContactLabelRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  LabelPair *labelPair;
} UpdateContactLabelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UpdateContactLabelRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateContactLabelRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelPair",
        .dataTypeSpecific.className = GPBStringifySymbol(LabelPair),
        .number = UpdateContactLabelRequest_FieldNumber_LabelPair,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateContactLabelRequest__storage_, labelPair),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateContactLabelRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateContactLabelRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateContactLabelResponse

@implementation UpdateContactLabelResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct UpdateContactLabelResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} UpdateContactLabelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UpdateContactLabelResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateContactLabelResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateContactLabelResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateContactLabelResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetContactLabelListRequest

@implementation GetContactLabelListRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct GetContactLabelListRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GetContactLabelListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetContactLabelListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetContactLabelListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetContactLabelListRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetContactLabelListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetContactLabelListResponse

@implementation GetContactLabelListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLabelCount, labelCount;
@dynamic labelPairListArray, labelPairListArray_Count;

typedef struct GetContactLabelListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t labelCount;
  BaseResponse *baseResponse;
  NSMutableArray *labelPairListArray;
} GetContactLabelListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetContactLabelListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetContactLabelListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labelCount",
        .dataTypeSpecific.className = NULL,
        .number = GetContactLabelListResponse_FieldNumber_LabelCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetContactLabelListResponse__storage_, labelCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "labelPairListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LabelPair),
        .number = GetContactLabelListResponse_FieldNumber_LabelPairListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetContactLabelListResponse__storage_, labelPairListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetContactLabelListResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetContactLabelListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002J\000\003\000LabelPairList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserLabelInfo

@implementation UserLabelInfo

@dynamic hasUserName, userName;
@dynamic hasLabelIdlist, labelIdlist;

typedef struct UserLabelInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *labelIdlist;
} UserLabelInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UserLabelInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserLabelInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labelIdlist",
        .dataTypeSpecific.className = NULL,
        .number = UserLabelInfo_FieldNumber_LabelIdlist,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserLabelInfo__storage_, labelIdlist),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserLabelInfo class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserLabelInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001H\000\002Fb\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModifyContactLabelListRequest

@implementation ModifyContactLabelListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserCount, userCount;
@dynamic userLabelInfoListArray, userLabelInfoListArray_Count;

typedef struct ModifyContactLabelListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userCount;
  BaseRequest *baseRequest;
  NSMutableArray *userLabelInfoListArray;
} ModifyContactLabelListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ModifyContactLabelListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModifyContactLabelListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userCount",
        .dataTypeSpecific.className = NULL,
        .number = ModifyContactLabelListRequest_FieldNumber_UserCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModifyContactLabelListRequest__storage_, userCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userLabelInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserLabelInfo),
        .number = ModifyContactLabelListRequest_FieldNumber_UserLabelInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ModifyContactLabelListRequest__storage_, userLabelInfoListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModifyContactLabelListRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModifyContactLabelListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002I\000\003\000UserLabelInfoList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModifyContactLabelListResponse

@implementation ModifyContactLabelListResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ModifyContactLabelListResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ModifyContactLabelListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ModifyContactLabelListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModifyContactLabelListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ModifyContactLabelListResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModifyContactLabelListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferChatRoomOwnerRequest

@implementation TransferChatRoomOwnerRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasNewOwnerUserName, newOwnerUserName;

typedef struct TransferChatRoomOwnerRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
  NSString *newOwnerUserName;
} TransferChatRoomOwnerRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = TransferChatRoomOwnerRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferChatRoomOwnerRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = TransferChatRoomOwnerRequest_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferChatRoomOwnerRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newOwnerUserName",
        .dataTypeSpecific.className = NULL,
        .number = TransferChatRoomOwnerRequest_FieldNumber_NewOwnerUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferChatRoomOwnerRequest__storage_, newOwnerUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferChatRoomOwnerRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferChatRoomOwnerRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002L\000\003P\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferChatRoomOwnerResponse

@implementation TransferChatRoomOwnerResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct TransferChatRoomOwnerResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} TransferChatRoomOwnerResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = TransferChatRoomOwnerResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferChatRoomOwnerResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferChatRoomOwnerResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferChatRoomOwnerResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomAnnouncementRequest

@implementation GetChatRoomAnnouncementRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct GetChatRoomAnnouncementRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} GetChatRoomAnnouncementRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatRoomAnnouncementRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomAnnouncementRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomAnnouncementRequest_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomAnnouncementRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomAnnouncementRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomAnnouncementRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomAnnouncementResponse

@implementation GetChatRoomAnnouncementResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasAnnouncement, announcement;

typedef struct GetChatRoomAnnouncementResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *announcement;
} GetChatRoomAnnouncementResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatRoomAnnouncementResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomAnnouncementResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "announcement",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomAnnouncementResponse_FieldNumber_Announcement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomAnnouncementResponse__storage_, announcement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomAnnouncementResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomAnnouncementResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetChatRoomAnnouncementRequest

@implementation SetChatRoomAnnouncementRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;
@dynamic hasAnnouncement, announcement;
@dynamic hasSetAnnouncementFlag, setAnnouncementFlag;

typedef struct SetChatRoomAnnouncementRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t setAnnouncementFlag;
  BaseRequest *baseRequest;
  NSString *chatRoomName;
  NSString *announcement;
} SetChatRoomAnnouncementRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SetChatRoomAnnouncementRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetChatRoomAnnouncementRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = SetChatRoomAnnouncementRequest_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetChatRoomAnnouncementRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "announcement",
        .dataTypeSpecific.className = NULL,
        .number = SetChatRoomAnnouncementRequest_FieldNumber_Announcement,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SetChatRoomAnnouncementRequest__storage_, announcement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "setAnnouncementFlag",
        .dataTypeSpecific.className = NULL,
        .number = SetChatRoomAnnouncementRequest_FieldNumber_SetAnnouncementFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SetChatRoomAnnouncementRequest__storage_, setAnnouncementFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetChatRoomAnnouncementRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetChatRoomAnnouncementRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002L\000\003L\000\004S\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetChatRoomAnnouncementResponse

@implementation SetChatRoomAnnouncementResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct SetChatRoomAnnouncementResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} SetChatRoomAnnouncementResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SetChatRoomAnnouncementResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetChatRoomAnnouncementResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetChatRoomAnnouncementResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetChatRoomAnnouncementResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomInfoDetailRequest

@implementation GetChatRoomInfoDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasChatRoomName, chatRoomName;

typedef struct GetChatRoomInfoDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *chatRoomName;
} GetChatRoomInfoDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetChatRoomInfoDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomInfoDetailRequest_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailRequest__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomInfoDetailRequest class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomInfoDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChatRoomInfoDetailResponse

@implementation GetChatRoomInfoDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasAnnouncement, announcement;
@dynamic hasChatRoomInfoVersion, chatRoomInfoVersion;
@dynamic hasAnnouncementEditor, announcementEditor;
@dynamic hasAnnouncementPublishTime, announcementPublishTime;

typedef struct GetChatRoomInfoDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t chatRoomInfoVersion;
  uint32_t announcementPublishTime;
  BaseResponse *baseResponse;
  NSString *announcement;
  NSString *announcementEditor;
} GetChatRoomInfoDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetChatRoomInfoDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "announcement",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomInfoDetailResponse_FieldNumber_Announcement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailResponse__storage_, announcement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatRoomInfoVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomInfoDetailResponse_FieldNumber_ChatRoomInfoVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailResponse__storage_, chatRoomInfoVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "announcementEditor",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomInfoDetailResponse_FieldNumber_AnnouncementEditor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailResponse__storage_, announcementEditor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "announcementPublishTime",
        .dataTypeSpecific.className = NULL,
        .number = GetChatRoomInfoDetailResponse_FieldNumber_AnnouncementPublishTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetChatRoomInfoDetailResponse__storage_, announcementPublishTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChatRoomInfoDetailResponse class]
                                     rootClass:[MmcontactRoot class]
                                          file:MmcontactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChatRoomInfoDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002L\000\003S\000\004R\000\005W\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
