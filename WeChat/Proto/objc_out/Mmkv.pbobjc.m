// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmkv.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmkv.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmkvRoot

@implementation MmkvRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmkvRoot_FileDescriptor

static GPBFileDescriptor *MmkvRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ExptItem

@implementation ExptItem

@dynamic hasExptId, exptId;
@dynamic hasGroupId, groupId;
@dynamic hasExptSequence, exptSequence;
@dynamic hasExptContent, exptContent;
@dynamic hasExptType, exptType;
@dynamic hasExptCheckSum, exptCheckSum;

typedef struct ExptItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t exptId;
  uint32_t groupId;
  uint32_t exptSequence;
  uint32_t exptType;
  NSString *exptContent;
  NSString *exptCheckSum;
} ExptItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exptId",
        .dataTypeSpecific.className = NULL,
        .number = ExptItem_FieldNumber_ExptId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExptItem__storage_, exptId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = ExptItem_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExptItem__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "exptSequence",
        .dataTypeSpecific.className = NULL,
        .number = ExptItem_FieldNumber_ExptSequence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExptItem__storage_, exptSequence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "exptContent",
        .dataTypeSpecific.className = NULL,
        .number = ExptItem_FieldNumber_ExptContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExptItem__storage_, exptContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exptType",
        .dataTypeSpecific.className = NULL,
        .number = ExptItem_FieldNumber_ExptType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ExptItem__storage_, exptType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "exptCheckSum",
        .dataTypeSpecific.className = NULL,
        .number = ExptItem_FieldNumber_ExptCheckSum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ExptItem__storage_, exptCheckSum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExptItem class]
                                     rootClass:[MmkvRoot class]
                                          file:MmkvRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExptItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001F\000\002G\000\003L\000\004K\000\005H\000\006L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetExptRequest

@implementation GetExptRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLastGetSvrSecond, lastGetSvrSecond;
@dynamic hasScene, scene;
@dynamic localExptListArray, localExptListArray_Count;

typedef struct GetExptRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lastGetSvrSecond;
  uint32_t scene;
  BaseRequest *baseRequest;
  NSMutableArray *localExptListArray;
} GetExptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetExptRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetExptRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastGetSvrSecond",
        .dataTypeSpecific.className = NULL,
        .number = GetExptRequest_FieldNumber_LastGetSvrSecond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetExptRequest__storage_, lastGetSvrSecond),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = GetExptRequest_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetExptRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "localExptListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExptItem),
        .number = GetExptRequest_FieldNumber_LocalExptListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetExptRequest__storage_, localExptListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetExptRequest class]
                                     rootClass:[MmkvRoot class]
                                          file:MmkvRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetExptRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002P\000\003E\000\004\000LocalExptList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetExptResponse

@implementation GetExptResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCurrSvrSecond, currSvrSecond;
@dynamic hasIntervalSecond, intervalSecond;
@dynamic deleteExptListArray, deleteExptListArray_Count;
@dynamic replaceExptListArray, replaceExptListArray_Count;
@dynamic hasExptFlag, exptFlag;

typedef struct GetExptResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t currSvrSecond;
  uint32_t intervalSecond;
  uint32_t exptFlag;
  BaseResponse *baseResponse;
  NSMutableArray *deleteExptListArray;
  NSMutableArray *replaceExptListArray;
} GetExptResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetExptResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetExptResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currSvrSecond",
        .dataTypeSpecific.className = NULL,
        .number = GetExptResponse_FieldNumber_CurrSvrSecond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetExptResponse__storage_, currSvrSecond),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "intervalSecond",
        .dataTypeSpecific.className = NULL,
        .number = GetExptResponse_FieldNumber_IntervalSecond,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetExptResponse__storage_, intervalSecond),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "deleteExptListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExptItem),
        .number = GetExptResponse_FieldNumber_DeleteExptListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetExptResponse__storage_, deleteExptListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replaceExptListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExptItem),
        .number = GetExptResponse_FieldNumber_ReplaceExptListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetExptResponse__storage_, replaceExptListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exptFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetExptResponse_FieldNumber_ExptFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetExptResponse__storage_, exptFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetExptResponse class]
                                     rootClass:[MmkvRoot class]
                                          file:MmkvRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetExptResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002M\000\003N\000\004\000DeleteExptList\000\005\000ReplaceExpt"
        "List\000\006H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
