// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmpay.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmpay.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmpayRoot

@implementation MmpayRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmpayRoot_FileDescriptor

static GPBFileDescriptor *MmpayRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RcptInfoNode

@implementation RcptInfoNode

@dynamic hasId_p, id_p;
@dynamic hasCountry, country;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasDistrict, district;
@dynamic hasZipcode, zipcode;
@dynamic hasDetail, detail;
@dynamic hasName, name;
@dynamic hasPhone, phone;
@dynamic hasNationalcodeGbt2260, nationalcodeGbt2260;

typedef struct RcptInfoNode__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  SKBuiltinString_t *country;
  SKBuiltinString_t *province;
  SKBuiltinString_t *city;
  SKBuiltinString_t *district;
  SKBuiltinString_t *zipcode;
  SKBuiltinString_t *detail;
  SKBuiltinString_t *name;
  SKBuiltinString_t *phone;
  SKBuiltinString_t *nationalcodeGbt2260;
} RcptInfoNode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoNode_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_Country,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_Province,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, province),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_City,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, city),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "district",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_District,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, district),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zipcode",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_Zipcode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, zipcode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detail",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_Detail,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, detail),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_Name,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_Phone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, phone),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nationalcodeGbt2260",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = RcptInfoNode_FieldNumber_NationalcodeGbt2260,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RcptInfoNode__storage_, nationalcodeGbt2260),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoNode class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoNode__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoList

@implementation RcptInfoList

@dynamic hasCount, count;
@dynamic rcptinfolistArray, rcptinfolistArray_Count;
@dynamic hasTimestamp, timestamp;

typedef struct RcptInfoList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t timestamp;
  NSMutableArray *rcptinfolistArray;
} RcptInfoList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoList_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoList__storage_, count),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rcptinfolistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoNode),
        .number = RcptInfoList_FieldNumber_RcptinfolistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RcptInfoList__storage_, rcptinfolistArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoList_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoList__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoList class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoAddRequest

@implementation RcptInfoAddRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRcptinfo, rcptinfo;

typedef struct RcptInfoAddRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  RcptInfoNode *rcptinfo;
} RcptInfoAddRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RcptInfoAddRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoAddRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rcptinfo",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoNode),
        .number = RcptInfoAddRequest_FieldNumber_Rcptinfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoAddRequest__storage_, rcptinfo),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoAddRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoAddRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoAddResponse

@implementation RcptInfoAddResponse

@dynamic hasRcptinfolist, rcptinfolist;
@dynamic hasBaseResponse, baseResponse;

typedef struct RcptInfoAddResponse__storage_ {
  uint32_t _has_storage_[1];
  RcptInfoList *rcptinfolist;
  BaseResponse *baseResponse;
} RcptInfoAddResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rcptinfolist",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoList),
        .number = RcptInfoAddResponse_FieldNumber_Rcptinfolist,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoAddResponse__storage_, rcptinfolist),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RcptInfoAddResponse_FieldNumber_BaseResponse,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoAddResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoAddResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoAddResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoRemoveRequest

@implementation RcptInfoRemoveRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasId_p, id_p;

typedef struct RcptInfoRemoveRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  BaseRequest *baseRequest;
} RcptInfoRemoveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RcptInfoRemoveRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoRemoveRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoRemoveRequest_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoRemoveRequest__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoRemoveRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoRemoveRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoRemoveResponse

@implementation RcptInfoRemoveResponse

@dynamic hasId_p, id_p;
@dynamic hasRcptinfolist, rcptinfolist;
@dynamic hasBaseResponse, baseResponse;

typedef struct RcptInfoRemoveResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  RcptInfoList *rcptinfolist;
  BaseResponse *baseResponse;
} RcptInfoRemoveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoRemoveResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoRemoveResponse__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rcptinfolist",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoList),
        .number = RcptInfoRemoveResponse_FieldNumber_Rcptinfolist,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoRemoveResponse__storage_, rcptinfolist),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RcptInfoRemoveResponse_FieldNumber_BaseResponse,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RcptInfoRemoveResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoRemoveResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoRemoveResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoQueryRequest

@implementation RcptInfoQueryRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTimestamp, timestamp;
@dynamic hasWebviewurl, webviewurl;
@dynamic hasAppid, appid;
@dynamic hasScene, scene;

typedef struct RcptInfoQueryRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t timestamp;
  uint32_t scene;
  BaseRequest *baseRequest;
  NSString *webviewurl;
  NSString *appid;
} RcptInfoQueryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RcptInfoQueryRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoQueryRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryRequest_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoQueryRequest__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "webviewurl",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryRequest_FieldNumber_Webviewurl,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RcptInfoQueryRequest__storage_, webviewurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appid",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryRequest_FieldNumber_Appid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RcptInfoQueryRequest__storage_, appid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryRequest_FieldNumber_Scene,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RcptInfoQueryRequest__storage_, scene),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoQueryRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoQueryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoQueryResponse

@implementation RcptInfoQueryResponse

@dynamic hasRcptinfolist, rcptinfolist;
@dynamic hasIslatest, islatest;
@dynamic hasBaseResponse, baseResponse;
@dynamic hasAppusername, appusername;
@dynamic hasIsauthority, isauthority;
@dynamic hasAppnickname, appnickname;

typedef struct RcptInfoQueryResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t islatest;
  uint32_t isauthority;
  RcptInfoList *rcptinfolist;
  BaseResponse *baseResponse;
  NSString *appusername;
  NSString *appnickname;
} RcptInfoQueryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rcptinfolist",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoList),
        .number = RcptInfoQueryResponse_FieldNumber_Rcptinfolist,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoQueryResponse__storage_, rcptinfolist),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "islatest",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryResponse_FieldNumber_Islatest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoQueryResponse__storage_, islatest),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RcptInfoQueryResponse_FieldNumber_BaseResponse,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RcptInfoQueryResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appusername",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryResponse_FieldNumber_Appusername,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RcptInfoQueryResponse__storage_, appusername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isauthority",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryResponse_FieldNumber_Isauthority,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RcptInfoQueryResponse__storage_, isauthority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "appnickname",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoQueryResponse_FieldNumber_Appnickname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RcptInfoQueryResponse__storage_, appnickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoQueryResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoQueryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoUpdateRequest

@implementation RcptInfoUpdateRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRcptinfo, rcptinfo;

typedef struct RcptInfoUpdateRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  RcptInfoNode *rcptinfo;
} RcptInfoUpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RcptInfoUpdateRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoUpdateRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rcptinfo",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoNode),
        .number = RcptInfoUpdateRequest_FieldNumber_Rcptinfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoUpdateRequest__storage_, rcptinfo),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoUpdateRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoUpdateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoUpdateResponse

@implementation RcptInfoUpdateResponse

@dynamic hasRcptinfolist, rcptinfolist;
@dynamic hasBaseResponse, baseResponse;

typedef struct RcptInfoUpdateResponse__storage_ {
  uint32_t _has_storage_[1];
  RcptInfoList *rcptinfolist;
  BaseResponse *baseResponse;
} RcptInfoUpdateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rcptinfolist",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoList),
        .number = RcptInfoUpdateResponse_FieldNumber_Rcptinfolist,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoUpdateResponse__storage_, rcptinfolist),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RcptInfoUpdateResponse_FieldNumber_BaseResponse,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoUpdateResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoUpdateResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoUpdateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoTouchRequest

@implementation RcptInfoTouchRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasId_p, id_p;

typedef struct RcptInfoTouchRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  BaseRequest *baseRequest;
} RcptInfoTouchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RcptInfoTouchRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoTouchRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoTouchRequest_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoTouchRequest__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoTouchRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoTouchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoTouchResponse

@implementation RcptInfoTouchResponse

@dynamic hasRcptinfolist, rcptinfolist;
@dynamic hasBaseResponse, baseResponse;

typedef struct RcptInfoTouchResponse__storage_ {
  uint32_t _has_storage_[1];
  RcptInfoList *rcptinfolist;
  BaseResponse *baseResponse;
} RcptInfoTouchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rcptinfolist",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoList),
        .number = RcptInfoTouchResponse_FieldNumber_Rcptinfolist,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoTouchResponse__storage_, rcptinfolist),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RcptInfoTouchResponse_FieldNumber_BaseResponse,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoTouchResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoTouchResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoTouchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoImportYiXunRequest

@implementation RcptInfoImportYiXunRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasQq, qq;
@dynamic hasA2Key, a2Key;
@dynamic hasNewA2Key, newA2Key;

typedef struct RcptInfoImportYiXunRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t qq;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *a2Key;
  SKBuiltinBuffer_t *newA2Key;
} RcptInfoImportYiXunRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RcptInfoImportYiXunRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qq",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoImportYiXunRequest_FieldNumber_Qq,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunRequest__storage_, qq),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "a2Key",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = RcptInfoImportYiXunRequest_FieldNumber_A2Key,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunRequest__storage_, a2Key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newA2Key",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = RcptInfoImportYiXunRequest_FieldNumber_NewA2Key,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunRequest__storage_, newA2Key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoImportYiXunRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoImportYiXunRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\003E\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcptInfoImportYiXunResponse

@implementation RcptInfoImportYiXunResponse

@dynamic hasRcptinfolist, rcptinfolist;
@dynamic hasRcptinfoimportstatus, rcptinfoimportstatus;
@dynamic hasBaseResponse, baseResponse;

typedef struct RcptInfoImportYiXunResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t rcptinfoimportstatus;
  RcptInfoList *rcptinfolist;
  BaseResponse *baseResponse;
} RcptInfoImportYiXunResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rcptinfolist",
        .dataTypeSpecific.className = GPBStringifySymbol(RcptInfoList),
        .number = RcptInfoImportYiXunResponse_FieldNumber_Rcptinfolist,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunResponse__storage_, rcptinfolist),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rcptinfoimportstatus",
        .dataTypeSpecific.className = NULL,
        .number = RcptInfoImportYiXunResponse_FieldNumber_Rcptinfoimportstatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunResponse__storage_, rcptinfoimportstatus),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RcptInfoImportYiXunResponse_FieldNumber_BaseResponse,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RcptInfoImportYiXunResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcptInfoImportYiXunResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RcptInfoImportYiXunResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GenBizIapPrepayRequest

@implementation GenBizIapPrepayRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasNonceStr, nonceStr;
@dynamic hasTimeStamp, timeStamp;
@dynamic hasPackage, package;
@dynamic hasPaySign, paySign;
@dynamic hasSignType, signType;
@dynamic hasStepInURL, stepInURL;

typedef struct GenBizIapPrepayRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *appId;
  NSString *nonceStr;
  NSString *timeStamp;
  NSString *package;
  NSString *paySign;
  NSString *signType;
  NSString *stepInURL;
} GenBizIapPrepayRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GenBizIapPrepayRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nonceStr",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_NonceStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, nonceStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_TimeStamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "package",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_Package,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, package),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paySign",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_PaySign,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, paySign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signType",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_SignType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, signType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stepInURL",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayRequest_FieldNumber_StepInURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GenBizIapPrepayRequest__storage_, stepInURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GenBizIapPrepayRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenBizIapPrepayRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002E\000\003H\000\004I\000\005G\000\006G\000\007H\000\010G!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GenBizIapPrepayResponse

@implementation GenBizIapPrepayResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasProductId, productId;
@dynamic hasExtInfo, extInfo;

typedef struct GenBizIapPrepayResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *productId;
  NSString *extInfo;
} GenBizIapPrepayResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GenBizIapPrepayResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenBizIapPrepayResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "productId",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayResponse_FieldNumber_ProductId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenBizIapPrepayResponse__storage_, productId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extInfo",
        .dataTypeSpecific.className = NULL,
        .number = GenBizIapPrepayResponse_FieldNumber_ExtInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GenBizIapPrepayResponse__storage_, extInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GenBizIapPrepayResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenBizIapPrepayResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002I\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBizIapPayResultRequest

@implementation GetBizIapPayResultRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSerialId, serialId;

typedef struct GetBizIapPayResultRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *serialId;
} GetBizIapPayResultRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetBizIapPayResultRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBizIapPayResultRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serialId",
        .dataTypeSpecific.className = NULL,
        .number = GetBizIapPayResultRequest_FieldNumber_SerialId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBizIapPayResultRequest__storage_, serialId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBizIapPayResultRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBizIapPayResultRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBizIapPayResultResponse

@implementation GetBizIapPayResultResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDetailBuff, detailBuff;

typedef struct GetBizIapPayResultResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *detailBuff;
} GetBizIapPayResultResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetBizIapPayResultResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBizIapPayResultResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detailBuff",
        .dataTypeSpecific.className = NULL,
        .number = GetBizIapPayResultResponse_FieldNumber_DetailBuff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBizIapPayResultResponse__storage_, detailBuff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBizIapPayResultResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBizIapPayResultResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBizIapDetailRequest

@implementation GetBizIapDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSerialId, serialId;

typedef struct GetBizIapDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *serialId;
} GetBizIapDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetBizIapDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBizIapDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serialId",
        .dataTypeSpecific.className = NULL,
        .number = GetBizIapDetailRequest_FieldNumber_SerialId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBizIapDetailRequest__storage_, serialId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBizIapDetailRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBizIapDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBizIapDetailResponse

@implementation GetBizIapDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDetailBuff, detailBuff;

typedef struct GetBizIapDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *detailBuff;
} GetBizIapDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetBizIapDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBizIapDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detailBuff",
        .dataTypeSpecific.className = NULL,
        .number = GetBizIapDetailResponse_FieldNumber_DetailBuff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBizIapDetailResponse__storage_, detailBuff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBizIapDetailResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBizIapDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProductDetailRequest

@implementation GetProductDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPid, pid;
@dynamic hasVersion, version;
@dynamic hasScanCode, scanCode;

typedef struct GetProductDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  BaseRequest *baseRequest;
  NSString *pid;
  NSString *scanCode;
} GetProductDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetProductDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProductDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailRequest_FieldNumber_Pid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProductDetailRequest__storage_, pid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailRequest_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProductDetailRequest__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "scanCode",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailRequest_FieldNumber_ScanCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetProductDetailRequest__storage_, scanCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProductDetailRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProductDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002C\000\003G\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProductDetailResponse

@implementation GetProductDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasProductInfo, productInfo;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;
@dynamic hasRecommendInfo, recommendInfo;

typedef struct GetProductDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *productInfo;
  NSString *retMsg;
  NSString *recommendInfo;
} GetProductDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetProductDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProductDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "productInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailResponse_FieldNumber_ProductInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProductDetailResponse__storage_, productInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProductDetailResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetProductDetailResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recommendInfo",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDetailResponse_FieldNumber_RecommendInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetProductDetailResponse__storage_, recommendInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProductDetailResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProductDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002K\000\003G\000\004F\000\005M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LockStockRequest

@implementation LockStockRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPid, pid;
@dynamic hasSkuId, skuId;
@dynamic hasCount, count;
@dynamic hasURL, URL;

typedef struct LockStockRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSString *pid;
  NSString *skuId;
  NSString *URL;
} LockStockRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = LockStockRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LockStockRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = LockStockRequest_FieldNumber_Pid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LockStockRequest__storage_, pid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skuId",
        .dataTypeSpecific.className = NULL,
        .number = LockStockRequest_FieldNumber_SkuId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LockStockRequest__storage_, skuId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = LockStockRequest_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LockStockRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = LockStockRequest_FieldNumber_URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LockStockRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LockStockRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LockStockRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002C\000\003E\000\004E\000\005\001!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LockStockResponse

@implementation LockStockResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLockId, lockId;

typedef struct LockStockResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lockId;
  BaseResponse *baseResponse;
} LockStockResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = LockStockResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LockStockResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = LockStockResponse_FieldNumber_LockId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LockStockResponse__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LockStockResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LockStockResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnlockStockRequest

@implementation UnlockStockRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPid, pid;
@dynamic hasSkuId, skuId;
@dynamic hasCount, count;
@dynamic hasURL, URL;

typedef struct UnlockStockRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSString *pid;
  NSString *skuId;
  NSString *URL;
} UnlockStockRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = UnlockStockRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnlockStockRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = UnlockStockRequest_FieldNumber_Pid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnlockStockRequest__storage_, pid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skuId",
        .dataTypeSpecific.className = NULL,
        .number = UnlockStockRequest_FieldNumber_SkuId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UnlockStockRequest__storage_, skuId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = UnlockStockRequest_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UnlockStockRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = UnlockStockRequest_FieldNumber_URL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UnlockStockRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnlockStockRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnlockStockRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002C\000\003E\000\004E\000\005\001!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnlockStockResponse

@implementation UnlockStockResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLockId, lockId;

typedef struct UnlockStockResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lockId;
  BaseResponse *baseResponse;
} UnlockStockResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = UnlockStockResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnlockStockResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = UnlockStockResponse_FieldNumber_LockId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnlockStockResponse__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnlockStockResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnlockStockResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVItem

@implementation KVItem

@dynamic hasKey, key;
@dynamic hasValue, value;

typedef struct KVItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} KVItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = KVItem_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVItem__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = KVItem_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KVItem__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVItem class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Express

@implementation Express

@dynamic hasName, name;
@dynamic hasPrice, price;
@dynamic hasPriceType, priceType;
@dynamic hasId_p, id_p;

typedef struct Express__storage_ {
  uint32_t _has_storage_[1];
  uint32_t price;
  uint32_t id_p;
  NSString *name;
  NSString *priceType;
} Express__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Express_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Express__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = Express_FieldNumber_Price,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Express__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceType",
        .dataTypeSpecific.className = NULL,
        .number = Express_FieldNumber_PriceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Express__storage_, priceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Express_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Express__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Express class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Express__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001D\000\002E\000\003I\000\004\000Id\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Address

@implementation Address

@dynamic hasCountry, country;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasDetail, detail;
@dynamic hasUserName, userName;
@dynamic hasTel, tel;
@dynamic hasZipCode, zipCode;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *country;
  NSString *province;
  NSString *city;
  NSString *detail;
  NSString *userName;
  NSString *tel;
  NSString *zipCode;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Country,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Province,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_City,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detail",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Detail,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Address__storage_, detail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_UserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Address__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tel",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Tel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Address__storage_, tel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zipCode",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_ZipCode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Address__storage_, zipCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001G\000\002H\000\003D\000\004F\000\005H\000\006C\000\007G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Receipt

@implementation Receipt

@dynamic hasIsNeed, isNeed;
@dynamic hasDetail, detail;

typedef struct Receipt__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isNeed;
  NSString *detail;
} Receipt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isNeed",
        .dataTypeSpecific.className = NULL,
        .number = Receipt_FieldNumber_IsNeed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Receipt__storage_, isNeed),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "detail",
        .dataTypeSpecific.className = NULL,
        .number = Receipt_FieldNumber_Detail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Receipt__storage_, detail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Receipt class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Receipt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Discount

@implementation Discount

@dynamic hasTitle, title;
@dynamic hasPrice, price;

typedef struct Discount__storage_ {
  uint32_t _has_storage_[1];
  uint32_t price;
  NSString *title;
} Discount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Discount_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Discount__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = Discount_FieldNumber_Price,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Discount__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Discount class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Discount__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Production

@implementation Production

@dynamic hasSkuCount, skuCount;
@dynamic skusArray, skusArray_Count;
@dynamic hasCount, count;
@dynamic hasRealPrice, realPrice;
@dynamic hasPriceType, priceType;
@dynamic hasPid, pid;
@dynamic hasSafeURL, safeURL;
@dynamic hasSkuId, skuId;
@dynamic hasType, type;
@dynamic hasName, name;
@dynamic hasThumbURL, thumbURL;
@dynamic hasSubType, subType;
@dynamic hasScene, scene;
@dynamic hasPreferentialPrice, preferentialPrice;
@dynamic hasDiscountCount, discountCount;
@dynamic discountsArray, discountsArray_Count;

typedef struct Production__storage_ {
  uint32_t _has_storage_[1];
  uint32_t skuCount;
  uint32_t count;
  uint32_t realPrice;
  uint32_t type;
  uint32_t subType;
  uint32_t scene;
  uint32_t discountCount;
  NSMutableArray *skusArray;
  NSString *priceType;
  NSString *pid;
  NSString *safeURL;
  NSString *skuId;
  NSString *name;
  NSString *thumbURL;
  NSString *preferentialPrice;
  NSMutableArray *discountsArray;
} Production__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skuCount",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_SkuCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Production__storage_, skuCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "skusArray",
        .dataTypeSpecific.className = GPBStringifySymbol(KVItem),
        .number = Production_FieldNumber_SkusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Production__storage_, skusArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Production__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "realPrice",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_RealPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Production__storage_, realPrice),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceType",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_PriceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Production__storage_, priceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_Pid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Production__storage_, pid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "safeURL",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_SafeURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Production__storage_, safeURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skuId",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_SkuId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Production__storage_, skuId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Production__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_Name,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Production__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbURL",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_ThumbURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Production__storage_, thumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subType",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_SubType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Production__storage_, subType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_Scene,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Production__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "preferentialPrice",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_PreferentialPrice,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Production__storage_, preferentialPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discountCount",
        .dataTypeSpecific.className = NULL,
        .number = Production_FieldNumber_DiscountCount,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Production__storage_, discountCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "discountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Discount),
        .number = Production_FieldNumber_DiscountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Production__storage_, discountsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Production class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Production__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001H\000\002\000Skus\000\003E\000\004I\000\005I\000\006C\000\007E!!\000\010E\000\tD\000\nD\000\013F!"
        "!\000\014G\000\rE\000\016Q\000\017M\000\020\000Discounts\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Snapshot

@implementation Snapshot

@dynamic hasProductCount, productCount;
@dynamic productionsArray, productionsArray_Count;
@dynamic hasExpress, express;
@dynamic hasAddress, address;
@dynamic receiptArray, receiptArray_Count;
@dynamic hasReceiptCount, receiptCount;
@dynamic hasLockId, lockId;

typedef struct Snapshot__storage_ {
  uint32_t _has_storage_[1];
  uint32_t productCount;
  uint32_t receiptCount;
  NSMutableArray *productionsArray;
  Express *express;
  Address *address;
  NSMutableArray *receiptArray;
  NSString *lockId;
} Snapshot__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "productCount",
        .dataTypeSpecific.className = NULL,
        .number = Snapshot_FieldNumber_ProductCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Snapshot__storage_, productCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Production),
        .number = Snapshot_FieldNumber_ProductionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Snapshot__storage_, productionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "express",
        .dataTypeSpecific.className = GPBStringifySymbol(Express),
        .number = Snapshot_FieldNumber_Express,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Snapshot__storage_, express),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = Snapshot_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Snapshot__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiptArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Receipt),
        .number = Snapshot_FieldNumber_ReceiptArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Snapshot__storage_, receiptArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiptCount",
        .dataTypeSpecific.className = NULL,
        .number = Snapshot_FieldNumber_ReceiptCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Snapshot__storage_, receiptCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = Snapshot_FieldNumber_LockId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Snapshot__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Snapshot class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Snapshot__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001L\000\002\000Productions\000\003G\000\004G\000\005\000Receipt\000\006L\000\007F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmitMallOrderRequest

@implementation SubmitMallOrderRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSnapshot, snapshot;
@dynamic hasPayAppid, payAppid;

typedef struct SubmitMallOrderRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  Snapshot *snapshot;
  NSString *payAppid;
} SubmitMallOrderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SubmitMallOrderRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmitMallOrderRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snapshot",
        .dataTypeSpecific.className = GPBStringifySymbol(Snapshot),
        .number = SubmitMallOrderRequest_FieldNumber_Snapshot,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubmitMallOrderRequest__storage_, snapshot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payAppid",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallOrderRequest_FieldNumber_PayAppid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubmitMallOrderRequest__storage_, payAppid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmitMallOrderRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmitMallOrderRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmitMallOrderResponse

@implementation SubmitMallOrderResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPrepareId, prepareId;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct SubmitMallOrderResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *prepareId;
  NSString *retMsg;
} SubmitMallOrderResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SubmitMallOrderResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmitMallOrderResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prepareId",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallOrderResponse_FieldNumber_PrepareId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubmitMallOrderResponse__storage_, prepareId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallOrderResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubmitMallOrderResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallOrderResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SubmitMallOrderResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmitMallOrderResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmitMallOrderResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002I\000\003G\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmitMallFreeOrderRequest

@implementation SubmitMallFreeOrderRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSnapshot, snapshot;

typedef struct SubmitMallFreeOrderRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  Snapshot *snapshot;
} SubmitMallFreeOrderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SubmitMallFreeOrderRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmitMallFreeOrderRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snapshot",
        .dataTypeSpecific.className = GPBStringifySymbol(Snapshot),
        .number = SubmitMallFreeOrderRequest_FieldNumber_Snapshot,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubmitMallFreeOrderRequest__storage_, snapshot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmitMallFreeOrderRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmitMallFreeOrderRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubmitMallFreeOrderResponse

@implementation SubmitMallFreeOrderResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPrepareId, prepareId;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct SubmitMallFreeOrderResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *prepareId;
  NSString *retMsg;
} SubmitMallFreeOrderResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SubmitMallFreeOrderResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubmitMallFreeOrderResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prepareId",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallFreeOrderResponse_FieldNumber_PrepareId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubmitMallFreeOrderResponse__storage_, prepareId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallFreeOrderResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubmitMallFreeOrderResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = SubmitMallFreeOrderResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SubmitMallFreeOrderResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubmitMallFreeOrderResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubmitMallFreeOrderResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002I\000\003G\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SampleProduct

@implementation SampleProduct

@dynamic hasPid, pid;
@dynamic hasSkuId, skuId;
@dynamic hasCount, count;
@dynamic hasSafeURL, safeURL;

typedef struct SampleProduct__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSString *pid;
  NSString *skuId;
  NSString *safeURL;
} SampleProduct__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pid",
        .dataTypeSpecific.className = NULL,
        .number = SampleProduct_FieldNumber_Pid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SampleProduct__storage_, pid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "skuId",
        .dataTypeSpecific.className = NULL,
        .number = SampleProduct_FieldNumber_SkuId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SampleProduct__storage_, skuId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SampleProduct_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SampleProduct__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "safeURL",
        .dataTypeSpecific.className = NULL,
        .number = SampleProduct_FieldNumber_SafeURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SampleProduct__storage_, safeURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SampleProduct class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SampleProduct__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001C\000\002E\000\003E\000\004E!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ActionAttr

@implementation ActionAttr

@dynamic hasName, name;
@dynamic hasTips, tips;
@dynamic hasType, type;
@dynamic hasContent, content;
@dynamic hasIconURL, iconURL;

typedef struct ActionAttr__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *name;
  NSString *tips;
  NSString *content;
  NSString *iconURL;
} ActionAttr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ActionAttr_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActionAttr__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = ActionAttr_FieldNumber_Tips,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActionAttr__storage_, tips),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ActionAttr_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActionAttr__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = ActionAttr_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ActionAttr__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = ActionAttr_FieldNumber_IconURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ActionAttr__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActionAttr class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActionAttr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001D\000\002D\000\003D\000\004G\000\005E!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PreSubmitOrderRequest

@implementation PreSubmitOrderRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasProductCount, productCount;
@dynamic productArray, productArray_Count;

typedef struct PreSubmitOrderRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t productCount;
  BaseRequest *baseRequest;
  NSMutableArray *productArray;
} PreSubmitOrderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = PreSubmitOrderRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PreSubmitOrderRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "productCount",
        .dataTypeSpecific.className = NULL,
        .number = PreSubmitOrderRequest_FieldNumber_ProductCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PreSubmitOrderRequest__storage_, productCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SampleProduct),
        .number = PreSubmitOrderRequest_FieldNumber_ProductArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PreSubmitOrderRequest__storage_, productArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PreSubmitOrderRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PreSubmitOrderRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002L\000\003\000Product\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PreSubmitOrderResponse

@implementation PreSubmitOrderResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasExpressCount, expressCount;
@dynamic expressArray, expressArray_Count;
@dynamic hasLockId, lockId;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;
@dynamic actionAttrsArray, actionAttrsArray_Count;
@dynamic hasActionAttrCount, actionAttrCount;

typedef struct PreSubmitOrderResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expressCount;
  int32_t retCode;
  uint32_t actionAttrCount;
  BaseResponse *baseResponse;
  NSMutableArray *expressArray;
  NSString *lockId;
  NSString *retMsg;
  NSMutableArray *actionAttrsArray;
} PreSubmitOrderResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = PreSubmitOrderResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expressCount",
        .dataTypeSpecific.className = NULL,
        .number = PreSubmitOrderResponse_FieldNumber_ExpressCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, expressCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "expressArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Express),
        .number = PreSubmitOrderResponse_FieldNumber_ExpressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, expressArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = PreSubmitOrderResponse_FieldNumber_LockId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = PreSubmitOrderResponse_FieldNumber_RetCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = PreSubmitOrderResponse_FieldNumber_RetMsg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actionAttrsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ActionAttr),
        .number = PreSubmitOrderResponse_FieldNumber_ActionAttrsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, actionAttrsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionAttrCount",
        .dataTypeSpecific.className = NULL,
        .number = PreSubmitOrderResponse_FieldNumber_ActionAttrCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PreSubmitOrderResponse__storage_, actionAttrCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PreSubmitOrderResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PreSubmitOrderResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002L\000\003\000Express\000\004F\000\005G\000\006F\000\007\000ActionAttrs\000"
        "\010O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelPreOrderRequest

@implementation CancelPreOrderRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasProductCount, productCount;
@dynamic productArray, productArray_Count;
@dynamic hasLockId, lockId;

typedef struct CancelPreOrderRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t productCount;
  BaseRequest *baseRequest;
  NSMutableArray *productArray;
  NSString *lockId;
} CancelPreOrderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CancelPreOrderRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelPreOrderRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "productCount",
        .dataTypeSpecific.className = NULL,
        .number = CancelPreOrderRequest_FieldNumber_ProductCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelPreOrderRequest__storage_, productCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SampleProduct),
        .number = CancelPreOrderRequest_FieldNumber_ProductArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CancelPreOrderRequest__storage_, productArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = CancelPreOrderRequest_FieldNumber_LockId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CancelPreOrderRequest__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelPreOrderRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelPreOrderRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002L\000\003\000Product\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelPreOrderResponse

@implementation CancelPreOrderResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct CancelPreOrderResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *retMsg;
} CancelPreOrderResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CancelPreOrderResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelPreOrderResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = CancelPreOrderResponse_FieldNumber_RetCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelPreOrderResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = CancelPreOrderResponse_FieldNumber_RetMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CancelPreOrderResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelPreOrderResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelPreOrderResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderDetailControlRequest

@implementation OrderDetailControlRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasActionCode, actionCode;
@dynamic hasTransId, transId;

typedef struct OrderDetailControlRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t actionCode;
  BaseRequest *baseRequest;
  NSString *transId;
} OrderDetailControlRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = OrderDetailControlRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderDetailControlRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionCode",
        .dataTypeSpecific.className = NULL,
        .number = OrderDetailControlRequest_FieldNumber_ActionCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderDetailControlRequest__storage_, actionCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "transId",
        .dataTypeSpecific.className = NULL,
        .number = OrderDetailControlRequest_FieldNumber_TransId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderDetailControlRequest__storage_, transId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderDetailControlRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderDetailControlRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002J\000\003FA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderDetailControlResponse

@implementation OrderDetailControlResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct OrderDetailControlResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *retMsg;
} OrderDetailControlResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = OrderDetailControlResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderDetailControlResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = OrderDetailControlResponse_FieldNumber_RetCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderDetailControlResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = OrderDetailControlResponse_FieldNumber_RetMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderDetailControlResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderDetailControlResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderDetailControlResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProductDiscountRequest

@implementation GetProductDiscountRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLockId, lockId;
@dynamic hasURL, URL;

typedef struct GetProductDiscountRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *lockId;
  NSString *URL;
} GetProductDiscountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetProductDiscountRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProductDiscountRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDiscountRequest_FieldNumber_LockId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProductDiscountRequest__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDiscountRequest_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProductDiscountRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProductDiscountRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProductDiscountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003\001!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProductDiscountResponse

@implementation GetProductDiscountResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasDiscountDetail, discountDetail;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct GetProductDiscountResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *discountDetail;
  NSString *retMsg;
} GetProductDiscountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetProductDiscountResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProductDiscountResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "discountDetail",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDiscountResponse_FieldNumber_DiscountDetail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProductDiscountResponse__storage_, discountDetail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDiscountResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetProductDiscountResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = GetProductDiscountResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetProductDiscountResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProductDiscountResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProductDiscountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002N\000\003G\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLastestExpressInfoRequest

@implementation GetLastestExpressInfoRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasProductId, productId;
@dynamic hasLockId, lockId;
@dynamic hasAddress, address;

typedef struct GetLastestExpressInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *productId;
  NSString *lockId;
  Address *address;
} GetLastestExpressInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetLastestExpressInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "productId",
        .dataTypeSpecific.className = NULL,
        .number = GetLastestExpressInfoRequest_FieldNumber_ProductId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoRequest__storage_, productId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lockId",
        .dataTypeSpecific.className = NULL,
        .number = GetLastestExpressInfoRequest_FieldNumber_LockId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoRequest__storage_, lockId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = GetLastestExpressInfoRequest_FieldNumber_Address,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLastestExpressInfoRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLastestExpressInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002I\000\003F\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLastestExpressInfoResponse

@implementation GetLastestExpressInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic expressListArray, expressListArray_Count;
@dynamic hasExpressCount, expressCount;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct GetLastestExpressInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expressCount;
  int32_t retCode;
  BaseResponse *baseResponse;
  NSMutableArray *expressListArray;
  NSString *retMsg;
} GetLastestExpressInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetLastestExpressInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expressListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Express),
        .number = GetLastestExpressInfoResponse_FieldNumber_ExpressListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoResponse__storage_, expressListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expressCount",
        .dataTypeSpecific.className = NULL,
        .number = GetLastestExpressInfoResponse_FieldNumber_ExpressCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoResponse__storage_, expressCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = GetLastestExpressInfoResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = GetLastestExpressInfoResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetLastestExpressInfoResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLastestExpressInfoResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLastestExpressInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002\000ExpressList\000\003L\000\004G\000\005F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendC2CSecMsgRequest

@implementation SendC2CSecMsgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasToUser, toUser;
@dynamic hasMsgType, msgType;
@dynamic hasTempId, tempId;
@dynamic hasTitle, title;
@dynamic hasDes, des;
@dynamic hasURL, URL;
@dynamic hasScene, scene;

typedef struct SendC2CSecMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  int32_t scene;
  BaseRequest *baseRequest;
  NSString *toUser;
  NSString *tempId;
  NSString *title;
  NSString *des;
  NSString *URL;
} SendC2CSecMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SendC2CSecMsgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toUser",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_ToUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, toUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_MsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tempId",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_TempId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, tempId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "des",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_Des,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, des),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_URL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = SendC2CSecMsgRequest_FieldNumber_Scene,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SendC2CSecMsgRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendC2CSecMsgRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendC2CSecMsgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002F\000\003G\000\004F\000\005E\000\006C\000\007\001!!\000\010E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendC2cSecMsgResponse

@implementation SendC2cSecMsgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasErrCode, errCode;
@dynamic hasErrMsg, errMsg;
@dynamic hasMsgId, msgId;

typedef struct SendC2cSecMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t errCode;
  BaseResponse *baseResponse;
  NSString *errMsg;
  NSString *msgId;
} SendC2cSecMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SendC2cSecMsgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendC2cSecMsgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = SendC2cSecMsgResponse_FieldNumber_ErrCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendC2cSecMsgResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errMsg",
        .dataTypeSpecific.className = NULL,
        .number = SendC2cSecMsgResponse_FieldNumber_ErrMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendC2cSecMsgResponse__storage_, errMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = SendC2cSecMsgResponse_FieldNumber_MsgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendC2cSecMsgResponse__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendC2cSecMsgResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendC2cSecMsgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002G\000\003F\000\004E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardEntranceStyleRequest

@implementation GetCardEntranceStyleRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct GetCardEntranceStyleRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GetCardEntranceStyleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetCardEntranceStyleRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardEntranceStyleRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardEntranceStyleRequest class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardEntranceStyleRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardEntranceStyleResponse

@implementation GetCardEntranceStyleResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;
@dynamic hasCardHomePageIsNewVersion, cardHomePageIsNewVersion;

typedef struct GetCardEntranceStyleResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t retCode;
  BaseResponse *baseResponse;
  NSString *retMsg;
} GetCardEntranceStyleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetCardEntranceStyleResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardEntranceStyleResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = GetCardEntranceStyleResponse_FieldNumber_RetCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardEntranceStyleResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = GetCardEntranceStyleResponse_FieldNumber_RetMsg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCardEntranceStyleResponse__storage_, retMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardHomePageIsNewVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCardEntranceStyleResponse_FieldNumber_CardHomePageIsNewVersion,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardEntranceStyleResponse class]
                                     rootClass:[MmpayRoot class]
                                          file:MmpayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardEntranceStyleResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002\007\000\003\006\000\004\030\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
