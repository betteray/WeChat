// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoiphw.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmvoiphw.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmvoiphwRoot

@implementation MmvoiphwRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmvoiphwRoot_FileDescriptor

static GPBFileDescriptor *MmvoiphwRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - HWParamBuffer

@implementation HWParamBuffer

@dynamic hasHeaderLen, headerLen;
@dynamic hasSpsbuf, spsbuf;
@dynamic hasPpsbuf, ppsbuf;

typedef struct HWParamBuffer__storage_ {
  uint32_t _has_storage_[1];
  uint32_t headerLen;
  NSData *spsbuf;
  NSData *ppsbuf;
} HWParamBuffer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "headerLen",
        .dataTypeSpecific.className = NULL,
        .number = HWParamBuffer_FieldNumber_HeaderLen,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HWParamBuffer__storage_, headerLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "spsbuf",
        .dataTypeSpecific.className = NULL,
        .number = HWParamBuffer_FieldNumber_Spsbuf,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HWParamBuffer__storage_, spsbuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ppsbuf",
        .dataTypeSpecific.className = NULL,
        .number = HWParamBuffer_FieldNumber_Ppsbuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HWParamBuffer__storage_, ppsbuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HWParamBuffer class]
                                     rootClass:[MmvoiphwRoot class]
                                          file:MmvoiphwRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HWParamBuffer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001I\000\002d\002\000\003d\002\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HWTimeInfo

@implementation HWTimeInfo

@dynamic hasDurTimeValue, durTimeValue;
@dynamic hasDurTimeScale, durTimeScale;
@dynamic hasPresentTimeValue, presentTimeValue;
@dynamic hasPresentTimeScale, presentTimeScale;
@dynamic hasDecodeTimeValue, decodeTimeValue;
@dynamic hasDecodeTimeScale, decodeTimeScale;

typedef struct HWTimeInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t durTimeScale;
  int32_t presentTimeScale;
  int32_t decodeTimeScale;
  int64_t durTimeValue;
  int64_t presentTimeValue;
  int64_t decodeTimeValue;
} HWTimeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "durTimeValue",
        .dataTypeSpecific.className = NULL,
        .number = HWTimeInfo_FieldNumber_DurTimeValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HWTimeInfo__storage_, durTimeValue),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "durTimeScale",
        .dataTypeSpecific.className = NULL,
        .number = HWTimeInfo_FieldNumber_DurTimeScale,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HWTimeInfo__storage_, durTimeScale),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "presentTimeValue",
        .dataTypeSpecific.className = NULL,
        .number = HWTimeInfo_FieldNumber_PresentTimeValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HWTimeInfo__storage_, presentTimeValue),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "presentTimeScale",
        .dataTypeSpecific.className = NULL,
        .number = HWTimeInfo_FieldNumber_PresentTimeScale,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HWTimeInfo__storage_, presentTimeScale),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "decodeTimeValue",
        .dataTypeSpecific.className = NULL,
        .number = HWTimeInfo_FieldNumber_DecodeTimeValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HWTimeInfo__storage_, decodeTimeValue),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "decodeTimeScale",
        .dataTypeSpecific.className = NULL,
        .number = HWTimeInfo_FieldNumber_DecodeTimeScale,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HWTimeInfo__storage_, decodeTimeScale),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HWTimeInfo class]
                                     rootClass:[MmvoiphwRoot class]
                                          file:MmvoiphwRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HWTimeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002L\000\003P\000\004P\000\005O\000\006O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HWFrameBuffer

@implementation HWFrameBuffer

@dynamic hasRawBuf, rawBuf;
@dynamic hasSamplesCount, samplesCount;
@dynamic timeInfoArray, timeInfoArray_Count;
@dynamic sampleSizeArray, sampleSizeArray_Count;

typedef struct HWFrameBuffer__storage_ {
  uint32_t _has_storage_[1];
  int32_t samplesCount;
  NSData *rawBuf;
  NSMutableArray *timeInfoArray;
  GPBInt32Array *sampleSizeArray;
} HWFrameBuffer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rawBuf",
        .dataTypeSpecific.className = NULL,
        .number = HWFrameBuffer_FieldNumber_RawBuf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HWFrameBuffer__storage_, rawBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "samplesCount",
        .dataTypeSpecific.className = NULL,
        .number = HWFrameBuffer_FieldNumber_SamplesCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HWFrameBuffer__storage_, samplesCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HWTimeInfo),
        .number = HWFrameBuffer_FieldNumber_TimeInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HWFrameBuffer__storage_, timeInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sampleSizeArray",
        .dataTypeSpecific.className = NULL,
        .number = HWFrameBuffer_FieldNumber_SampleSizeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HWFrameBuffer__storage_, sampleSizeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HWFrameBuffer class]
                                     rootClass:[MmvoiphwRoot class]
                                          file:MmvoiphwRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HWFrameBuffer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001F\000\002L\000\003\000TimeInfo\000\004\000SampleSize\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VOIPRUDPCmd

@implementation VOIPRUDPCmd

@dynamic hasCmdType, cmdType;
@dynamic hasCmdBuffer, cmdBuffer;

typedef struct VOIPRUDPCmd__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmdType;
  NSData *cmdBuffer;
} VOIPRUDPCmd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmdType",
        .dataTypeSpecific.className = NULL,
        .number = VOIPRUDPCmd_FieldNumber_CmdType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VOIPRUDPCmd__storage_, cmdType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cmdBuffer",
        .dataTypeSpecific.className = NULL,
        .number = VOIPRUDPCmd_FieldNumber_CmdBuffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VOIPRUDPCmd__storage_, cmdBuffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VOIPRUDPCmd class]
                                     rootClass:[MmvoiphwRoot class]
                                          file:MmvoiphwRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VOIPRUDPCmd__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
