// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoiceprint.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmvoiceprint.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmvoiceprintRoot

@implementation MmvoiceprintRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmvoiceprintRoot_FileDescriptor

static GPBFileDescriptor *MmvoiceprintRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - VoicePieceCtx

@implementation VoicePieceCtx

@dynamic hasStartPos, startPos;
@dynamic hasPieceLen, pieceLen;
@dynamic hasPieceFlag, pieceFlag;
@dynamic hasPieceData, pieceData;

typedef struct VoicePieceCtx__storage_ {
  uint32_t _has_storage_[1];
  uint32_t startPos;
  uint32_t pieceLen;
  uint32_t pieceFlag;
  SKBuiltinBuffer_t *pieceData;
} VoicePieceCtx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = VoicePieceCtx_FieldNumber_StartPos,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoicePieceCtx__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pieceLen",
        .dataTypeSpecific.className = NULL,
        .number = VoicePieceCtx_FieldNumber_PieceLen,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoicePieceCtx__storage_, pieceLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pieceFlag",
        .dataTypeSpecific.className = NULL,
        .number = VoicePieceCtx_FieldNumber_PieceFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoicePieceCtx__storage_, pieceFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pieceData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoicePieceCtx_FieldNumber_PieceData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoicePieceCtx__storage_, pieceData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoicePieceCtx class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoicePieceCtx__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002H\000\003I\000\004I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResourceCtx

@implementation ResourceCtx

@dynamic hasResId, resId;
@dynamic hasResData, resData;

typedef struct ResourceCtx__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resId;
  SKBuiltinBuffer_t *resData;
} ResourceCtx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resId",
        .dataTypeSpecific.className = NULL,
        .number = ResourceCtx_FieldNumber_ResId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResourceCtx__storage_, resId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ResourceCtx_FieldNumber_ResData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResourceCtx__storage_, resData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResourceCtx class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResourceCtx__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoicePrintResourceRequest

@implementation GetVoicePrintResourceRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasResScence, resScence;
@dynamic hasVerifyTicket, verifyTicket;

typedef struct GetVoicePrintResourceRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resScence;
  BaseRequest *baseRequest;
  NSString *verifyTicket;
} GetVoicePrintResourceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetVoicePrintResourceRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resScence",
        .dataTypeSpecific.className = NULL,
        .number = GetVoicePrintResourceRequest_FieldNumber_ResScence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRequest__storage_, resScence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyTicket",
        .dataTypeSpecific.className = NULL,
        .number = GetVoicePrintResourceRequest_FieldNumber_VerifyTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRequest__storage_, verifyTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoicePrintResourceRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoicePrintResourceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002I\000\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoicePrintResourceResponse

@implementation GetVoicePrintResourceResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasResourceData, resourceData;

typedef struct GetVoicePrintResourceResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  ResourceCtx *resourceData;
} GetVoicePrintResourceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetVoicePrintResourceResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resourceData",
        .dataTypeSpecific.className = GPBStringifySymbol(ResourceCtx),
        .number = GetVoicePrintResourceResponse_FieldNumber_ResourceData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceResponse__storage_, resourceData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoicePrintResourceResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoicePrintResourceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoicePrintResourceRsaRequest

@implementation GetVoicePrintResourceRsaRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasResScence, resScence;
@dynamic hasVerifyTicket, verifyTicket;
@dynamic hasRandomEncryKey, randomEncryKey;

typedef struct GetVoicePrintResourceRsaRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resScence;
  BaseRequest *baseRequest;
  NSString *verifyTicket;
  SKBuiltinBuffer_t *randomEncryKey;
} GetVoicePrintResourceRsaRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetVoicePrintResourceRsaRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRsaRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resScence",
        .dataTypeSpecific.className = NULL,
        .number = GetVoicePrintResourceRsaRequest_FieldNumber_ResScence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRsaRequest__storage_, resScence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyTicket",
        .dataTypeSpecific.className = NULL,
        .number = GetVoicePrintResourceRsaRequest_FieldNumber_VerifyTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRsaRequest__storage_, verifyTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetVoicePrintResourceRsaRequest_FieldNumber_RandomEncryKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRsaRequest__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoicePrintResourceRsaRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoicePrintResourceRsaRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002I\000\003L\000\004N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoicePrintResourceRsaResponse

@implementation GetVoicePrintResourceRsaResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasResourceData, resourceData;

typedef struct GetVoicePrintResourceRsaResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  ResourceCtx *resourceData;
} GetVoicePrintResourceRsaResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetVoicePrintResourceRsaResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRsaResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resourceData",
        .dataTypeSpecific.className = GPBStringifySymbol(ResourceCtx),
        .number = GetVoicePrintResourceRsaResponse_FieldNumber_ResourceData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoicePrintResourceRsaResponse__storage_, resourceData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoicePrintResourceRsaResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoicePrintResourceRsaResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterVoicePrintRequest

@implementation RegisterVoicePrintRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasStep, step;
@dynamic hasVoiceTicket, voiceTicket;
@dynamic hasPieceData, pieceData;
@dynamic hasResId, resId;

typedef struct RegisterVoicePrintRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t step;
  uint32_t voiceTicket;
  uint32_t resId;
  BaseRequest *baseRequest;
  VoicePieceCtx *pieceData;
} RegisterVoicePrintRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RegisterVoicePrintRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterVoicePrintRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "step",
        .dataTypeSpecific.className = NULL,
        .number = RegisterVoicePrintRequest_FieldNumber_Step,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterVoicePrintRequest__storage_, step),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "voiceTicket",
        .dataTypeSpecific.className = NULL,
        .number = RegisterVoicePrintRequest_FieldNumber_VoiceTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterVoicePrintRequest__storage_, voiceTicket),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pieceData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoicePieceCtx),
        .number = RegisterVoicePrintRequest_FieldNumber_PieceData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterVoicePrintRequest__storage_, pieceData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterVoicePrintRequest_FieldNumber_ResId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterVoicePrintRequest__storage_, resId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterVoicePrintRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterVoicePrintRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002D\000\003K\000\004I\000\005E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterVoicePrintResponse

@implementation RegisterVoicePrintResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasResgisterRet, resgisterRet;
@dynamic hasNextStep, nextStep;
@dynamic hasNextPiece, nextPiece;
@dynamic hasVoiceTicket, voiceTicket;

typedef struct RegisterVoicePrintResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t resgisterRet;
  uint32_t nextStep;
  uint32_t voiceTicket;
  BaseResponse *baseResponse;
  VoicePieceCtx *nextPiece;
} RegisterVoicePrintResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RegisterVoicePrintResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterVoicePrintResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resgisterRet",
        .dataTypeSpecific.className = NULL,
        .number = RegisterVoicePrintResponse_FieldNumber_ResgisterRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterVoicePrintResponse__storage_, resgisterRet),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nextStep",
        .dataTypeSpecific.className = NULL,
        .number = RegisterVoicePrintResponse_FieldNumber_NextStep,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterVoicePrintResponse__storage_, nextStep),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nextPiece",
        .dataTypeSpecific.className = GPBStringifySymbol(VoicePieceCtx),
        .number = RegisterVoicePrintResponse_FieldNumber_NextPiece,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterVoicePrintResponse__storage_, nextPiece),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceTicket",
        .dataTypeSpecific.className = NULL,
        .number = RegisterVoicePrintResponse_FieldNumber_VoiceTicket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterVoicePrintResponse__storage_, voiceTicket),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterVoicePrintResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterVoicePrintResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002L\000\003H\000\004I\000\005K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyVoicePrintRequest

@implementation VerifyVoicePrintRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPiece, piece;
@dynamic hasVoiceTicket, voiceTicket;
@dynamic hasResId, resId;
@dynamic hasVerifyTicket, verifyTicket;

typedef struct VerifyVoicePrintRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t voiceTicket;
  uint32_t resId;
  BaseRequest *baseRequest;
  VoicePieceCtx *piece;
  NSString *verifyTicket;
} VerifyVoicePrintRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VerifyVoicePrintRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "piece",
        .dataTypeSpecific.className = GPBStringifySymbol(VoicePieceCtx),
        .number = VerifyVoicePrintRequest_FieldNumber_Piece,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRequest__storage_, piece),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRequest_FieldNumber_VoiceTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRequest__storage_, voiceTicket),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resId",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRequest_FieldNumber_ResId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRequest__storage_, resId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRequest_FieldNumber_VerifyTicket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRequest__storage_, verifyTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyVoicePrintRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyVoicePrintRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002E\000\003K\000\004E\000\005L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyVoicePrintResponse

@implementation VerifyVoicePrintResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNextPiece, nextPiece;
@dynamic hasResult, result;
@dynamic hasVoiceTicket, voiceTicket;

typedef struct VerifyVoicePrintResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t result;
  uint32_t voiceTicket;
  BaseResponse *baseResponse;
  VoicePieceCtx *nextPiece;
} VerifyVoicePrintResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VerifyVoicePrintResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyVoicePrintResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPiece",
        .dataTypeSpecific.className = GPBStringifySymbol(VoicePieceCtx),
        .number = VerifyVoicePrintResponse_FieldNumber_NextPiece,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyVoicePrintResponse__storage_, nextPiece),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintResponse_FieldNumber_Result,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyVoicePrintResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "voiceTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintResponse_FieldNumber_VoiceTicket,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyVoicePrintResponse__storage_, voiceTicket),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyVoicePrintResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyVoicePrintResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002I\000\003F\000\004K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyVoicePrintRsaRequest

@implementation VerifyVoicePrintRsaRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPiece, piece;
@dynamic hasVoiceTicket, voiceTicket;
@dynamic hasResId, resId;
@dynamic hasVerifyTicket, verifyTicket;
@dynamic hasRandomEncryKey, randomEncryKey;

typedef struct VerifyVoicePrintRsaRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t voiceTicket;
  uint32_t resId;
  BaseRequest *baseRequest;
  VoicePieceCtx *piece;
  NSString *verifyTicket;
  SKBuiltinBuffer_t *randomEncryKey;
} VerifyVoicePrintRsaRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VerifyVoicePrintRsaRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "piece",
        .dataTypeSpecific.className = GPBStringifySymbol(VoicePieceCtx),
        .number = VerifyVoicePrintRsaRequest_FieldNumber_Piece,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaRequest__storage_, piece),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRsaRequest_FieldNumber_VoiceTicket,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaRequest__storage_, voiceTicket),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resId",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRsaRequest_FieldNumber_ResId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaRequest__storage_, resId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRsaRequest_FieldNumber_VerifyTicket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaRequest__storage_, verifyTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VerifyVoicePrintRsaRequest_FieldNumber_RandomEncryKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaRequest__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyVoicePrintRsaRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyVoicePrintRsaRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002E\000\003K\000\004E\000\005L\000\006N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerifyVoicePrintRsaResponse

@implementation VerifyVoicePrintRsaResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNextPiece, nextPiece;
@dynamic hasResult, result;
@dynamic hasVoiceTicket, voiceTicket;
@dynamic hasAuthPwd, authPwd;

typedef struct VerifyVoicePrintRsaResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t result;
  uint32_t voiceTicket;
  BaseResponse *baseResponse;
  VoicePieceCtx *nextPiece;
  NSString *authPwd;
} VerifyVoicePrintRsaResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VerifyVoicePrintRsaResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPiece",
        .dataTypeSpecific.className = GPBStringifySymbol(VoicePieceCtx),
        .number = VerifyVoicePrintRsaResponse_FieldNumber_NextPiece,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaResponse__storage_, nextPiece),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRsaResponse_FieldNumber_Result,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "voiceTicket",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRsaResponse_FieldNumber_VoiceTicket,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaResponse__storage_, voiceTicket),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "authPwd",
        .dataTypeSpecific.className = NULL,
        .number = VerifyVoicePrintRsaResponse_FieldNumber_AuthPwd,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VerifyVoicePrintRsaResponse__storage_, authPwd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerifyVoicePrintRsaResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerifyVoicePrintRsaResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002I\000\003F\000\004K\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SwitchOpVoicePrintRequest

@implementation SwitchOpVoicePrintRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpcode, opcode;

typedef struct SwitchOpVoicePrintRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opcode;
  BaseRequest *baseRequest;
} SwitchOpVoicePrintRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SwitchOpVoicePrintRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SwitchOpVoicePrintRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = SwitchOpVoicePrintRequest_FieldNumber_Opcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SwitchOpVoicePrintRequest__storage_, opcode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SwitchOpVoicePrintRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SwitchOpVoicePrintRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SwitchOpVoicePrintResponse

@implementation SwitchOpVoicePrintResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasUserSwitch, userSwitch;
@dynamic hasUserStatus, userStatus;

typedef struct SwitchOpVoicePrintResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userSwitch;
  uint32_t userStatus;
  BaseResponse *baseResponse;
} SwitchOpVoicePrintResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SwitchOpVoicePrintResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SwitchOpVoicePrintResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userSwitch",
        .dataTypeSpecific.className = NULL,
        .number = SwitchOpVoicePrintResponse_FieldNumber_UserSwitch,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SwitchOpVoicePrintResponse__storage_, userSwitch),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userStatus",
        .dataTypeSpecific.className = NULL,
        .number = SwitchOpVoicePrintResponse_FieldNumber_UserStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SwitchOpVoicePrintResponse__storage_, userStatus),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SwitchOpVoicePrintResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SwitchOpVoicePrintResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002J\000\003J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoiceprintTicketRsaRequest

@implementation GetVoiceprintTicketRsaRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserName, userName;
@dynamic hasGetScence, getScence;
@dynamic hasRandomEncryKey, randomEncryKey;

typedef struct GetVoiceprintTicketRsaRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t getScence;
  BaseRequest *baseRequest;
  NSString *userName;
  SKBuiltinBuffer_t *randomEncryKey;
} GetVoiceprintTicketRsaRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetVoiceprintTicketRsaRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = GetVoiceprintTicketRsaRequest_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "getScence",
        .dataTypeSpecific.className = NULL,
        .number = GetVoiceprintTicketRsaRequest_FieldNumber_GetScence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaRequest__storage_, getScence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetVoiceprintTicketRsaRequest_FieldNumber_RandomEncryKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaRequest__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoiceprintTicketRsaRequest class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoiceprintTicketRsaRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002H\000\003I\000\004N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVoiceprintTicketRsaResponse

@implementation GetVoiceprintTicketRsaResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasVoiceprintTicket, voiceprintTicket;
@dynamic hasBuiltinIplist, builtinIplist;
@dynamic hasNewHostList, newHostList;
@dynamic hasNetworkControl, networkControl;

typedef struct GetVoiceprintTicketRsaResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *voiceprintTicket;
  BuiltinIPList *builtinIplist;
  HostList *newHostList;
  NetworkControl *networkControl;
} GetVoiceprintTicketRsaResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetVoiceprintTicketRsaResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceprintTicket",
        .dataTypeSpecific.className = NULL,
        .number = GetVoiceprintTicketRsaResponse_FieldNumber_VoiceprintTicket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaResponse__storage_, voiceprintTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "builtinIplist",
        .dataTypeSpecific.className = GPBStringifySymbol(BuiltinIPList),
        .number = GetVoiceprintTicketRsaResponse_FieldNumber_BuiltinIplist,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaResponse__storage_, builtinIplist),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newHostList",
        .dataTypeSpecific.className = GPBStringifySymbol(HostList),
        .number = GetVoiceprintTicketRsaResponse_FieldNumber_NewHostList,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaResponse__storage_, newHostList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "networkControl",
        .dataTypeSpecific.className = GPBStringifySymbol(NetworkControl),
        .number = GetVoiceprintTicketRsaResponse_FieldNumber_NetworkControl,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetVoiceprintTicketRsaResponse__storage_, networkControl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVoiceprintTicketRsaResponse class]
                                     rootClass:[MmvoiceprintRoot class]
                                          file:MmvoiceprintRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVoiceprintTicketRsaResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002P\000\003Hb\003\000\004K\000\005N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
