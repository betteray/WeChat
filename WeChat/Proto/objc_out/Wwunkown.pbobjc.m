// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wwunkown.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Wwunkown.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WwunkownRoot

@implementation WwunkownRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WwunkownRoot_FileDescriptor

static GPBFileDescriptor *WwunkownRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Cpucardgetconfig2Req

@implementation Cpucardgetconfig2Req

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTag2, tag2;

typedef struct Cpucardgetconfig2Req__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tag2;
  BaseRequest *baseRequest;
} Cpucardgetconfig2Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = Cpucardgetconfig2Req_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Req__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tag2",
        .dataTypeSpecific.className = NULL,
        .number = Cpucardgetconfig2Req_FieldNumber_Tag2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Req__storage_, tag2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Cpucardgetconfig2Req class]
                                     rootClass:[WwunkownRoot class]
                                          file:WwunkownRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Cpucardgetconfig2Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Cpucardgetconfig2Resp

@implementation Cpucardgetconfig2Resp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTag3, tag3;
@dynamic hasTag4, tag4;
@dynamic hasTag5, tag5;
@dynamic hasTag6, tag6;

typedef struct Cpucardgetconfig2Resp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tag3;
  uint32_t tag4;
  uint32_t tag5;
  BaseResponse *baseResponse;
  NSString *tag6;
} Cpucardgetconfig2Resp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = Cpucardgetconfig2Resp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Resp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tag3",
        .dataTypeSpecific.className = NULL,
        .number = Cpucardgetconfig2Resp_FieldNumber_Tag3,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Resp__storage_, tag3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tag4",
        .dataTypeSpecific.className = NULL,
        .number = Cpucardgetconfig2Resp_FieldNumber_Tag4,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Resp__storage_, tag4),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tag5",
        .dataTypeSpecific.className = NULL,
        .number = Cpucardgetconfig2Resp_FieldNumber_Tag5,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Resp__storage_, tag5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tag6",
        .dataTypeSpecific.className = NULL,
        .number = Cpucardgetconfig2Resp_FieldNumber_Tag6,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Cpucardgetconfig2Resp__storage_, tag6),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Cpucardgetconfig2Resp class]
                                     rootClass:[WwunkownRoot class]
                                          file:WwunkownRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Cpucardgetconfig2Resp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReportclientcheckRequest

@implementation ReportclientcheckRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasClientCheckData, clientCheckData;
@dynamic hasTag3, tag3;

typedef struct ReportclientcheckRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tag3;
  BaseRequest *baseRequest;
  ReportclientcheckRequest_ClientCheckData *clientCheckData;
} ReportclientcheckRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ReportclientcheckRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReportclientcheckRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientCheckData",
        .dataTypeSpecific.className = GPBStringifySymbol(ReportclientcheckRequest_ClientCheckData),
        .number = ReportclientcheckRequest_FieldNumber_ClientCheckData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReportclientcheckRequest__storage_, clientCheckData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tag3",
        .dataTypeSpecific.className = NULL,
        .number = ReportclientcheckRequest_FieldNumber_Tag3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReportclientcheckRequest__storage_, tag3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReportclientcheckRequest class]
                                     rootClass:[WwunkownRoot class]
                                          file:WwunkownRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReportclientcheckRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReportclientcheckRequest_ClientCheckData

@implementation ReportclientcheckRequest_ClientCheckData

@dynamic hasEnType, enType;
@dynamic hasTag2, tag2;
@dynamic hasData_p, data_p;

typedef struct ReportclientcheckRequest_ClientCheckData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tag2;
  NSString *enType;
  NSData *data_p;
} ReportclientcheckRequest_ClientCheckData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enType",
        .dataTypeSpecific.className = NULL,
        .number = ReportclientcheckRequest_ClientCheckData_FieldNumber_EnType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReportclientcheckRequest_ClientCheckData__storage_, enType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tag2",
        .dataTypeSpecific.className = NULL,
        .number = ReportclientcheckRequest_ClientCheckData_FieldNumber_Tag2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReportclientcheckRequest_ClientCheckData__storage_, tag2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = ReportclientcheckRequest_ClientCheckData_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReportclientcheckRequest_ClientCheckData__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReportclientcheckRequest_ClientCheckData class]
                                     rootClass:[WwunkownRoot class]
                                          file:WwunkownRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReportclientcheckRequest_ClientCheckData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ReportclientcheckRequest)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReportclientcheckResp

@implementation ReportclientcheckResp

@dynamic hasBaseResponse, baseResponse;

typedef struct ReportclientcheckResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ReportclientcheckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ReportclientcheckResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReportclientcheckResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReportclientcheckResp class]
                                     rootClass:[WwunkownRoot class]
                                          file:WwunkownRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReportclientcheckResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
