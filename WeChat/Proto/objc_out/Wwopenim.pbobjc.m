// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wwopenim.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Wwopenim.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WwopenimRoot

@implementation WwopenimRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WwopenimRoot_FileDescriptor

static GPBFileDescriptor *WwopenimRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - GetOpenIMResourceReq

@implementation GetOpenIMResourceReq

@dynamic hasLanguage, language;
@dynamic hasAppId, appId;
@dynamic wordingIdArray, wordingIdArray_Count;

typedef struct GetOpenIMResourceReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *language;
  NSString *appId;
  NSMutableArray *wordingIdArray;
} GetOpenIMResourceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = GetOpenIMResourceReq_FieldNumber_Language,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOpenIMResourceReq__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GetOpenIMResourceReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOpenIMResourceReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wordingIdArray",
        .dataTypeSpecific.className = NULL,
        .number = GetOpenIMResourceReq_FieldNumber_WordingIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetOpenIMResourceReq__storage_, wordingIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOpenIMResourceReq class]
                                     rootClass:[WwopenimRoot class]
                                          file:WwopenimRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOpenIMResourceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002E\000\003\000WordingId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppIdResource

@implementation AppIdResource

@dynamic hasFunctionFlag, functionFlag;

typedef struct AppIdResource__storage_ {
  uint32_t _has_storage_[1];
  uint32_t functionFlag;
} AppIdResource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "functionFlag",
        .dataTypeSpecific.className = NULL,
        .number = AppIdResource_FieldNumber_FunctionFlag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppIdResource__storage_, functionFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppIdResource class]
                                     rootClass:[WwopenimRoot class]
                                          file:WwopenimRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppIdResource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcctTypeResource

@implementation AcctTypeResource

@dynamic hasAcctTypeId, acctTypeId;

typedef struct AcctTypeResource__storage_ {
  uint32_t _has_storage_[1];
  NSString *acctTypeId;
} AcctTypeResource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "acctTypeId",
        .dataTypeSpecific.className = NULL,
        .number = AcctTypeResource_FieldNumber_AcctTypeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcctTypeResource__storage_, acctTypeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcctTypeResource class]
                                     rootClass:[WwopenimRoot class]
                                          file:WwopenimRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcctTypeResource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOpenIMResourceResp

@implementation GetOpenIMResourceResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasAppidResource, appidResource;
@dynamic hasAcctTypeResource, acctTypeResource;

typedef struct GetOpenIMResourceResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  AppIdResource *appidResource;
  AcctTypeResource *acctTypeResource;
} GetOpenIMResourceResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetOpenIMResourceResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOpenIMResourceResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appidResource",
        .dataTypeSpecific.className = GPBStringifySymbol(AppIdResource),
        .number = GetOpenIMResourceResp_FieldNumber_AppidResource,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetOpenIMResourceResp__storage_, appidResource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acctTypeResource",
        .dataTypeSpecific.className = GPBStringifySymbol(AcctTypeResource),
        .number = GetOpenIMResourceResp_FieldNumber_AcctTypeResource,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetOpenIMResourceResp__storage_, acctTypeResource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOpenIMResourceResp class]
                                     rootClass:[WwopenimRoot class]
                                          file:WwopenimRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOpenIMResourceResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002\r\000\003\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
