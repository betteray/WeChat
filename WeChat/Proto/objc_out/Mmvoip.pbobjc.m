// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmvoip.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmvoip.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmvoipRoot

@implementation MmvoipRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmvoipRoot_FileDescriptor

static GPBFileDescriptor *MmvoipRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - VoipRelayData

@implementation VoipRelayData

@dynamic hasType, type;
@dynamic hasBuffer, buffer;

typedef struct VoipRelayData__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  SKBuiltinBuffer_t *buffer;
} VoipRelayData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = VoipRelayData_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipRelayData__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipRelayData_FieldNumber_Buffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipRelayData__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipRelayData class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipRelayData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipAddr

@implementation VoipAddr

@dynamic hasIp, ip;
@dynamic hasPort, port;

typedef struct VoipAddr__storage_ {
  uint32_t _has_storage_[1];
  int32_t ip;
  int32_t port;
} VoipAddr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = VoipAddr_FieldNumber_Ip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipAddr__storage_, ip),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = VoipAddr_FieldNumber_Port,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipAddr__storage_, port),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipAddr class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipAddr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001B\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipAddrSet

@implementation VoipAddrSet

@dynamic hasCnt, cnt;
@dynamic addrsArray, addrsArray_Count;

typedef struct VoipAddrSet__storage_ {
  uint32_t _has_storage_[1];
  int32_t cnt;
  NSMutableArray *addrsArray;
} VoipAddrSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipAddrSet_FieldNumber_Cnt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipAddrSet__storage_, cnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "addrsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = VoipAddrSet_FieldNumber_AddrsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipAddrSet__storage_, addrsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipAddrSet class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipAddrSet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002\000Addrs\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipMultiRelayData

@implementation VoipMultiRelayData

@dynamic hasPeerId, peerId;
@dynamic hasCapInfo, capInfo;
@dynamic hasSendingType, sendingType;
@dynamic hasVoipSvrAddr, voipSvrAddr;
@dynamic hasPunchSvrAddr, punchSvrAddr;
@dynamic hasVoipNetQuality, voipNetQuality;
@dynamic hasLinkDisconnectHbInterval, linkDisconnectHbInterval;
@dynamic hasLinkDisconnectHbCnt, linkDisconnectHbCnt;
@dynamic hasProtocolEncryptLength, protocolEncryptLength;
@dynamic hasClientHeadSigns, clientHeadSigns;
@dynamic hasOppositeClientVersion, oppositeClientVersion;
@dynamic hasTcpSvrAddr, tcpSvrAddr;
@dynamic hasArqstrategy, arqstrategy;
@dynamic hasArqcacheLen, arqcacheLen;
@dynamic hasArqrttThreshold, arqrttThreshold;
@dynamic hasArqusedRateThreshold, arqusedRateThreshold;
@dynamic hasArqrespRateThreshold, arqrespRateThreshold;
@dynamic hasEncryptStrategy, encryptStrategy;
@dynamic hasFecsvrCtr, fecsvrCtr;
@dynamic hasFeckeyPara1, feckeyPara1;
@dynamic hasFeckeyPara2, feckeyPara2;
@dynamic hasQosStrategy, qosStrategy;
@dynamic hasEncryptKeyBuf, encryptKeyBuf;
@dynamic hasOppositeDeviceType, oppositeDeviceType;

typedef struct VoipMultiRelayData__storage_ {
  uint32_t _has_storage_[1];
  int32_t sendingType;
  int32_t voipNetQuality;
  int32_t linkDisconnectHbInterval;
  int32_t linkDisconnectHbCnt;
  uint32_t protocolEncryptLength;
  uint32_t oppositeClientVersion;
  int32_t arqstrategy;
  int32_t arqcacheLen;
  int32_t arqrttThreshold;
  int32_t arqusedRateThreshold;
  int32_t arqrespRateThreshold;
  int32_t encryptStrategy;
  int32_t fecsvrCtr;
  int32_t qosStrategy;
  uint32_t oppositeDeviceType;
  VoipRelayData *peerId;
  VoipRelayData *capInfo;
  VoipAddrSet *voipSvrAddr;
  VoipAddrSet *punchSvrAddr;
  SKBuiltinBuffer_t *clientHeadSigns;
  VoipAddrSet *tcpSvrAddr;
  SKBuiltinBuffer_t *feckeyPara1;
  SKBuiltinBuffer_t *feckeyPara2;
  SKBuiltinBuffer_t *encryptKeyBuf;
} VoipMultiRelayData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipMultiRelayData_FieldNumber_PeerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipMultiRelayData_FieldNumber_CapInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, capInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendingType",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_SendingType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, sendingType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voipSvrAddr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddrSet),
        .number = VoipMultiRelayData_FieldNumber_VoipSvrAddr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, voipSvrAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "punchSvrAddr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddrSet),
        .number = VoipMultiRelayData_FieldNumber_PunchSvrAddr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, punchSvrAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voipNetQuality",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_VoipNetQuality,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, voipNetQuality),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "linkDisconnectHbInterval",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_LinkDisconnectHbInterval,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, linkDisconnectHbInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "linkDisconnectHbCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_LinkDisconnectHbCnt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, linkDisconnectHbCnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "protocolEncryptLength",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_ProtocolEncryptLength,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, protocolEncryptLength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientHeadSigns",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipMultiRelayData_FieldNumber_ClientHeadSigns,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, clientHeadSigns),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "oppositeClientVersion",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_OppositeClientVersion,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, oppositeClientVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tcpSvrAddr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddrSet),
        .number = VoipMultiRelayData_FieldNumber_TcpSvrAddr,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, tcpSvrAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "arqstrategy",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_Arqstrategy,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, arqstrategy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "arqcacheLen",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_ArqcacheLen,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, arqcacheLen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "arqrttThreshold",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_ArqrttThreshold,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, arqrttThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "arqusedRateThreshold",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_ArqusedRateThreshold,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, arqusedRateThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "arqrespRateThreshold",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_ArqrespRateThreshold,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, arqrespRateThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "encryptStrategy",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_EncryptStrategy,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, encryptStrategy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fecsvrCtr",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_FecsvrCtr,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, fecsvrCtr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "feckeyPara1",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipMultiRelayData_FieldNumber_FeckeyPara1,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, feckeyPara1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "feckeyPara2",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipMultiRelayData_FieldNumber_FeckeyPara2,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, feckeyPara2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qosStrategy",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_QosStrategy,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, qosStrategy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "encryptKeyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipMultiRelayData_FieldNumber_EncryptKeyBuf,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, encryptKeyBuf),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "oppositeDeviceType",
        .dataTypeSpecific.className = NULL,
        .number = VoipMultiRelayData_FieldNumber_OppositeDeviceType,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(VoipMultiRelayData__storage_, oppositeDeviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipMultiRelayData class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipMultiRelayData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\030\001F\000\002G\000\003K\000\004K\000\005L\000\006N\000\007X\000\010S\000\tU\000\nO\000\013U\000\014J\000\rd\007"
        "\000\016d\007\000\017d\013\000\020d\020\000\021d\020\000\022O\000\023d\005\000\024d\007\000\025d\007\000\026K\000\027M\000\030R"
        "\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipStatReportData

@implementation VoipStatReportData

@dynamic hasStatReport, statReport;

typedef struct VoipStatReportData__storage_ {
  uint32_t _has_storage_[1];
  SKBuiltinString_t *statReport;
} VoipStatReportData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "statReport",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = VoipStatReportData_FieldNumber_StatReport,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipStatReportData__storage_, statReport),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipStatReportData class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipStatReportData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipNetQuality

@implementation VoipNetQuality

@dynamic hasType, type;
@dynamic hasBegin, begin;
@dynamic hasEnd, end;
@dynamic hasHitCnt, hitCnt;

typedef struct VoipNetQuality__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t begin;
  int32_t end;
  int32_t hitCnt;
} VoipNetQuality__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = VoipNetQuality_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipNetQuality__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "begin",
        .dataTypeSpecific.className = NULL,
        .number = VoipNetQuality_FieldNumber_Begin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipNetQuality__storage_, begin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = NULL,
        .number = VoipNetQuality_FieldNumber_End,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipNetQuality__storage_, end),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hitCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipNetQuality_FieldNumber_HitCnt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipNetQuality__storage_, hitCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipNetQuality class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipNetQuality__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001D\000\002E\000\003C\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipInviteRemindReq

@implementation VoipInviteRemindReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasListCount, listCount;
@dynamic toUserNameListArray, toUserNameListArray_Count;
@dynamic hasInviteType, inviteType;

typedef struct VoipInviteRemindReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t listCount;
  uint32_t inviteType;
  BaseRequest *baseRequest;
  NSMutableArray *toUserNameListArray;
} VoipInviteRemindReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipInviteRemindReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipInviteRemindReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteRemindReq_FieldNumber_ListCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipInviteRemindReq__storage_, listCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "toUserNameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = VoipInviteRemindReq_FieldNumber_ToUserNameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipInviteRemindReq__storage_, toUserNameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inviteType",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteRemindReq_FieldNumber_InviteType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipInviteRemindReq__storage_, inviteType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipInviteRemindReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipInviteRemindReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002I\000\003\000ToUserNameList\000\004J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipInviteRemindResp

@implementation VoipInviteRemindResp

@dynamic hasBaseResponse, baseResponse;

typedef struct VoipInviteRemindResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} VoipInviteRemindResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipInviteRemindResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipInviteRemindResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipInviteRemindResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipInviteRemindResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipInviteReq

@implementation VoipInviteReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFromUsername, fromUsername;
@dynamic hasInviteUserCount, inviteUserCount;
@dynamic toUsernameListArray, toUsernameListArray_Count;
@dynamic hasPeerId, peerId;
@dynamic hasCapInfo, capInfo;
@dynamic hasNetType, netType;
@dynamic hasCallType, callType;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasInviteType, inviteType;
@dynamic hasTimestamp64, timestamp64;
@dynamic hasHdvideo, hdvideo;
@dynamic hasInviteId, inviteId;

typedef struct VoipInviteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t inviteUserCount;
  int32_t netType;
  int32_t callType;
  int32_t roomId;
  uint32_t inviteType;
  int32_t hdvideo;
  uint32_t inviteId;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  NSMutableArray *toUsernameListArray;
  VoipRelayData *peerId;
  VoipRelayData *capInfo;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipInviteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipInviteReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_FromUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteUserCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_InviteUserCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, inviteUserCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "toUsernameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = VoipInviteReq_FieldNumber_ToUsernameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, toUsernameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipInviteReq_FieldNumber_PeerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipInviteReq_FieldNumber_CapInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, capInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_NetType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "callType",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_CallType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, callType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_RoomId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_RoomKey,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteType",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_InviteType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, inviteType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_Timestamp64,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hdvideo",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_Hdvideo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, hdvideo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inviteId",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteReq_FieldNumber_InviteId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(VoipInviteReq__storage_, inviteId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipInviteReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipInviteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\001K\000\002L\000\003O\000\004\000ToUsernameList\000\006F\000\007G\000\010G\000\tH\000\n"
        "F\000\013G\000\014J\000\rK\000\016c\004\000\017H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipInviteResp

@implementation VoipInviteResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasAddrCount, addrCount;
@dynamic addrListArray, addrListArray_Count;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;
@dynamic hasRelayData, relayData;
@dynamic hasNetQualityCnt, netQualityCnt;
@dynamic netQualityListArray, netQualityListArray_Count;
@dynamic hasAudioTsdfBeyond3G, audioTsdfBeyond3G;
@dynamic hasAudioTsdfEdge, audioTsdfEdge;
@dynamic hasPassthroughQosAlgorithm, passthroughQosAlgorithm;
@dynamic hasFastPlayRepair, fastPlayRepair;
@dynamic hasVoipSyncInterval, voipSyncInterval;
@dynamic hasNewP2S, newP2S;
@dynamic hasAudioDtx, audioDtx;
@dynamic hasTcpCnt, tcpCnt;
@dynamic hasSwitchInterval, switchInterval;
@dynamic hasHw264SvrCfg, hw264SvrCfg;
@dynamic hasAudioEnableRmioAndS3A, audioEnableRmioAndS3A;
@dynamic hasAudioEnableSpkec, audioEnableSpkec;

typedef struct VoipInviteResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t addrCount;
  int32_t roomMemberId;
  int32_t netQualityCnt;
  int32_t audioTsdfBeyond3G;
  int32_t audioTsdfEdge;
  int32_t passthroughQosAlgorithm;
  int32_t fastPlayRepair;
  int32_t voipSyncInterval;
  int32_t newP2S;
  int32_t audioDtx;
  uint32_t tcpCnt;
  uint32_t switchInterval;
  int32_t hw264SvrCfg;
  int32_t audioEnableRmioAndS3A;
  int32_t audioEnableSpkec;
  BaseResponse *baseResponse;
  NSMutableArray *addrListArray;
  VoipMultiRelayData *relayData;
  NSMutableArray *netQualityListArray;
  int64_t roomKey;
} VoipInviteResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipInviteResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "addrCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_AddrCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, addrCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "addrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = VoipInviteResp_FieldNumber_AddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, addrListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_RoomKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_RoomMemberId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relayData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipMultiRelayData),
        .number = VoipInviteResp_FieldNumber_RelayData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, relayData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "netQualityCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_NetQualityCnt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, netQualityCnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "netQualityListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipNetQuality),
        .number = VoipInviteResp_FieldNumber_NetQualityListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, netQualityListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioTsdfBeyond3G",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_AudioTsdfBeyond3G,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, audioTsdfBeyond3G),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioTsdfEdge",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_AudioTsdfEdge,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, audioTsdfEdge),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "passthroughQosAlgorithm",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_PassthroughQosAlgorithm,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, passthroughQosAlgorithm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fastPlayRepair",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_FastPlayRepair,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, fastPlayRepair),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "voipSyncInterval",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_VoipSyncInterval,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, voipSyncInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newP2S",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_NewP2S,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, newP2S),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioDtx",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_AudioDtx,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, audioDtx),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tcpCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_TcpCnt,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, tcpCnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "switchInterval",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_SwitchInterval,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, switchInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hw264SvrCfg",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_Hw264SvrCfg,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, hw264SvrCfg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioEnableRmioAndS3A",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_AudioEnableRmioAndS3A,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, audioEnableRmioAndS3A),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioEnableSpkec",
        .dataTypeSpecific.className = NULL,
        .number = VoipInviteResp_FieldNumber_AudioEnableSpkec,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(VoipInviteResp__storage_, audioEnableSpkec),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipInviteResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipInviteResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\025\001L\000\002F\000\003I\000\004\000AddrList\000\005G\000\006L\000\007I\000\010M\000\t\000NetQu"
        "alityList\000\nQ\000\013M\000\014W\000\rN\000\016P\000\017F\000\020Fb\000\021F\000\022N\000\023K"
        "\000\024U\000\025P\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipCancelInviteReq

@implementation VoipCancelInviteReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFromUsername, fromUsername;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasToUserName, toUserName;
@dynamic hasReportData, reportData;
@dynamic hasInviteType, inviteType;
@dynamic hasTimestamp64, timestamp64;
@dynamic hasInviteId, inviteId;

typedef struct VoipCancelInviteReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t inviteType;
  uint32_t inviteId;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  NSString *toUserName;
  VoipStatReportData *reportData;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipCancelInviteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipCancelInviteReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_FromUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_RoomKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_ToUserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipCancelInviteReq_FieldNumber_ReportData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, reportData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inviteType",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_InviteType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, inviteType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_Timestamp64,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "inviteId",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteReq_FieldNumber_InviteId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipCancelInviteReq__storage_, inviteId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipCancelInviteReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipCancelInviteReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001K\000\002L\000\003F\000\004G\000\006J\000\010J\000\tJ\000\nK\000\013H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipCancelInviteResp

@implementation VoipCancelInviteResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;

typedef struct VoipCancelInviteResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  BaseResponse *baseResponse;
  int64_t roomKey;
} VoipCancelInviteResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipCancelInviteResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipCancelInviteResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipCancelInviteResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipCancelInviteResp_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipCancelInviteResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipCancelInviteResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipCancelInviteResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002F\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipAnswerReq

@implementation VoipAnswerReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFromUsername, fromUsername;
@dynamic hasRoomId, roomId;
@dynamic hasAnswer, answer;
@dynamic hasPeerId, peerId;
@dynamic hasCapInfo, capInfo;
@dynamic hasRoomKey, roomKey;
@dynamic hasNetType, netType;
@dynamic hasTimestamp64, timestamp64;
@dynamic hasOnlyAudio, onlyAudio;

typedef struct VoipAnswerReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t answer;
  int32_t netType;
  int32_t onlyAudio;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  VoipRelayData *peerId;
  VoipRelayData *capInfo;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipAnswerReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipAnswerReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_FromUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "answer",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_Answer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, answer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipAnswerReq_FieldNumber_PeerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipAnswerReq_FieldNumber_CapInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, capInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_RoomKey,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_NetType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_Timestamp64,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "onlyAudio",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerReq_FieldNumber_OnlyAudio,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipAnswerReq__storage_, onlyAudio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipAnswerReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipAnswerReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001K\000\002L\000\003F\000\004F\000\005F\000\006G\000\007G\000\010G\000\tK\000\nI\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipAnswerResp

@implementation VoipAnswerResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasAddrCount, addrCount;
@dynamic addrListArray, addrListArray_Count;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;
@dynamic hasRelayData, relayData;
@dynamic hasNetQualityCnt, netQualityCnt;
@dynamic netQualityListArray, netQualityListArray_Count;
@dynamic hasAudioTsdfBeyond3G, audioTsdfBeyond3G;
@dynamic hasAudioTsdfEdge, audioTsdfEdge;
@dynamic hasPassthroughQosAlgorithm, passthroughQosAlgorithm;
@dynamic hasFastPlayRepair, fastPlayRepair;
@dynamic hasNewP2S, newP2S;
@dynamic hasAudioDtx, audioDtx;
@dynamic hasTcpCnt, tcpCnt;
@dynamic hasSwitchInterval, switchInterval;
@dynamic hasHw264SvrCfg, hw264SvrCfg;
@dynamic hasAudioEnableRmioAndS3A, audioEnableRmioAndS3A;
@dynamic hasAudioEnableSpkec, audioEnableSpkec;

typedef struct VoipAnswerResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t addrCount;
  int32_t roomId;
  int32_t roomMemberId;
  int32_t netQualityCnt;
  int32_t audioTsdfBeyond3G;
  int32_t audioTsdfEdge;
  int32_t passthroughQosAlgorithm;
  int32_t fastPlayRepair;
  int32_t newP2S;
  int32_t audioDtx;
  uint32_t tcpCnt;
  uint32_t switchInterval;
  int32_t hw264SvrCfg;
  int32_t audioEnableRmioAndS3A;
  int32_t audioEnableSpkec;
  BaseResponse *baseResponse;
  NSMutableArray *addrListArray;
  VoipMultiRelayData *relayData;
  NSMutableArray *netQualityListArray;
  int64_t roomKey;
} VoipAnswerResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipAnswerResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addrCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_AddrCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, addrCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "addrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = VoipAnswerResp_FieldNumber_AddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, addrListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_RoomKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_RoomMemberId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relayData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipMultiRelayData),
        .number = VoipAnswerResp_FieldNumber_RelayData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, relayData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "netQualityCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_NetQualityCnt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, netQualityCnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "netQualityListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipNetQuality),
        .number = VoipAnswerResp_FieldNumber_NetQualityListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, netQualityListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioTsdfBeyond3G",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_AudioTsdfBeyond3G,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, audioTsdfBeyond3G),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioTsdfEdge",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_AudioTsdfEdge,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, audioTsdfEdge),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "passthroughQosAlgorithm",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_PassthroughQosAlgorithm,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, passthroughQosAlgorithm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fastPlayRepair",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_FastPlayRepair,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, fastPlayRepair),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "newP2S",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_NewP2S,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, newP2S),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioDtx",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_AudioDtx,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, audioDtx),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tcpCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_TcpCnt,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, tcpCnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "switchInterval",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_SwitchInterval,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, switchInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hw264SvrCfg",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_Hw264SvrCfg,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, hw264SvrCfg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioEnableRmioAndS3A",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_AudioEnableRmioAndS3A,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, audioEnableRmioAndS3A),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioEnableSpkec",
        .dataTypeSpecific.className = NULL,
        .number = VoipAnswerResp_FieldNumber_AudioEnableSpkec,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(VoipAnswerResp__storage_, audioEnableSpkec),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipAnswerResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipAnswerResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\001L\000\002I\000\003\000AddrList\000\004F\000\005G\000\006KA\000\007I\000\010M\000\t\000NetQ"
        "ualityList\000\nQ\000\013M\000\014W\000\rN\000\016F\000\017Fb\000\020F\000\021N\000\022K\000\023"
        "U\000\024P\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipShutDownReq

@implementation VoipShutDownReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFromUsername, fromUsername;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasReportData, reportData;
@dynamic hasTimestamp64, timestamp64;
@dynamic hasDuration, duration;

typedef struct VoipShutDownReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t duration;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  VoipStatReportData *reportData;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipShutDownReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipShutDownReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownReq_FieldNumber_FromUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownReq_FieldNumber_RoomKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "reportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipShutDownReq_FieldNumber_ReportData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, reportData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownReq_FieldNumber_Timestamp64,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownReq_FieldNumber_Duration,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipShutDownReq__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipShutDownReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipShutDownReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002L\000\003F\000\004G\000\005J\000\006K\000\007H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipShutDownResp

@implementation VoipShutDownResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;

typedef struct VoipShutDownResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  BaseResponse *baseResponse;
  int64_t roomKey;
} VoipShutDownResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipShutDownResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipShutDownResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipShutDownResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipShutDownResp_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipShutDownResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipShutDownResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipShutDownResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002F\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipCmdItem

@implementation VoipCmdItem

@dynamic hasCmdId, cmdId;
@dynamic hasCmdBuf, cmdBuf;
@dynamic hasFromUserName, fromUserName;

typedef struct VoipCmdItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmdId;
  SKBuiltinBuffer_t *cmdBuf;
  NSString *fromUserName;
} VoipCmdItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmdId",
        .dataTypeSpecific.className = NULL,
        .number = VoipCmdItem_FieldNumber_CmdId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipCmdItem__storage_, cmdId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cmdBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipCmdItem_FieldNumber_CmdBuf,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipCmdItem__storage_, cmdBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = NULL,
        .number = VoipCmdItem_FieldNumber_FromUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipCmdItem__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipCmdItem class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipCmdItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001E\000\002F\000\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipCmdList

@implementation VoipCmdList

@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct VoipCmdList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  NSMutableArray *listArray;
} VoipCmdList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = VoipCmdList_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipCmdList__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipCmdItem),
        .number = VoipCmdList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipCmdList__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipCmdList class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipCmdList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipSyncReq

@implementation VoipSyncReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFromUsername, fromUsername;
@dynamic hasRoomId, roomId;
@dynamic hasKeyBuf, keyBuf;
@dynamic hasOpLog, opLog;
@dynamic hasRoomKey, roomKey;
@dynamic hasSelector, selector;
@dynamic hasTimestamp64, timestamp64;

typedef struct VoipSyncReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t selector;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  SKBuiltinBuffer_t *keyBuf;
  VoipCmdList *opLog;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipSyncReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipSyncReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncReq_FieldNumber_FromUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncReq_FieldNumber_RoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipSyncReq_FieldNumber_KeyBuf,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opLog",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipCmdList),
        .number = VoipSyncReq_FieldNumber_OpLog,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, opLog),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncReq_FieldNumber_RoomKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncReq_FieldNumber_Selector,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, selector),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncReq_FieldNumber_Timestamp64,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipSyncReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipSyncReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipSyncReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002L\000\003F\000\004F\000\005E\000\006G\000\007H\000\010K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipHeartBeatReq

@implementation VoipHeartBeatReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasTimestamp, timestamp;
@dynamic hasTimestamp64, timestamp64;
@dynamic hasConnectionType, connectionType;

typedef struct VoipHeartBeatReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t timestamp;
  int32_t connectionType;
  BaseRequest *baseRequest;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipHeartBeatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipHeartBeatReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipHeartBeatReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipHeartBeatReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatReq_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipHeartBeatReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatReq_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipHeartBeatReq__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatReq_FieldNumber_Timestamp64,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipHeartBeatReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "connectionType",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatReq_FieldNumber_ConnectionType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipHeartBeatReq__storage_, connectionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipHeartBeatReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipHeartBeatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002F\000\003G\000\004I\000\005K\000\006N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipHeartBeatResp

@implementation VoipHeartBeatResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasTimestamp, timestamp;

typedef struct VoipHeartBeatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t timestamp;
  BaseResponse *baseResponse;
  int64_t roomKey;
} VoipHeartBeatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipHeartBeatResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipHeartBeatResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipHeartBeatResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatResp_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipHeartBeatResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = VoipHeartBeatResp_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipHeartBeatResp__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipHeartBeatResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipHeartBeatResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002F\000\003G\000\004I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipSyncResp

@implementation VoipSyncResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasKeyBuf, keyBuf;
@dynamic hasCmdList, cmdList;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasRoomKey, roomKey;

typedef struct VoipSyncResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t continueFlag;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *keyBuf;
  VoipCmdList *cmdList;
  int64_t roomKey;
} VoipSyncResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipSyncResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipSyncResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipSyncResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipSyncResp_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipSyncResp__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cmdList",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipCmdList),
        .number = VoipSyncResp_FieldNumber_CmdList,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipSyncResp__storage_, cmdList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncResp_FieldNumber_ContinueFlag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipSyncResp__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipSyncResp_FieldNumber_RoomKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipSyncResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipSyncResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipSyncResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\003F\000\004F\000\005G\000\007L\000\010G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipStatusItem

@implementation VoipStatusItem

@dynamic hasUsername, username;
@dynamic hasStatus, status;

typedef struct VoipStatusItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *username;
} VoipStatusItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = VoipStatusItem_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipStatusItem__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = VoipStatusItem_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipStatusItem__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipStatusItem class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipStatusItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001H\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipGetRoomInfoReq

@implementation VoipGetRoomInfoReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasCallerUserName, callerUserName;
@dynamic hasType, type;
@dynamic hasTimestamp64, timestamp64;

typedef struct VoipGetRoomInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t type;
  BaseRequest *baseRequest;
  NSString *callerUserName;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipGetRoomInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipGetRoomInfoReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoReq_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "callerUserName",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoReq_FieldNumber_CallerUserName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoReq__storage_, callerUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoReq_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoReq_FieldNumber_Timestamp64,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipGetRoomInfoReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipGetRoomInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002F\000\003G\000\004N\000\005D\000\006K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipGetRoomInfoResp

@implementation VoipGetRoomInfoResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasCreateTime, createTime;
@dynamic hasMemberCount, memberCount;
@dynamic memberStatusArray, memberStatusArray_Count;
@dynamic hasCallerUserName, callerUserName;
@dynamic hasInviteType, inviteType;

typedef struct VoipGetRoomInfoResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t createTime;
  int32_t memberCount;
  uint32_t inviteType;
  BaseResponse *baseResponse;
  NSMutableArray *memberStatusArray;
  NSString *callerUserName;
  int64_t roomKey;
} VoipGetRoomInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipGetRoomInfoResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoResp_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoResp_FieldNumber_CreateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoResp_FieldNumber_MemberCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "memberStatusArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatusItem),
        .number = VoipGetRoomInfoResp_FieldNumber_MemberStatusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, memberStatusArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callerUserName",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoResp_FieldNumber_CallerUserName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, callerUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteType",
        .dataTypeSpecific.className = NULL,
        .number = VoipGetRoomInfoResp_FieldNumber_InviteType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipGetRoomInfoResp__storage_, inviteType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipGetRoomInfoResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipGetRoomInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002F\000\003G\000\004J\000\006K\000\007\000MemberStatus\000\010N\000\tJ\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipAckReq

@implementation VoipAckReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasFromUsername, fromUsername;
@dynamic hasPreConnect, preConnect;
@dynamic hasPeerId, peerId;
@dynamic hasCapInfo, capInfo;
@dynamic hasNetType, netType;
@dynamic hasCallerName, callerName;
@dynamic hasAckStatus, ackStatus;
@dynamic hasTimestamp64, timestamp64;

typedef struct VoipAckReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t preConnect;
  int32_t netType;
  int32_t ackStatus;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  VoipRelayData *peerId;
  VoipRelayData *capInfo;
  NSString *callerName;
  int64_t roomKey;
  uint64_t timestamp64;
} VoipAckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipAckReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_FromUsername,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preConnect",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_PreConnect,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, preConnect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipAckReq_FieldNumber_PeerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipRelayData),
        .number = VoipAckReq_FieldNumber_CapInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, capInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_NetType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "callerName",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_CallerName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, callerName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ackStatus",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_AckStatus,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, ackStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckReq_FieldNumber_Timestamp64,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VoipAckReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipAckReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipAckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001K\000\002F\000\003G\000\004L\000\005J\000\006F\000\007G\000\010G\000\tJ\000\nI\000\013K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipAckResp

@implementation VoipAckResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;
@dynamic hasRelayData, relayData;
@dynamic hasPreConnect, preConnect;
@dynamic hasTcpCnt, tcpCnt;
@dynamic hasAudioEnableRmioAndS3A, audioEnableRmioAndS3A;

typedef struct VoipAckResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t roomMemberId;
  int32_t preConnect;
  uint32_t tcpCnt;
  int32_t audioEnableRmioAndS3A;
  BaseResponse *baseResponse;
  VoipMultiRelayData *relayData;
  int64_t roomKey;
} VoipAckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipAckResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckResp_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckResp_FieldNumber_RoomMemberId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relayData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipMultiRelayData),
        .number = VoipAckResp_FieldNumber_RelayData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, relayData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "preConnect",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckResp_FieldNumber_PreConnect,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, preConnect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tcpCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckResp_FieldNumber_TcpCnt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, tcpCnt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "audioEnableRmioAndS3A",
        .dataTypeSpecific.className = NULL,
        .number = VoipAckResp_FieldNumber_AudioEnableRmioAndS3A,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipAckResp__storage_, audioEnableRmioAndS3A),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipAckResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipAckResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002F\000\003G\000\004KA\000\005I\000\006J\000\007F\000\010U\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipStatReportReq

@implementation VoipStatReportReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasReportData, reportData;
@dynamic hasChannelReportData, channelReportData;
@dynamic hasDialReportData, dialReportData;
@dynamic hasEngineReportData, engineReportData;
@dynamic hasTimestamp64, timestamp64;
@dynamic hasEngineExtReportData, engineExtReportData;

typedef struct VoipStatReportReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  VoipStatReportData *reportData;
  VoipStatReportData *channelReportData;
  VoipStatReportData *dialReportData;
  VoipStatReportData *engineReportData;
  VoipStatReportData *engineExtReportData;
  uint64_t timestamp64;
} VoipStatReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipStatReportReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipStatReportReq_FieldNumber_ReportData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, reportData),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelReportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipStatReportReq_FieldNumber_ChannelReportData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, channelReportData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dialReportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipStatReportReq_FieldNumber_DialReportData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, dialReportData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "engineReportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipStatReportReq_FieldNumber_EngineReportData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, engineReportData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp64",
        .dataTypeSpecific.className = NULL,
        .number = VoipStatReportReq_FieldNumber_Timestamp64,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, timestamp64),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "engineExtReportData",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipStatReportData),
        .number = VoipStatReportReq_FieldNumber_EngineExtReportData,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipStatReportReq__storage_, engineExtReportData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipStatReportReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipStatReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002J\000\003Q\000\004N\000\005P\000\006K\000\007S\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipStatReportResp

@implementation VoipStatReportResp

@dynamic hasBaseResponse, baseResponse;

typedef struct VoipStatReportResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} VoipStatReportResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipStatReportResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipStatReportResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipStatReportResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipStatReportResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipCompleteStatus

@implementation VoipCompleteStatus

@dynamic hasCmdId, cmdId;
@dynamic hasUin, uin;
@dynamic hasKey, key;
@dynamic hasBuffer, buffer;

typedef struct VoipCompleteStatus__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmdId;
  uint32_t uin;
  uint32_t key;
  SKBuiltinBuffer_t *buffer;
} VoipCompleteStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmdId",
        .dataTypeSpecific.className = NULL,
        .number = VoipCompleteStatus_FieldNumber_CmdId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipCompleteStatus__storage_, cmdId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uin",
        .dataTypeSpecific.className = NULL,
        .number = VoipCompleteStatus_FieldNumber_Uin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipCompleteStatus__storage_, uin),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = VoipCompleteStatus_FieldNumber_Key,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipCompleteStatus__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipCompleteStatus_FieldNumber_Buffer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipCompleteStatus__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipCompleteStatus class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipCompleteStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001E\000\002C\000\003C\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipCompleteStatusList

@implementation VoipCompleteStatusList

@dynamic hasCount, count;
@dynamic completeStatusArray, completeStatusArray_Count;
@dynamic hasSeq, seq;

typedef struct VoipCompleteStatusList__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  uint32_t seq;
  NSMutableArray *completeStatusArray;
} VoipCompleteStatusList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = VoipCompleteStatusList_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipCompleteStatusList__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "completeStatusArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipCompleteStatus),
        .number = VoipCompleteStatusList_FieldNumber_CompleteStatusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipCompleteStatusList__storage_, completeStatusArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seq",
        .dataTypeSpecific.className = NULL,
        .number = VoipCompleteStatusList_FieldNumber_Seq,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipCompleteStatusList__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipCompleteStatusList class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipCompleteStatusList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001E\000\002\000CompleteStatus\000\003C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipRedirectReq

@implementation VoipRedirectReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;

typedef struct VoipRedirectReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t roomMemberId;
  BaseRequest *baseRequest;
  int64_t roomKey;
} VoipRedirectReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipRedirectReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipRedirectReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipRedirectReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectReq_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipRedirectReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectReq_FieldNumber_RoomMemberId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipRedirectReq__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipRedirectReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipRedirectReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003G\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipRedirectResp

@implementation VoipRedirectResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRelayAddrCount, relayAddrCount;
@dynamic relayAddrListArray, relayAddrListArray_Count;
@dynamic hasPunchAddrCount, punchAddrCount;
@dynamic punchAddrListArray, punchAddrListArray_Count;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;
@dynamic hasTcpAddrCount, tcpAddrCount;
@dynamic tcpAddrListArray, tcpAddrListArray_Count;

typedef struct VoipRedirectResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t relayAddrCount;
  int32_t punchAddrCount;
  int32_t roomMemberId;
  int32_t tcpAddrCount;
  BaseResponse *baseResponse;
  NSMutableArray *relayAddrListArray;
  NSMutableArray *punchAddrListArray;
  NSMutableArray *tcpAddrListArray;
  int64_t roomKey;
} VoipRedirectResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipRedirectResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectResp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relayAddrCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectResp_FieldNumber_RelayAddrCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, relayAddrCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "relayAddrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = VoipRedirectResp_FieldNumber_RelayAddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, relayAddrListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "punchAddrCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectResp_FieldNumber_PunchAddrCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, punchAddrCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "punchAddrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = VoipRedirectResp_FieldNumber_PunchAddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, punchAddrListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectResp_FieldNumber_RoomKey,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectResp_FieldNumber_RoomMemberId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tcpAddrCount",
        .dataTypeSpecific.className = NULL,
        .number = VoipRedirectResp_FieldNumber_TcpAddrCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, tcpAddrCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tcpAddrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = VoipRedirectResp_FieldNumber_TcpAddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipRedirectResp__storage_, tcpAddrListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipRedirectResp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipRedirectResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001L\000\002F\000\003N\000\004\000RelayAddrList\000\005N\000\006\000PunchAddr"
        "List\000\007G\000\010L\000\tL\000\n\000TcpAddrList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipDoubleLinkSwitchReq

@implementation VoipDoubleLinkSwitchReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;
@dynamic hasCurLinkType, curLinkType;
@dynamic hasIsRelayConnReady, isRelayConnReady;
@dynamic hasIsDirectConnReady, isDirectConnReady;
@dynamic hasCurStrategy, curStrategy;
@dynamic hasBufferVersion, bufferVersion;
@dynamic hasBuffer, buffer;

typedef struct VoipDoubleLinkSwitchReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t roomMemberId;
  int32_t curLinkType;
  int32_t isRelayConnReady;
  int32_t isDirectConnReady;
  int32_t curStrategy;
  int32_t bufferVersion;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *buffer;
  int64_t roomKey;
} VoipDoubleLinkSwitchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipDoubleLinkSwitchReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_RoomMemberId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "curLinkType",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_CurLinkType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, curLinkType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isRelayConnReady",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_IsRelayConnReady,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, isRelayConnReady),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isDirectConnReady",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_IsDirectConnReady,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, isDirectConnReady),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "curStrategy",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_CurStrategy,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, curStrategy),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bufferVersion",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchReq_FieldNumber_BufferVersion,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, bufferVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = VoipDoubleLinkSwitchReq_FieldNumber_Buffer,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchReq__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipDoubleLinkSwitchReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipDoubleLinkSwitchReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001K\000\002F\000\003G\000\004L\000\005K\000\006P\000\007Q\000\010K\000\tM\000\nF\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipDoubleLinkSwitchRsp

@implementation VoipDoubleLinkSwitchRsp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomId, roomId;
@dynamic hasRoomKey, roomKey;
@dynamic hasRoomMemberId, roomMemberId;
@dynamic hasReportFlag, reportFlag;
@dynamic hasSwitchToLinkType, switchToLinkType;

typedef struct VoipDoubleLinkSwitchRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  int32_t roomMemberId;
  int32_t reportFlag;
  int32_t switchToLinkType;
  BaseResponse *baseResponse;
  int64_t roomKey;
} VoipDoubleLinkSwitchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipDoubleLinkSwitchRsp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchRsp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchRsp_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchRsp__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchRsp_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchRsp__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "roomMemberId",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchRsp_FieldNumber_RoomMemberId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchRsp__storage_, roomMemberId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reportFlag",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchRsp_FieldNumber_ReportFlag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchRsp__storage_, reportFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "switchToLinkType",
        .dataTypeSpecific.className = NULL,
        .number = VoipDoubleLinkSwitchRsp_FieldNumber_SwitchToLinkType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipDoubleLinkSwitchRsp__storage_, switchToLinkType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipDoubleLinkSwitchRsp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipDoubleLinkSwitchRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002F\000\003G\000\004L\000\005J\000\006P\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipSpeedTestReq

@implementation VoipSpeedTestReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomId, roomId;
@dynamic hasCallType, callType;
@dynamic hasNetType, netType;
@dynamic hasIsConnecting, isConnecting;
@dynamic hasIsConnected, isConnected;
@dynamic hasC2Clossrate, c2Clossrate;
@dynamic hasC2CrttCnt, c2CrttCnt;
@dynamic c2CrttArray, c2CrttArray_Count;
@dynamic hasC2SdownLossRate, c2SdownLossRate;
@dynamic hasC2SrttCnt, c2SrttCnt;
@dynamic c2SrttArray, c2SrttArray_Count;
@dynamic hasSendPkts, sendPkts;
@dynamic hasRcvPkts, rcvPkts;

typedef struct VoipSpeedTestReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t roomId;
  uint32_t callType;
  uint32_t netType;
  uint32_t isConnecting;
  uint32_t isConnected;
  uint32_t c2Clossrate;
  uint32_t c2CrttCnt;
  uint32_t c2SdownLossRate;
  uint32_t c2SrttCnt;
  uint32_t sendPkts;
  uint32_t rcvPkts;
  BaseRequest *baseRequest;
  GPBUInt32Array *c2CrttArray;
  GPBUInt32Array *c2SrttArray;
} VoipSpeedTestReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipSpeedTestReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "callType",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_CallType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, callType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_NetType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isConnecting",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_IsConnecting,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, isConnecting),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isConnected",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_IsConnected,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, isConnected),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "c2Clossrate",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_C2Clossrate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, c2Clossrate),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "c2CrttCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_C2CrttCnt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, c2CrttCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "c2CrttArray",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_C2CrttArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, c2CrttArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "c2SdownLossRate",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_C2SdownLossRate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, c2SdownLossRate),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "c2SrttCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_C2SrttCnt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, c2SrttCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "c2SrttArray",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_C2SrttArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, c2SrttArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendPkts",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_SendPkts,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, sendPkts),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rcvPkts",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestReq_FieldNumber_RcvPkts,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(VoipSpeedTestReq__storage_, rcvPkts),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipSpeedTestReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipSpeedTestReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\001K\000\002F\000\003H\000\004G\000\005L\000\006K\000\007CH\000\010CF\000\t\000C2CRtt\000\nCL\000"
        "\013CF\000\014\000C2SRtt\000\rH\000\016G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpeedTestSvr

@implementation SpeedTestSvr

@dynamic hasAddr, addr;
@dynamic hasTestCnt, testCnt;
@dynamic hasTestGap, testGap;
@dynamic hasTimeout, timeout;
@dynamic hasPktSize, pktSize;

typedef struct SpeedTestSvr__storage_ {
  uint32_t _has_storage_[1];
  uint32_t testCnt;
  uint32_t testGap;
  uint32_t timeout;
  uint32_t pktSize;
  VoipAddr *addr;
} SpeedTestSvr__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = SpeedTestSvr_FieldNumber_Addr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpeedTestSvr__storage_, addr),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "testCnt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedTestSvr_FieldNumber_TestCnt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpeedTestSvr__storage_, testCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "testGap",
        .dataTypeSpecific.className = NULL,
        .number = SpeedTestSvr_FieldNumber_TestGap,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpeedTestSvr__storage_, testGap),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.className = NULL,
        .number = SpeedTestSvr_FieldNumber_Timeout,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SpeedTestSvr__storage_, timeout),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pktSize",
        .dataTypeSpecific.className = NULL,
        .number = SpeedTestSvr_FieldNumber_PktSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SpeedTestSvr__storage_, pktSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeedTestSvr class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpeedTestSvr__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001D\000\002G\000\003G\000\004G\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipSpeedTestRsp

@implementation VoipSpeedTestRsp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasNeedTest, needTest;
@dynamic hasTestId, testId;
@dynamic hasSvrListCnt, svrListCnt;
@dynamic svrListArray, svrListArray_Count;

typedef struct VoipSpeedTestRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t needTest;
  uint32_t svrListCnt;
  BaseResponse *baseResponse;
  NSMutableArray *svrListArray;
  uint64_t testId;
} VoipSpeedTestRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipSpeedTestRsp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipSpeedTestRsp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "needTest",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestRsp_FieldNumber_NeedTest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipSpeedTestRsp__storage_, needTest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "testId",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestRsp_FieldNumber_TestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipSpeedTestRsp__storage_, testId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "svrListCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedTestRsp_FieldNumber_SvrListCnt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipSpeedTestRsp__storage_, svrListCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "svrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SpeedTestSvr),
        .number = VoipSpeedTestRsp_FieldNumber_SvrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipSpeedTestRsp__storage_, svrListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipSpeedTestRsp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipSpeedTestRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002H\000\003F\000\004J\000\005\000SvrList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpeedResult

@implementation SpeedResult

@dynamic hasClientIp, clientIp;
@dynamic hasTestPktSize, testPktSize;
@dynamic hasTestCnt, testCnt;
@dynamic hasAddr, addr;
@dynamic hasAvgRtt, avgRtt;
@dynamic hasMinRtt, minRtt;
@dynamic hasMaxRtt, maxRtt;
@dynamic hasRttCnt, rttCnt;
@dynamic rttArray, rttArray_Count;
@dynamic hasDownSeqCnt, downSeqCnt;
@dynamic downSeqArray, downSeqArray_Count;
@dynamic hasUpSeqCnt, upSeqCnt;
@dynamic upSeqArray, upSeqArray_Count;

typedef struct SpeedResult__storage_ {
  uint32_t _has_storage_[1];
  uint32_t clientIp;
  uint32_t testPktSize;
  uint32_t testCnt;
  uint32_t avgRtt;
  uint32_t minRtt;
  uint32_t maxRtt;
  uint32_t rttCnt;
  uint32_t downSeqCnt;
  uint32_t upSeqCnt;
  VoipAddr *addr;
  GPBUInt32Array *rttArray;
  GPBUInt32Array *downSeqArray;
  GPBUInt32Array *upSeqArray;
} SpeedResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientIp",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_ClientIp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, clientIp),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "testPktSize",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_TestPktSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, testPktSize),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "testCnt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_TestCnt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, testCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "addr",
        .dataTypeSpecific.className = GPBStringifySymbol(VoipAddr),
        .number = SpeedResult_FieldNumber_Addr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, addr),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "avgRtt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_AvgRtt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, avgRtt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minRtt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_MinRtt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, minRtt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "maxRtt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_MaxRtt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, maxRtt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rttCnt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_RttCnt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, rttCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rttArray",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_RttArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, rttArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "downSeqCnt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_DownSeqCnt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, downSeqCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "downSeqArray",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_DownSeqArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, downSeqArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "upSeqCnt",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_UpSeqCnt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, upSeqCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "upSeqArray",
        .dataTypeSpecific.className = NULL,
        .number = SpeedResult_FieldNumber_UpSeqArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SpeedResult__storage_, upSeqArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeedResult class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpeedResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001H\000\002K\000\003G\000\004D\000\005F\000\006F\000\007F\000\010F\000\t\000Rtt\000\nJ\000\013\000Down"
        "Seq\000\014H\000\r\000UpSeq\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipSpeedResultReq

@implementation VoipSpeedResultReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasTestId, testId;
@dynamic hasRoomKey, roomKey;
@dynamic hasNetType, netType;
@dynamic hasNetName, netName;
@dynamic hasWifiName, wifiName;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasRoomId, roomId;
@dynamic hasResultCnt, resultCnt;
@dynamic resultArray, resultArray_Count;

typedef struct VoipSpeedResultReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t netType;
  uint32_t roomId;
  uint32_t resultCnt;
  BaseRequest *baseRequest;
  SKBuiltinString_t *netName;
  SKBuiltinString_t *wifiName;
  NSMutableArray *resultArray;
  uint64_t testId;
  uint64_t roomKey;
  double longitude;
  double latitude;
} VoipSpeedResultReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = VoipSpeedResultReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "testId",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_TestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, testId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "roomKey",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_RoomKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, roomKey),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_NetType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "netName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = VoipSpeedResultReq_FieldNumber_NetName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, netName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiName",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = VoipSpeedResultReq_FieldNumber_WifiName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, wifiName),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_Longitude,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_Latitude,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_RoomId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCnt",
        .dataTypeSpecific.className = NULL,
        .number = VoipSpeedResultReq_FieldNumber_ResultCnt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, resultCnt),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SpeedResult),
        .number = VoipSpeedResultReq_FieldNumber_ResultArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoipSpeedResultReq__storage_, resultArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipSpeedResultReq class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipSpeedResultReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001K\000\002F\000\003G\000\004G\000\005G\000\006H\000\007I\000\010H\000\tF\000\nI\000\013\000Result\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipSpeedResultRsp

@implementation VoipSpeedResultRsp

@dynamic hasBaseResponse, baseResponse;

typedef struct VoipSpeedResultRsp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} VoipSpeedResultRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = VoipSpeedResultRsp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipSpeedResultRsp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipSpeedResultRsp class]
                                     rootClass:[MmvoipRoot class]
                                          file:MmvoipRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipSpeedResultRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
