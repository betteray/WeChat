// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmsns.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmsns.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmsnsRoot

@implementation MmsnsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmsnsRoot_FileDescriptor

static GPBFileDescriptor *MmsnsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - TwitterInfo

@implementation TwitterInfo

@dynamic hasOauthToken, oauthToken;
@dynamic hasOauthTokenSecret, oauthTokenSecret;

typedef struct TwitterInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *oauthToken;
  NSString *oauthTokenSecret;
} TwitterInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oauthToken",
        .dataTypeSpecific.className = NULL,
        .number = TwitterInfo_FieldNumber_OauthToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TwitterInfo__storage_, oauthToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oauthTokenSecret",
        .dataTypeSpecific.className = NULL,
        .number = TwitterInfo_FieldNumber_OauthTokenSecret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TwitterInfo__storage_, oauthTokenSecret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TwitterInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TwitterInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\205\000\002E\205\206\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsBufferUrl

@implementation SnsBufferUrl

@dynamic hasURL, URL;
@dynamic hasType, type;

typedef struct SnsBufferUrl__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *URL;
} SnsBufferUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = SnsBufferUrl_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsBufferUrl__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsBufferUrl_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsBufferUrl__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsBufferUrl class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsBufferUrl__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\001!!\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsUploadRequest

@implementation SnsUploadRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasType, type;
@dynamic hasStartPos, startPos;
@dynamic hasTotalLen, totalLen;
@dynamic hasBuffer, buffer;
@dynamic hasClientId, clientId;
@dynamic hasFilterStype, filterStype;
@dynamic hasSyncFlag, syncFlag;
@dynamic hasDescription_p, description_p;
@dynamic hasPhotoFrom, photoFrom;
@dynamic hasNetType, netType;
@dynamic hasTwitterInfo, twitterInfo;
@dynamic hasAppId, appId;
@dynamic hasExtFlag, extFlag;
@dynamic hasMd5, md5;

typedef struct SnsUploadRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t startPos;
  uint32_t totalLen;
  uint32_t filterStype;
  uint32_t syncFlag;
  int32_t photoFrom;
  int32_t netType;
  uint32_t extFlag;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *buffer;
  NSString *clientId;
  NSString *description_p;
  TwitterInfo *twitterInfo;
  NSString *appId;
  NSString *md5;
} SnsUploadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsUploadRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_StartPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_TotalLen,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsUploadRequest_FieldNumber_Buffer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_ClientId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "filterStype",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_FilterStype,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, filterStype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "syncFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_SyncFlag,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, syncFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_Description_p,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "photoFrom",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_PhotoFrom,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, photoFrom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_NetType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "twitterInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TwitterInfo),
        .number = SnsUploadRequest_FieldNumber_TwitterInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, twitterInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_AppId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_ExtFlag,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, extFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadRequest_FieldNumber_Md5,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SnsUploadRequest__storage_, md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsUploadRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsUploadRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\017\001K\000\002D\000\003H\000\004H\000\005F\000\006H\000\007K\000\010H\000\t\000Description\000\n"
        "I\000\013G\000\014K\000\rE\000\016G\000\017b\001\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsUploadResponse

@implementation SnsUploadResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasStartPos, startPos;
@dynamic hasTotalLen, totalLen;
@dynamic hasClientId, clientId;
@dynamic hasBufferURL, bufferURL;
@dynamic hasThumbURLCount, thumbURLCount;
@dynamic thumbUrlsArray, thumbUrlsArray_Count;
@dynamic hasId_p, id_p;
@dynamic hasType, type;

typedef struct SnsUploadResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t startPos;
  uint32_t totalLen;
  uint32_t thumbURLCount;
  uint32_t type;
  BaseResponse *baseResponse;
  NSString *clientId;
  SnsBufferUrl *bufferURL;
  NSMutableArray *thumbUrlsArray;
  uint64_t id_p;
} SnsUploadResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsUploadResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadResponse_FieldNumber_StartPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadResponse_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadResponse_FieldNumber_ClientId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bufferURL",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsBufferUrl),
        .number = SnsUploadResponse_FieldNumber_BufferURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, bufferURL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbURLCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadResponse_FieldNumber_ThumbURLCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, thumbURLCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbUrlsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsBufferUrl),
        .number = SnsUploadResponse_FieldNumber_ThumbUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, thumbUrlsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadResponse_FieldNumber_Id_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsUploadResponse_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsUploadResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsUploadResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsUploadResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001L\000\002H\000\003H\000\004H\000\005G!!\000\006F!&\000\007\000ThumbUrls\000\010\000Id\000"
        "\tD\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsDownloadRequest

@implementation SnsDownloadRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasStartPos, startPos;
@dynamic hasTotalLen, totalLen;
@dynamic hasBufferId, bufferId;
@dynamic hasType, type;
@dynamic hasDownBufLen, downBufLen;

typedef struct SnsDownloadRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t startPos;
  int32_t totalLen;
  uint32_t type;
  uint32_t downBufLen;
  BaseRequest *baseRequest;
  NSString *bufferId;
} SnsDownloadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsDownloadRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsDownloadRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadRequest_FieldNumber_StartPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsDownloadRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadRequest_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsDownloadRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bufferId",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadRequest_FieldNumber_BufferId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsDownloadRequest__storage_, bufferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsDownloadRequest__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "downBufLen",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadRequest_FieldNumber_DownBufLen,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsDownloadRequest__storage_, downBufLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsDownloadRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsDownloadRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001K\000\002H\000\003H\000\004H\000\005D\000\006J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsDownloadResponse

@implementation SnsDownloadResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasStartPos, startPos;
@dynamic hasTotalLen, totalLen;
@dynamic hasBuffer, buffer;
@dynamic hasBufferId, bufferId;
@dynamic hasType, type;

typedef struct SnsDownloadResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t startPos;
  int32_t totalLen;
  uint32_t type;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *buffer;
  NSString *bufferId;
} SnsDownloadResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsDownloadResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsDownloadResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadResponse_FieldNumber_StartPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsDownloadResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadResponse_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsDownloadResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsDownloadResponse_FieldNumber_Buffer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsDownloadResponse__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bufferId",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadResponse_FieldNumber_BufferId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsDownloadResponse__storage_, bufferId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsDownloadResponse_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsDownloadResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsDownloadResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsDownloadResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002H\000\003H\000\004F\000\005H\000\006D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsCommentInfo

@implementation SnsCommentInfo

@dynamic hasUsername, username;
@dynamic hasNickname, nickname;
@dynamic hasSource, source;
@dynamic hasType, type;
@dynamic hasContent, content;
@dynamic hasCreateTime, createTime;
@dynamic hasCommentId, commentId;
@dynamic hasReplyCommentId, replyCommentId;
@dynamic hasReplyUsername, replyUsername;
@dynamic hasIsNotRichText, isNotRichText;
@dynamic hasReplyCommentId2, replyCommentId2;
@dynamic hasCommentId2, commentId2;
@dynamic hasDeleteFlag, deleteFlag;

typedef struct SnsCommentInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t source;
  uint32_t type;
  uint32_t createTime;
  int32_t commentId;
  int32_t replyCommentId;
  uint32_t isNotRichText;
  uint32_t deleteFlag;
  NSString *username;
  NSString *nickname;
  NSString *content;
  NSString *replyUsername;
  uint64_t replyCommentId2;
  uint64_t commentId2;
} SnsCommentInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_Source,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_CreateTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_CommentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, commentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "replyCommentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_ReplyCommentId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, replyCommentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "replyUsername",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_ReplyUsername,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, replyUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNotRichText",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_IsNotRichText,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, isNotRichText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "replyCommentId2",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_ReplyCommentId2,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, replyCommentId2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "commentId2",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_CommentId2,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, commentId2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "deleteFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentInfo_FieldNumber_DeleteFlag,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SnsCommentInfo__storage_, deleteFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsCommentInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsCommentInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001H\000\002H\000\003F\000\004D\000\005G\000\006J\000\007I\000\010N\000\tM\000\nM\000\013O\000\014J\000\rJ\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsGroup

@implementation SnsGroup

@dynamic hasGroupId, groupId;

typedef struct SnsGroup__storage_ {
  uint32_t _has_storage_[1];
  uint64_t groupId;
} SnsGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = SnsGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsGroup class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsRedEnvelops

@implementation SnsRedEnvelops

@dynamic hasRewardCount, rewardCount;
@dynamic hasResourceId, resourceId;
@dynamic hasReportId, reportId;
@dynamic hasReportKey, reportKey;

typedef struct SnsRedEnvelops__storage_ {
  uint32_t _has_storage_[1];
  uint32_t rewardCount;
  uint32_t resourceId;
  uint32_t reportId;
  uint32_t reportKey;
} SnsRedEnvelops__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsRedEnvelops_FieldNumber_RewardCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsRedEnvelops__storage_, rewardCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resourceId",
        .dataTypeSpecific.className = NULL,
        .number = SnsRedEnvelops_FieldNumber_ResourceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsRedEnvelops__storage_, resourceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportId",
        .dataTypeSpecific.className = NULL,
        .number = SnsRedEnvelops_FieldNumber_ReportId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsRedEnvelops__storage_, reportId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportKey",
        .dataTypeSpecific.className = NULL,
        .number = SnsRedEnvelops_FieldNumber_ReportKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsRedEnvelops__storage_, reportKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsRedEnvelops class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsRedEnvelops__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\n\000\004\010\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsWeAppInfo

@implementation SnsWeAppInfo

@dynamic hasMapPoiId, mapPoiId;
@dynamic hasAppId, appId;
@dynamic hasUserName, userName;
@dynamic hasRedirectURL, redirectURL;
@dynamic hasShowType, showType;
@dynamic hasScore, score;

typedef struct SnsWeAppInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t appId;
  uint32_t showType;
  uint32_t score;
  NSString *mapPoiId;
  NSString *userName;
  NSString *redirectURL;
} SnsWeAppInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mapPoiId",
        .dataTypeSpecific.className = NULL,
        .number = SnsWeAppInfo_FieldNumber_MapPoiId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsWeAppInfo__storage_, mapPoiId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = SnsWeAppInfo_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsWeAppInfo__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = SnsWeAppInfo_FieldNumber_UserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsWeAppInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redirectURL",
        .dataTypeSpecific.className = NULL,
        .number = SnsWeAppInfo_FieldNumber_RedirectURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsWeAppInfo__storage_, redirectURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "showType",
        .dataTypeSpecific.className = NULL,
        .number = SnsWeAppInfo_FieldNumber_ShowType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsWeAppInfo__storage_, showType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = SnsWeAppInfo_FieldNumber_Score,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsWeAppInfo__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsWeAppInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsWeAppInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\005\000\003\010\000\004\t!!\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PreDownloadInfo

@implementation PreDownloadInfo

@dynamic hasPreDownloadPercent, preDownloadPercent;
@dynamic hasPreDownloadNetType, preDownloadNetType;
@dynamic hasNoPreDownloadRange, noPreDownloadRange;

typedef struct PreDownloadInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t preDownloadPercent;
  uint32_t preDownloadNetType;
  NSString *noPreDownloadRange;
} PreDownloadInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "preDownloadPercent",
        .dataTypeSpecific.className = NULL,
        .number = PreDownloadInfo_FieldNumber_PreDownloadPercent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PreDownloadInfo__storage_, preDownloadPercent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "preDownloadNetType",
        .dataTypeSpecific.className = NULL,
        .number = PreDownloadInfo_FieldNumber_PreDownloadNetType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PreDownloadInfo__storage_, preDownloadNetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "noPreDownloadRange",
        .dataTypeSpecific.className = NULL,
        .number = PreDownloadInfo_FieldNumber_NoPreDownloadRange,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PreDownloadInfo__storage_, noPreDownloadRange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PreDownloadInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PreDownloadInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\022\000\002\022\000\003\022\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObject

@implementation SnsObject

@dynamic hasId_p, id_p;
@dynamic hasUsername, username;
@dynamic hasNickname, nickname;
@dynamic hasCreateTime, createTime;
@dynamic hasObjectDesc, objectDesc;
@dynamic hasLikeFlag, likeFlag;
@dynamic hasLikeCount, likeCount;
@dynamic hasLikeUserListCount, likeUserListCount;
@dynamic likeUserListArray, likeUserListArray_Count;
@dynamic hasCommentCount, commentCount;
@dynamic hasCommentUserListCount, commentUserListCount;
@dynamic commentUserListArray, commentUserListArray_Count;
@dynamic hasWithUserCount, withUserCount;
@dynamic hasWithUserListCount, withUserListCount;
@dynamic withUserListArray, withUserListArray_Count;
@dynamic hasExtFlag, extFlag;
@dynamic hasNoChange, noChange;
@dynamic hasGroupCount, groupCount;
@dynamic groupListArray, groupListArray_Count;
@dynamic hasIsNotRichText, isNotRichText;
@dynamic hasReferUsername, referUsername;
@dynamic hasReferId, referId;
@dynamic hasBlackListCount, blackListCount;
@dynamic blackListArray, blackListArray_Count;
@dynamic hasDeleteFlag, deleteFlag;
@dynamic hasGroupUserCount, groupUserCount;
@dynamic groupUserArray, groupUserArray_Count;
@dynamic hasObjectOperations, objectOperations;
@dynamic hasSnsRedEnvelops, snsRedEnvelops;
@dynamic hasPreDownloadInfo, preDownloadInfo;
@dynamic hasWeAppInfo, weAppInfo;

typedef struct SnsObject__storage_ {
  uint32_t _has_storage_[1];
  uint32_t createTime;
  uint32_t likeFlag;
  uint32_t likeCount;
  uint32_t likeUserListCount;
  uint32_t commentCount;
  uint32_t commentUserListCount;
  uint32_t withUserCount;
  uint32_t withUserListCount;
  uint32_t extFlag;
  uint32_t noChange;
  uint32_t groupCount;
  uint32_t isNotRichText;
  uint32_t blackListCount;
  uint32_t deleteFlag;
  uint32_t groupUserCount;
  NSString *username;
  NSString *nickname;
  SKBuiltinBuffer_t *objectDesc;
  NSMutableArray *likeUserListArray;
  NSMutableArray *commentUserListArray;
  NSMutableArray *withUserListArray;
  NSMutableArray *groupListArray;
  NSString *referUsername;
  NSMutableArray *blackListArray;
  NSMutableArray *groupUserArray;
  SKBuiltinBuffer_t *objectOperations;
  SnsRedEnvelops *snsRedEnvelops;
  PreDownloadInfo *preDownloadInfo;
  SnsWeAppInfo *weAppInfo;
  uint64_t id_p;
  uint64_t referId;
} SnsObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObject__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsObject__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsObject__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_CreateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsObject__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectDesc",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsObject_FieldNumber_ObjectDesc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsObject__storage_, objectDesc),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likeFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_LikeFlag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsObject__storage_, likeFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "likeCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_LikeCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsObject__storage_, likeCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "likeUserListCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_LikeUserListCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsObject__storage_, likeUserListCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "likeUserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsCommentInfo),
        .number = SnsObject_FieldNumber_LikeUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObject__storage_, likeUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_CommentCount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsObject__storage_, commentCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "commentUserListCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_CommentUserListCount,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SnsObject__storage_, commentUserListCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "commentUserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsCommentInfo),
        .number = SnsObject_FieldNumber_CommentUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObject__storage_, commentUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "withUserCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_WithUserCount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SnsObject__storage_, withUserCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "withUserListCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_WithUserListCount,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SnsObject__storage_, withUserListCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "withUserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsCommentInfo),
        .number = SnsObject_FieldNumber_WithUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObject__storage_, withUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_ExtFlag,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SnsObject__storage_, extFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "noChange",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_NoChange,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SnsObject__storage_, noChange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_GroupCount,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SnsObject__storage_, groupCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsGroup),
        .number = SnsObject_FieldNumber_GroupListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObject__storage_, groupListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isNotRichText",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_IsNotRichText,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SnsObject__storage_, isNotRichText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "referUsername",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_ReferUsername,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SnsObject__storage_, referUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "referId",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_ReferId,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SnsObject__storage_, referId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "blackListCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_BlackListCount,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SnsObject__storage_, blackListCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "blackListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsObject_FieldNumber_BlackListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObject__storage_, blackListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deleteFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_DeleteFlag,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SnsObject__storage_, deleteFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupUserCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObject_FieldNumber_GroupUserCount,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SnsObject__storage_, groupUserCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupUserArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsObject_FieldNumber_GroupUserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObject__storage_, groupUserArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectOperations",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsObject_FieldNumber_ObjectOperations,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SnsObject__storage_, objectOperations),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsRedEnvelops",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsRedEnvelops),
        .number = SnsObject_FieldNumber_SnsRedEnvelops,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(SnsObject__storage_, snsRedEnvelops),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "preDownloadInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PreDownloadInfo),
        .number = SnsObject_FieldNumber_PreDownloadInfo,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(SnsObject__storage_, preDownloadInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "weAppInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsWeAppInfo),
        .number = SnsObject_FieldNumber_WeAppInfo,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(SnsObject__storage_, weAppInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObject class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\037\001\000Id\000\002H\000\003H\000\004J\000\005J\000\006H\000\007I\000\010Q\000\t\000LikeUserLis"
        "t\000\nL\000\013T\000\014\000CommentUserList\000\rM\000\016Q\000\017\000WithUs"
        "erList\000\020G\000\021H\000\022J\000\023\000GroupList\000\024M\000\025M\000\026G\000\027N\000"
        "\030\000BlackList\000\031J\000\032N\000\033\000GroupUser\000\034\020\000\035\016\000\036\017\000\037"
        "\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsADObject

@implementation SnsADObject

@dynamic hasSnsObject, snsObject;
@dynamic hasAdxml, adxml;

typedef struct SnsADObject__storage_ {
  uint32_t _has_storage_[1];
  SnsObject *snsObject;
  SKBuiltinString_t *adxml;
} SnsADObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "snsObject",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsADObject_FieldNumber_SnsObject,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsADObject__storage_, snsObject),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adxml",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsADObject_FieldNumber_Adxml,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsADObject__storage_, adxml),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsADObject class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsADObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001I\000\002e\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AdvertiseObject

@implementation AdvertiseObject

@dynamic hasSnsAdobject, snsAdobject;
@dynamic hasAdinfo, adinfo;

typedef struct AdvertiseObject__storage_ {
  uint32_t _has_storage_[1];
  SnsADObject *snsAdobject;
  SKBuiltinString_t *adinfo;
} AdvertiseObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "snsAdobject",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsADObject),
        .number = AdvertiseObject_FieldNumber_SnsAdobject,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AdvertiseObject__storage_, snsAdobject),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adinfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = AdvertiseObject_FieldNumber_Adinfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AdvertiseObject__storage_, adinfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AdvertiseObject class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AdvertiseObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001Db\005\000\002c\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsPostCtocUploadInfo

@implementation SnsPostCtocUploadInfo

@dynamic hasFlag, flag;
@dynamic hasPhotoCount, photoCount;

typedef struct SnsPostCtocUploadInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t flag;
  uint32_t photoCount;
} SnsPostCtocUploadInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostCtocUploadInfo_FieldNumber_Flag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsPostCtocUploadInfo__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "photoCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostCtocUploadInfo_FieldNumber_PhotoCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsPostCtocUploadInfo__storage_, photoCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsPostCtocUploadInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsPostCtocUploadInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MediaInfo

@implementation MediaInfo

@dynamic hasSource, source;
@dynamic hasMediaType, mediaType;
@dynamic hasVideoPlayLength, videoPlayLength;
@dynamic hasSessionId, sessionId;
@dynamic hasStartTime, startTime;

typedef struct MediaInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t source;
  uint32_t mediaType;
  uint32_t videoPlayLength;
  uint32_t startTime;
  NSString *sessionId;
} MediaInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = MediaInfo_FieldNumber_Source,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MediaInfo__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mediaType",
        .dataTypeSpecific.className = NULL,
        .number = MediaInfo_FieldNumber_MediaType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MediaInfo__storage_, mediaType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "videoPlayLength",
        .dataTypeSpecific.className = NULL,
        .number = MediaInfo_FieldNumber_VideoPlayLength,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MediaInfo__storage_, videoPlayLength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = MediaInfo_FieldNumber_SessionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MediaInfo__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = MediaInfo_FieldNumber_StartTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MediaInfo__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MediaInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MediaInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\t\000\003\017\000\004\t\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CanvasInfo

@implementation CanvasInfo

@dynamic hasDataBuffer, dataBuffer;

typedef struct CanvasInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *dataBuffer;
} CanvasInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dataBuffer",
        .dataTypeSpecific.className = NULL,
        .number = CanvasInfo_FieldNumber_DataBuffer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CanvasInfo__storage_, dataBuffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CanvasInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CanvasInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsPostOperationFields

@implementation SnsPostOperationFields

@dynamic hasShareURLOriginal, shareURLOriginal;
@dynamic hasShareURLOpen, shareURLOpen;
@dynamic hasJsAppId, jsAppId;
@dynamic hasContactTagCount, contactTagCount;
@dynamic hasTempUserCount, tempUserCount;

typedef struct SnsPostOperationFields__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contactTagCount;
  uint32_t tempUserCount;
  NSString *shareURLOriginal;
  NSString *shareURLOpen;
  NSString *jsAppId;
} SnsPostOperationFields__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shareURLOriginal",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostOperationFields_FieldNumber_ShareURLOriginal,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsPostOperationFields__storage_, shareURLOriginal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shareURLOpen",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostOperationFields_FieldNumber_ShareURLOpen,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsPostOperationFields__storage_, shareURLOpen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsAppId",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostOperationFields_FieldNumber_JsAppId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsPostOperationFields__storage_, jsAppId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactTagCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostOperationFields_FieldNumber_ContactTagCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsPostOperationFields__storage_, contactTagCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tempUserCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostOperationFields_FieldNumber_TempUserCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsPostOperationFields__storage_, tempUserCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsPostOperationFields class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsPostOperationFields__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006!)\000\002\006!%\000\003\007\000\004\017\000\005\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsPostRequest

@implementation SnsPostRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasObjectDesc, objectDesc;
@dynamic hasWithUserListCount, withUserListCount;
@dynamic withUserListArray, withUserListArray_Count;
@dynamic hasPrivacy, privacy;
@dynamic hasSyncFlag, syncFlag;
@dynamic hasClientId, clientId;
@dynamic hasPostBgimgType, postBgimgType;
@dynamic hasGroupCount, groupCount;
@dynamic groupIdsArray, groupIdsArray_Count;
@dynamic hasObjectSource, objectSource;
@dynamic hasReferId, referId;
@dynamic hasBlackListCount, blackListCount;
@dynamic blackListArray, blackListArray_Count;
@dynamic hasTwitterInfo, twitterInfo;
@dynamic hasGroupUserCount, groupUserCount;
@dynamic groupUserArray, groupUserArray_Count;
@dynamic hasCtocUploadInfo, ctocUploadInfo;
@dynamic hasSnsPostOperationFields, snsPostOperationFields;
@dynamic hasSnsRedEnvelops, snsRedEnvelops;
@dynamic hasPoiInfo, poiInfo;
@dynamic hasFromScene, fromScene;
@dynamic hasCanvasInfo, canvasInfo;
@dynamic hasMediaInfoCount, mediaInfoCount;
@dynamic mediaInfoArray, mediaInfoArray_Count;
@dynamic hasWeAppInfo, weAppInfo;
@dynamic hasClientCheckData, clientCheckData;

typedef struct SnsPostRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t withUserListCount;
  uint32_t privacy;
  uint32_t syncFlag;
  uint32_t postBgimgType;
  uint32_t groupCount;
  uint32_t objectSource;
  uint32_t blackListCount;
  uint32_t groupUserCount;
  uint32_t mediaInfoCount;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *objectDesc;
  NSMutableArray *withUserListArray;
  NSString *clientId;
  NSMutableArray *groupIdsArray;
  NSMutableArray *blackListArray;
  TwitterInfo *twitterInfo;
  NSMutableArray *groupUserArray;
  SnsPostCtocUploadInfo *ctocUploadInfo;
  SnsPostOperationFields *snsPostOperationFields;
  SnsRedEnvelops *snsRedEnvelops;
  SKBuiltinBuffer_t *poiInfo;
  NSString *fromScene;
  CanvasInfo *canvasInfo;
  NSMutableArray *mediaInfoArray;
  SnsWeAppInfo *weAppInfo;
  SKBuiltinBuffer_t *clientCheckData;
  uint64_t referId;
} SnsPostRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsPostRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectDesc",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsPostRequest_FieldNumber_ObjectDesc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, objectDesc),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "withUserListCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_WithUserListCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, withUserListCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "withUserListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsPostRequest_FieldNumber_WithUserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, withUserListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "privacy",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_Privacy,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, privacy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "syncFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_SyncFlag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, syncFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_ClientId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postBgimgType",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_PostBgimgType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, postBgimgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_GroupCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, groupCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupIdsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsGroup),
        .number = SnsPostRequest_FieldNumber_GroupIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, groupIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectSource",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_ObjectSource,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, objectSource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "referId",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_ReferId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, referId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "blackListCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_BlackListCount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, blackListCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "blackListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsPostRequest_FieldNumber_BlackListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, blackListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "twitterInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(TwitterInfo),
        .number = SnsPostRequest_FieldNumber_TwitterInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, twitterInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupUserCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_GroupUserCount,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, groupUserCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupUserArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = SnsPostRequest_FieldNumber_GroupUserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, groupUserArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ctocUploadInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsPostCtocUploadInfo),
        .number = SnsPostRequest_FieldNumber_CtocUploadInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, ctocUploadInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsPostOperationFields",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsPostOperationFields),
        .number = SnsPostRequest_FieldNumber_SnsPostOperationFields,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, snsPostOperationFields),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsRedEnvelops",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsRedEnvelops),
        .number = SnsPostRequest_FieldNumber_SnsRedEnvelops,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, snsRedEnvelops),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "poiInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsPostRequest_FieldNumber_PoiInfo,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, poiInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromScene",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_FromScene,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, fromScene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "canvasInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CanvasInfo),
        .number = SnsPostRequest_FieldNumber_CanvasInfo,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, canvasInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaInfoCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostRequest_FieldNumber_MediaInfoCount,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, mediaInfoCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mediaInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MediaInfo),
        .number = SnsPostRequest_FieldNumber_MediaInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, mediaInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "weAppInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsWeAppInfo),
        .number = SnsPostRequest_FieldNumber_WeAppInfo,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, weAppInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientCheckData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsPostRequest_FieldNumber_ClientCheckData,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(SnsPostRequest__storage_, clientCheckData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsPostRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsPostRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\033\001K\000\002J\000\003Q\000\004\000WithUserList\000\005G\000\006H\000\007H\000\010Eb\006\000\t"
        "J\000\n\000GroupIds\000\013L\000\014G\000\rN\000\016\000BlackList\000\017K\000\020N\000"
        "\021\000GroupUser\000\022N\000\023\026\000\024\016\000\025\007\000\026\t\000\027\n\000\030\016\000\031\000media"
        "Info\000\032\t\000\033\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsPostResponse

@implementation SnsPostResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSnsObject, snsObject;
@dynamic hasSpamTips, spamTips;

typedef struct SnsPostResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsObject *snsObject;
  NSString *spamTips;
} SnsPostResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsPostResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsPostResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsObject",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsPostResponse_FieldNumber_SnsObject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsPostResponse__storage_, snsObject),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "spamTips",
        .dataTypeSpecific.className = NULL,
        .number = SnsPostResponse_FieldNumber_SpamTips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsPostResponse__storage_, spamTips),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsPostResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsPostResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002I\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObjectDetailRequest

@implementation SnsObjectDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasId_p, id_p;
@dynamic hasGroupDetail, groupDetail;

typedef struct SnsObjectDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupDetail;
  BaseRequest *baseRequest;
  uint64_t id_p;
} SnsObjectDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsObjectDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObjectDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectDetailRequest_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsObjectDetailRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "groupDetail",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectDetailRequest_FieldNumber_GroupDetail,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsObjectDetailRequest__storage_, groupDetail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObjectDetailRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObjectDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002\000Id\000\003K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObjectDetailResponse

@implementation SnsObjectDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasObject, object;

typedef struct SnsObjectDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsObject *object;
} SnsObjectDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsObjectDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObjectDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "object",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsObjectDetailResponse_FieldNumber_Object,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsObjectDetailResponse__storage_, object),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObjectDetailResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObjectDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsADObjectDetailRequest

@implementation SnsADObjectDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasId_p, id_p;
@dynamic hasScene, scene;
@dynamic hasSession, session;

typedef struct SnsADObjectDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *session;
  uint64_t id_p;
} SnsADObjectDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsADObjectDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsADObjectDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsADObjectDetailRequest_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsADObjectDetailRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = SnsADObjectDetailRequest_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsADObjectDetailRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "session",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsADObjectDetailRequest_FieldNumber_Session,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsADObjectDetailRequest__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsADObjectDetailRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsADObjectDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002\000Id\000\003E\000\004G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsADObjectDetailResponse

@implementation SnsADObjectDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasObject, object;
@dynamic hasSession, session;

typedef struct SnsADObjectDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsADObject *object;
  SKBuiltinBuffer_t *session;
} SnsADObjectDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsADObjectDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsADObjectDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "object",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsADObject),
        .number = SnsADObjectDetailResponse_FieldNumber_Object,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsADObjectDetailResponse__storage_, object),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "session",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsADObjectDetailResponse_FieldNumber_Session,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsADObjectDetailResponse__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsADObjectDetailResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsADObjectDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002F\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsServerConfig

@implementation SnsServerConfig

@dynamic hasPostMentionLimit, postMentionLimit;
@dynamic hasCopyAndPasteWordLimit, copyAndPasteWordLimit;

typedef struct SnsServerConfig__storage_ {
  uint32_t _has_storage_[1];
  int32_t postMentionLimit;
  int32_t copyAndPasteWordLimit;
} SnsServerConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postMentionLimit",
        .dataTypeSpecific.className = NULL,
        .number = SnsServerConfig_FieldNumber_PostMentionLimit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsServerConfig__storage_, postMentionLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "copyAndPasteWordLimit",
        .dataTypeSpecific.className = NULL,
        .number = SnsServerConfig_FieldNumber_CopyAndPasteWordLimit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsServerConfig__storage_, copyAndPasteWordLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsServerConfig class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsServerConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001P\000\002U\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTimeLineRequest

@implementation SnsTimeLineRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFirstPageMd5, firstPageMd5;
@dynamic hasMaxId, maxId;
@dynamic hasMinFilterId, minFilterId;
@dynamic hasLastRequestTime, lastRequestTime;
@dynamic hasClientLatestId, clientLatestId;
@dynamic hasSession, session;
@dynamic hasNetworkType, networkType;
@dynamic hasAdexpinfo, adexpinfo;

typedef struct SnsTimeLineRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lastRequestTime;
  int32_t networkType;
  BaseRequest *baseRequest;
  NSString *firstPageMd5;
  SKBuiltinBuffer_t *session;
  NSString *adexpinfo;
  uint64_t maxId;
  uint64_t minFilterId;
  uint64_t clientLatestId;
} SnsTimeLineRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsTimeLineRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstPageMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_FirstPageMd5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, firstPageMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxId",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_MaxId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, maxId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "minFilterId",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_MinFilterId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, minFilterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lastRequestTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_LastRequestTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, lastRequestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientLatestId",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_ClientLatestId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, clientLatestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "session",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsTimeLineRequest_FieldNumber_Session,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "networkType",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_NetworkType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, networkType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "adexpinfo",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineRequest_FieldNumber_Adexpinfo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsTimeLineRequest__storage_, adexpinfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTimeLineRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTimeLineRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002L\000\003E\000\004K\000\005O\000\006N\000\007G\000\010\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTimeLineResponse

@implementation SnsTimeLineResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFirstPageMd5, firstPageMd5;
@dynamic hasObjectCount, objectCount;
@dynamic objectListArray, objectListArray_Count;
@dynamic hasNewRequestTime, newRequestTime;
@dynamic hasObjectCountForSameMd5, objectCountForSameMd5;
@dynamic hasControlFlag, controlFlag;
@dynamic hasServerConfig, serverConfig;
@dynamic hasAdvertiseCount, advertiseCount;
@dynamic advertiseListArray, advertiseListArray_Count;
@dynamic hasSession, session;

typedef struct SnsTimeLineResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t objectCount;
  uint32_t newRequestTime;
  uint32_t objectCountForSameMd5;
  uint32_t controlFlag;
  uint32_t advertiseCount;
  BaseResponse *baseResponse;
  NSString *firstPageMd5;
  NSMutableArray *objectListArray;
  SnsServerConfig *serverConfig;
  NSMutableArray *advertiseListArray;
  SKBuiltinBuffer_t *session;
} SnsTimeLineResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsTimeLineResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstPageMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineResponse_FieldNumber_FirstPageMd5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, firstPageMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "objectCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineResponse_FieldNumber_ObjectCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, objectCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsTimeLineResponse_FieldNumber_ObjectListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, objectListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newRequestTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineResponse_FieldNumber_NewRequestTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, newRequestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectCountForSameMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineResponse_FieldNumber_ObjectCountForSameMd5,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, objectCountForSameMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "controlFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineResponse_FieldNumber_ControlFlag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, controlFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serverConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsServerConfig),
        .number = SnsTimeLineResponse_FieldNumber_ServerConfig,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, serverConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "advertiseCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineResponse_FieldNumber_AdvertiseCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, advertiseCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "advertiseListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AdvertiseObject),
        .number = SnsTimeLineResponse_FieldNumber_AdvertiseListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, advertiseListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "session",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsTimeLineResponse_FieldNumber_Session,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsTimeLineResponse__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTimeLineResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTimeLineResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001L\000\002L\000\003K\000\004\000ObjectList\000\005N\000\006U\000\007K\000\010L\000\tN\000\n\000"
        "AdvertiseList\000\013G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTimeLineWithTypeRequest

@implementation SnsTimeLineWithTypeRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSelectType, selectType;

typedef struct SnsTimeLineWithTypeRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  uint64_t selectType;
} SnsTimeLineWithTypeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsTimeLineWithTypeRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTimeLineWithTypeRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selectType",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineWithTypeRequest_FieldNumber_SelectType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTimeLineWithTypeRequest__storage_, selectType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTimeLineWithTypeRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTimeLineWithTypeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsTimeLineWithTypeResponse

@implementation SnsTimeLineWithTypeResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasObjectCount, objectCount;
@dynamic objectListArray, objectListArray_Count;

typedef struct SnsTimeLineWithTypeResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t objectCount;
  BaseResponse *baseResponse;
  NSMutableArray *objectListArray;
} SnsTimeLineWithTypeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsTimeLineWithTypeResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsTimeLineWithTypeResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsTimeLineWithTypeResponse_FieldNumber_ObjectCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsTimeLineWithTypeResponse__storage_, objectCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsTimeLineWithTypeResponse_FieldNumber_ObjectListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsTimeLineWithTypeResponse__storage_, objectListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsTimeLineWithTypeResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsTimeLineWithTypeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002K\000\003\000ObjectList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsUserPageRequest

@implementation SnsUserPageRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFirstPageMd5, firstPageMd5;
@dynamic hasUsername, username;
@dynamic hasMaxId, maxId;
@dynamic hasSource, source;
@dynamic hasMinFilterId, minFilterId;
@dynamic hasLastRequestTime, lastRequestTime;

typedef struct SnsUserPageRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t source;
  uint32_t lastRequestTime;
  BaseRequest *baseRequest;
  NSString *firstPageMd5;
  NSString *username;
  uint64_t maxId;
  uint64_t minFilterId;
} SnsUserPageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsUserPageRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstPageMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageRequest_FieldNumber_FirstPageMd5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, firstPageMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageRequest_FieldNumber_Username,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageRequest_FieldNumber_MaxId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, maxId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageRequest_FieldNumber_Source,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minFilterId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageRequest_FieldNumber_MinFilterId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, minFilterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lastRequestTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageRequest_FieldNumber_LastRequestTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsUserPageRequest__storage_, lastRequestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsUserPageRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsUserPageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002L\000\003H\000\004E\000\005F\000\006K\000\007O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsUserPageResponse

@implementation SnsUserPageResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFirstPageMd5, firstPageMd5;
@dynamic hasObjectCount, objectCount;
@dynamic objectListArray, objectListArray_Count;
@dynamic hasObjectTotalCount, objectTotalCount;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasNewRequestTime, newRequestTime;
@dynamic hasObjectCountForSameMd5, objectCountForSameMd5;
@dynamic hasServerConfig, serverConfig;

typedef struct SnsUserPageResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t objectCount;
  uint32_t objectTotalCount;
  uint32_t newRequestTime;
  uint32_t objectCountForSameMd5;
  BaseResponse *baseResponse;
  NSString *firstPageMd5;
  NSMutableArray *objectListArray;
  SnsUserInfo *snsUserInfo;
  SnsServerConfig *serverConfig;
} SnsUserPageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsUserPageResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstPageMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageResponse_FieldNumber_FirstPageMd5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, firstPageMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "objectCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageResponse_FieldNumber_ObjectCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, objectCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsUserPageResponse_FieldNumber_ObjectListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, objectListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectTotalCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageResponse_FieldNumber_ObjectTotalCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, objectTotalCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = SnsUserPageResponse_FieldNumber_SnsUserInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newRequestTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageResponse_FieldNumber_NewRequestTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, newRequestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectCountForSameMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserPageResponse_FieldNumber_ObjectCountForSameMd5,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, objectCountForSameMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serverConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsServerConfig),
        .number = SnsUserPageResponse_FieldNumber_ServerConfig,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsUserPageResponse__storage_, serverConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsUserPageResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsUserPageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001L\000\002L\000\003K\000\004\000ObjectList\000\005P\000\006K\000\007N\000\010U\000\tL\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RemindFriendsInfo

@implementation RemindFriendsInfo

@dynamic hasAdgroupId, adgroupId;
@dynamic hasSourceInfo, sourceInfo;
@dynamic hasSelfInfo, selfInfo;
@dynamic hasPaidInfo, paidInfo;
@dynamic hasExtraInfo, extraInfo;

typedef struct RemindFriendsInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adgroupId;
  SKBuiltinBuffer_t *sourceInfo;
  SKBuiltinBuffer_t *selfInfo;
  SKBuiltinBuffer_t *paidInfo;
  SKBuiltinBuffer_t *extraInfo;
} RemindFriendsInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adgroupId",
        .dataTypeSpecific.className = NULL,
        .number = RemindFriendsInfo_FieldNumber_AdgroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RemindFriendsInfo__storage_, adgroupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sourceInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = RemindFriendsInfo_FieldNumber_SourceInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RemindFriendsInfo__storage_, sourceInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selfInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = RemindFriendsInfo_FieldNumber_SelfInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RemindFriendsInfo__storage_, selfInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paidInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = RemindFriendsInfo_FieldNumber_PaidInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RemindFriendsInfo__storage_, paidInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extraInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = RemindFriendsInfo_FieldNumber_ExtraInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RemindFriendsInfo__storage_, extraInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RemindFriendsInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RemindFriendsInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001I\000\002J\000\003H\000\004H\000\005I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsAction

@implementation SnsAction

@dynamic hasFromUsername, fromUsername;
@dynamic hasToUsername, toUsername;
@dynamic hasFromNickname, fromNickname;
@dynamic hasToNickname, toNickname;
@dynamic hasType, type;
@dynamic hasSource, source;
@dynamic hasCreateTime, createTime;
@dynamic hasContent, content;
@dynamic hasReplyCommentId, replyCommentId;
@dynamic hasCommentId, commentId;
@dynamic hasIsNotRichText, isNotRichText;
@dynamic hasReplyCommentId2, replyCommentId2;
@dynamic hasCommentId2, commentId2;
@dynamic hasHbbuffer, hbbuffer;
@dynamic hasCommentFlag, commentFlag;
@dynamic hasRemindFriendsInfo, remindFriendsInfo;

typedef struct SnsAction__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t source;
  uint32_t createTime;
  int32_t replyCommentId;
  int32_t commentId;
  uint32_t isNotRichText;
  uint32_t commentFlag;
  NSString *fromUsername;
  NSString *toUsername;
  NSString *fromNickname;
  NSString *toNickname;
  NSString *content;
  SKBuiltinBuffer_t *hbbuffer;
  RemindFriendsInfo *remindFriendsInfo;
  uint64_t replyCommentId2;
  uint64_t commentId2;
} SnsAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_FromUsername,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsAction__storage_, fromUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toUsername",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_ToUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsAction__storage_, toUsername),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromNickname",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_FromNickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsAction__storage_, fromNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toNickname",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_ToNickname,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsAction__storage_, toNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsAction__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_Source,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsAction__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsAction__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_Content,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsAction__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "replyCommentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_ReplyCommentId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsAction__storage_, replyCommentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_CommentId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SnsAction__storage_, commentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isNotRichText",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_IsNotRichText,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SnsAction__storage_, isNotRichText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "replyCommentId2",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_ReplyCommentId2,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SnsAction__storage_, replyCommentId2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "commentId2",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_CommentId2,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SnsAction__storage_, commentId2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hbbuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsAction_FieldNumber_Hbbuffer,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SnsAction__storage_, hbbuffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsAction_FieldNumber_CommentFlag,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SnsAction__storage_, commentFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remindFriendsInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(RemindFriendsInfo),
        .number = SnsAction_FieldNumber_RemindFriendsInfo,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(SnsAction__storage_, remindFriendsInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsAction class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsAction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001L\000\002J\000\003L\000\004J\000\005D\000\006F\000\007J\000\010G\000\tN\000\nI\000\013M\000\014O\000\rJ\000"
        "\016H\000\017K\000\020Q\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsActionGroup

@implementation SnsActionGroup

@dynamic hasId_p, id_p;
@dynamic hasParentId, parentId;
@dynamic hasCurrentAction, currentAction;
@dynamic hasReferAction, referAction;
@dynamic hasClientId, clientId;

typedef struct SnsActionGroup__storage_ {
  uint32_t _has_storage_[1];
  SnsAction *currentAction;
  SnsAction *referAction;
  NSString *clientId;
  uint64_t id_p;
  uint64_t parentId;
} SnsActionGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsActionGroup_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsActionGroup__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsActionGroup_FieldNumber_ParentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsActionGroup__storage_, parentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "currentAction",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsAction),
        .number = SnsActionGroup_FieldNumber_CurrentAction,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsActionGroup__storage_, currentAction),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "referAction",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsAction),
        .number = SnsActionGroup_FieldNumber_ReferAction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsActionGroup__storage_, referAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = SnsActionGroup_FieldNumber_ClientId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsActionGroup__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsActionGroup class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsActionGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\000Id\000\002H\000\003M\000\004K\000\005H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsCommentRequest

@implementation SnsCommentRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAction, action;
@dynamic hasClientId, clientId;

typedef struct SnsCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  SnsActionGroup *action;
  NSString *clientId;
} SnsCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsCommentRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsCommentRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "action",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsActionGroup),
        .number = SnsCommentRequest_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsCommentRequest__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = SnsCommentRequest_FieldNumber_ClientId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsCommentRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsCommentRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsCommentResponse

@implementation SnsCommentResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSnsObject, snsObject;

typedef struct SnsCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsObject *snsObject;
} SnsCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsCommentResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsCommentResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsObject",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsCommentResponse_FieldNumber_SnsObject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsCommentResponse__storage_, snsObject),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsCommentResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsCommentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsADCommentRequest

@implementation SnsADCommentRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAction, action;
@dynamic hasClientId, clientId;

typedef struct SnsADCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  SnsActionGroup *action;
  NSString *clientId;
} SnsADCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsADCommentRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsADCommentRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "action",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsActionGroup),
        .number = SnsADCommentRequest_FieldNumber_Action,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsADCommentRequest__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = SnsADCommentRequest_FieldNumber_ClientId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsADCommentRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsADCommentRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsADCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsADCommentResponse

@implementation SnsADCommentResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSnsAdobject, snsAdobject;

typedef struct SnsADCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  SnsADObject *snsAdobject;
} SnsADCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsADCommentResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsADCommentResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "snsAdobject",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsADObject),
        .number = SnsADCommentResponse_FieldNumber_SnsAdobject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsADCommentResponse__storage_, snsAdobject),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsADCommentResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsADCommentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002Db\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsSyncRequest

@implementation SnsSyncRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSelector, selector;
@dynamic hasKeyBuf, keyBuf;

typedef struct SnsSyncRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t selector;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *keyBuf;
} SnsSyncRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsSyncRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsSyncRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = SnsSyncRequest_FieldNumber_Selector,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsSyncRequest__storage_, selector),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsSyncRequest_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsSyncRequest__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsSyncRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsSyncRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsSyncResponse

@implementation SnsSyncResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCmdList, cmdList;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasKeyBuf, keyBuf;

typedef struct SnsSyncResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t continueFlag;
  BaseResponse *baseResponse;
  CmdList *cmdList;
  SKBuiltinBuffer_t *keyBuf;
} SnsSyncResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsSyncResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsSyncResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cmdList",
        .dataTypeSpecific.className = GPBStringifySymbol(CmdList),
        .number = SnsSyncResponse_FieldNumber_CmdList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsSyncResponse__storage_, cmdList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsSyncResponse_FieldNumber_ContinueFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsSyncResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsSyncResponse_FieldNumber_KeyBuf,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsSyncResponse__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsSyncResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsSyncResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002G\000\003L\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObjectOp

@implementation SnsObjectOp

@dynamic hasId_p, id_p;
@dynamic hasOpType, opType;
@dynamic hasExt, ext;

typedef struct SnsObjectOp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  SKBuiltinBuffer_t *ext;
  uint64_t id_p;
} SnsObjectOp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectOp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObjectOp__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectOp_FieldNumber_OpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsObjectOp__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ext",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = SnsObjectOp_FieldNumber_Ext,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsObjectOp__storage_, ext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObjectOp class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObjectOp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\000Id\000\002F\000\003C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObjectOpDeleteComment

@implementation SnsObjectOpDeleteComment

@dynamic hasCommentId, commentId;

typedef struct SnsObjectOpDeleteComment__storage_ {
  uint32_t _has_storage_[1];
  int32_t commentId;
} SnsObjectOpDeleteComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectOpDeleteComment_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObjectOpDeleteComment__storage_, commentId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObjectOpDeleteComment class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObjectOpDeleteComment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsADObjectOpDeleteComment

@implementation SnsADObjectOpDeleteComment

@dynamic hasCommentId, commentId;

typedef struct SnsADObjectOpDeleteComment__storage_ {
  uint32_t _has_storage_[1];
  uint64_t commentId;
} SnsADObjectOpDeleteComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = SnsADObjectOpDeleteComment_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsADObjectOpDeleteComment__storage_, commentId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsADObjectOpDeleteComment class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsADObjectOpDeleteComment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObjectOpRequest

@implementation SnsObjectOpRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCount, opCount;
@dynamic opListArray, opListArray_Count;

typedef struct SnsObjectOpRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCount;
  BaseRequest *baseRequest;
  NSMutableArray *opListArray;
} SnsObjectOpRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsObjectOpRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObjectOpRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectOpRequest_FieldNumber_OpCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsObjectOpRequest__storage_, opCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObjectOp),
        .number = SnsObjectOpRequest_FieldNumber_OpListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObjectOpRequest__storage_, opListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObjectOpRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObjectOpRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002G\000\003\000OpList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsObjectOpResponse

@implementation SnsObjectOpResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasOpCount, opCount;
@dynamic opRetListArray, opRetListArray_Count;

typedef struct SnsObjectOpResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCount;
  BaseResponse *baseResponse;
  GPBInt32Array *opRetListArray;
} SnsObjectOpResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsObjectOpResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsObjectOpResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectOpResponse_FieldNumber_OpCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsObjectOpResponse__storage_, opCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opRetListArray",
        .dataTypeSpecific.className = NULL,
        .number = SnsObjectOpResponse_FieldNumber_OpRetListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsObjectOpResponse__storage_, opRetListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsObjectOpResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsObjectOpResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003\000OpRetList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsLbsRequest

@implementation SnsLbsRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;
@dynamic hasSbtime, sbtime;

typedef struct SnsLbsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  uint32_t sbtime;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
} SnsLbsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsLbsRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_Precision,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_MacAddr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_CellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_Gpssource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sbtime",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsRequest_FieldNumber_Sbtime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SnsLbsRequest__storage_, sbtime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsLbsRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsLbsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001K\000\002F\000\003I\000\004H\000\005I\000\006G\000\007F\000\010d\005\000\tc\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsLbsContactInfo

@implementation SnsLbsContactInfo

@dynamic hasUserName, userName;

typedef struct SnsLbsContactInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} SnsLbsContactInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsContactInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsLbsContactInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsLbsContactInfo class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsLbsContactInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsLbsResponse

@implementation SnsLbsResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasContactCount, contactCount;
@dynamic contactListArray, contactListArray_Count;

typedef struct SnsLbsResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contactCount;
  BaseResponse *baseResponse;
  NSMutableArray *contactListArray;
} SnsLbsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsLbsResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsLbsResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsLbsResponse_FieldNumber_ContactCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsLbsResponse__storage_, contactCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsLbsContactInfo),
        .number = SnsLbsResponse_FieldNumber_ContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsLbsResponse__storage_, contactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsLbsResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsLbsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002L\000\003\000ContactList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsGetCityRequest

@implementation SnsGetCityRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;

typedef struct SnsGetCityRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t longitude;
  int32_t latitude;
  int32_t precision;
  int32_t gpssource;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
} SnsGetCityRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsGetCityRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityRequest_FieldNumber_Longitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityRequest_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityRequest_FieldNumber_Precision,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityRequest_FieldNumber_MacAddr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityRequest_FieldNumber_CellId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityRequest_FieldNumber_Gpssource,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsGetCityRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsGetCityRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsGetCityRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\003I\000\004H\000\005I\000\006G\000\007F\000\010d\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsGetCityResponse

@implementation SnsGetCityResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasCountry, country;
@dynamic hasCity, city;

typedef struct SnsGetCityResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t longitude;
  int32_t latitude;
  BaseResponse *baseResponse;
  NSString *country;
  NSString *city;
} SnsGetCityResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsGetCityResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsGetCityResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityResponse_FieldNumber_Longitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsGetCityResponse__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityResponse_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsGetCityResponse__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityResponse_FieldNumber_Country,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsGetCityResponse__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = SnsGetCityResponse_FieldNumber_City,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsGetCityResponse__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsGetCityResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsGetCityResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002I\000\003H\000\004G\000\005D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsClassifyTimeLineRequest

@implementation SnsClassifyTimeLineRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFirstPageMd5, firstPageMd5;
@dynamic hasMaxId, maxId;
@dynamic hasClassifyId, classifyId;
@dynamic hasClassifyType, classifyType;

typedef struct SnsClassifyTimeLineRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t classifyType;
  BaseRequest *baseRequest;
  NSString *firstPageMd5;
  NSString *classifyId;
  uint64_t maxId;
} SnsClassifyTimeLineRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsClassifyTimeLineRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstPageMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineRequest_FieldNumber_FirstPageMd5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineRequest__storage_, firstPageMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxId",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineRequest_FieldNumber_MaxId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineRequest__storage_, maxId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "classifyId",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineRequest_FieldNumber_ClassifyId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineRequest__storage_, classifyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classifyType",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineRequest_FieldNumber_ClassifyType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineRequest__storage_, classifyType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsClassifyTimeLineRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsClassifyTimeLineRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002L\000\003E\000\004J\000\005L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsClassifyTimeLineResponse

@implementation SnsClassifyTimeLineResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasFirstPageMd5, firstPageMd5;
@dynamic hasObjectCount, objectCount;
@dynamic objectListArray, objectListArray_Count;
@dynamic hasObjectCountForSameMd5, objectCountForSameMd5;
@dynamic hasDescription_p, description_p;
@dynamic hasControlFlag, controlFlag;
@dynamic hasServerConfig, serverConfig;

typedef struct SnsClassifyTimeLineResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t objectCount;
  uint32_t objectCountForSameMd5;
  uint32_t controlFlag;
  BaseResponse *baseResponse;
  NSString *firstPageMd5;
  NSMutableArray *objectListArray;
  NSString *description_p;
  SnsServerConfig *serverConfig;
} SnsClassifyTimeLineResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsClassifyTimeLineResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "firstPageMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineResponse_FieldNumber_FirstPageMd5,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, firstPageMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "objectCount",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineResponse_FieldNumber_ObjectCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, objectCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "objectListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsObject),
        .number = SnsClassifyTimeLineResponse_FieldNumber_ObjectListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, objectListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectCountForSameMd5",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineResponse_FieldNumber_ObjectCountForSameMd5,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, objectCountForSameMd5),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineResponse_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "controlFlag",
        .dataTypeSpecific.className = NULL,
        .number = SnsClassifyTimeLineResponse_FieldNumber_ControlFlag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, controlFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serverConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsServerConfig),
        .number = SnsClassifyTimeLineResponse_FieldNumber_ServerConfig,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsClassifyTimeLineResponse__storage_, serverConfig),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsClassifyTimeLineResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsClassifyTimeLineResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002L\000\003K\000\004\000ObjectList\000\005U\000\006\000Description\000"
        "\007K\000\010L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Whatsnew61

@implementation Whatsnew61

@dynamic hasLike, like;
@dynamic hasLiked, liked;

typedef struct Whatsnew61__storage_ {
  uint32_t _has_storage_[1];
  uint32_t like;
  uint32_t liked;
} Whatsnew61__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "like",
        .dataTypeSpecific.className = NULL,
        .number = Whatsnew61_FieldNumber_Like,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Whatsnew61__storage_, like),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "liked",
        .dataTypeSpecific.className = NULL,
        .number = Whatsnew61_FieldNumber_Liked,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Whatsnew61__storage_, liked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Whatsnew61 class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Whatsnew61__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsWhatsnewRequest

@implementation SnsWhatsnewRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct SnsWhatsnewRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} SnsWhatsnewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = SnsWhatsnewRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsWhatsnewRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsWhatsnewRequest class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsWhatsnewRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsWhatsnewResponse

@implementation SnsWhatsnewResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasWhatsnew61, whatsnew61;

typedef struct SnsWhatsnewResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  Whatsnew61 *whatsnew61;
} SnsWhatsnewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = SnsWhatsnewResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsWhatsnewResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "whatsnew61",
        .dataTypeSpecific.className = GPBStringifySymbol(Whatsnew61),
        .number = SnsWhatsnewResponse_FieldNumber_Whatsnew61,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsWhatsnewResponse__storage_, whatsnew61),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsWhatsnewResponse class]
                                     rootClass:[MmsnsRoot class]
                                          file:MmsnsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsWhatsnewResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
