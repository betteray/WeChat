// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: security.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Security.pbobjc.h"
#import "Base.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SecurityRoot

@implementation SecurityRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SecurityRoot_FileDescriptor

static GPBFileDescriptor *SecurityRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - InstalledPackageInfo

@implementation InstalledPackageInfo

@dynamic hasPackageName, packageName;
@dynamic hasLabel, label;
@dynamic hasSigMd5, sigMd5;
@dynamic hasFileSize, fileSize;
@dynamic hasApplicationFlag, applicationFlag;

typedef struct InstalledPackageInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fileSize;
  uint32_t applicationFlag;
  NSString *packageName;
  NSString *label;
  NSString *sigMd5;
} InstalledPackageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packageName",
        .dataTypeSpecific.className = NULL,
        .number = InstalledPackageInfo_FieldNumber_PackageName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstalledPackageInfo__storage_, packageName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = InstalledPackageInfo_FieldNumber_Label,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InstalledPackageInfo__storage_, label),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sigMd5",
        .dataTypeSpecific.className = NULL,
        .number = InstalledPackageInfo_FieldNumber_SigMd5,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InstalledPackageInfo__storage_, sigMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.className = NULL,
        .number = InstalledPackageInfo_FieldNumber_FileSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InstalledPackageInfo__storage_, fileSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "applicationFlag",
        .dataTypeSpecific.className = NULL,
        .number = InstalledPackageInfo_FieldNumber_ApplicationFlag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InstalledPackageInfo__storage_, applicationFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstalledPackageInfo class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstalledPackageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\013\000\002E\000\003\004B\000\004\010\000\005\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ST

@implementation ST

@dynamic hasIsMorkLocOpen, isMorkLocOpen;
@dynamic hasMsgLevel, msgLevel;
@dynamic hasIsDbgConnected, isDbgConnected;
@dynamic hasPkgHash3, pkgHash3;
@dynamic hasRatioFwVer, ratioFwVer;
@dynamic hasOsRelVer, osRelVer;
@dynamic hasImei, imei;
@dynamic hasAndroidId, androidId;
@dynamic hasPhoneSerial, phoneSerial;
@dynamic hasPhoneModel, phoneModel;
@dynamic hasCpuCoreCount, cpuCoreCount;
@dynamic hasCpuHw, cpuHw;
@dynamic hasCpuFeatures, cpuFeatures;
@dynamic hasSelfMac, selfMac;
@dynamic hasSsid, ssid;
@dynamic hasBssid, bssid;
@dynamic hasSpInfo, spInfo;
@dynamic hasApninfo, apninfo;
@dynamic hasBuildFp, buildFp;
@dynamic hasBuildBoard, buildBoard;
@dynamic hasBuildBootloader, buildBootloader;
@dynamic hasBuildBrand, buildBrand;
@dynamic hasBuildDevice, buildDevice;
@dynamic hasBuildHw, buildHw;
@dynamic hasBuildProduct, buildProduct;
@dynamic hasManufacturer, manufacturer;
@dynamic hasPhoneNum, phoneNum;
@dynamic hasNetType, netType;
@dynamic hasIsQemuEnv, isQemuEnv;
@dynamic hasHasDupPkg, hasDupPkg;
@dynamic hasHasQikuShadow, hasQikuShadow;
@dynamic hasPkgName, pkgName;
@dynamic hasAppName, appName;
@dynamic hasDataRoot, dataRoot;
@dynamic hasEntranceClassLoaderName, entranceClassLoaderName;
@dynamic mmprocLoadedFilesArray, mmprocLoadedFilesArray_Count;
@dynamic hasRiskScanReqBuffer, riskScanReqBuffer;
@dynamic hasEnvBits, envBits;
@dynamic hasEnabledAccessibilityServiceIds, enabledAccessibilityServiceIds;
@dynamic installedPackageInfosArray, installedPackageInfosArray_Count;
@dynamic hasAccessibilityClickCount, accessibilityClickCount;
@dynamic hasApkleadingMd5, apkleadingMd5;
@dynamic hasClientVersion, clientVersion;
@dynamic hasWxtag, wxtag;
@dynamic hasClientIp, clientIp;
@dynamic hasLanguage, language;
@dynamic hasIsInCalling, isInCalling;
@dynamic hasIsSetScreenLock, isSetScreenLock;
@dynamic neighborBssidlistArray, neighborBssidlistArray_Count;
@dynamic hasIsWifiOpen, isWifiOpen;
@dynamic hasHasXposedStackTrace, hasXposedStackTrace;
@dynamic hasXposedHookedMethods, xposedHookedMethods;
@dynamic hasIsAdbswitchEnabled, isAdbswitchEnabled;
@dynamic hasIsRunningByMonkey, isRunningByMonkey;
@dynamic hasAppInstrumentationClassName, appInstrumentationClassName;
@dynamic hasAmsbinderClassName, amsbinderClassName;
@dynamic hasAmssingletonClassName, amssingletonClassName;
@dynamic hasIsVpnused, isVpnused;
@dynamic hasIsVpnconnected, isVpnconnected;
@dynamic hasPcodes, pcodes;
@dynamic hasHasQcodes, hasQcodes;
@dynamic hasRcodes0, rcodes0;
@dynamic hasRcodes1, rcodes1;
@dynamic hasStid, stid;
@dynamic hasKernelReleaseNumber, kernelReleaseNumber;
@dynamic hasUsbState, usbState;
@dynamic hasApkSignatureMd5, apkSignatureMd5;
@dynamic hasGoogleServiceState, googleServiceState;
@dynamic hasTimeval1, timeval1;
@dynamic hasSpamInfoVersionSeq, spamInfoVersionSeq;
@dynamic hasTbVersionCrc, tbVersionCrc;
@dynamic hasSystemFrameworkMd5, systemFrameworkMd5;
@dynamic hasSystemFrameworkArmMd5, systemFrameworkArmMd5;
@dynamic hasSystemFrameworkArm64Md5, systemFrameworkArm64Md5;
@dynamic hasSystemBinMd5, systemBinMd5;
@dynamic hasSoterUid, soterUid;
@dynamic hasWidevineDeviceId, widevineDeviceId;
@dynamic hasStorageId, storageId;
@dynamic hasOaid, oaid;
@dynamic hasUnknownTag80, unknownTag80;
@dynamic hasMagiskBitCheck, magiskBitCheck;
@dynamic filesModifiedInFrameworkArray, filesModifiedInFrameworkArray_Count;
@dynamic hasWeChatInstallTime, weChatInstallTime;
@dynamic hasSoftConfig, softConfig;
@dynamic hasSoftData, softData;
@dynamic hasTag86, tag86;
@dynamic hasNetWorkInterface, netWorkInterface;
@dynamic hasTvSec88, tvSec88;
@dynamic hasTvUsec89, tvUsec89;
@dynamic hasTag90, tag90;
@dynamic hasPkgHash3Encrypt, pkgHash3Encrypt;
@dynamic hasPkgHash3Crc, pkgHash3Crc;
@dynamic hasEntranceClassLoaderNameEncrypt, entranceClassLoaderNameEncrypt;
@dynamic hasEntranceClassLoaderNameCrc, entranceClassLoaderNameCrc;
@dynamic hasApkleadingMd5Encrypt, apkleadingMd5Encrypt;
@dynamic hasApkleadingMd5Crc, apkleadingMd5Crc;
@dynamic hasAppInstrumentationClassNameEncrypt, appInstrumentationClassNameEncrypt;
@dynamic hasAppInstrumentationClassNameCrc, appInstrumentationClassNameCrc;
@dynamic hasAmsbinderClassNameEncrypt, amsbinderClassNameEncrypt;
@dynamic hasAmsbinderClassNameCrc, amsbinderClassNameCrc;
@dynamic hasAmssingletonClassNameEncrypt, amssingletonClassNameEncrypt;
@dynamic hasAmssingletonClassNameCrc, amssingletonClassNameCrc;
@dynamic hasApkSignatureMd5Encrypt, apkSignatureMd5Encrypt;
@dynamic hasApkSignatureMd5Crc, apkSignatureMd5Crc;
@dynamic hasSystemFrameworkMd5Encrypt, systemFrameworkMd5Encrypt;
@dynamic hasSystemFrameworkMd5Crc, systemFrameworkMd5Crc;
@dynamic hasSystemFrameworkArmMd5Encrypt, systemFrameworkArmMd5Encrypt;
@dynamic hasSystemFrameworkArmMd5Crc, systemFrameworkArmMd5Crc;
@dynamic hasSystemFrameworkArm64Md5Encrypt, systemFrameworkArm64Md5Encrypt;
@dynamic hasSystemFrameworkArm64Md5Crc, systemFrameworkArm64Md5Crc;
@dynamic hasSystemBinMd5Encrypt, systemBinMd5Encrypt;
@dynamic hasSystemBinMd5Crc, systemBinMd5Crc;
@dynamic hasStorageIdencrypt, storageIdencrypt;
@dynamic hasStorageIdcrc, storageIdcrc;
@dynamic hasTvUsec115, tvUsec115;
@dynamic hasUid, uid;
@dynamic hasTag117, tag117;
@dynamic hasSourceDirEncrypt, sourceDirEncrypt;
@dynamic hasSourceDirCrc, sourceDirCrc;
@dynamic hasSourceDir2Encrypt, sourceDir2Encrypt;
@dynamic hasSourceDir2Crc, sourceDir2Crc;
@dynamic illegalLibEncryptArray, illegalLibEncryptArray_Count;
@dynamic hasIllegalLibCrc, illegalLibCrc;
@dynamic hasStackTraceEncrypt, stackTraceEncrypt;
@dynamic hasStackTraceCrc, stackTraceCrc;
@dynamic hasCheck7019, check7019;
@dynamic hasProcSelfMountsCheck, procSelfMountsCheck;
@dynamic hasInlineHookingLibsBits, inlineHookingLibsBits;
@dynamic inlineHookingLibsEncryptArray, inlineHookingLibsEncryptArray_Count;
@dynamic hasInlineHookingLibsCrc, inlineHookingLibsCrc;

typedef struct ST__storage_ {
  uint32_t _has_storage_[4];
  uint32_t isMorkLocOpen;
  uint32_t msgLevel;
  uint32_t isDbgConnected;
  uint32_t cpuCoreCount;
  uint32_t isQemuEnv;
  uint32_t hasDupPkg;
  uint32_t hasQikuShadow;
  uint32_t envBits;
  uint32_t accessibilityClickCount;
  uint32_t isInCalling;
  uint32_t isSetScreenLock;
  uint32_t isWifiOpen;
  uint32_t hasXposedStackTrace;
  uint32_t isAdbswitchEnabled;
  uint32_t isRunningByMonkey;
  uint32_t isVpnused;
  uint32_t isVpnconnected;
  uint32_t usbState;
  uint32_t googleServiceState;
  uint32_t timeval1;
  uint32_t spamInfoVersionSeq;
  uint32_t tbVersionCrc;
  uint32_t unknownTag80;
  uint32_t magiskBitCheck;
  uint32_t weChatInstallTime;
  uint32_t tag86;
  uint32_t tvSec88;
  uint32_t tvUsec89;
  uint32_t tag90;
  uint32_t pkgHash3Crc;
  uint32_t entranceClassLoaderNameCrc;
  uint32_t apkleadingMd5Crc;
  uint32_t appInstrumentationClassNameCrc;
  uint32_t amsbinderClassNameCrc;
  uint32_t amssingletonClassNameCrc;
  uint32_t apkSignatureMd5Crc;
  uint32_t systemFrameworkMd5Crc;
  uint32_t systemFrameworkArmMd5Crc;
  uint32_t systemFrameworkArm64Md5Crc;
  uint32_t systemBinMd5Crc;
  uint32_t storageIdcrc;
  uint32_t tvUsec115;
  uint32_t uid;
  uint32_t tag117;
  uint32_t sourceDirCrc;
  uint32_t sourceDir2Crc;
  uint32_t illegalLibCrc;
  uint32_t stackTraceCrc;
  uint32_t procSelfMountsCheck;
  uint32_t inlineHookingLibsBits;
  uint32_t inlineHookingLibsCrc;
  NSString *pkgHash3;
  NSString *ratioFwVer;
  NSString *osRelVer;
  NSString *imei;
  NSString *androidId;
  NSString *phoneSerial;
  NSString *phoneModel;
  NSString *cpuHw;
  NSString *cpuFeatures;
  NSString *selfMac;
  NSString *ssid;
  NSString *bssid;
  NSString *spInfo;
  NSString *apninfo;
  NSString *buildFp;
  NSString *buildBoard;
  NSString *buildBootloader;
  NSString *buildBrand;
  NSString *buildDevice;
  NSString *buildHw;
  NSString *buildProduct;
  NSString *manufacturer;
  NSString *phoneNum;
  NSString *netType;
  NSString *pkgName;
  NSString *appName;
  NSString *dataRoot;
  NSString *entranceClassLoaderName;
  NSMutableArray *mmprocLoadedFilesArray;
  NSString *riskScanReqBuffer;
  NSString *enabledAccessibilityServiceIds;
  NSMutableArray *installedPackageInfosArray;
  NSString *apkleadingMd5;
  NSString *clientVersion;
  NSString *wxtag;
  NSString *clientIp;
  NSString *language;
  NSMutableArray *neighborBssidlistArray;
  NSString *xposedHookedMethods;
  NSString *appInstrumentationClassName;
  NSString *amsbinderClassName;
  NSString *amssingletonClassName;
  NSString *pcodes;
  NSString *hasQcodes;
  NSString *rcodes0;
  NSString *rcodes1;
  NSString *stid;
  NSString *kernelReleaseNumber;
  NSString *apkSignatureMd5;
  NSString *systemFrameworkMd5;
  NSString *systemFrameworkArmMd5;
  NSString *systemFrameworkArm64Md5;
  NSString *systemBinMd5;
  NSString *soterUid;
  NSString *widevineDeviceId;
  NSString *storageId;
  NSString *oaid;
  NSMutableArray *filesModifiedInFrameworkArray;
  NSData *softConfig;
  NSData *softData;
  NSString *netWorkInterface;
  NSData *pkgHash3Encrypt;
  NSData *entranceClassLoaderNameEncrypt;
  NSData *apkleadingMd5Encrypt;
  NSData *appInstrumentationClassNameEncrypt;
  NSData *amsbinderClassNameEncrypt;
  NSData *amssingletonClassNameEncrypt;
  NSData *apkSignatureMd5Encrypt;
  NSData *systemFrameworkMd5Encrypt;
  NSData *systemFrameworkArmMd5Encrypt;
  NSData *systemFrameworkArm64Md5Encrypt;
  NSData *systemBinMd5Encrypt;
  NSData *storageIdencrypt;
  NSData *sourceDirEncrypt;
  NSData *sourceDir2Encrypt;
  NSMutableArray *illegalLibEncryptArray;
  NSData *stackTraceEncrypt;
  ST_CheckAddIn7019 *check7019;
  NSMutableArray *inlineHookingLibsEncryptArray;
} ST__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isMorkLocOpen",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsMorkLocOpen,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ST__storage_, isMorkLocOpen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgLevel",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_MsgLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ST__storage_, msgLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isDbgConnected",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsDbgConnected,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ST__storage_, isDbgConnected),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pkgHash3",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PkgHash3,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ST__storage_, pkgHash3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ratioFwVer",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_RatioFwVer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ST__storage_, ratioFwVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osRelVer",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_OsRelVer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ST__storage_, osRelVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imei",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Imei,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ST__storage_, imei),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidId",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AndroidId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ST__storage_, androidId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneSerial",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PhoneSerial,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ST__storage_, phoneSerial),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneModel",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PhoneModel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ST__storage_, phoneModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpuCoreCount",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_CpuCoreCount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ST__storage_, cpuCoreCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cpuHw",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_CpuHw,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ST__storage_, cpuHw),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cpuFeatures",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_CpuFeatures,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ST__storage_, cpuFeatures),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "selfMac",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SelfMac,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ST__storage_, selfMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ssid",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Ssid,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ST__storage_, ssid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bssid",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Bssid,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ST__storage_, bssid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "spInfo",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SpInfo,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ST__storage_, spInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apninfo",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Apninfo,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ST__storage_, apninfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildFp",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildFp,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(ST__storage_, buildFp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildBoard",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildBoard,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(ST__storage_, buildBoard),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildBootloader",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildBootloader,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(ST__storage_, buildBootloader),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildBrand",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildBrand,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(ST__storage_, buildBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildDevice",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildDevice,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(ST__storage_, buildDevice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildHw",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildHw,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(ST__storage_, buildHw),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildProduct",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_BuildProduct,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(ST__storage_, buildProduct),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "manufacturer",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Manufacturer,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(ST__storage_, manufacturer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNum",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PhoneNum,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(ST__storage_, phoneNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_NetType,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(ST__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isQemuEnv",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsQemuEnv,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(ST__storage_, isQemuEnv),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasDupPkg",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_HasDupPkg,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(ST__storage_, hasDupPkg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasQikuShadow",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_HasQikuShadow,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(ST__storage_, hasQikuShadow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pkgName",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PkgName,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(ST__storage_, pkgName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appName",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AppName,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(ST__storage_, appName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataRoot",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_DataRoot,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(ST__storage_, dataRoot),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entranceClassLoaderName",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_EntranceClassLoaderName,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(ST__storage_, entranceClassLoaderName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mmprocLoadedFilesArray",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_MmprocLoadedFilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ST__storage_, mmprocLoadedFilesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "riskScanReqBuffer",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_RiskScanReqBuffer,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(ST__storage_, riskScanReqBuffer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "envBits",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_EnvBits,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(ST__storage_, envBits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "enabledAccessibilityServiceIds",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_EnabledAccessibilityServiceIds,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(ST__storage_, enabledAccessibilityServiceIds),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "installedPackageInfosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InstalledPackageInfo),
        .number = ST_FieldNumber_InstalledPackageInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ST__storage_, installedPackageInfosArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accessibilityClickCount",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AccessibilityClickCount,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(ST__storage_, accessibilityClickCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "apkleadingMd5",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ApkleadingMd5,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(ST__storage_, apkleadingMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientVersion",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ClientVersion,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(ST__storage_, clientVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wxtag",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Wxtag,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(ST__storage_, wxtag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientIp",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ClientIp,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(ST__storage_, clientIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Language,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(ST__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isInCalling",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsInCalling,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(ST__storage_, isInCalling),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isSetScreenLock",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsSetScreenLock,
        .hasIndex = 45,
        .offset = (uint32_t)offsetof(ST__storage_, isSetScreenLock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "neighborBssidlistArray",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_NeighborBssidlistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ST__storage_, neighborBssidlistArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isWifiOpen",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsWifiOpen,
        .hasIndex = 46,
        .offset = (uint32_t)offsetof(ST__storage_, isWifiOpen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasXposedStackTrace",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_HasXposedStackTrace,
        .hasIndex = 47,
        .offset = (uint32_t)offsetof(ST__storage_, hasXposedStackTrace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "xposedHookedMethods",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_XposedHookedMethods,
        .hasIndex = 48,
        .offset = (uint32_t)offsetof(ST__storage_, xposedHookedMethods),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAdbswitchEnabled",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsAdbswitchEnabled,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(ST__storage_, isAdbswitchEnabled),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isRunningByMonkey",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsRunningByMonkey,
        .hasIndex = 50,
        .offset = (uint32_t)offsetof(ST__storage_, isRunningByMonkey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "appInstrumentationClassName",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AppInstrumentationClassName,
        .hasIndex = 51,
        .offset = (uint32_t)offsetof(ST__storage_, appInstrumentationClassName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amsbinderClassName",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AmsbinderClassName,
        .hasIndex = 52,
        .offset = (uint32_t)offsetof(ST__storage_, amsbinderClassName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amssingletonClassName",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AmssingletonClassName,
        .hasIndex = 53,
        .offset = (uint32_t)offsetof(ST__storage_, amssingletonClassName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isVpnused",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsVpnused,
        .hasIndex = 54,
        .offset = (uint32_t)offsetof(ST__storage_, isVpnused),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isVpnconnected",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IsVpnconnected,
        .hasIndex = 55,
        .offset = (uint32_t)offsetof(ST__storage_, isVpnconnected),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pcodes",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Pcodes,
        .hasIndex = 56,
        .offset = (uint32_t)offsetof(ST__storage_, pcodes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasQcodes",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_HasQcodes,
        .hasIndex = 57,
        .offset = (uint32_t)offsetof(ST__storage_, hasQcodes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rcodes0",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Rcodes0,
        .hasIndex = 58,
        .offset = (uint32_t)offsetof(ST__storage_, rcodes0),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rcodes1",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Rcodes1,
        .hasIndex = 59,
        .offset = (uint32_t)offsetof(ST__storage_, rcodes1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stid",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Stid,
        .hasIndex = 60,
        .offset = (uint32_t)offsetof(ST__storage_, stid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kernelReleaseNumber",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_KernelReleaseNumber,
        .hasIndex = 61,
        .offset = (uint32_t)offsetof(ST__storage_, kernelReleaseNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usbState",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_UsbState,
        .hasIndex = 62,
        .offset = (uint32_t)offsetof(ST__storage_, usbState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "apkSignatureMd5",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ApkSignatureMd5,
        .hasIndex = 63,
        .offset = (uint32_t)offsetof(ST__storage_, apkSignatureMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "googleServiceState",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_GoogleServiceState,
        .hasIndex = 64,
        .offset = (uint32_t)offsetof(ST__storage_, googleServiceState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeval1",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Timeval1,
        .hasIndex = 65,
        .offset = (uint32_t)offsetof(ST__storage_, timeval1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "spamInfoVersionSeq",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SpamInfoVersionSeq,
        .hasIndex = 66,
        .offset = (uint32_t)offsetof(ST__storage_, spamInfoVersionSeq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tbVersionCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_TbVersionCrc,
        .hasIndex = 67,
        .offset = (uint32_t)offsetof(ST__storage_, tbVersionCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemFrameworkMd5",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkMd5,
        .hasIndex = 68,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "systemFrameworkArmMd5",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkArmMd5,
        .hasIndex = 69,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkArmMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "systemFrameworkArm64Md5",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkArm64Md5,
        .hasIndex = 70,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkArm64Md5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "systemBinMd5",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemBinMd5,
        .hasIndex = 71,
        .offset = (uint32_t)offsetof(ST__storage_, systemBinMd5),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "soterUid",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SoterUid,
        .hasIndex = 72,
        .offset = (uint32_t)offsetof(ST__storage_, soterUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "widevineDeviceId",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_WidevineDeviceId,
        .hasIndex = 73,
        .offset = (uint32_t)offsetof(ST__storage_, widevineDeviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storageId",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_StorageId,
        .hasIndex = 74,
        .offset = (uint32_t)offsetof(ST__storage_, storageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oaid",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Oaid,
        .hasIndex = 75,
        .offset = (uint32_t)offsetof(ST__storage_, oaid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unknownTag80",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_UnknownTag80,
        .hasIndex = 76,
        .offset = (uint32_t)offsetof(ST__storage_, unknownTag80),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "magiskBitCheck",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_MagiskBitCheck,
        .hasIndex = 77,
        .offset = (uint32_t)offsetof(ST__storage_, magiskBitCheck),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "filesModifiedInFrameworkArray",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_FilesModifiedInFrameworkArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ST__storage_, filesModifiedInFrameworkArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weChatInstallTime",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_WeChatInstallTime,
        .hasIndex = 78,
        .offset = (uint32_t)offsetof(ST__storage_, weChatInstallTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "softConfig",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SoftConfig,
        .hasIndex = 79,
        .offset = (uint32_t)offsetof(ST__storage_, softConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "softData",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SoftData,
        .hasIndex = 80,
        .offset = (uint32_t)offsetof(ST__storage_, softData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tag86",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Tag86,
        .hasIndex = 81,
        .offset = (uint32_t)offsetof(ST__storage_, tag86),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "netWorkInterface",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_NetWorkInterface,
        .hasIndex = 82,
        .offset = (uint32_t)offsetof(ST__storage_, netWorkInterface),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tvSec88",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_TvSec88,
        .hasIndex = 83,
        .offset = (uint32_t)offsetof(ST__storage_, tvSec88),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tvUsec89",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_TvUsec89,
        .hasIndex = 84,
        .offset = (uint32_t)offsetof(ST__storage_, tvUsec89),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tag90",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Tag90,
        .hasIndex = 85,
        .offset = (uint32_t)offsetof(ST__storage_, tag90),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pkgHash3Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PkgHash3Encrypt,
        .hasIndex = 86,
        .offset = (uint32_t)offsetof(ST__storage_, pkgHash3Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "pkgHash3Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_PkgHash3Crc,
        .hasIndex = 87,
        .offset = (uint32_t)offsetof(ST__storage_, pkgHash3Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "entranceClassLoaderNameEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_EntranceClassLoaderNameEncrypt,
        .hasIndex = 88,
        .offset = (uint32_t)offsetof(ST__storage_, entranceClassLoaderNameEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "entranceClassLoaderNameCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_EntranceClassLoaderNameCrc,
        .hasIndex = 89,
        .offset = (uint32_t)offsetof(ST__storage_, entranceClassLoaderNameCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "apkleadingMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ApkleadingMd5Encrypt,
        .hasIndex = 90,
        .offset = (uint32_t)offsetof(ST__storage_, apkleadingMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "apkleadingMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ApkleadingMd5Crc,
        .hasIndex = 91,
        .offset = (uint32_t)offsetof(ST__storage_, apkleadingMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "appInstrumentationClassNameEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AppInstrumentationClassNameEncrypt,
        .hasIndex = 92,
        .offset = (uint32_t)offsetof(ST__storage_, appInstrumentationClassNameEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "appInstrumentationClassNameCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AppInstrumentationClassNameCrc,
        .hasIndex = 93,
        .offset = (uint32_t)offsetof(ST__storage_, appInstrumentationClassNameCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amsbinderClassNameEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AmsbinderClassNameEncrypt,
        .hasIndex = 94,
        .offset = (uint32_t)offsetof(ST__storage_, amsbinderClassNameEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amsbinderClassNameCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AmsbinderClassNameCrc,
        .hasIndex = 95,
        .offset = (uint32_t)offsetof(ST__storage_, amsbinderClassNameCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amssingletonClassNameEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AmssingletonClassNameEncrypt,
        .hasIndex = 96,
        .offset = (uint32_t)offsetof(ST__storage_, amssingletonClassNameEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amssingletonClassNameCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_AmssingletonClassNameCrc,
        .hasIndex = 97,
        .offset = (uint32_t)offsetof(ST__storage_, amssingletonClassNameCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "apkSignatureMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ApkSignatureMd5Encrypt,
        .hasIndex = 98,
        .offset = (uint32_t)offsetof(ST__storage_, apkSignatureMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "apkSignatureMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ApkSignatureMd5Crc,
        .hasIndex = 99,
        .offset = (uint32_t)offsetof(ST__storage_, apkSignatureMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemFrameworkMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkMd5Encrypt,
        .hasIndex = 100,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemFrameworkMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkMd5Crc,
        .hasIndex = 101,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemFrameworkArmMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkArmMd5Encrypt,
        .hasIndex = 102,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkArmMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemFrameworkArmMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkArmMd5Crc,
        .hasIndex = 103,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkArmMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemFrameworkArm64Md5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkArm64Md5Encrypt,
        .hasIndex = 104,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkArm64Md5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemFrameworkArm64Md5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemFrameworkArm64Md5Crc,
        .hasIndex = 105,
        .offset = (uint32_t)offsetof(ST__storage_, systemFrameworkArm64Md5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemBinMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemBinMd5Encrypt,
        .hasIndex = 106,
        .offset = (uint32_t)offsetof(ST__storage_, systemBinMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemBinMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SystemBinMd5Crc,
        .hasIndex = 107,
        .offset = (uint32_t)offsetof(ST__storage_, systemBinMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "storageIdencrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_StorageIdencrypt,
        .hasIndex = 108,
        .offset = (uint32_t)offsetof(ST__storage_, storageIdencrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "storageIdcrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_StorageIdcrc,
        .hasIndex = 109,
        .offset = (uint32_t)offsetof(ST__storage_, storageIdcrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tvUsec115",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_TvUsec115,
        .hasIndex = 110,
        .offset = (uint32_t)offsetof(ST__storage_, tvUsec115),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Uid,
        .hasIndex = 111,
        .offset = (uint32_t)offsetof(ST__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tag117",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_Tag117,
        .hasIndex = 112,
        .offset = (uint32_t)offsetof(ST__storage_, tag117),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sourceDirEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SourceDirEncrypt,
        .hasIndex = 113,
        .offset = (uint32_t)offsetof(ST__storage_, sourceDirEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sourceDirCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SourceDirCrc,
        .hasIndex = 114,
        .offset = (uint32_t)offsetof(ST__storage_, sourceDirCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sourceDir2Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SourceDir2Encrypt,
        .hasIndex = 115,
        .offset = (uint32_t)offsetof(ST__storage_, sourceDir2Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sourceDir2Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_SourceDir2Crc,
        .hasIndex = 116,
        .offset = (uint32_t)offsetof(ST__storage_, sourceDir2Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "illegalLibEncryptArray",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IllegalLibEncryptArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ST__storage_, illegalLibEncryptArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "illegalLibCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_IllegalLibCrc,
        .hasIndex = 117,
        .offset = (uint32_t)offsetof(ST__storage_, illegalLibCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "stackTraceEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_StackTraceEncrypt,
        .hasIndex = 118,
        .offset = (uint32_t)offsetof(ST__storage_, stackTraceEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "stackTraceCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_StackTraceCrc,
        .hasIndex = 119,
        .offset = (uint32_t)offsetof(ST__storage_, stackTraceCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "check7019",
        .dataTypeSpecific.className = GPBStringifySymbol(ST_CheckAddIn7019),
        .number = ST_FieldNumber_Check7019,
        .hasIndex = 120,
        .offset = (uint32_t)offsetof(ST__storage_, check7019),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "procSelfMountsCheck",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_ProcSelfMountsCheck,
        .hasIndex = 121,
        .offset = (uint32_t)offsetof(ST__storage_, procSelfMountsCheck),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "inlineHookingLibsBits",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_InlineHookingLibsBits,
        .hasIndex = 122,
        .offset = (uint32_t)offsetof(ST__storage_, inlineHookingLibsBits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "inlineHookingLibsEncryptArray",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_InlineHookingLibsEncryptArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ST__storage_, inlineHookingLibsEncryptArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "inlineHookingLibsCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_FieldNumber_InlineHookingLibsCrc,
        .hasIndex = 123,
        .offset = (uint32_t)offsetof(ST__storage_, inlineHookingLibsCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ST class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ST__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\177\001M\000\002H\000\003N\000\004H\000\005J\000\006H\000\007d\000\010HA\000\tK\000\nJ\000\013L\000\014DA\000\r"
        "K\000\016Eb\000\017d\000\020e\000\021F\000\022d\003\000\023FA\000\024J\000\025O\000\026J\000\027K\000\030FA\000\031"
        "L\000\032L\000\033H\000\034G\000\035I\000\036I\000\037M\000 G\000!G\000\"H\000#W\000$\000MMProc"
        "LoadedFiles\000%Q\000&G\000\'^\000(\000InstalledPackageI"
        "nfos\000)W\000*d\007B\000+M\000,c\002\000-GA\000.H\000/K\0000O\0001\000Neigh"
        "borBSSIDList\0002J\0003S\0004S\0005Cc\014\0006Q\0007[\0008d\016\0009d\021"
        "\000:Cc\003\000;Cc\010\000<b\004\000=DE\000>b\005\000\?b\005\000@d\000AS\000BH\000CO\000D"
        "R\000FR\000GL\000HPB\000ISB\000JUB\000KJB\000LH\000MOA\000NHA\000Od\000PL"
        "\000QN\000R\000FilesModifiedInFramework\000SQ\000TJ\000UH\000"
        "VE\000WP\000X\002\243\202\000Y\002\244\202\000ZE\000[O\000\\K\000]^\000^Z\000_d\007I\000`d\007E"
        "\000a_\003\000b^\000cd\025\000dd\021\000ed\030\000fd\024\000gV\000hR\000iPI\000jPE\000kS"
        "I\000lSE\000mUI\000nUE\000oJI\000pJE\000qHb\006\000rHb\002\000s\002\244\203\000uF\000"
        "vP\000wL\000xQ\000yM\000z\000IllegalLibEncrypt\000{M\000|Q\000}M"
        "\000\177S\000\200\001U\000\201\001\000InlineHookingLibsEncrypt\000\202\001T\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ST_CheckAddIn7019

@implementation ST_CheckAddIn7019

@dynamic hasServiceListMd5Encrypt, serviceListMd5Encrypt;
@dynamic hasServiceListMd5Crc, serviceListMd5Crc;
@dynamic hasSystemAppMd5Encrypt, systemAppMd5Encrypt;
@dynamic hasSystemAppMd5Crc, systemAppMd5Crc;
@dynamic hasSystemPrivAppMd5Encrypt, systemPrivAppMd5Encrypt;
@dynamic hasSystemPrivAppMd5Crc, systemPrivAppMd5Crc;
@dynamic hasVendorAppMd5Encrypt, vendorAppMd5Encrypt;
@dynamic hasVendorAppMd5Crc, vendorAppMd5Crc;
@dynamic hasProductAppMd5Encrypt, productAppMd5Encrypt;
@dynamic hasProductAppMd5Crc, productAppMd5Crc;
@dynamic hasSystemBinLsEncrypt, systemBinLsEncrypt;
@dynamic hasSystemBinLsCrc, systemBinLsCrc;
@dynamic hasSystemFrameworkFrameworkResEncrypt, systemFrameworkFrameworkResEncrypt;
@dynamic hasSystemFrameworkFrameworkResCrc, systemFrameworkFrameworkResCrc;
@dynamic hasSystemLibLibcPlusPlusEncrypt, systemLibLibcPlusPlusEncrypt;
@dynamic hasSystemLibLibcPlusPlusCrc, systemLibLibcPlusPlusCrc;
@dynamic hasSystemBinLinkerEncrypt, systemBinLinkerEncrypt;
@dynamic hasSystemBinLinkerCrc, systemBinLinkerCrc;
@dynamic hasRootEncrypt, rootEncrypt;
@dynamic hasRootCrc, rootCrc;
@dynamic hasSystemEncrypt, systemEncrypt;
@dynamic hasSystemCrc, systemCrc;
@dynamic hasDataEncrypt, dataEncrypt;
@dynamic hasDataCrc, dataCrc;
@dynamic hasBuildFinderPrintEncrypt, buildFinderPrintEncrypt;
@dynamic hasBuildFinderPrintCrc, buildFinderPrintCrc;
@dynamic hasProcVersionEncrypt, procVersionEncrypt;
@dynamic hasProcVersionCrc, procVersionCrc;
@dynamic hasAllPkgNameMd5Encrypt, allPkgNameMd5Encrypt;
@dynamic hasAllPkgNameMd5Crc, allPkgNameMd5Crc;

typedef struct ST_CheckAddIn7019__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serviceListMd5Crc;
  uint32_t systemAppMd5Crc;
  uint32_t systemPrivAppMd5Crc;
  uint32_t vendorAppMd5Crc;
  uint32_t productAppMd5Crc;
  uint32_t systemBinLsCrc;
  uint32_t systemFrameworkFrameworkResCrc;
  uint32_t systemLibLibcPlusPlusCrc;
  uint32_t systemBinLinkerCrc;
  uint32_t rootCrc;
  uint32_t systemCrc;
  uint32_t dataCrc;
  uint32_t buildFinderPrintCrc;
  uint32_t procVersionCrc;
  uint32_t allPkgNameMd5Crc;
  NSData *serviceListMd5Encrypt;
  NSData *systemAppMd5Encrypt;
  NSData *systemPrivAppMd5Encrypt;
  NSData *vendorAppMd5Encrypt;
  NSData *productAppMd5Encrypt;
  NSData *systemBinLsEncrypt;
  NSData *systemFrameworkFrameworkResEncrypt;
  NSData *systemLibLibcPlusPlusEncrypt;
  NSData *systemBinLinkerEncrypt;
  NSData *rootEncrypt;
  NSData *systemEncrypt;
  NSData *dataEncrypt;
  NSData *buildFinderPrintEncrypt;
  NSData *procVersionEncrypt;
  NSData *allPkgNameMd5Encrypt;
} ST_CheckAddIn7019__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceListMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_ServiceListMd5Encrypt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, serviceListMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "serviceListMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_ServiceListMd5Crc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, serviceListMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemAppMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemAppMd5Encrypt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemAppMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemAppMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemAppMd5Crc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemAppMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemPrivAppMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemPrivAppMd5Encrypt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemPrivAppMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemPrivAppMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemPrivAppMd5Crc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemPrivAppMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "vendorAppMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_VendorAppMd5Encrypt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, vendorAppMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "vendorAppMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_VendorAppMd5Crc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, vendorAppMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productAppMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_ProductAppMd5Encrypt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, productAppMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "productAppMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_ProductAppMd5Crc,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, productAppMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemBinLsEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemBinLsEncrypt,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemBinLsEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemBinLsCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemBinLsCrc,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemBinLsCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemFrameworkFrameworkResEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemFrameworkFrameworkResEncrypt,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemFrameworkFrameworkResEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemFrameworkFrameworkResCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemFrameworkFrameworkResCrc,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemFrameworkFrameworkResCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemLibLibcPlusPlusEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemLibLibcPlusPlusEncrypt,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemLibLibcPlusPlusEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemLibLibcPlusPlusCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemLibLibcPlusPlusCrc,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemLibLibcPlusPlusCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemBinLinkerEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemBinLinkerEncrypt,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemBinLinkerEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemBinLinkerCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemBinLinkerCrc,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemBinLinkerCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rootEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_RootEncrypt,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, rootEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "rootCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_RootCrc,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, rootCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "systemEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemEncrypt,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "systemCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_SystemCrc,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, systemCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_DataEncrypt,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, dataEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dataCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_DataCrc,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, dataCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buildFinderPrintEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_BuildFinderPrintEncrypt,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, buildFinderPrintEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "buildFinderPrintCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_BuildFinderPrintCrc,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, buildFinderPrintCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "procVersionEncrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_ProcVersionEncrypt,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, procVersionEncrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "procVersionCrc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_ProcVersionCrc,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, procVersionCrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "allPkgNameMd5Encrypt",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_AllPkgNameMd5Encrypt,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, allPkgNameMd5Encrypt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "allPkgNameMd5Crc",
        .dataTypeSpecific.className = NULL,
        .number = ST_CheckAddIn7019_FieldNumber_AllPkgNameMd5Crc,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(ST_CheckAddIn7019__storage_, allPkgNameMd5Crc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ST_CheckAddIn7019 class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ST_CheckAddIn7019__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\036\001U\000\002Q\000\003JI\000\004JE\000\005NI\000\006NE\000\007JI\000\010JE\000\tKI\000\nKE\000\013"
        "R\000\014N\000\r_\003\000\016^\000\017\\\000\020X\000\021V\000\022R\000\023K\000\024G\000\025M\000\026I\000\027K\000\030"
        "G\000\031W\000\032S\000\033R\000\034N\000\035KI\000\036KE\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ST)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientSpamInfo

@implementation ClientSpamInfo

@dynamic hasCcdcc, ccdcc;
@dynamic hasCcdts, ccdts;
@dynamic hasSt, st;

typedef struct ClientSpamInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ccdcc;
  uint32_t ccdts;
  ST *st;
} ClientSpamInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ccdcc",
        .dataTypeSpecific.className = NULL,
        .number = ClientSpamInfo_FieldNumber_Ccdcc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientSpamInfo__storage_, ccdcc),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ccdts",
        .dataTypeSpecific.className = NULL,
        .number = ClientSpamInfo_FieldNumber_Ccdts,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientSpamInfo__storage_, ccdts),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "st",
        .dataTypeSpecific.className = GPBStringifySymbol(ST),
        .number = ClientSpamInfo_FieldNumber_St,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientSpamInfo__storage_, st),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientSpamInfo class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientSpamInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WCSTF

@implementation WCSTF

@dynamic hasSt, st;
@dynamic hasEt, et;
@dynamic hasCc, cc;
@dynamic ctArray, ctArray_Count;

typedef struct WCSTF__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *ctArray;
  uint64_t st;
  uint64_t et;
  uint64_t cc;
} WCSTF__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "st",
        .dataTypeSpecific.className = NULL,
        .number = WCSTF_FieldNumber_St,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WCSTF__storage_, st),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "et",
        .dataTypeSpecific.className = NULL,
        .number = WCSTF_FieldNumber_Et,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WCSTF__storage_, et),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "cc",
        .dataTypeSpecific.className = NULL,
        .number = WCSTF_FieldNumber_Cc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WCSTF__storage_, cc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ctArray",
        .dataTypeSpecific.className = NULL,
        .number = WCSTF_FieldNumber_CtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WCSTF__storage_, ctArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WCSTF class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WCSTF__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WCSTE

@implementation WCSTE

@dynamic hasContext, context;
@dynamic hasSt, st;
@dynamic hasEt, et;
@dynamic hasIec, iec;
@dynamic hasTec, tec;
@dynamic hasAsst, asst;
@dynamic hasPss, pss;
@dynamic hasTlmj, tlmj;
@dynamic hasTlmn, tlmn;
@dynamic hasThmj, thmj;
@dynamic hasThmn, thmn;
@dynamic hasSz, sz;

typedef struct WCSTE__storage_ {
  uint32_t _has_storage_[1];
  uint32_t st;
  uint32_t et;
  uint32_t iec;
  uint32_t tec;
  uint32_t asst;
  NSString *context;
  uint64_t pss;
  uint64_t tlmj;
  uint64_t tlmn;
  uint64_t thmj;
  uint64_t thmn;
  uint64_t sz;
} WCSTE__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "context",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Context,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WCSTE__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "st",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_St,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WCSTE__storage_, st),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "et",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Et,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WCSTE__storage_, et),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iec",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Iec,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WCSTE__storage_, iec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tec",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Tec,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WCSTE__storage_, tec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "asst",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Asst,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WCSTE__storage_, asst),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pss",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Pss,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WCSTE__storage_, pss),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tlmj",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Tlmj,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WCSTE__storage_, tlmj),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tlmn",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Tlmn,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WCSTE__storage_, tlmn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "thmj",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Thmj,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(WCSTE__storage_, thmj),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "thmn",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Thmn,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(WCSTE__storage_, thmn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sz",
        .dataTypeSpecific.className = NULL,
        .number = WCSTE_FieldNumber_Sz,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(WCSTE__storage_, sz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WCSTE class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WCSTE__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SensorData2

@implementation SensorData2

@dynamic hasWhere, where;
@dynamic hasContext, context;
@dynamic hasCount, count;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic hasCollectTime, collectTime;
@dynamic hasTag7, tag7;
@dynamic groupItemsArray, groupItemsArray_Count;
@dynamic hasTag11, tag11;

typedef struct SensorData2__storage_ {
  uint32_t _has_storage_[1];
  uint32_t where;
  uint32_t count;
  uint32_t tag7;
  uint32_t tag11;
  NSString *context;
  NSMutableArray *groupItemsArray;
  uint64_t startTime;
  uint64_t endTime;
  uint64_t collectTime;
} SensorData2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "where",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_Where,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SensorData2__storage_, where),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "context",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_Context,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SensorData2__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SensorData2__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_StartTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SensorData2__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SensorData2__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "collectTime",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_CollectTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SensorData2__storage_, collectTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tag7",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_Tag7,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SensorData2__storage_, tag7),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SensorData2_GroupItem),
        .number = SensorData2_FieldNumber_GroupItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SensorData2__storage_, groupItemsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tag11",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_FieldNumber_Tag11,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SensorData2__storage_, tag11),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SensorData2 class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SensorData2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\004\t\000\005\007\000\006\013\000\n\000groupItems\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SensorData2_SensorEvent

@implementation SensorData2_SensorEvent

@dynamic hasValue1, value1;
@dynamic hasValue2, value2;
@dynamic hasValue3, value3;
@dynamic hasTimestamp, timestamp;

typedef struct SensorData2_SensorEvent__storage_ {
  uint32_t _has_storage_[1];
  float value1;
  float value2;
  float value3;
  uint32_t timestamp;
} SensorData2_SensorEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value1",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_SensorEvent_FieldNumber_Value1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SensorData2_SensorEvent__storage_, value1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "value2",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_SensorEvent_FieldNumber_Value2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SensorData2_SensorEvent__storage_, value2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "value3",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_SensorEvent_FieldNumber_Value3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SensorData2_SensorEvent__storage_, value3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_SensorEvent_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SensorData2_SensorEvent__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SensorData2_SensorEvent class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SensorData2_SensorEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(SensorData2)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SensorData2_GroupItem

@implementation SensorData2_GroupItem

@dynamic hasSensorType, sensorType;
@dynamic eventsArray, eventsArray_Count;

typedef struct SensorData2_GroupItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sensorType;
  NSMutableArray *eventsArray;
} SensorData2_GroupItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorType",
        .dataTypeSpecific.className = NULL,
        .number = SensorData2_GroupItem_FieldNumber_SensorType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SensorData2_GroupItem__storage_, sensorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "eventsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SensorData2_SensorEvent),
        .number = SensorData2_GroupItem_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SensorData2_GroupItem__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SensorData2_GroupItem class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SensorData2_GroupItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(SensorData2)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FPKeyVal

@implementation FPKeyVal

@dynamic hasKey, key;
@dynamic hasValue, value;

typedef struct FPKeyVal__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} FPKeyVal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = FPKeyVal_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FPKeyVal__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = FPKeyVal_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FPKeyVal__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FPKeyVal class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FPKeyVal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FPKeyVals

@implementation FPKeyVals

@dynamic keyValArray, keyValArray_Count;

typedef struct FPKeyVals__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keyValArray;
} FPKeyVals__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyValArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FPKeyVal),
        .number = FPKeyVals_FieldNumber_KeyValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FPKeyVals__storage_, keyValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FPKeyVals class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FPKeyVals__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000keyVal\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FPDevice

@implementation FPDevice

@dynamic hasKeyvals, keyvals;
@dynamic hasUnknown2, unknown2;

typedef struct FPDevice__storage_ {
  uint32_t _has_storage_[1];
  FPKeyVals *keyvals;
  NSString *unknown2;
} FPDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyvals",
        .dataTypeSpecific.className = GPBStringifySymbol(FPKeyVals),
        .number = FPDevice_FieldNumber_Keyvals,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FPDevice__storage_, keyvals),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unknown2",
        .dataTypeSpecific.className = NULL,
        .number = FPDevice_FieldNumber_Unknown2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FPDevice__storage_, unknown2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FPDevice class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FPDevice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientCheckData

@implementation ClientCheckData

@dynamic hasVersion, version;
@dynamic hasType, type;
@dynamic hasClientCheckData, clientCheckData;
@dynamic hasTimeStamp, timeStamp;
@dynamic hasDataType, dataType;
@dynamic hasStatus, status;

typedef struct ClientCheckData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t dataType;
  uint32_t status;
  NSString *version;
  NSData *clientCheckData;
  uint64_t timeStamp;
} ClientCheckData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = ClientCheckData_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientCheckData__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ClientCheckData_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientCheckData__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientCheckData",
        .dataTypeSpecific.className = NULL,
        .number = ClientCheckData_FieldNumber_ClientCheckData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientCheckData__storage_, clientCheckData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = ClientCheckData_FieldNumber_TimeStamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientCheckData__storage_, timeStamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.className = NULL,
        .number = ClientCheckData_FieldNumber_DataType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClientCheckData__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = ClientCheckData_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ClientCheckData__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientCheckData class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientCheckData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\017\000\004\t\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ClientCheckData_DataType

GPBEnumDescriptor *ClientCheckData_DataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CcdataXml\000CcdataText\000CcdataBinary\000Ccdata"
        "PbRaw\000CcdataPbZip\000CcdataPbZipWb\000CcdataPb"
        "Wb\000";
    static const int32_t values[] = {
        ClientCheckData_DataType_CcdataXml,
        ClientCheckData_DataType_CcdataText,
        ClientCheckData_DataType_CcdataBinary,
        ClientCheckData_DataType_CcdataPbRaw,
        ClientCheckData_DataType_CcdataPbZip,
        ClientCheckData_DataType_CcdataPbZipWb,
        ClientCheckData_DataType_CcdataPbWb,
    };
    static const char *extraTextFormatInfo = "\007\000c\003\343\000\001c\003\344\000\002c\003\346\000\003c\003\342\343\000\004c\003\342\343\000\005c\003\342\343\342\000\006c\003\342\342\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ClientCheckData_DataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ClientCheckData_DataType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL ClientCheckData_DataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ClientCheckData_DataType_CcdataXml:
    case ClientCheckData_DataType_CcdataText:
    case ClientCheckData_DataType_CcdataBinary:
    case ClientCheckData_DataType_CcdataPbRaw:
    case ClientCheckData_DataType_CcdataPbZip:
    case ClientCheckData_DataType_CcdataPbZipWb:
    case ClientCheckData_DataType_CcdataPbWb:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ClientCheckData_Status

GPBEnumDescriptor *ClientCheckData_Status_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CcdataSuccess\000CcdataFail\000";
    static const int32_t values[] = {
        ClientCheckData_Status_CcdataSuccess,
        ClientCheckData_Status_CcdataFail,
    };
    static const char *extraTextFormatInfo = "\002\000c\003\347\000\001c\003\344\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ClientCheckData_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ClientCheckData_Status_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL ClientCheckData_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ClientCheckData_Status_CcdataSuccess:
    case ClientCheckData_Status_CcdataFail:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SpamBuff

@implementation SpamBuff

@dynamic hasSoft, soft;
@dynamic hasDevicetoken, devicetoken;
@dynamic hasTimestamp, timestamp;

typedef struct SpamBuff__storage_ {
  uint32_t _has_storage_[1];
  uint32_t timestamp;
  SpamBuff_Soft *soft;
  NSString *devicetoken;
} SpamBuff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "soft",
        .dataTypeSpecific.className = GPBStringifySymbol(SpamBuff_Soft),
        .number = SpamBuff_FieldNumber_Soft,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpamBuff__storage_, soft),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "devicetoken",
        .dataTypeSpecific.className = NULL,
        .number = SpamBuff_FieldNumber_Devicetoken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpamBuff__storage_, devicetoken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = SpamBuff_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpamBuff__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpamBuff class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpamBuff__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpamBuff_Soft

@implementation SpamBuff_Soft

@dynamic hasSoftData, softData;
@dynamic hasSoftConfig, softConfig;

typedef struct SpamBuff_Soft__storage_ {
  uint32_t _has_storage_[1];
  NSData *softData;
  NSData *softConfig;
} SpamBuff_Soft__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "softData",
        .dataTypeSpecific.className = NULL,
        .number = SpamBuff_Soft_FieldNumber_SoftData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpamBuff_Soft__storage_, softData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "softConfig",
        .dataTypeSpecific.className = NULL,
        .number = SpamBuff_Soft_FieldNumber_SoftConfig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpamBuff_Soft__storage_, softConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpamBuff_Soft class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpamBuff_Soft__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(SpamBuff)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientSpamInfo_IOS

@implementation ClientSpamInfo_IOS

@dynamic hasCcdcc, ccdcc;
@dynamic hasCcdts, ccdts;
@dynamic hasContent, content;

typedef struct ClientSpamInfo_IOS__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ccdcc;
  uint32_t ccdts;
  ClientSpamInfo_IOS_Content *content;
} ClientSpamInfo_IOS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ccdcc",
        .dataTypeSpecific.className = NULL,
        .number = ClientSpamInfo_IOS_FieldNumber_Ccdcc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientSpamInfo_IOS__storage_, ccdcc),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ccdts",
        .dataTypeSpecific.className = NULL,
        .number = ClientSpamInfo_IOS_FieldNumber_Ccdts,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientSpamInfo_IOS__storage_, ccdts),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(ClientSpamInfo_IOS_Content),
        .number = ClientSpamInfo_IOS_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientSpamInfo_IOS__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientSpamInfo_IOS class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientSpamInfo_IOS__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientSpamInfo_IOS_Content

@implementation ClientSpamInfo_IOS_Content

@dynamic hasTag3, tag3;
@dynamic hasTag51, tag51;

typedef struct ClientSpamInfo_IOS_Content__storage_ {
  uint32_t _has_storage_[1];
  NSData *tag3;
  NSData *tag51;
} ClientSpamInfo_IOS_Content__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag3",
        .dataTypeSpecific.className = NULL,
        .number = ClientSpamInfo_IOS_Content_FieldNumber_Tag3,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientSpamInfo_IOS_Content__storage_, tag3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tag51",
        .dataTypeSpecific.className = NULL,
        .number = ClientSpamInfo_IOS_Content_FieldNumber_Tag51,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientSpamInfo_IOS_Content__storage_, tag51),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientSpamInfo_IOS_Content class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientSpamInfo_IOS_Content__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ClientSpamInfo_IOS)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - wcaes

@implementation wcaes

@dynamic hasType, type;
@dynamic hasIv, iv;
@dynamic hasLen, len;
@dynamic hasMztkey, mztkey;
@dynamic hasMztkeyvalue, mztkeyvalue;
@dynamic hasUnkown6, unkown6;
@dynamic hasUnkown7, unkown7;
@dynamic hasUnkown8, unkown8;
@dynamic hasUnkown9, unkown9;
@dynamic hasTablekey, tablekey;
@dynamic hasUnkown11, unkown11;
@dynamic hasTablevalue, tablevalue;
@dynamic hasUnkown13, unkown13;
@dynamic hasUnkown14, unkown14;
@dynamic hasUnkown15, unkown15;
@dynamic hasUnkown16, unkown16;
@dynamic hasUnkown17, unkown17;
@dynamic hasUnkown18, unkown18;
@dynamic hasUnkown19, unkown19;
@dynamic hasUnkown20, unkown20;
@dynamic hasUnkown21, unkown21;
@dynamic hasUnkown22, unkown22;
@dynamic hasUnkown23, unkown23;
@dynamic hasUnkown24, unkown24;
@dynamic hasUnkown25, unkown25;

typedef struct wcaes__storage_ {
  uint32_t _has_storage_[1];
  int32_t len;
  NSData *type;
  NSData *iv;
  NSData *mztkey;
  NSData *mztkeyvalue;
  NSData *unkown6;
  NSData *unkown7;
  NSData *unkown8;
  NSData *unkown9;
  NSData *tablekey;
  NSData *unkown11;
  NSData *tablevalue;
  NSData *unkown13;
  NSData *unkown14;
  NSData *unkown15;
  NSData *unkown16;
  NSData *unkown17;
  NSData *unkown18;
  NSData *unkown19;
  NSData *unkown20;
  NSData *unkown21;
  NSData *unkown22;
  NSData *unkown23;
  NSData *unkown24;
  NSData *unkown25;
} wcaes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(wcaes__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "iv",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Iv,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(wcaes__storage_, iv),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "len",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Len,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(wcaes__storage_, len),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mztkey",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Mztkey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(wcaes__storage_, mztkey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "mztkeyvalue",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Mztkeyvalue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(wcaes__storage_, mztkeyvalue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown6",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown6,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown6),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown7",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown7,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown7),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown8",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown8,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown8),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown9",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown9,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown9),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tablekey",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Tablekey,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(wcaes__storage_, tablekey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown11",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown11,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown11),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tablevalue",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Tablevalue,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(wcaes__storage_, tablevalue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown13",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown13,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown13),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown14",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown14,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown14),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown15",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown15,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown15),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown16",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown16,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown16),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown17",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown17,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown17),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown18",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown18,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown18),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown19",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown19,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown19),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown20",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown20,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown20),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown21",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown21,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown21),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown22",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown22,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown22),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown23",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown23,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown23),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown24",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown24,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown24),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unkown25",
        .dataTypeSpecific.className = NULL,
        .number = wcaes_FieldNumber_Unkown25,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(wcaes__storage_, unkown25),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[wcaes class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(wcaes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002b\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ACgiDeviceInfo

@implementation ACgiDeviceInfo

@dynamic hasManufacturer, manufacturer;
@dynamic hasModel, model;
@dynamic hasVersionRelease, versionRelease;
@dynamic hasVersionIncremental, versionIncremental;
@dynamic hasDisplay, display;
@dynamic hasFingerPrint, fingerPrint;
@dynamic hasNdm, ndm;

typedef struct ACgiDeviceInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *manufacturer;
  NSString *model;
  NSString *versionRelease;
  NSString *versionIncremental;
  NSString *display;
  NSString *fingerPrint;
  NSString *ndm;
} ACgiDeviceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "manufacturer",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_Manufacturer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, manufacturer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_Model,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, model),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionRelease",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_VersionRelease,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, versionRelease),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionIncremental",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_VersionIncremental,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, versionIncremental),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "display",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_Display,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, display),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fingerPrint",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_FingerPrint,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, fingerPrint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ndm",
        .dataTypeSpecific.className = NULL,
        .number = ACgiDeviceInfo_FieldNumber_Ndm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ACgiDeviceInfo__storage_, ndm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ACgiDeviceInfo class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ACgiDeviceInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001L\000\002E\000\003N\000\004R\000\005G\000\006K\000\007c\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WCExtInfo

@implementation WCExtInfo

@dynamic hasWcstf, wcstf;
@dynamic hasWcste, wcste;
@dynamic hasCcData, ccData;
@dynamic hasRegInfo, regInfo;
@dynamic hasAcgiDeviceInfo, acgiDeviceInfo;
@dynamic hasAcgiTuring, acgiTuring;
@dynamic hasDeviceToken, deviceToken;
@dynamic hasSensorDataContext, sensorDataContext;
@dynamic hasSensorData, sensorData;
@dynamic hasTuringOwner, turingOwner;
@dynamic hasIosturingHuman, iosturingHuman;
@dynamic hasIosturingOwner, iosturingOwner;

typedef struct WCExtInfo__storage_ {
  uint32_t _has_storage_[1];
  SKBuiltinBuffer_t *wcstf;
  SKBuiltinBuffer_t *wcste;
  SKBuiltinBuffer_t *ccData;
  SKBuiltinBuffer_t *regInfo;
  SKBuiltinBuffer_t *acgiDeviceInfo;
  SKBuiltinBuffer_t *acgiTuring;
  SKBuiltinBuffer_t *deviceToken;
  SKBuiltinBuffer_t *sensorDataContext;
  SKBuiltinBuffer_t *sensorData;
  SKBuiltinBuffer_t *turingOwner;
  SKBuiltinBuffer_t *iosturingHuman;
  SKBuiltinBuffer_t *iosturingOwner;
} WCExtInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wcstf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_Wcstf,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, wcstf),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wcste",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_Wcste,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, wcste),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ccData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_CcData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, ccData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "regInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_RegInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, regInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acgiDeviceInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_AcgiDeviceInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, acgiDeviceInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acgiTuring",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_AcgiTuring,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, acgiTuring),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceToken",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_DeviceToken,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, deviceToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sensorDataContext",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_SensorDataContext,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, sensorDataContext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sensorData",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_SensorData,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, sensorData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "turingOwner",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_TuringOwner,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, turingOwner),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iosturingHuman",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_IosturingHuman,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, iosturingHuman),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iosturingOwner",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = WCExtInfo_FieldNumber_IosturingOwner,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(WCExtInfo__storage_, iosturingOwner),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WCExtInfo class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WCExtInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\003\006\000\004\007\000\005\016\000\006\n\000\007\013\000\010\021\000\t\n\000\n\013\000e\016\000f\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
