// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmreport.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmreport.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmreportRoot

@implementation MmreportRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MmreportRoot_FileDescriptor

static GPBFileDescriptor *MmreportRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - HeavyUserReqInfo

@implementation HeavyUserReqInfo

@dynamic hasMonitorIdMapVersion, monitorIdMapVersion;

typedef struct HeavyUserReqInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t monitorIdMapVersion;
} HeavyUserReqInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "monitorIdMapVersion",
        .dataTypeSpecific.className = NULL,
        .number = HeavyUserReqInfo_FieldNumber_MonitorIdMapVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeavyUserReqInfo__storage_, monitorIdMapVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeavyUserReqInfo class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeavyUserReqInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KVCommReportItem

@implementation KVCommReportItem

@dynamic hasLogId, logId;
@dynamic hasValue, value;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic hasCount, count;
@dynamic hasRefreshTime, refreshTime;
@dynamic hasType, type;

typedef struct KVCommReportItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logId;
  uint32_t startTime;
  uint32_t endTime;
  uint32_t count;
  uint32_t refreshTime;
  uint32_t type;
  NSData *value;
} KVCommReportItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logId",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_LogId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, logId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "refreshTime",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_RefreshTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, refreshTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = KVCommReportItem_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(KVCommReportItem__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KVCommReportItem class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KVCommReportItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\005\000\003\t\000\004\007\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CliReportKVDataPackage

@implementation CliReportKVDataPackage

@dynamic hasUin, uin;
@dynamic hasClientVersion, clientVersion;
@dynamic hasNetType, netType;
@dynamic itemListArray, itemListArray_Count;
@dynamic hasDeviceModel, deviceModel;
@dynamic hasDeviceBrand, deviceBrand;
@dynamic hasOsName, osName;
@dynamic hasOsVersion, osVersion;
@dynamic hasLanguageVer, languageVer;
@dynamic hasDatatype, datatype;

typedef struct CliReportKVDataPackage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uin;
  uint32_t clientVersion;
  uint32_t netType;
  uint32_t datatype;
  NSMutableArray *itemListArray;
  NSString *deviceModel;
  NSString *deviceBrand;
  NSString *osName;
  NSString *osVersion;
  NSString *languageVer;
} CliReportKVDataPackage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uin",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_Uin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, uin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_ClientVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, clientVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "netType",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_NetType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "itemListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(KVCommReportItem),
        .number = CliReportKVDataPackage_FieldNumber_ItemListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, itemListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_DeviceModel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceBrand",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_DeviceBrand,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, deviceBrand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osName",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_OsName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, osName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_OsVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, osVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languageVer",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_LanguageVer,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, languageVer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "datatype",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVDataPackage_FieldNumber_Datatype,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CliReportKVDataPackage__storage_, datatype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CliReportKVDataPackage class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CliReportKVDataPackage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\002\r\000\003\007\000\004\000itemList\000\005\013\000\006\013\000\007\006\000\010\t\000\t\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CliReportKVReq

@implementation CliReportKVReq

@dynamic hasGeneralVersion, generalVersion;
@dynamic hasSpecialVersion, specialVersion;
@dynamic hasWhiteOrBlackUinVersion, whiteOrBlackUinVersion;
@dynamic dataPkgArray, dataPkgArray_Count;
@dynamic hasRandomEncryKey, randomEncryKey;
@dynamic hasHeavyUserInfo, heavyUserInfo;

typedef struct CliReportKVReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t generalVersion;
  uint32_t specialVersion;
  uint32_t whiteOrBlackUinVersion;
  NSMutableArray *dataPkgArray;
  NSData *randomEncryKey;
  HeavyUserReqInfo *heavyUserInfo;
} CliReportKVReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "generalVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVReq_FieldNumber_GeneralVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CliReportKVReq__storage_, generalVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "specialVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVReq_FieldNumber_SpecialVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CliReportKVReq__storage_, specialVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "whiteOrBlackUinVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVReq_FieldNumber_WhiteOrBlackUinVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CliReportKVReq__storage_, whiteOrBlackUinVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataPkgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CliReportKVDataPackage),
        .number = CliReportKVReq_FieldNumber_DataPkgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CliReportKVReq__storage_, dataPkgArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "randomEncryKey",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVReq_FieldNumber_RandomEncryKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CliReportKVReq__storage_, randomEncryKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "heavyUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(HeavyUserReqInfo),
        .number = CliReportKVReq_FieldNumber_HeavyUserInfo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CliReportKVReq__storage_, heavyUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CliReportKVReq class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CliReportKVReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\016\000\002\016\000\003\026\000\004\000dataPkg\000\005\016\000\006\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HeavyUserRespInfo

@implementation HeavyUserRespInfo

@dynamic hasMonitorIdMapVersion, monitorIdMapVersion;
@dynamic monitorIdMapStrategysArray, monitorIdMapStrategysArray_Count;
@dynamic hasRespType, respType;

typedef struct HeavyUserRespInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t monitorIdMapVersion;
  uint32_t respType;
  NSMutableArray *monitorIdMapStrategysArray;
} HeavyUserRespInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "monitorIdMapVersion",
        .dataTypeSpecific.className = NULL,
        .number = HeavyUserRespInfo_FieldNumber_MonitorIdMapVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeavyUserRespInfo__storage_, monitorIdMapVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "monitorIdMapStrategysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StrategyInterval),
        .number = HeavyUserRespInfo_FieldNumber_MonitorIdMapStrategysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HeavyUserRespInfo__storage_, monitorIdMapStrategysArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "respType",
        .dataTypeSpecific.className = NULL,
        .number = HeavyUserRespInfo_FieldNumber_RespType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeavyUserRespInfo__storage_, respType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeavyUserRespInfo class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeavyUserRespInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\023\000\002\000monitorIdMapStrategys\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewStrategyItem

@implementation NewStrategyItem

@dynamic hasLogId, logId;
@dynamic hasReportCycle, reportCycle;
@dynamic hasReportFlag, reportFlag;
@dynamic hasSampleRatio, sampleRatio;
@dynamic hasSampleMode, sampleMode;
@dynamic hasSampleValidInterval, sampleValidInterval;
@dynamic hasMonitorFlag, monitorFlag;
@dynamic hasType, type;

typedef struct NewStrategyItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logId;
  uint32_t reportCycle;
  uint32_t reportFlag;
  uint32_t sampleRatio;
  uint32_t sampleMode;
  uint32_t sampleValidInterval;
  uint32_t monitorFlag;
  uint32_t type;
} NewStrategyItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logId",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_LogId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, logId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportCycle",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_ReportCycle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, reportCycle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reportFlag",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_ReportFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, reportFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sampleRatio",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_SampleRatio,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, sampleRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sampleMode",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_SampleMode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, sampleMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sampleValidInterval",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_SampleValidInterval,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, sampleValidInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "monitorFlag",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_MonitorFlag,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, monitorFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = NewStrategyItem_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(NewStrategyItem__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewStrategyItem class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewStrategyItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\005\000\002\013\000\003\n\000\004\013\000\005\n\000\006\023\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StrategyInterval

@implementation StrategyInterval

@dynamic hasLogIdbegin, logIdbegin;
@dynamic hasLogIdend, logIdend;
@dynamic strategyItemArray, strategyItemArray_Count;

typedef struct StrategyInterval__storage_ {
  uint32_t _has_storage_[1];
  uint32_t logIdbegin;
  uint32_t logIdend;
  NSMutableArray *strategyItemArray;
} StrategyInterval__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logIdbegin",
        .dataTypeSpecific.className = NULL,
        .number = StrategyInterval_FieldNumber_LogIdbegin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StrategyInterval__storage_, logIdbegin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "logIdend",
        .dataTypeSpecific.className = NULL,
        .number = StrategyInterval_FieldNumber_LogIdend,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StrategyInterval__storage_, logIdend),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "strategyItemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NewStrategyItem),
        .number = StrategyInterval_FieldNumber_StrategyItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StrategyInterval__storage_, strategyItemArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StrategyInterval class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StrategyInterval__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\002\010\000\003\000strategyItem\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CliReportKVResp

@implementation CliReportKVResp

@dynamic hasRet, ret;
@dynamic hasGeneralVersion, generalVersion;
@dynamic hasSpecialVersion, specialVersion;
@dynamic hasWhiteOrBlackUinVersion, whiteOrBlackUinVersion;
@dynamic generalStrategiesArray, generalStrategiesArray_Count;
@dynamic hasMaxValidDataTime, maxValidDataTime;
@dynamic hasBanReportTime, banReportTime;
@dynamic hasAskSvrStrategyInterval, askSvrStrategyInterval;
@dynamic hasHeavyUserInfo, heavyUserInfo;

typedef struct CliReportKVResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ret;
  uint32_t generalVersion;
  uint32_t specialVersion;
  uint32_t whiteOrBlackUinVersion;
  uint32_t maxValidDataTime;
  uint32_t banReportTime;
  uint32_t askSvrStrategyInterval;
  NSMutableArray *generalStrategiesArray;
  HeavyUserRespInfo *heavyUserInfo;
} CliReportKVResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_Ret,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "generalVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_GeneralVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, generalVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "specialVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_SpecialVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, specialVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "whiteOrBlackUinVersion",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_WhiteOrBlackUinVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, whiteOrBlackUinVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "generalStrategiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StrategyInterval),
        .number = CliReportKVResp_FieldNumber_GeneralStrategiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, generalStrategiesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxValidDataTime",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_MaxValidDataTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, maxValidDataTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "banReportTime",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_BanReportTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, banReportTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "askSvrStrategyInterval",
        .dataTypeSpecific.className = NULL,
        .number = CliReportKVResp_FieldNumber_AskSvrStrategyInterval,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, askSvrStrategyInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "heavyUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(HeavyUserRespInfo),
        .number = CliReportKVResp_FieldNumber_HeavyUserInfo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CliReportKVResp__storage_, heavyUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CliReportKVResp class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CliReportKVResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\002\016\000\003\016\000\004\026\000\005\000generalStrategies\000\010\020\000\t\r\000\n\026\000\013"
        "\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCliKVStrategyReq

@implementation GetCliKVStrategyReq

@dynamic hasGeneralVersion, generalVersion;
@dynamic hasSpecialVersion, specialVersion;
@dynamic hasWhiteOrBlackUinVersion, whiteOrBlackUinVersion;
@dynamic randomEncryKeyArray, randomEncryKeyArray_Count;
@dynamic hasKvgeneralVersion, kvgeneralVersion;
@dynamic hasKvspecialVersion, kvspecialVersion;
@dynamic hasKvwhiteOrBlackUinVersion, kvwhiteOrBlackUinVersion;
@dynamic hasHeavyUserInfo, heavyUserInfo;

typedef struct GetCliKVStrategyReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t generalVersion;
  uint32_t specialVersion;
  uint32_t whiteOrBlackUinVersion;
  uint32_t kvgeneralVersion;
  uint32_t kvspecialVersion;
  uint32_t kvwhiteOrBlackUinVersion;
  NSMutableArray *randomEncryKeyArray;
  HeavyUserRespInfo *heavyUserInfo;
} GetCliKVStrategyReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "generalVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_GeneralVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, generalVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "specialVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_SpecialVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, specialVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "whiteOrBlackUinVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_WhiteOrBlackUinVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, whiteOrBlackUinVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "randomEncryKeyArray",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_RandomEncryKeyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, randomEncryKeyArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "kvgeneralVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_KvgeneralVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, kvgeneralVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvspecialVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_KvspecialVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, kvspecialVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvwhiteOrBlackUinVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyReq_FieldNumber_KvwhiteOrBlackUinVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, kvwhiteOrBlackUinVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "heavyUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(HeavyUserRespInfo),
        .number = GetCliKVStrategyReq_FieldNumber_HeavyUserInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetCliKVStrategyReq__storage_, heavyUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCliKVStrategyReq class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCliKVStrategyReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\016\000\002\016\000\003\026\000\004\000randomEncryKey\000\005\020\000\006\020\000\007\030\000\010\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCliKVStrategyResp

@implementation GetCliKVStrategyResp

@dynamic hasRet, ret;
@dynamic hasGeneralVersion, generalVersion;
@dynamic hasSpecialVersion, specialVersion;
@dynamic hasWhiteOrBlackUinVersion, whiteOrBlackUinVersion;
@dynamic kvspecialStrategiesArray, kvspecialStrategiesArray_Count;
@dynamic hasMaxValidDataTime, maxValidDataTime;
@dynamic hasBanReportTime, banReportTime;
@dynamic hasAskSvrStrategyInterval, askSvrStrategyInterval;
@dynamic hasKvgeneralVersion, kvgeneralVersion;
@dynamic hasKvspecialVersion, kvspecialVersion;
@dynamic hasKvwhiteOrBlackUinVersion, kvwhiteOrBlackUinVersion;
@dynamic kvgeneralStrategiesArray, kvgeneralStrategiesArray_Count;
@dynamic hasHeavyUserInfo, heavyUserInfo;
@dynamic hasAaa, aaa;

typedef struct GetCliKVStrategyResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ret;
  uint32_t generalVersion;
  uint32_t specialVersion;
  uint32_t whiteOrBlackUinVersion;
  uint32_t maxValidDataTime;
  uint32_t banReportTime;
  uint32_t askSvrStrategyInterval;
  uint32_t kvgeneralVersion;
  uint32_t kvspecialVersion;
  uint32_t kvwhiteOrBlackUinVersion;
  uint32_t aaa;
  NSMutableArray *kvspecialStrategiesArray;
  NSMutableArray *kvgeneralStrategiesArray;
  HeavyUserRespInfo *heavyUserInfo;
} GetCliKVStrategyResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_Ret,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, ret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "generalVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_GeneralVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, generalVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "specialVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_SpecialVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, specialVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "whiteOrBlackUinVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_WhiteOrBlackUinVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, whiteOrBlackUinVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvspecialStrategiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StrategyInterval),
        .number = GetCliKVStrategyResp_FieldNumber_KvspecialStrategiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, kvspecialStrategiesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxValidDataTime",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_MaxValidDataTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, maxValidDataTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "banReportTime",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_BanReportTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, banReportTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "askSvrStrategyInterval",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_AskSvrStrategyInterval,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, askSvrStrategyInterval),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvgeneralVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_KvgeneralVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, kvgeneralVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvspecialVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_KvspecialVersion,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, kvspecialVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvwhiteOrBlackUinVersion",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_KvwhiteOrBlackUinVersion,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, kvwhiteOrBlackUinVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "kvgeneralStrategiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StrategyInterval),
        .number = GetCliKVStrategyResp_FieldNumber_KvgeneralStrategiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, kvgeneralStrategiesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "heavyUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(HeavyUserRespInfo),
        .number = GetCliKVStrategyResp_FieldNumber_HeavyUserInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, heavyUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "aaa",
        .dataTypeSpecific.className = NULL,
        .number = GetCliKVStrategyResp_FieldNumber_Aaa,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GetCliKVStrategyResp__storage_, aaa),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCliKVStrategyResp class]
                                     rootClass:[MmreportRoot class]
                                          file:MmreportRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCliKVStrategyResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\002\016\000\003\016\000\004\026\000\005\000kvspecialStrategies\000\010\020\000\t\r\000\n\026"
        "\000\013\020\000\014\020\000\r\030\000\016\000kvgeneralStrategies\000\021\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
