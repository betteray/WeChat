// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmcard.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmcard.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmcardRoot

@implementation MmcardRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmcardRoot_FileDescriptor

static GPBFileDescriptor *MmcardRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - CardUserItem

@implementation CardUserItem

@dynamic hasCardId, cardId;
@dynamic hasUpdateSequence, updateSequence;
@dynamic hasStateFlag, stateFlag;
@dynamic hasUpdateTime, updateTime;
@dynamic hasStatus, status;

typedef struct CardUserItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t stateFlag;
  uint32_t updateTime;
  uint32_t status;
  NSString *cardId;
  uint64_t updateSequence;
} CardUserItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = CardUserItem_FieldNumber_CardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardUserItem__storage_, cardId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateSequence",
        .dataTypeSpecific.className = NULL,
        .number = CardUserItem_FieldNumber_UpdateSequence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardUserItem__storage_, updateSequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "stateFlag",
        .dataTypeSpecific.className = NULL,
        .number = CardUserItem_FieldNumber_StateFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CardUserItem__storage_, stateFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = CardUserItem_FieldNumber_UpdateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CardUserItem__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CardUserItem_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CardUserItem__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardUserItem class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardUserItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001F\000\002N\000\003I\000\004J\000\005F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchDelCardItemRequest

@implementation BatchDelCardItemRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic cardIdsArray, cardIdsArray_Count;

typedef struct BatchDelCardItemRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSMutableArray *cardIdsArray;
} BatchDelCardItemRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchDelCardItemRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchDelCardItemRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = BatchDelCardItemRequest_FieldNumber_CardIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchDelCardItemRequest__storage_, cardIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchDelCardItemRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchDelCardItemRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchDelCardItemResponse

@implementation BatchDelCardItemResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic succCardIdsArray, succCardIdsArray_Count;

typedef struct BatchDelCardItemResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSMutableArray *succCardIdsArray;
} BatchDelCardItemResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchDelCardItemResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchDelCardItemResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "succCardIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = BatchDelCardItemResponse_FieldNumber_SuccCardIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchDelCardItemResponse__storage_, succCardIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchDelCardItemResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchDelCardItemResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetCardItemRequest

@implementation BatchGetCardItemRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic cardIdsArray, cardIdsArray_Count;

typedef struct BatchGetCardItemRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSMutableArray *cardIdsArray;
} BatchGetCardItemRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchGetCardItemRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetCardItemRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetCardItemRequest_FieldNumber_CardIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetCardItemRequest__storage_, cardIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetCardItemRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetCardItemRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetCardItemResponse

@implementation BatchGetCardItemResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct BatchGetCardItemResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} BatchGetCardItemResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchGetCardItemResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetCardItemResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetCardItemResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetCardItemResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetCardItemResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetCardItemResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardSyncRequest

@implementation CardSyncRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSelector, selector;
@dynamic hasKeyBuf, keyBuf;

typedef struct CardSyncRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t selector;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *keyBuf;
} CardSyncRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CardSyncRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardSyncRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = CardSyncRequest_FieldNumber_Selector,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardSyncRequest__storage_, selector),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = CardSyncRequest_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CardSyncRequest__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardSyncRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardSyncRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardSyncResponse

@implementation CardSyncResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCmdList, cmdList;
@dynamic hasKeyBuf, keyBuf;
@dynamic hasContinueFlag, continueFlag;

typedef struct CardSyncResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t continueFlag;
  BaseResponse *baseResponse;
  CmdList *cmdList;
  SKBuiltinBuffer_t *keyBuf;
} CardSyncResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CardSyncResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardSyncResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cmdList",
        .dataTypeSpecific.className = GPBStringifySymbol(CmdList),
        .number = CardSyncResponse_FieldNumber_CmdList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardSyncResponse__storage_, cmdList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = CardSyncResponse_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CardSyncResponse__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = CardSyncResponse_FieldNumber_ContinueFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CardSyncResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardSyncResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardSyncResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002G\000\003F\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardShopLBSRequest

@implementation CardShopLBSRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCardTpId, cardTpId;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;

typedef struct CardShopLBSRequest__storage_ {
  uint32_t _has_storage_[1];
  float longitude;
  float latitude;
  BaseRequest *baseRequest;
  NSString *cardTpId;
} CardShopLBSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CardShopLBSRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardShopLBSRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTpId",
        .dataTypeSpecific.className = NULL,
        .number = CardShopLBSRequest_FieldNumber_CardTpId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardShopLBSRequest__storage_, cardTpId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = CardShopLBSRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CardShopLBSRequest__storage_, longitude),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = CardShopLBSRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CardShopLBSRequest__storage_, latitude),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardShopLBSRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardShopLBSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardShopLBSResponse

@implementation CardShopLBSResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct CardShopLBSResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} CardShopLBSResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CardShopLBSResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardShopLBSResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = CardShopLBSResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardShopLBSResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardShopLBSResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardShopLBSResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardSerialRequest

@implementation GetCardSerialRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCardId, cardId;

typedef struct GetCardSerialRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *cardId;
} GetCardSerialRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetCardSerialRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardSerialRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = GetCardSerialRequest_FieldNumber_CardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardSerialRequest__storage_, cardId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardSerialRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardSerialRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardSerialResponse

@implementation GetCardSerialResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasSerialNumber, serialNumber;

typedef struct GetCardSerialResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *serialNumber;
} GetCardSerialResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetCardSerialResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardSerialResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serialNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetCardSerialResponse_FieldNumber_SerialNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardSerialResponse__storage_, serialNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardSerialResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardSerialResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardItemInfoRequest

@implementation GetCardItemInfoRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCardId, cardId;
@dynamic hasFromScene, fromScene;
@dynamic hasFromUsername, fromUsername;
@dynamic hasCardExt, cardExt;
@dynamic hasJsCheckinfoURL, jsCheckinfoURL;
@dynamic hasJsCheckinfoSessionUsername, jsCheckinfoSessionUsername;

typedef struct GetCardItemInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fromScene;
  BaseRequest *baseRequest;
  NSString *cardId;
  NSString *fromUsername;
  NSString *cardExt;
  NSString *jsCheckinfoURL;
  NSString *jsCheckinfoSessionUsername;
} GetCardItemInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetCardItemInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoRequest_FieldNumber_CardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, cardId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromScene",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoRequest_FieldNumber_FromScene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, fromScene),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoRequest_FieldNumber_FromUsername,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, fromUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardExt",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoRequest_FieldNumber_CardExt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, cardExt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsCheckinfoURL",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoRequest_FieldNumber_JsCheckinfoURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, jsCheckinfoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jsCheckinfoSessionUsername",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoRequest_FieldNumber_JsCheckinfoSessionUsername,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetCardItemInfoRequest__storage_, jsCheckinfoSessionUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardItemInfoRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardItemInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\006\002\251\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardItemInfoResponse

@implementation GetCardItemInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct GetCardItemInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} GetCardItemInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetCardItemInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardItemInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = GetCardItemInfoResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardItemInfoResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardItemInfoResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardItemInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftCardItemRequest

@implementation GiftCardItemRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCardId, cardId;
@dynamic hasToUsername, toUsername;

typedef struct GiftCardItemRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *cardId;
  NSString *toUsername;
} GiftCardItemRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GiftCardItemRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftCardItemRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = GiftCardItemRequest_FieldNumber_CardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftCardItemRequest__storage_, cardId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toUsername",
        .dataTypeSpecific.className = NULL,
        .number = GiftCardItemRequest_FieldNumber_ToUsername,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GiftCardItemRequest__storage_, toUsername),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftCardItemRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftCardItemRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftCardItemResponse

@implementation GiftCardItemResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCardExt, cardExt;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct GiftCardItemResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *cardExt;
  NSString *retMsg;
} GiftCardItemResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GiftCardItemResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftCardItemResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardExt",
        .dataTypeSpecific.className = NULL,
        .number = GiftCardItemResponse_FieldNumber_CardExt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftCardItemResponse__storage_, cardExt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = GiftCardItemResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GiftCardItemResponse__storage_, retCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = GiftCardItemResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GiftCardItemResponse__storage_, retMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftCardItemResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftCardItemResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcceptCardItemRequest

@implementation AcceptCardItemRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasFromUsername, fromUsername;
@dynamic hasFromScene, fromScene;
@dynamic hasCardId, cardId;
@dynamic hasCardExt, cardExt;

typedef struct AcceptCardItemRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fromScene;
  BaseRequest *baseRequest;
  NSString *fromUsername;
  NSString *cardId;
  NSString *cardExt;
} AcceptCardItemRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AcceptCardItemRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcceptCardItemRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromUsername",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemRequest_FieldNumber_FromUsername,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcceptCardItemRequest__storage_, fromUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromScene",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemRequest_FieldNumber_FromScene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AcceptCardItemRequest__storage_, fromScene),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemRequest_FieldNumber_CardId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AcceptCardItemRequest__storage_, cardId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardExt",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemRequest_FieldNumber_CardExt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AcceptCardItemRequest__storage_, cardExt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcceptCardItemRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcceptCardItemRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcceptCardItemResponse

@implementation AcceptCardItemResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct AcceptCardItemResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *jsonRet;
  NSString *retMsg;
} AcceptCardItemResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AcceptCardItemResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcceptCardItemResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcceptCardItemResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AcceptCardItemResponse__storage_, retCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardItemResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AcceptCardItemResponse__storage_, retMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcceptCardItemResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcceptCardItemResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardCountRequest

@implementation GetCardCountRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct GetCardCountRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GetCardCountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetCardCountRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardCountRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardCountRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardCountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardCountResponse

@implementation GetCardCountResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;

typedef struct GetCardCountResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
} GetCardCountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetCardCountResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardCountResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetCardCountResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardCountResponse__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardCountResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardCountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAvailableCardRequest

@implementation GetAvailableCardRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasShopId, shopId;
@dynamic hasSignType, signType;
@dynamic hasCardSign, cardSign;
@dynamic hasTimeStamp, timeStamp;
@dynamic hasNonceStr, nonceStr;
@dynamic hasCardTpId, cardTpId;
@dynamic hasCardType, cardType;

typedef struct GetAvailableCardRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t shopId;
  uint32_t timeStamp;
  BaseRequest *baseRequest;
  NSString *appId;
  NSString *signType;
  NSString *cardSign;
  NSString *nonceStr;
  NSString *cardTpId;
  NSString *cardType;
} GetAvailableCardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetAvailableCardRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shopId",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_ShopId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, shopId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "signType",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_SignType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, signType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardSign",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_CardSign,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, cardSign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_TimeStamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nonceStr",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_NonceStr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, nonceStr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardTpId",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_CardTpId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, cardTpId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardType",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardRequest_FieldNumber_CardType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetAvailableCardRequest__storage_, cardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAvailableCardRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAvailableCardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAvailableCardResponse

@implementation GetAvailableCardResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct GetAvailableCardResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} GetAvailableCardResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetAvailableCardResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAvailableCardResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = GetAvailableCardResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAvailableCardResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAvailableCardResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAvailableCardResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardListItem

@implementation CardListItem

@dynamic hasCardTpId, cardTpId;
@dynamic hasCardExt, cardExt;
@dynamic hasIsSucc, isSucc;

typedef struct CardListItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t isSucc;
  NSString *cardTpId;
  NSString *cardExt;
} CardListItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardTpId",
        .dataTypeSpecific.className = NULL,
        .number = CardListItem_FieldNumber_CardTpId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardListItem__storage_, cardTpId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardExt",
        .dataTypeSpecific.className = NULL,
        .number = CardListItem_FieldNumber_CardExt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardListItem__storage_, cardExt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSucc",
        .dataTypeSpecific.className = NULL,
        .number = CardListItem_FieldNumber_IsSucc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CardListItem__storage_, isSucc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardListItem class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardListItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardListItems

@implementation CardListItems

@dynamic cardListArray, cardListArray_Count;

typedef struct CardListItems__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cardListArray;
} CardListItems__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CardListItem),
        .number = CardListItems_FieldNumber_CardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CardListItems__storage_, cardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardListItems class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardListItems__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardListFromAppRequest

@implementation GetCardListFromAppRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic cardListArray, cardListArray_Count;
@dynamic hasFromScene, fromScene;
@dynamic hasBundleId, bundleId;
@dynamic hasPackageName, packageName;
@dynamic hasSign, sign;

typedef struct GetCardListFromAppRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fromScene;
  BaseRequest *baseRequest;
  NSMutableArray *cardListArray;
  NSString *bundleId;
  NSString *packageName;
  NSString *sign;
} GetCardListFromAppRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetCardListFromAppRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardListFromAppRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CardListItem),
        .number = GetCardListFromAppRequest_FieldNumber_CardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetCardListFromAppRequest__storage_, cardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromScene",
        .dataTypeSpecific.className = NULL,
        .number = GetCardListFromAppRequest_FieldNumber_FromScene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardListFromAppRequest__storage_, fromScene),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bundleId",
        .dataTypeSpecific.className = NULL,
        .number = GetCardListFromAppRequest_FieldNumber_BundleId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCardListFromAppRequest__storage_, bundleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packageName",
        .dataTypeSpecific.className = NULL,
        .number = GetCardListFromAppRequest_FieldNumber_PackageName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetCardListFromAppRequest__storage_, packageName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = GetCardListFromAppRequest_FieldNumber_Sign,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetCardListFromAppRequest__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardListFromAppRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardListFromAppRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardListFromAppResponse

@implementation GetCardListFromAppResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct GetCardListFromAppResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} GetCardListFromAppResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetCardListFromAppResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardListFromAppResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = GetCardListFromAppResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardListFromAppResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardListFromAppResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardListFromAppResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcceptCardListFromAppRequest

@implementation AcceptCardListFromAppRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic cardListArray, cardListArray_Count;
@dynamic hasFromScene, fromScene;

typedef struct AcceptCardListFromAppRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fromScene;
  BaseRequest *baseRequest;
  NSMutableArray *cardListArray;
} AcceptCardListFromAppRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AcceptCardListFromAppRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CardListItem),
        .number = AcceptCardListFromAppRequest_FieldNumber_CardListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppRequest__storage_, cardListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromScene",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardListFromAppRequest_FieldNumber_FromScene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppRequest__storage_, fromScene),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcceptCardListFromAppRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcceptCardListFromAppRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcceptCardListFromAppResponse

@implementation AcceptCardListFromAppResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;
@dynamic hasRetCode, retCode;
@dynamic hasRetMsg, retMsg;

typedef struct AcceptCardListFromAppResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t retCode;
  BaseResponse *baseResponse;
  NSString *jsonRet;
  NSString *retMsg;
} AcceptCardListFromAppResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AcceptCardListFromAppResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardListFromAppResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "retCode",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardListFromAppResponse_FieldNumber_RetCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppResponse__storage_, retCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "retMsg",
        .dataTypeSpecific.className = NULL,
        .number = AcceptCardListFromAppResponse_FieldNumber_RetMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AcceptCardListFromAppResponse__storage_, retMsg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcceptCardListFromAppResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcceptCardListFromAppResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardConfigInfoRequest

@implementation GetCardConfigInfoRequest

@dynamic hasBaseRequest, baseRequest;

typedef struct GetCardConfigInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
} GetCardConfigInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetCardConfigInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardConfigInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardConfigInfoRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardConfigInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCardConfigInfoResponse

@implementation GetCardConfigInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct GetCardConfigInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} GetCardConfigInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetCardConfigInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCardConfigInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = GetCardConfigInfoResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCardConfigInfoResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCardConfigInfoResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCardConfigInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardDataInfo

@implementation CardDataInfo

@dynamic hasCardId, cardId;

typedef struct CardDataInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *cardId;
} CardDataInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = CardDataInfo_FieldNumber_CardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardDataInfo__storage_, cardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardDataInfo class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardDataInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetCardItem

@implementation BatchGetCardItem

@dynamic hasCardId, cardId;
@dynamic hasCardDataInfo, cardDataInfo;

typedef struct BatchGetCardItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *cardId;
  CardDataInfo *cardDataInfo;
} BatchGetCardItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardId",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetCardItem_FieldNumber_CardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetCardItem__storage_, cardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardDataInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CardDataInfo),
        .number = BatchGetCardItem_FieldNumber_CardDataInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetCardItem__storage_, cardDataInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetCardItem class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetCardItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetCardArray

@implementation BatchGetCardArray

@dynamic cardArrayArray, cardArrayArray_Count;

typedef struct BatchGetCardArray__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *cardArrayArray;
} BatchGetCardArray__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardArrayArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BatchGetCardItem),
        .number = BatchGetCardArray_FieldNumber_CardArrayArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetCardArray__storage_, cardArrayArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetCardArray class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetCardArray__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CardTpInfoItem

@implementation CardTpInfoItem

@dynamic hasCardTpId, cardTpId;
@dynamic hasCode, code;

typedef struct CardTpInfoItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *cardTpId;
  NSString *code;
} CardTpInfoItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cardTpId",
        .dataTypeSpecific.className = NULL,
        .number = CardTpInfoItem_FieldNumber_CardTpId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CardTpInfoItem__storage_, cardTpId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = CardTpInfoItem_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CardTpInfoItem__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CardTpInfoItem class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CardTpInfoItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetCardItemByTpInfoRequest

@implementation BatchGetCardItemByTpInfoRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic itemsArray, itemsArray_Count;

typedef struct BatchGetCardItemByTpInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSMutableArray *itemsArray;
} BatchGetCardItemByTpInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchGetCardItemByTpInfoRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetCardItemByTpInfoRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CardTpInfoItem),
        .number = BatchGetCardItemByTpInfoRequest_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetCardItemByTpInfoRequest__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetCardItemByTpInfoRequest class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetCardItemByTpInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetCardItemByTpInfoResponse

@implementation BatchGetCardItemByTpInfoResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasJsonRet, jsonRet;

typedef struct BatchGetCardItemByTpInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *jsonRet;
} BatchGetCardItemByTpInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchGetCardItemByTpInfoResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetCardItemByTpInfoResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonRet",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetCardItemByTpInfoResponse_FieldNumber_JsonRet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetCardItemByTpInfoResponse__storage_, jsonRet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetCardItemByTpInfoResponse class]
                                     rootClass:[MmcardRoot class]
                                          file:MmcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetCardItemByTpInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
