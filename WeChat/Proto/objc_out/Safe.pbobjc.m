// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: safe.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Safe.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SafeRoot

@implementation SafeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SafeRoot_FileDescriptor

static GPBFileDescriptor *SafeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ReportClientCheckReq

@implementation ReportClientCheckReq

@dynamic hasSt, st;
@dynamic hasMsgId, msgId;

typedef struct ReportClientCheckReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *st;
  uint64_t msgId;
} ReportClientCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "st",
        .dataTypeSpecific.className = NULL,
        .number = ReportClientCheckReq_FieldNumber_St,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReportClientCheckReq__storage_, st),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = ReportClientCheckReq_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReportClientCheckReq__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReportClientCheckReq class]
                                     rootClass:[SafeRoot class]
                                          file:SafeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReportClientCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - tette

@implementation tette

@dynamic hasTag3, tag3;

typedef struct tette__storage_ {
  uint32_t _has_storage_[1];
  tette_tttt *tag3;
} tette__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag3",
        .dataTypeSpecific.className = GPBStringifySymbol(tette_tttt),
        .number = tette_FieldNumber_Tag3,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(tette__storage_, tag3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[tette class]
                                     rootClass:[SafeRoot class]
                                          file:SafeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(tette__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - tette_tttt

@implementation tette_tttt

@dynamic hasTag11, tag11;
@dynamic hasTag12, tag12;

typedef struct tette_tttt__storage_ {
  uint32_t _has_storage_[1];
  NSString *tag11;
  NSString *tag12;
} tette_tttt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag11",
        .dataTypeSpecific.className = NULL,
        .number = tette_tttt_FieldNumber_Tag11,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(tette_tttt__storage_, tag11),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tag12",
        .dataTypeSpecific.className = NULL,
        .number = tette_tttt_FieldNumber_Tag12,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(tette_tttt__storage_, tag12),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[tette_tttt class]
                                     rootClass:[SafeRoot class]
                                          file:SafeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(tette_tttt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(tette)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
