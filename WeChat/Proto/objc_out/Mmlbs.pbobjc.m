// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmlbs.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmlbs.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmlbsRoot

@implementation MmlbsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmlbsRoot_FileDescriptor

static GPBFileDescriptor *MmlbsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - LbsLifeExtInfo

@implementation LbsLifeExtInfo

@dynamic hasLimit, limit;
@dynamic hasPage, page;
@dynamic hasSessiontoken, sessiontoken;

typedef struct LbsLifeExtInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t limit;
  uint32_t page;
  NSString *sessiontoken;
} LbsLifeExtInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeExtInfo_FieldNumber_Limit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsLifeExtInfo__storage_, limit),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeExtInfo_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsLifeExtInfo__storage_, page),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sessiontoken",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeExtInfo_FieldNumber_Sessiontoken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsLifeExtInfo__storage_, sessiontoken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsLifeExtInfo class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsLifeExtInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsLocation

@implementation LbsLocation

@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;

typedef struct LbsLocation__storage_ {
  uint32_t _has_storage_[1];
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  NSString *macAddr;
  NSString *cellId;
} LbsLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = LbsLocation_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsLocation__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = LbsLocation_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsLocation__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = LbsLocation_FieldNumber_Precision,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsLocation__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = LbsLocation_FieldNumber_MacAddr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsLocation__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = LbsLocation_FieldNumber_CellId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsLocation__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = LbsLocation_FieldNumber_Gpssource,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LbsLocation__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsLocation class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001I\000\002H\000\003I\000\004G\000\005F\000\006d\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePoiRequest

@implementation CreatePoiRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasName, name;
@dynamic hasDistrict, district;
@dynamic hasStreet, street;
@dynamic hasLoc, loc;
@dynamic hasCount, count;
@dynamic categoriesArray, categoriesArray_Count;
@dynamic hasTelephone, telephone;
@dynamic hasPhotoURL, photoURL;

typedef struct CreatePoiRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  NSString *name;
  NSString *district;
  NSString *street;
  LbsLocation *loc;
  NSMutableArray *categoriesArray;
  NSString *telephone;
  NSString *photoURL;
} CreatePoiRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = CreatePoiRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "district",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiRequest_FieldNumber_District,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, district),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "street",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiRequest_FieldNumber_Street,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, street),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loc",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsLocation),
        .number = CreatePoiRequest_FieldNumber_Loc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, loc),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiRequest_FieldNumber_Count,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "categoriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = CreatePoiRequest_FieldNumber_CategoriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, categoriesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "telephone",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiRequest_FieldNumber_Telephone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, telephone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "photoURL",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiRequest_FieldNumber_PhotoURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CreatePoiRequest__storage_, photoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePoiRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePoiRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001K\000\002D\000\003H\000\004F\000\005C\000\006E\000\007\000Categories\000\010I\000\tF!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePoiResponse

@implementation CreatePoiResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPoiId, poiId;

typedef struct CreatePoiResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *poiId;
} CreatePoiResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = CreatePoiResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePoiResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "poiId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePoiResponse_FieldNumber_PoiId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreatePoiResponse__storage_, poiId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePoiResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePoiResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLbsLifeListRequest

@implementation GetLbsLifeListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpcode, opcode;
@dynamic hasScene, scene;
@dynamic hasBuff, buff;
@dynamic hasLoc, loc;
@dynamic hasKeyword, keyword;
@dynamic hasEntryTime, entryTime;

typedef struct GetLbsLifeListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opcode;
  uint32_t scene;
  uint32_t entryTime;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *buff;
  LbsLocation *loc;
  NSString *keyword;
} GetLbsLifeListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetLbsLifeListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListRequest_FieldNumber_Opcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, opcode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListRequest_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetLbsLifeListRequest_FieldNumber_Buff,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, buff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loc",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsLocation),
        .number = GetLbsLifeListRequest_FieldNumber_Loc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, loc),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListRequest_FieldNumber_Keyword,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entryTime",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListRequest_FieldNumber_EntryTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetLbsLifeListRequest__storage_, entryTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLbsLifeListRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLbsLifeListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002F\000\003E\000\004D\000\005C\000\006G\000\007I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsLife

@implementation LbsLife

@dynamic hasBid, bid;
@dynamic hasTitle, title;
@dynamic hasPrice, price;
@dynamic hasIconIdxCount, iconIdxCount;
@dynamic iconIdxListArray, iconIdxListArray_Count;
@dynamic hasDescCount, descCount;
@dynamic descListArray, descListArray_Count;
@dynamic hasRate, rate;
@dynamic hasLink, link;
@dynamic hasType, type;

typedef struct LbsLife__storage_ {
  uint32_t _has_storage_[1];
  float price;
  uint32_t iconIdxCount;
  uint32_t descCount;
  float rate;
  uint32_t type;
  NSString *bid;
  NSString *title;
  GPBUInt32Array *iconIdxListArray;
  NSMutableArray *descListArray;
  NSString *link;
} LbsLife__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bid",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_Bid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsLife__storage_, bid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsLife__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsLife__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "iconIdxCount",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_IconIdxCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsLife__storage_, iconIdxCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iconIdxListArray",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_IconIdxListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LbsLife__storage_, iconIdxListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "descCount",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_DescCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsLife__storage_, descCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "descListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = LbsLife_FieldNumber_DescListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LbsLife__storage_, descListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_Rate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LbsLife__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_Link,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LbsLife__storage_, link),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = LbsLife_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LbsLife__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsLife class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsLife__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001b\001\000\002E\000\003E\000\004L\000\005\000IconIdxList\000\006I\000\007\000DescLis"
        "t\000\010D\000\tD\000\nD\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLbsFunctionListRequest

@implementation GetLbsFunctionListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLoc, loc;

typedef struct GetLbsFunctionListRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  LbsLocation *loc;
} GetLbsFunctionListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetLbsFunctionListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLbsFunctionListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loc",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsLocation),
        .number = GetLbsFunctionListRequest_FieldNumber_Loc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLbsFunctionListRequest__storage_, loc),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLbsFunctionListRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLbsFunctionListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLbsFunctionListResponse

@implementation GetLbsFunctionListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLbsFunctionList, lbsFunctionList;

typedef struct GetLbsFunctionListResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *lbsFunctionList;
} GetLbsFunctionListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetLbsFunctionListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLbsFunctionListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lbsFunctionList",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsFunctionListResponse_FieldNumber_LbsFunctionList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLbsFunctionListResponse__storage_, lbsFunctionList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLbsFunctionListResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLbsFunctionListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLbsLifeListResponse

@implementation GetLbsLifeListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasBuff, buff;
@dynamic hasIconCount, iconCount;
@dynamic iconListArray, iconListArray_Count;
@dynamic hasLifeCount, lifeCount;
@dynamic lifeListArray, lifeListArray_Count;
@dynamic hasContinueFlag, continueFlag;
@dynamic hasLogoURL, logoURL;

typedef struct GetLbsLifeListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t iconCount;
  uint32_t lifeCount;
  uint32_t continueFlag;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *buff;
  NSMutableArray *iconListArray;
  NSMutableArray *lifeListArray;
  NSString *logoURL;
} GetLbsLifeListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetLbsLifeListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetLbsLifeListResponse_FieldNumber_Buff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, buff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iconCount",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListResponse_FieldNumber_IconCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, iconCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iconListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GetLbsLifeListResponse_FieldNumber_IconListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, iconListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lifeCount",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListResponse_FieldNumber_LifeCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, lifeCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lifeListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsLife),
        .number = GetLbsLifeListResponse_FieldNumber_LifeListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, lifeListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListResponse_FieldNumber_ContinueFlag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "logoURL",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeListResponse_FieldNumber_LogoURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetLbsLifeListResponse__storage_, logoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLbsLifeListResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLbsLifeListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001L\000\002D\000\003I\000\004\000IconList\000\005I\000\006\000LifeList\000\007L\000\010E"
        "!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LBSLifeActionBooking

@implementation LBSLifeActionBooking

@dynamic hasType, type;
@dynamic hasTitle, title;
@dynamic hasURL, URL;

typedef struct LBSLifeActionBooking__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  NSString *title;
  NSString *URL;
} LBSLifeActionBooking__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionBooking_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LBSLifeActionBooking__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionBooking_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LBSLifeActionBooking__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionBooking_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LBSLifeActionBooking__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LBSLifeActionBooking class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LBSLifeActionBooking__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001D\000\002E\000\003\001!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LBSLifeActionBargain

@implementation LBSLifeActionBargain

@dynamic hasDesc, desc;
@dynamic hasURL, URL;
@dynamic hasIconURL, iconURL;

typedef struct LBSLifeActionBargain__storage_ {
  uint32_t _has_storage_[1];
  NSString *desc;
  NSString *URL;
  NSString *iconURL;
} LBSLifeActionBargain__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionBargain_FieldNumber_Desc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LBSLifeActionBargain__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionBargain_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LBSLifeActionBargain__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionBargain_FieldNumber_IconURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LBSLifeActionBargain__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LBSLifeActionBargain class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LBSLifeActionBargain__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001D\000\002\001!!\000\003E!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LBSLifeAction

@implementation LBSLifeAction

@dynamic hasType, type;
@dynamic hasName, name;
@dynamic hasDesc, desc;
@dynamic hasLink, link;
@dynamic hasBookingCount, bookingCount;
@dynamic bookingListArray, bookingListArray_Count;
@dynamic hasBargainCount, bargainCount;
@dynamic bargainListArray, bargainListArray_Count;

typedef struct LBSLifeAction__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t bookingCount;
  uint32_t bargainCount;
  NSString *name;
  NSString *desc;
  NSString *link;
  NSMutableArray *bookingListArray;
  NSMutableArray *bargainListArray;
} LBSLifeAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeAction_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeAction_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeAction_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeAction_FieldNumber_Link,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, link),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bookingCount",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeAction_FieldNumber_BookingCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, bookingCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bookingListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LBSLifeActionBooking),
        .number = LBSLifeAction_FieldNumber_BookingListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, bookingListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bargainCount",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeAction_FieldNumber_BargainCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, bargainCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bargainListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LBSLifeActionBargain),
        .number = LBSLifeAction_FieldNumber_BargainListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LBSLifeAction__storage_, bargainListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LBSLifeAction class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LBSLifeAction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001D\000\002D\000\003D\000\004D\000\005L\000\006\000BookingList\000\007L\000\010\000Barga"
        "inList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LBSLifeActionList

@implementation LBSLifeActionList

@dynamic hasType, type;
@dynamic hasLifeAction, lifeAction;

typedef struct LBSLifeActionList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  LBSLifeAction *lifeAction;
} LBSLifeActionList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = LBSLifeActionList_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LBSLifeActionList__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lifeAction",
        .dataTypeSpecific.className = GPBStringifySymbol(LBSLifeAction),
        .number = LBSLifeActionList_FieldNumber_LifeAction,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LBSLifeActionList__storage_, lifeAction),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LBSLifeActionList class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LBSLifeActionList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsLifeDetail

@implementation LbsLifeDetail

@dynamic hasLife, life;
@dynamic hasCicount, cicount;
@dynamic cilistArray, cilistArray_Count;
@dynamic hasThumbURL, thumbURL;
@dynamic hasPhotoLink, photoLink;
@dynamic hasActionCount, actionCount;
@dynamic actionListArray, actionListArray_Count;

typedef struct LbsLifeDetail__storage_ {
  uint32_t _has_storage_[1];
  uint32_t cicount;
  uint32_t actionCount;
  LbsLife *life;
  NSMutableArray *cilistArray;
  NSString *thumbURL;
  NSString *photoLink;
  NSMutableArray *actionListArray;
} LbsLifeDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "life",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsLife),
        .number = LbsLifeDetail_FieldNumber_Life,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, life),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cicount",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeDetail_FieldNumber_Cicount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, cicount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cilistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = LbsLifeDetail_FieldNumber_CilistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, cilistArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbURL",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeDetail_FieldNumber_ThumbURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, thumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "photoLink",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeDetail_FieldNumber_PhotoLink,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, photoLink),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actionCount",
        .dataTypeSpecific.className = NULL,
        .number = LbsLifeDetail_FieldNumber_ActionCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, actionCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "actionListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LBSLifeActionList),
        .number = LbsLifeDetail_FieldNumber_ActionListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LbsLifeDetail__storage_, actionListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsLifeDetail class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsLifeDetail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001D\000\002c\004\000\003\000CIList\000\004F!!\000\005I\000\006K\000\007\000ActionList"
        "\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLbsLifeDetailRequest

@implementation GetLbsLifeDetailRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBusinessId, businessId;

typedef struct GetLbsLifeDetailRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *businessId;
} GetLbsLifeDetailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetLbsLifeDetailRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLbsLifeDetailRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "businessId",
        .dataTypeSpecific.className = NULL,
        .number = GetLbsLifeDetailRequest_FieldNumber_BusinessId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLbsLifeDetailRequest__storage_, businessId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLbsLifeDetailRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLbsLifeDetailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLbsLifeDetailResponse

@implementation GetLbsLifeDetailResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLifeDetail, lifeDetail;

typedef struct GetLbsLifeDetailResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  LbsLifeDetail *lifeDetail;
} GetLbsLifeDetailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetLbsLifeDetailResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLbsLifeDetailResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lifeDetail",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsLifeDetail),
        .number = GetLbsLifeDetailResponse_FieldNumber_LifeDetail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLbsLifeDetailResponse__storage_, lifeDetail),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLbsLifeDetailResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLbsLifeDetailResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsRequest

@implementation LbsRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;

typedef struct LbsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
} LbsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = LbsRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_Precision,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_MacAddr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_CellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = LbsRequest_FieldNumber_Gpssource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LbsRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002F\000\003I\000\004H\000\005I\000\006G\000\007F\000\010d\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AlbumLbsRequest

@implementation AlbumLbsRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;
@dynamic hasSbtime, sbtime;

typedef struct AlbumLbsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  uint32_t sbtime;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
} AlbumLbsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = AlbumLbsRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_Precision,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_MacAddr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_CellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_Gpssource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sbtime",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsRequest_FieldNumber_Sbtime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AlbumLbsRequest__storage_, sbtime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AlbumLbsRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AlbumLbsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001K\000\002F\000\003I\000\004H\000\005I\000\006G\000\007F\000\010d\005\000\tc\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsContactInfo

@implementation LbsContactInfo

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasDistance, distance;
@dynamic hasSex, sex;
@dynamic hasImgStatus, imgStatus;
@dynamic hasVerifyFlag, verifyFlag;
@dynamic hasVerifyInfo, verifyInfo;
@dynamic hasVerifyContent, verifyContent;
@dynamic hasAlias, alias;
@dynamic hasWeibo, weibo;
@dynamic hasWeiboNickname, weiboNickname;
@dynamic hasWeiboFlag, weiboFlag;
@dynamic hasHeadImgVersion, headImgVersion;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasCountry, country;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasMyBrandList, myBrandList;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct LbsContactInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t imgStatus;
  uint32_t verifyFlag;
  uint32_t weiboFlag;
  int32_t headImgVersion;
  NSString *userName;
  NSString *nickName;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *distance;
  NSString *verifyInfo;
  NSString *verifyContent;
  NSString *alias;
  NSString *weibo;
  NSString *weiboNickname;
  SnsUserInfo *snsUserInfo;
  NSString *country;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *myBrandList;
  CustomizedInfo *customizedInfo;
  NSString *antispamTicket;
} LbsContactInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Province,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_City,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Signature,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Distance,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, distance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Sex,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgStatus",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_ImgStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, imgStatus),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyFlag",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_VerifyFlag,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, verifyFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfo",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_VerifyInfo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, verifyInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verifyContent",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_VerifyContent,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, verifyContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Alias,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weibo",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Weibo,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, weibo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboNickname",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_WeiboNickname,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, weiboNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboFlag",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_WeiboFlag,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, weiboFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "headImgVersion",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_HeadImgVersion,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, headImgVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = LbsContactInfo_FieldNumber_SnsUserInfo,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_Country,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_BigHeadImgURL,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_SmallHeadImgURL,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "myBrandList",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_MyBrandList,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, myBrandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = LbsContactInfo_FieldNumber_CustomizedInfo,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = LbsContactInfo_FieldNumber_AntispamTicket,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(LbsContactInfo__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsContactInfo class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsContactInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\027\001H\000\002H\000\003H\000\004D\000\005I\000\006H\000\007C\000\010I\000\tJ\000\nJ\000\013M\000\014E\000\rE\000"
        "\016M\000\017I\000\023N\000\024K\000\025G\000\026K!!\000\027M!!\000\030K\000\031N\000\032N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsResponse

@implementation LbsResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasContactCount, contactCount;
@dynamic contactListArray, contactListArray_Count;
@dynamic hasState, state;
@dynamic hasFlushTime, flushTime;
@dynamic hasIsShowRoom, isShowRoom;
@dynamic hasRoomMemberCount, roomMemberCount;

typedef struct LbsResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contactCount;
  uint32_t state;
  uint32_t flushTime;
  uint32_t isShowRoom;
  uint32_t roomMemberCount;
  BaseResponse *baseResponse;
  NSMutableArray *contactListArray;
} LbsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = LbsResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactCount",
        .dataTypeSpecific.className = NULL,
        .number = LbsResponse_FieldNumber_ContactCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, contactCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsContactInfo),
        .number = LbsResponse_FieldNumber_ContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, contactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = LbsResponse_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "flushTime",
        .dataTypeSpecific.className = NULL,
        .number = LbsResponse_FieldNumber_FlushTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, flushTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isShowRoom",
        .dataTypeSpecific.className = NULL,
        .number = LbsResponse_FieldNumber_IsShowRoom,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, isShowRoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "roomMemberCount",
        .dataTypeSpecific.className = NULL,
        .number = LbsResponse_FieldNumber_RoomMemberCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LbsResponse__storage_, roomMemberCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001L\000\002L\000\003\000ContactList\000\004E\000\005I\000\006J\000\007O\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AlbumLbsContactInfo

@implementation AlbumLbsContactInfo

@dynamic hasUserName, userName;

typedef struct AlbumLbsContactInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} AlbumLbsContactInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsContactInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AlbumLbsContactInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AlbumLbsContactInfo class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AlbumLbsContactInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AlbumLbsResponse

@implementation AlbumLbsResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasContactCount, contactCount;
@dynamic contactListArray, contactListArray_Count;

typedef struct AlbumLbsResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t contactCount;
  BaseResponse *baseResponse;
  NSMutableArray *contactListArray;
} AlbumLbsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = AlbumLbsResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AlbumLbsResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactCount",
        .dataTypeSpecific.className = NULL,
        .number = AlbumLbsResponse_FieldNumber_ContactCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AlbumLbsResponse__storage_, contactCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AlbumLbsContactInfo),
        .number = AlbumLbsResponse_FieldNumber_ContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AlbumLbsResponse__storage_, contactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AlbumLbsResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AlbumLbsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002L\000\003\000ContactList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeReportRequest

@implementation ShakeReportRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasImgId, imgId;
@dynamic hasTimes, times;
@dynamic hasGpssource, gpssource;

typedef struct ShakeReportRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  uint32_t imgId;
  uint32_t times;
  int32_t gpssource;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
} ShakeReportRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeReportRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_Precision,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_MacAddr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_CellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imgId",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_ImgId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, imgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "times",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_Times,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, times),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportRequest_FieldNumber_Gpssource,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ShakeReportRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeReportRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeReportRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001K\000\002F\000\003I\000\004H\000\005I\000\006G\000\007F\000\010E\000\tE\000\nd\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeBuffer

@implementation ShakeBuffer

@dynamic hasReportTime, reportTime;
@dynamic hasX, x;
@dynamic hasY, y;

typedef struct ShakeBuffer__storage_ {
  uint32_t _has_storage_[1];
  uint32_t reportTime;
  uint32_t x;
  uint32_t y;
} ShakeBuffer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reportTime",
        .dataTypeSpecific.className = NULL,
        .number = ShakeBuffer_FieldNumber_ReportTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeBuffer__storage_, reportTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = ShakeBuffer_FieldNumber_X,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeBuffer__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = ShakeBuffer_FieldNumber_Y,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeBuffer__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeBuffer class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeBuffer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001J\000\002A\000\003A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeReportResponse

@implementation ShakeReportResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasBuffer, buffer;
@dynamic hasRet, ret;
@dynamic hasImgId, imgId;
@dynamic hasImgTotoalLen, imgTotoalLen;

typedef struct ShakeReportResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t ret;
  uint32_t imgId;
  uint32_t imgTotoalLen;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *buffer;
} ShakeReportResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeReportResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeReportResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeReportResponse_FieldNumber_Buffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeReportResponse__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportResponse_FieldNumber_Ret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeReportResponse__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgId",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportResponse_FieldNumber_ImgId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeReportResponse__storage_, imgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgTotoalLen",
        .dataTypeSpecific.className = NULL,
        .number = ShakeReportResponse_FieldNumber_ImgTotoalLen,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ShakeReportResponse__storage_, imgTotoalLen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeReportResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeReportResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002F\000\003C\000\004E\000\005L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeGetRequest

@implementation ShakeGetRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasBuffer, buffer;
@dynamic hasIsNewVerson, isNewVerson;

typedef struct ShakeGetRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t isNewVerson;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *buffer;
} ShakeGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeGetRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeGetRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeGetRequest_FieldNumber_Buffer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeGetRequest__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isNewVerson",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetRequest_FieldNumber_IsNewVerson,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeGetRequest__storage_, isNewVerson),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeGetRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeGetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002F\000\003K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeGetItem

@implementation ShakeGetItem

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasSignature, signature;
@dynamic hasDistance, distance;
@dynamic hasSex, sex;
@dynamic hasImgStatus, imgStatus;
@dynamic hasHasHdimg, hasHdimg;
@dynamic hasImgBuffer, imgBuffer;
@dynamic hasNumDistance, numDistance;
@dynamic hasWeibo, weibo;
@dynamic hasWeiboNickname, weiboNickname;
@dynamic hasWeiboFlag, weiboFlag;
@dynamic hasVerifyFlag, verifyFlag;
@dynamic hasVerifyInfo, verifyInfo;
@dynamic hasVerifyContent, verifyContent;
@dynamic hasHeadImgVersion, headImgVersion;
@dynamic hasSnsUserInfo, snsUserInfo;
@dynamic hasCountry, country;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasMyBrandList, myBrandList;
@dynamic hasCustomizedInfo, customizedInfo;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct ShakeGetItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t sex;
  uint32_t imgStatus;
  uint32_t hasHdimg;
  uint32_t numDistance;
  uint32_t weiboFlag;
  uint32_t verifyFlag;
  int32_t headImgVersion;
  NSString *userName;
  NSString *nickName;
  NSString *province;
  NSString *city;
  NSString *signature;
  NSString *distance;
  SKBuiltinBuffer_t *imgBuffer;
  NSString *weibo;
  NSString *weiboNickname;
  NSString *verifyInfo;
  NSString *verifyContent;
  SnsUserInfo *snsUserInfo;
  NSString *country;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *myBrandList;
  CustomizedInfo *customizedInfo;
  NSString *antispamTicket;
} ShakeGetItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_Province,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_City,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_Signature,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_Distance,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, distance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_Sex,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgStatus",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_ImgStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, imgStatus),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hasHdimg",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_HasHdimg,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, hasHdimg),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "imgBuffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeGetItem_FieldNumber_ImgBuffer,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, imgBuffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "numDistance",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_NumDistance,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, numDistance),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "weibo",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_Weibo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, weibo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboNickname",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_WeiboNickname,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, weiboNickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weiboFlag",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_WeiboFlag,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, weiboFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyFlag",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_VerifyFlag,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, verifyFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "verifyInfo",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_VerifyInfo,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, verifyInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verifyContent",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_VerifyContent,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, verifyContent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgVersion",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_HeadImgVersion,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, headImgVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "snsUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SnsUserInfo),
        .number = ShakeGetItem_FieldNumber_SnsUserInfo,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, snsUserInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_Country,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_BigHeadImgURL,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_SmallHeadImgURL,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "myBrandList",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_MyBrandList,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, myBrandList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customizedInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CustomizedInfo),
        .number = ShakeGetItem_FieldNumber_CustomizedInfo,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, customizedInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetItem_FieldNumber_AntispamTicket,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(ShakeGetItem__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeGetItem class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeGetItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\031\001H\000\002H\000\003H\000\004D\000\005I\000\006H\000\007C\000\010I\000\tDb\002\000\nI\000\013K\000\014E\000\r"
        "M\000\016I\000\017J\000\020J\000\021M\000\025N\000\026K\000\027G\000\030K!!\000\031M!!\000\032K\000\033N\000\034"
        "N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeGetResponse

@implementation ShakeGetResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic shakeGetListArray, shakeGetListArray_Count;
@dynamic hasTips, tips;
@dynamic hasScence, scence;
@dynamic hasRet, ret;

typedef struct ShakeGetResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  uint32_t scence;
  int32_t ret;
  BaseResponse *baseResponse;
  NSMutableArray *shakeGetListArray;
  NSString *tips;
} ShakeGetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeGetResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeGetResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeGetResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shakeGetListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShakeGetItem),
        .number = ShakeGetResponse_FieldNumber_ShakeGetListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ShakeGetResponse__storage_, shakeGetListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetResponse_FieldNumber_Tips,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeGetResponse__storage_, tips),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scence",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetResponse_FieldNumber_Scence,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeGetResponse__storage_, scence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = ShakeGetResponse_FieldNumber_Ret,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ShakeGetResponse__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeGetResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeGetResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001L\000\002E\000\003\000ShakeGetList\000\004D\000\005F\000\006C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeMatchRequest

@implementation ShakeMatchRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasToUserName, toUserName;
@dynamic hasScence, scence;

typedef struct ShakeMatchRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t scence;
  BaseRequest *baseRequest;
  NSString *toUserName;
} ShakeMatchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeMatchRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeMatchRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = ShakeMatchRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeMatchRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = NULL,
        .number = ShakeMatchRequest_FieldNumber_ToUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeMatchRequest__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scence",
        .dataTypeSpecific.className = NULL,
        .number = ShakeMatchRequest_FieldNumber_Scence,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeMatchRequest__storage_, scence),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeMatchRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeMatchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002F\000\003J\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeMatchResponse

@implementation ShakeMatchResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTips, tips;
@dynamic hasRet, ret;

typedef struct ShakeMatchResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ret;
  BaseResponse *baseResponse;
  NSString *tips;
} ShakeMatchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeMatchResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeMatchResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tips",
        .dataTypeSpecific.className = NULL,
        .number = ShakeMatchResponse_FieldNumber_Tips,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeMatchResponse__storage_, tips),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = ShakeMatchResponse_FieldNumber_Ret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeMatchResponse__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeMatchResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeMatchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002D\000\003C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeImgRequest

@implementation ShakeImgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasImgId, imgId;
@dynamic hasStartPos, startPos;
@dynamic hasTotalLen, totalLen;

typedef struct ShakeImgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t imgId;
  uint32_t startPos;
  uint32_t totalLen;
  BaseRequest *baseRequest;
} ShakeImgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ShakeImgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeImgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgId",
        .dataTypeSpecific.className = NULL,
        .number = ShakeImgRequest_FieldNumber_ImgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeImgRequest__storage_, imgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = ShakeImgRequest_FieldNumber_StartPos,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeImgRequest__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = ShakeImgRequest_FieldNumber_TotalLen,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeImgRequest__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeImgRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeImgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002E\000\003H\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ShakeImgResponse

@implementation ShakeImgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasImgId, imgId;
@dynamic hasTotalLen, totalLen;
@dynamic hasStartPos, startPos;
@dynamic hasBuffer, buffer;

typedef struct ShakeImgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t imgId;
  uint32_t totalLen;
  uint32_t startPos;
  BaseResponse *baseResponse;
  SKBuiltinBuffer_t *buffer;
} ShakeImgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ShakeImgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ShakeImgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgId",
        .dataTypeSpecific.className = NULL,
        .number = ShakeImgResponse_FieldNumber_ImgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ShakeImgResponse__storage_, imgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalLen",
        .dataTypeSpecific.className = NULL,
        .number = ShakeImgResponse_FieldNumber_TotalLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ShakeImgResponse__storage_, totalLen),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startPos",
        .dataTypeSpecific.className = NULL,
        .number = ShakeImgResponse_FieldNumber_StartPos,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ShakeImgResponse__storage_, startPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buffer",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = ShakeImgResponse_FieldNumber_Buffer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ShakeImgResponse__storage_, buffer),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ShakeImgResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ShakeImgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002E\000\003H\000\004H\000\005F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScanStreetViewRequest

@implementation ScanStreetViewRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasUserPos, userPos;
@dynamic hasScene, scene;
@dynamic hasHeading, heading;
@dynamic hasPitch, pitch;

typedef struct ScanStreetViewRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  float heading;
  float pitch;
  BaseRequest *baseRequest;
  PositionInfo *userPos;
} ScanStreetViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = ScanStreetViewRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScanStreetViewRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userPos",
        .dataTypeSpecific.className = GPBStringifySymbol(PositionInfo),
        .number = ScanStreetViewRequest_FieldNumber_UserPos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ScanStreetViewRequest__storage_, userPos),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = ScanStreetViewRequest_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ScanStreetViewRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "heading",
        .dataTypeSpecific.className = NULL,
        .number = ScanStreetViewRequest_FieldNumber_Heading,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ScanStreetViewRequest__storage_, heading),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pitch",
        .dataTypeSpecific.className = NULL,
        .number = ScanStreetViewRequest_FieldNumber_Pitch,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ScanStreetViewRequest__storage_, pitch),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScanStreetViewRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScanStreetViewRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002G\000\003E\000\004G\000\005E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScanStreetViewResponse

@implementation ScanStreetViewResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasType, type;
@dynamic hasDescriptionXml, descriptionXml;

typedef struct ScanStreetViewResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  BaseResponse *baseResponse;
  NSString *descriptionXml;
} ScanStreetViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ScanStreetViewResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ScanStreetViewResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ScanStreetViewResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ScanStreetViewResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "descriptionXml",
        .dataTypeSpecific.className = NULL,
        .number = ScanStreetViewResponse_FieldNumber_DescriptionXml,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ScanStreetViewResponse__storage_, descriptionXml),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScanStreetViewResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ScanStreetViewResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002D\000\003Lb\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsRoomRequest

@implementation LbsRoomRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;
@dynamic hasRoomName, roomName;
@dynamic hasExitScene, exitScene;
@dynamic hasStayTime, stayTime;

typedef struct LbsRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  int32_t exitScene;
  int32_t stayTime;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
  NSString *roomName;
} LbsRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = LbsRoomRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_Precision,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_MacAddr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_CellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_Gpssource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_RoomName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, roomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exitScene",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_ExitScene,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, exitScene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stayTime",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomRequest_FieldNumber_StayTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(LbsRoomRequest__storage_, stayTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsRoomRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001K\000\002F\000\003I\000\004H\000\005I\000\006G\000\007F\000\010d\005\000\tH\000\nI\000\013H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsRoomResponse

@implementation LbsRoomResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRoomName, roomName;
@dynamic hasRoomNickName, roomNickName;

typedef struct LbsRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *roomName;
  NSString *roomNickName;
} LbsRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = LbsRoomResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsRoomResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomResponse_FieldNumber_RoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsRoomResponse__storage_, roomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomNickName",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomResponse_FieldNumber_RoomNickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsRoomResponse__storage_, roomNickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsRoomResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002H\000\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsRoomMemberRequest

@implementation LbsRoomMemberRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasRoomName, roomName;

typedef struct LbsRoomMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *roomName;
} LbsRoomMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = LbsRoomMemberRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsRoomMemberRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "roomName",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMemberRequest_FieldNumber_RoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsRoomMemberRequest__storage_, roomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsRoomMemberRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsRoomMemberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsRoomMember

@implementation LbsRoomMember

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasBigHeadImgURL, bigHeadImgURL;
@dynamic hasSmallHeadImgURL, smallHeadImgURL;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct LbsRoomMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *nickName;
  NSString *bigHeadImgURL;
  NSString *smallHeadImgURL;
  NSString *antispamTicket;
} LbsRoomMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMember_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsRoomMember__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMember_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsRoomMember__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bigHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMember_FieldNumber_BigHeadImgURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LbsRoomMember__storage_, bigHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallHeadImgURL",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMember_FieldNumber_SmallHeadImgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LbsRoomMember__storage_, smallHeadImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMember_FieldNumber_AntispamTicket,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LbsRoomMember__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsRoomMember class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsRoomMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001H\000\002H\000\003K!!\000\004M!!\000\005N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LbsRoomMemberResponse

@implementation LbsRoomMemberResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;

typedef struct LbsRoomMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseResponse *baseResponse;
  NSMutableArray *memberListArray;
} LbsRoomMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = LbsRoomMemberResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LbsRoomMemberResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = LbsRoomMemberResponse_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LbsRoomMemberResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LbsRoomMember),
        .number = LbsRoomMemberResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LbsRoomMemberResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LbsRoomMemberResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LbsRoomMemberResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002K\000\003\000MemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarSearchRequest

@implementation RadarSearchRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;

typedef struct RadarSearchRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
} RadarSearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RadarSearchRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_Precision,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_MacAddr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_CellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchRequest_FieldNumber_Gpssource,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RadarSearchRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarSearchRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarSearchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002F\000\003I\000\004H\000\005I\000\006G\000\007F\000\010d\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarSearchMember

@implementation RadarSearchMember

@dynamic hasUserName, userName;
@dynamic hasDistance, distance;
@dynamic hasNickName, nickName;
@dynamic hasSmallImgURL, smallImgURL;
@dynamic hasEncodeUserName, encodeUserName;
@dynamic hasAntispamTicket, antispamTicket;

typedef struct RadarSearchMember__storage_ {
  uint32_t _has_storage_[1];
  uint32_t distance;
  NSString *userName;
  NSString *nickName;
  NSString *smallImgURL;
  NSString *encodeUserName;
  NSString *antispamTicket;
} RadarSearchMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchMember_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarSearchMember__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchMember_FieldNumber_Distance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarSearchMember__storage_, distance),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchMember_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RadarSearchMember__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallImgURL",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchMember_FieldNumber_SmallImgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RadarSearchMember__storage_, smallImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encodeUserName",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchMember_FieldNumber_EncodeUserName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RadarSearchMember__storage_, encodeUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchMember_FieldNumber_AntispamTicket,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RadarSearchMember__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarSearchMember class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarSearchMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001H\000\002H\000\003H\000\004I!!\000\005N\000\006N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarSearchResponse

@implementation RadarSearchResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTicket, ticket;
@dynamic hasOpCode, opCode;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;

typedef struct RadarSearchResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  uint32_t memberCount;
  BaseResponse *baseResponse;
  NSString *ticket;
  NSMutableArray *memberListArray;
} RadarSearchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RadarSearchResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarSearchResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchResponse_FieldNumber_Ticket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarSearchResponse__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchResponse_FieldNumber_OpCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RadarSearchResponse__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = RadarSearchResponse_FieldNumber_MemberCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RadarSearchResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RadarSearchMember),
        .number = RadarSearchResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RadarSearchResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarSearchResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarSearchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002F\000\003F\000\004K\000\005\000MemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarChatRoomMember

@implementation RadarChatRoomMember

@dynamic hasUserName, userName;
@dynamic hasAntispamTicket, antispamTicket;
@dynamic hasEncodeUserName, encodeUserName;

typedef struct RadarChatRoomMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *antispamTicket;
  NSString *encodeUserName;
} RadarChatRoomMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = RadarChatRoomMember_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarChatRoomMember__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "antispamTicket",
        .dataTypeSpecific.className = NULL,
        .number = RadarChatRoomMember_FieldNumber_AntispamTicket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarChatRoomMember__storage_, antispamTicket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encodeUserName",
        .dataTypeSpecific.className = NULL,
        .number = RadarChatRoomMember_FieldNumber_EncodeUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RadarChatRoomMember__storage_, encodeUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarChatRoomMember class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarChatRoomMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002N\000\003N\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarRelationChainRequest

@implementation RadarRelationChainRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;

typedef struct RadarRelationChainRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseRequest *baseRequest;
  NSMutableArray *memberListArray;
} RadarRelationChainRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RadarRelationChainRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarRelationChainRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = RadarRelationChainRequest_FieldNumber_MemberCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarRelationChainRequest__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RadarChatRoomMember),
        .number = RadarRelationChainRequest_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RadarRelationChainRequest__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarRelationChainRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarRelationChainRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002K\000\003\000MemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarRelationChainResponse

@implementation RadarRelationChainResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTicket, ticket;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;

typedef struct RadarRelationChainResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseResponse *baseResponse;
  NSString *ticket;
  NSMutableArray *memberListArray;
} RadarRelationChainResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RadarRelationChainResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarRelationChainResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = RadarRelationChainResponse_FieldNumber_Ticket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarRelationChainResponse__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = RadarRelationChainResponse_FieldNumber_MemberCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RadarRelationChainResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RadarChatRoomMember),
        .number = RadarRelationChainResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RadarRelationChainResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarRelationChainResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarRelationChainResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002F\000\003K\000\004\000MemberList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarCreateChatRoomRequest

@implementation RadarCreateChatRoomRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;
@dynamic hasPassWord, passWord;

typedef struct RadarCreateChatRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  BaseRequest *baseRequest;
  NSString *macAddr;
  NSString *cellId;
  NSString *passWord;
} RadarCreateChatRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = RadarCreateChatRoomRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_Longitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_Precision,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_MacAddr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_CellId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_Gpssource,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "passWord",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomRequest_FieldNumber_PassWord,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomRequest__storage_, passWord),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarCreateChatRoomRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarCreateChatRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001K\000\002I\000\003H\000\004I\000\005G\000\006F\000\007d\005\000\010H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RadarCreateChatRoomResponse

@implementation RadarCreateChatRoomResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasChatRoomName, chatRoomName;

typedef struct RadarCreateChatRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *chatRoomName;
} RadarCreateChatRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = RadarCreateChatRoomResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = RadarCreateChatRoomResponse_FieldNumber_ChatRoomName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RadarCreateChatRoomResponse__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RadarCreateChatRoomResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RadarCreateChatRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPOIListRequest

@implementation GetPOIListRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasScene, scene;
@dynamic hasOpCode, opCode;
@dynamic hasKeyword, keyword;
@dynamic hasBuff, buff;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;

typedef struct GetPOIListRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t scene;
  uint32_t opCode;
  BaseRequest *baseRequest;
  NSString *keyword;
  SKBuiltinBuffer_t *buff;
  double longitude;
  double latitude;
} GetPOIListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetPOIListRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListRequest_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListRequest_FieldNumber_OpCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListRequest_FieldNumber_Keyword,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetPOIListRequest_FieldNumber_Buff,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, buff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListRequest_FieldNumber_Longitude,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListRequest_FieldNumber_Latitude,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetPOIListRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPOIListRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPOIListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002E\000\003F\000\004G\000\005D\000\006I\000\007H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - POIItem

@implementation POIItem

@dynamic hasName, name;
@dynamic hasAddr, addr;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasTypeId, typeId;
@dynamic hasLink, link;
@dynamic hasNation, nation;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasDistrict, district;
@dynamic hasStreet, street;
@dynamic hasSubAddr, subAddr;

typedef struct POIItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *addr;
  NSString *typeId;
  NSString *link;
  NSString *nation;
  NSString *province;
  NSString *city;
  NSString *district;
  NSString *street;
  NSString *subAddr;
  double longitude;
  double latitude;
} POIItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POIItem__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addr",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Addr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POIItem__storage_, addr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Longitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POIItem__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Latitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POIItem__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "typeId",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_TypeId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POIItem__storage_, typeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Link,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(POIItem__storage_, link),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nation",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Nation,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(POIItem__storage_, nation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Province,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(POIItem__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_City,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(POIItem__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "district",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_District,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(POIItem__storage_, district),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "street",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_Street,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(POIItem__storage_, street),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subAddr",
        .dataTypeSpecific.className = NULL,
        .number = POIItem_FieldNumber_SubAddr,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(POIItem__storage_, subAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POIItem class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POIItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001D\000\002D\000\003I\000\004H\000\005F\000\006D\000\007F\000\010H\000\tD\000\nH\000\013F\000\014G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPOIListResponse

@implementation GetPOIListResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasListCount, listCount;
@dynamic poilistArray, poilistArray_Count;
@dynamic hasOpCode, opCode;
@dynamic hasIsEnd, isEnd;
@dynamic hasBuff, buff;
@dynamic hasURL, URL;
@dynamic hasLogoURL, logoURL;
@dynamic hasText, text;
@dynamic hasOpenId, openId;

typedef struct GetPOIListResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t listCount;
  uint32_t opCode;
  uint32_t isEnd;
  BaseResponse *baseResponse;
  NSMutableArray *poilistArray;
  SKBuiltinBuffer_t *buff;
  NSString *URL;
  NSString *logoURL;
  NSString *text;
  NSString *openId;
} GetPOIListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetPOIListResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listCount",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_ListCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, listCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "poilistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(POIItem),
        .number = GetPOIListResponse_FieldNumber_PoilistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, poilistArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_OpCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isEnd",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_IsEnd,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, isEnd),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buff",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GetPOIListResponse_FieldNumber_Buff,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, buff),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logoURL",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_LogoURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, logoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_Text,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = GetPOIListResponse_FieldNumber_OpenId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetPOIListResponse__storage_, openId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPOIListResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPOIListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001L\000\002I\000\003\000POIList\000\004F\000\005E\000\006D\000\007\001!!\000\010E!!\000\tD\000\n"
        "F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FacingMember

@implementation FacingMember

@dynamic hasUserName, userName;
@dynamic hasEncodeUserName, encodeUserName;
@dynamic hasNickName, nickName;
@dynamic hasSmallImgURL, smallImgURL;
@dynamic hasStatus, status;

typedef struct FacingMember__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  NSString *userName;
  NSString *encodeUserName;
  NSString *nickName;
  NSString *smallImgURL;
} FacingMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = FacingMember_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FacingMember__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encodeUserName",
        .dataTypeSpecific.className = NULL,
        .number = FacingMember_FieldNumber_EncodeUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FacingMember__storage_, encodeUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = FacingMember_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FacingMember__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smallImgURL",
        .dataTypeSpecific.className = NULL,
        .number = FacingMember_FieldNumber_SmallImgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FacingMember__storage_, smallImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = FacingMember_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FacingMember__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FacingMember class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FacingMember__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001H\000\002N\000\003H\000\004I!!\000\005F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FacingCreateChatRoomRequest

@implementation FacingCreateChatRoomRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasOpCode, opCode;
@dynamic hasPassWord, passWord;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;
@dynamic hasPrecision, precision;
@dynamic hasMacAddr, macAddr;
@dynamic hasCellId, cellId;
@dynamic hasGpssource, gpssource;
@dynamic hasTicket, ticket;

typedef struct FacingCreateChatRoomRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  float longitude;
  float latitude;
  int32_t precision;
  int32_t gpssource;
  BaseRequest *baseRequest;
  NSString *passWord;
  NSString *macAddr;
  NSString *cellId;
  NSString *ticket;
} FacingCreateChatRoomRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = FacingCreateChatRoomRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "passWord",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_PassWord,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, passWord),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_Latitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "precision",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_Precision,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, precision),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_MacAddr,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cellId",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_CellId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, cellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpssource",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_Gpssource,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, gpssource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomRequest_FieldNumber_Ticket,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomRequest__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FacingCreateChatRoomRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FacingCreateChatRoomRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001K\000\002F\000\003H\000\004I\000\005H\000\006I\000\007G\000\010F\000\td\005\000\nF\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FacingCreateChatRoomResponse

@implementation FacingCreateChatRoomResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasTicket, ticket;
@dynamic hasMemberCount, memberCount;
@dynamic memberListArray, memberListArray_Count;
@dynamic hasChatRoomName, chatRoomName;

typedef struct FacingCreateChatRoomResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t memberCount;
  BaseResponse *baseResponse;
  NSString *ticket;
  NSMutableArray *memberListArray;
  NSString *chatRoomName;
} FacingCreateChatRoomResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = FacingCreateChatRoomResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomResponse_FieldNumber_Ticket,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomResponse__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberCount",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomResponse_FieldNumber_MemberCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomResponse__storage_, memberCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "memberListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FacingMember),
        .number = FacingCreateChatRoomResponse_FieldNumber_MemberListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomResponse__storage_, memberListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatRoomName",
        .dataTypeSpecific.className = NULL,
        .number = FacingCreateChatRoomResponse_FieldNumber_ChatRoomName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FacingCreateChatRoomResponse__storage_, chatRoomName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FacingCreateChatRoomResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FacingCreateChatRoomResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002F\000\003K\000\004\000MemberList\000\005L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressRequest

@implementation GetAddressRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;

typedef struct GetAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  double longitude;
  double latitude;
} GetAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GetAddressRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = GetAddressRequest_FieldNumber_Longitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAddressRequest__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = GetAddressRequest_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetAddressRequest__storage_, latitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressRequest class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002I\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressResponse

@implementation GetAddressResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasRetJson, retJson;

typedef struct GetAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  NSString *retJson;
} GetAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetAddressResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retJson",
        .dataTypeSpecific.className = NULL,
        .number = GetAddressResponse_FieldNumber_RetJson,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAddressResponse__storage_, retJson),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressResponse class]
                                     rootClass:[MmlbsRoot class]
                                          file:MmlbsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001L\000\002G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
