// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmgame.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Mmgame.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmgameRoot

@implementation MmgameRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmgameRoot_FileDescriptor

static GPBFileDescriptor *MmgameRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - EnemyGameInfo

@implementation EnemyGameInfo

@dynamic hasType, type;
@dynamic hasScore, score;

typedef struct EnemyGameInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t score;
} EnemyGameInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = EnemyGameInfo_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnemyGameInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = EnemyGameInfo_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EnemyGameInfo__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnemyGameInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnemyGameInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EnemyGameKilled

@implementation EnemyGameKilled

@dynamic hasType, type;
@dynamic hasCount, count;
@dynamic hasGeneralCount, generalCount;
@dynamic hasUsedCount, usedCount;

typedef struct EnemyGameKilled__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t count;
  uint32_t generalCount;
  uint32_t usedCount;
} EnemyGameKilled__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = EnemyGameKilled_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnemyGameKilled__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = EnemyGameKilled_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EnemyGameKilled__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "generalCount",
        .dataTypeSpecific.className = NULL,
        .number = EnemyGameKilled_FieldNumber_GeneralCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EnemyGameKilled__storage_, generalCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "usedCount",
        .dataTypeSpecific.className = NULL,
        .number = EnemyGameKilled_FieldNumber_UsedCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EnemyGameKilled__storage_, usedCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnemyGameKilled class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnemyGameKilled__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001D\000\002E\000\003L\000\004I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserGameInfo

@implementation UserGameInfo

@dynamic hasUserName, userName;
@dynamic hasNickName, nickName;
@dynamic hasHeadImageURL, headImageURL;

typedef struct UserGameInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *nickName;
  NSString *headImageURL;
} UserGameInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = UserGameInfo_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserGameInfo__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = UserGameInfo_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserGameInfo__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImageURL",
        .dataTypeSpecific.className = NULL,
        .number = UserGameInfo_FieldNumber_HeadImageURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserGameInfo__storage_, headImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserGameInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserGameInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002H\000\003J!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserGameAchieveInfo

@implementation UserGameAchieveInfo

@dynamic hasUserInfo, userInfo;
@dynamic hasScore, score;
@dynamic hasRank, rank;

typedef struct UserGameAchieveInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t score;
  uint32_t rank;
  UserGameInfo *userInfo;
} UserGameAchieveInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameInfo),
        .number = UserGameAchieveInfo_FieldNumber_UserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserGameAchieveInfo__storage_, userInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = UserGameAchieveInfo_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserGameAchieveInfo__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = UserGameAchieveInfo_FieldNumber_Rank,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserGameAchieveInfo__storage_, rank),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserGameAchieveInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserGameAchieveInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002E\000\003D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserGameWishInfo

@implementation UserGameWishInfo

@dynamic hasUserInfo, userInfo;

typedef struct UserGameWishInfo__storage_ {
  uint32_t _has_storage_[1];
  UserGameInfo *userInfo;
} UserGameWishInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameInfo),
        .number = UserGameWishInfo_FieldNumber_UserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserGameWishInfo__storage_, userInfo),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserGameWishInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserGameWishInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GamePropsInfo

@implementation GamePropsInfo

@dynamic hasPropsId, propsId;
@dynamic hasIconURL, iconURL;
@dynamic hasName, name;
@dynamic hasDesc, desc;
@dynamic hasType, type;

typedef struct GamePropsInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t propsId;
  uint32_t type;
  NSString *iconURL;
  NSString *name;
  NSString *desc;
} GamePropsInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "propsId",
        .dataTypeSpecific.className = NULL,
        .number = GamePropsInfo_FieldNumber_PropsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GamePropsInfo__storage_, propsId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = GamePropsInfo_FieldNumber_IconURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GamePropsInfo__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GamePropsInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GamePropsInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = GamePropsInfo_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GamePropsInfo__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GamePropsInfo_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GamePropsInfo__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GamePropsInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GamePropsInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001G\000\002E!!\000\003D\000\004D\000\005D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameUserPropsInfo

@implementation GameUserPropsInfo

@dynamic hasPropsId, propsId;
@dynamic hasCount, count;

typedef struct GameUserPropsInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t propsId;
  uint32_t count;
} GameUserPropsInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "propsId",
        .dataTypeSpecific.className = NULL,
        .number = GameUserPropsInfo_FieldNumber_PropsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameUserPropsInfo__storage_, propsId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameUserPropsInfo_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameUserPropsInfo__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameUserPropsInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameUserPropsInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameAnnouncementInfo

@implementation GameAnnouncementInfo

@dynamic hasStyle, style;
@dynamic hasTitle, title;
@dynamic hasDesc, desc;

typedef struct GameAnnouncementInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t style;
  NSString *title;
  NSString *desc;
} GameAnnouncementInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "style",
        .dataTypeSpecific.className = NULL,
        .number = GameAnnouncementInfo_FieldNumber_Style,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameAnnouncementInfo__storage_, style),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = GameAnnouncementInfo_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameAnnouncementInfo__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = GameAnnouncementInfo_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameAnnouncementInfo__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameAnnouncementInfo class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameAnnouncementInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001E\000\002E\000\003D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameConsumeProps

@implementation GameConsumeProps

@dynamic hasPropsId, propsId;
@dynamic hasConsumeCount, consumeCount;

typedef struct GameConsumeProps__storage_ {
  uint32_t _has_storage_[1];
  uint32_t propsId;
  int32_t consumeCount;
} GameConsumeProps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "propsId",
        .dataTypeSpecific.className = NULL,
        .number = GameConsumeProps_FieldNumber_PropsId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameConsumeProps__storage_, propsId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "consumeCount",
        .dataTypeSpecific.className = NULL,
        .number = GameConsumeProps_FieldNumber_ConsumeCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameConsumeProps__storage_, consumeCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameConsumeProps class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameConsumeProps__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameInitReq

@implementation GameInitReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;

typedef struct GameInitReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *appId;
} GameInitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameInitReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameInitReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameInitReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameInitReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameInitReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameInitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002DA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameInitResp

@implementation GameInitResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLifeNum, lifeNum;
@dynamic hasGameNumerConfig, gameNumerConfig;
@dynamic hasCheckLeftTime, checkLeftTime;
@dynamic hasToken, token;
@dynamic hasFriendCount, friendCount;
@dynamic friendListArray, friendListArray_Count;
@dynamic hasWishCount, wishCount;
@dynamic wishListArray, wishListArray_Count;
@dynamic hasGamePropsCount, gamePropsCount;
@dynamic gamePropsListArray, gamePropsListArray_Count;
@dynamic hasGameAnnouncementCount, gameAnnouncementCount;
@dynamic gameAnnouncementListArray, gameAnnouncementListArray_Count;
@dynamic hasPropsViewTip, propsViewTip;
@dynamic hasRankViewTip, rankViewTip;
@dynamic hasGameCoinCount, gameCoinCount;
@dynamic hasProductIdCount, productIdCount;
@dynamic productIdListArray, productIdListArray_Count;
@dynamic hasBuyEngineOilWording, buyEngineOilWording;
@dynamic hasOilPrice, oilPrice;
@dynamic hasOilCurrency, oilCurrency;

typedef struct GameInitResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lifeNum;
  uint32_t checkLeftTime;
  int32_t friendCount;
  int32_t wishCount;
  int32_t gamePropsCount;
  int32_t gameAnnouncementCount;
  uint32_t gameCoinCount;
  uint32_t productIdCount;
  BaseResponse *baseResponse;
  NSString *gameNumerConfig;
  NSString *token;
  NSMutableArray *friendListArray;
  NSMutableArray *wishListArray;
  NSMutableArray *gamePropsListArray;
  NSMutableArray *gameAnnouncementListArray;
  NSString *propsViewTip;
  NSString *rankViewTip;
  NSMutableArray *productIdListArray;
  NSString *buyEngineOilWording;
  NSString *oilPrice;
  NSString *oilCurrency;
} GameInitResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameInitResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_LifeNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, lifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gameNumerConfig",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_GameNumerConfig,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, gameNumerConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "checkLeftTime",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_CheckLeftTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, checkLeftTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_Token,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendCount",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_FriendCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, friendCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameInfo),
        .number = GameInitResp_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, friendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wishCount",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_WishCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, wishCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wishListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameWishInfo),
        .number = GameInitResp_FieldNumber_WishListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, wishListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gamePropsCount",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_GamePropsCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, gamePropsCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gamePropsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GameUserPropsInfo),
        .number = GameInitResp_FieldNumber_GamePropsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, gamePropsListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameAnnouncementCount",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_GameAnnouncementCount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, gameAnnouncementCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameAnnouncementListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GameAnnouncementInfo),
        .number = GameInitResp_FieldNumber_GameAnnouncementListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, gameAnnouncementListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propsViewTip",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_PropsViewTip,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, propsViewTip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rankViewTip",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_RankViewTip,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, rankViewTip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameCoinCount",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_GameCoinCount,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, gameCoinCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productIdCount",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_ProductIdCount,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, productIdCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productIdListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GameInitResp_FieldNumber_ProductIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, productIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buyEngineOilWording",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_BuyEngineOilWording,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, buyEngineOilWording),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oilPrice",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_OilPrice,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, oilPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oilCurrency",
        .dataTypeSpecific.className = NULL,
        .number = GameInitResp_FieldNumber_OilCurrency,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(GameInitResp__storage_, oilCurrency),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameInitResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameInitResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\025\001L\000\002G\000\003O\000\004M\000\005E\000\006K\000\007\000FriendList\000\010I\000\t\000Wis"
        "hList\000\nN\000\013\000GamePropsList\000\014U\000\r\000GameAnnoun"
        "cementList\000\016L\000\017K\000\020M\000\021N\000\022\000ProductIdList\000\023"
        "S\000\024H\000\025K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameEndReq

@implementation GameEndReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasCount, count;
@dynamic enemyKilledArray, enemyKilledArray_Count;
@dynamic hasLocalScore, localScore;
@dynamic hasConsumeTime, consumeTime;
@dynamic hasToken, token;
@dynamic hasDeadCount, deadCount;
@dynamic hasGameConsumePropsCount, gameConsumePropsCount;
@dynamic gameConsumePropsListArray, gameConsumePropsListArray_Count;
@dynamic hasGameStartTime, gameStartTime;
@dynamic hasGameEndTime, gameEndTime;
@dynamic hasShieldNum, shieldNum;
@dynamic hasTotalShots, totalShots;
@dynamic hasGameCoinCount, gameCoinCount;
@dynamic hasClientUseReviveNum, clientUseReviveNum;

typedef struct GameEndReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  uint32_t localScore;
  uint32_t consumeTime;
  uint32_t deadCount;
  int32_t gameConsumePropsCount;
  uint32_t gameStartTime;
  uint32_t gameEndTime;
  uint32_t shieldNum;
  uint32_t totalShots;
  uint32_t gameCoinCount;
  uint32_t clientUseReviveNum;
  BaseRequest *baseRequest;
  NSString *appId;
  NSMutableArray *enemyKilledArray;
  NSString *token;
  NSMutableArray *gameConsumePropsListArray;
} GameEndReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameEndReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "enemyKilledArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EnemyGameKilled),
        .number = GameEndReq_FieldNumber_EnemyKilledArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, enemyKilledArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "localScore",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_LocalScore,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, localScore),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "consumeTime",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_ConsumeTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, consumeTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_Token,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deadCount",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_DeadCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, deadCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gameConsumePropsCount",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_GameConsumePropsCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, gameConsumePropsCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameConsumePropsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GameConsumeProps),
        .number = GameEndReq_FieldNumber_GameConsumePropsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, gameConsumePropsListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameStartTime",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_GameStartTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, gameStartTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gameEndTime",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_GameEndTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, gameEndTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shieldNum",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_ShieldNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, shieldNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalShots",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_TotalShots,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, totalShots),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gameCoinCount",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_GameCoinCount,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, gameCoinCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientUseReviveNum",
        .dataTypeSpecific.className = NULL,
        .number = GameEndReq_FieldNumber_ClientUseReviveNum,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GameEndReq__storage_, clientUseReviveNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameEndReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameEndReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001K\000\002DA\000\003E\000\004\000EnemyKilled\000\005J\000\006K\000\007E\000\010I\000\tU\000"
        "\n\000GameConsumePropsList\000\013M\000\014K\000\rI\000\016J\000\017M\000\020R"
        "\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameEndResp

@implementation GameEndResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasScore, score;
@dynamic hasAchievement, achievement;
@dynamic hasRank, rank;
@dynamic hasLifeNum, lifeNum;
@dynamic hasCheckLeftTime, checkLeftTime;
@dynamic hasCount, count;
@dynamic rankListArray, rankListArray_Count;
@dynamic hasPropsViewTip, propsViewTip;
@dynamic hasRankViewTip, rankViewTip;
@dynamic hasGameCoinCount, gameCoinCount;

typedef struct GameEndResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t score;
  uint32_t rank;
  uint32_t lifeNum;
  uint32_t checkLeftTime;
  int32_t count;
  uint32_t gameCoinCount;
  BaseResponse *baseResponse;
  NSString *achievement;
  NSMutableArray *rankListArray;
  NSString *propsViewTip;
  NSString *rankViewTip;
} GameEndResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameEndResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_Score,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "achievement",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_Achievement,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, achievement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_Rank,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, rank),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_LifeNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, lifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "checkLeftTime",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_CheckLeftTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, checkLeftTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_Count,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameAchieveInfo),
        .number = GameEndResp_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, rankListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propsViewTip",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_PropsViewTip,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, propsViewTip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rankViewTip",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_RankViewTip,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, rankViewTip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameCoinCount",
        .dataTypeSpecific.className = NULL,
        .number = GameEndResp_FieldNumber_GameCoinCount,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GameEndResp__storage_, gameCoinCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameEndResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameEndResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001L\000\002E\000\003K\000\004D\000\005G\000\006M\000\007E\000\010\000RankList\000\013L\000\014K\000\r"
        "M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameRankListReq

@implementation GameRankListReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;

typedef struct GameRankListReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *appId;
} GameRankListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameRankListReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameRankListReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameRankListReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameRankListReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameRankListReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameRankListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002DA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameRankListResp

@implementation GameRankListResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic rankListArray, rankListArray_Count;

typedef struct GameRankListResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *rankListArray;
} GameRankListResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameRankListResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameRankListResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameRankListResp_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameRankListResp__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameAchieveInfo),
        .number = GameRankListResp_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameRankListResp__storage_, rankListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameRankListResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameRankListResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000RankList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameStartReq

@implementation GameStartReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasLocalLifeNum, localLifeNum;
@dynamic hasToken, token;
@dynamic hasNeedClearWishList, needClearWishList;
@dynamic hasGameConsumePropsCount, gameConsumePropsCount;
@dynamic gameConsumePropsListArray, gameConsumePropsListArray_Count;

typedef struct GameStartReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t localLifeNum;
  uint32_t needClearWishList;
  int32_t gameConsumePropsCount;
  BaseRequest *baseRequest;
  NSString *appId;
  NSString *token;
  NSMutableArray *gameConsumePropsListArray;
} GameStartReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameStartReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameStartReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "localLifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameStartReq_FieldNumber_LocalLifeNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, localLifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GameStartReq_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "needClearWishList",
        .dataTypeSpecific.className = NULL,
        .number = GameStartReq_FieldNumber_NeedClearWishList,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, needClearWishList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gameConsumePropsCount",
        .dataTypeSpecific.className = NULL,
        .number = GameStartReq_FieldNumber_GameConsumePropsCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, gameConsumePropsCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameConsumePropsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GameConsumeProps),
        .number = GameStartReq_FieldNumber_GameConsumePropsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameStartReq__storage_, gameConsumePropsListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameStartReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameStartReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002DA\000\003L\000\004E\000\005Q\000\006U\000\007\000GameConsumePropsLi"
        "st\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameStartResp

@implementation GameStartResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLifeNum, lifeNum;
@dynamic hasCheckLeftTime, checkLeftTime;
@dynamic hasToken, token;
@dynamic hasCount, count;
@dynamic rankListArray, rankListArray_Count;
@dynamic hasGamePropsCount, gamePropsCount;
@dynamic gamePropsListArray, gamePropsListArray_Count;
@dynamic hasGameCoinCount, gameCoinCount;

typedef struct GameStartResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lifeNum;
  uint32_t checkLeftTime;
  int32_t count;
  int32_t gamePropsCount;
  uint32_t gameCoinCount;
  BaseResponse *baseResponse;
  NSString *token;
  NSMutableArray *rankListArray;
  NSMutableArray *gamePropsListArray;
} GameStartResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameStartResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameStartResp_FieldNumber_LifeNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, lifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "checkLeftTime",
        .dataTypeSpecific.className = NULL,
        .number = GameStartResp_FieldNumber_CheckLeftTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, checkLeftTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GameStartResp_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameStartResp_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rankListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameAchieveInfo),
        .number = GameStartResp_FieldNumber_RankListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, rankListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gamePropsCount",
        .dataTypeSpecific.className = NULL,
        .number = GameStartResp_FieldNumber_GamePropsCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, gamePropsCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gamePropsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GameUserPropsInfo),
        .number = GameStartResp_FieldNumber_GamePropsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, gamePropsListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gameCoinCount",
        .dataTypeSpecific.className = NULL,
        .number = GameStartResp_FieldNumber_GameCoinCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GameStartResp__storage_, gameCoinCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameStartResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameStartResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001L\000\002G\000\003M\000\004E\000\005E\000\006\000RankList\000\007N\000\010\000GameProp"
        "sList\000\tM\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameCheckReq

@implementation GameCheckReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasLocalLifeNum, localLifeNum;
@dynamic hasToken, token;

typedef struct GameCheckReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t localLifeNum;
  BaseRequest *baseRequest;
  NSString *appId;
  NSString *token;
} GameCheckReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameCheckReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameCheckReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameCheckReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameCheckReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "localLifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameCheckReq_FieldNumber_LocalLifeNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameCheckReq__storage_, localLifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GameCheckReq_FieldNumber_Token,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameCheckReq__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameCheckReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameCheckReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002DA\000\003L\000\004E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameCheckResp

@implementation GameCheckResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCheckLeftTime, checkLeftTime;
@dynamic hasLifeNum, lifeNum;

typedef struct GameCheckResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t checkLeftTime;
  uint32_t lifeNum;
  BaseResponse *baseResponse;
} GameCheckResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameCheckResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameCheckResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "checkLeftTime",
        .dataTypeSpecific.className = NULL,
        .number = GameCheckResp_FieldNumber_CheckLeftTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameCheckResp__storage_, checkLeftTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameCheckResp_FieldNumber_LifeNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameCheckResp__storage_, lifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameCheckResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameCheckResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002M\000\003G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameWishReq

@implementation GameWishReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasCount, count;
@dynamic userNameListArray, userNameListArray_Count;

typedef struct GameWishReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  BaseRequest *baseRequest;
  NSString *appId;
  NSMutableArray *userNameListArray;
} GameWishReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameWishReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameWishReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameWishReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameWishReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameWishReq_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameWishReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userNameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GameWishReq_FieldNumber_UserNameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameWishReq__storage_, userNameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameWishReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameWishReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001K\000\002DA\000\003E\000\004\000UserNameList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameWishResp

@implementation GameWishResp

@dynamic hasBaseResponse, baseResponse;

typedef struct GameWishResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} GameWishResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameWishResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameWishResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameWishResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameWishResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameGiftReq

@implementation GameGiftReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasLocalLifeNum, localLifeNum;
@dynamic hasCount, count;
@dynamic userNameListArray, userNameListArray_Count;

typedef struct GameGiftReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t localLifeNum;
  int32_t count;
  BaseRequest *baseRequest;
  NSString *appId;
  NSMutableArray *userNameListArray;
} GameGiftReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameGiftReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameGiftReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameGiftReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameGiftReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "localLifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameGiftReq_FieldNumber_LocalLifeNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameGiftReq__storage_, localLifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameGiftReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameGiftReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userNameListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinString_t),
        .number = GameGiftReq_FieldNumber_UserNameListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameGiftReq__storage_, userNameListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameGiftReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameGiftReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002DA\000\003L\000\004E\000\005\000UserNameList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameGiftResp

@implementation GameGiftResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasLifeNum, lifeNum;
@dynamic hasCheckLeftTime, checkLeftTime;

typedef struct GameGiftResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lifeNum;
  uint32_t checkLeftTime;
  BaseResponse *baseResponse;
} GameGiftResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameGiftResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameGiftResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lifeNum",
        .dataTypeSpecific.className = NULL,
        .number = GameGiftResp_FieldNumber_LifeNum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameGiftResp__storage_, lifeNum),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "checkLeftTime",
        .dataTypeSpecific.className = NULL,
        .number = GameGiftResp_FieldNumber_CheckLeftTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameGiftResp__storage_, checkLeftTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameGiftResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameGiftResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameFriendListReq

@implementation GameFriendListReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;

typedef struct GameFriendListReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *appId;
} GameFriendListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameFriendListReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameFriendListReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameFriendListReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameFriendListReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameFriendListReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameFriendListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002DA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameFriendListResp

@implementation GameFriendListResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic friendListArray, friendListArray_Count;

typedef struct GameFriendListResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *friendListArray;
} GameFriendListResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameFriendListResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameFriendListResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameFriendListResp_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameFriendListResp__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameInfo),
        .number = GameFriendListResp_FieldNumber_FriendListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameFriendListResp__storage_, friendListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameFriendListResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameFriendListResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000FriendList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameWishListReq

@implementation GameWishListReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;

typedef struct GameWishListReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *appId;
} GameWishListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameWishListReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameWishListReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameWishListReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameWishListReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameWishListReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameWishListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002DA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameWishListResp

@implementation GameWishListResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic wishListArray, wishListArray_Count;

typedef struct GameWishListResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *wishListArray;
} GameWishListResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameWishListResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameWishListResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GameWishListResp_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameWishListResp__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wishListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserGameWishInfo),
        .number = GameWishListResp_FieldNumber_WishListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameWishListResp__storage_, wishListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameWishListResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameWishListResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000WishList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameShareReq

@implementation GameShareReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;
@dynamic hasType, type;
@dynamic hasScore, score;
@dynamic hasAchieve, achieve;

typedef struct GameShareReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t score;
  BaseRequest *baseRequest;
  NSString *appId;
  NSString *achieve;
} GameShareReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameShareReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameShareReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameShareReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameShareReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GameShareReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameShareReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = GameShareReq_FieldNumber_Score,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameShareReq__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "achieve",
        .dataTypeSpecific.className = NULL,
        .number = GameShareReq_FieldNumber_Achieve,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameShareReq__storage_, achieve),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameShareReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameShareReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002DA\000\003D\000\004E\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameShareResp

@implementation GameShareResp

@dynamic hasBaseResponse, baseResponse;

typedef struct GameShareResp__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} GameShareResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameShareResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameShareResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameShareResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameShareResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameResourceReq

@implementation GameResourceReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasPropsCount, propsCount;
@dynamic propsIdListArray, propsIdListArray_Count;

typedef struct GameResourceReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t propsCount;
  BaseRequest *baseRequest;
  GPBUInt32Array *propsIdListArray;
} GameResourceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameResourceReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameResourceReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propsCount",
        .dataTypeSpecific.className = NULL,
        .number = GameResourceReq_FieldNumber_PropsCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameResourceReq__storage_, propsCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "propsIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = GameResourceReq_FieldNumber_PropsIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameResourceReq__storage_, propsIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameResourceReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameResourceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002J\000\003\000PropsIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameResourceResp

@implementation GameResourceResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasPropsCount, propsCount;
@dynamic propsListArray, propsListArray_Count;

typedef struct GameResourceResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t propsCount;
  BaseResponse *baseResponse;
  NSMutableArray *propsListArray;
} GameResourceResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameResourceResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameResourceResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propsCount",
        .dataTypeSpecific.className = NULL,
        .number = GameResourceResp_FieldNumber_PropsCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameResourceResp__storage_, propsCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "propsListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GamePropsInfo),
        .number = GameResourceResp_FieldNumber_PropsListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameResourceResp__storage_, propsListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameResourceResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameResourceResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002J\000\003\000PropsList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameConsumeReq

@implementation GameConsumeReq

@dynamic hasBaseRequest, baseRequest;
@dynamic hasAppId, appId;

typedef struct GameConsumeReq__storage_ {
  uint32_t _has_storage_[1];
  BaseRequest *baseRequest;
  NSString *appId;
} GameConsumeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameConsumeReq_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameConsumeReq__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = GameConsumeReq_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameConsumeReq__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameConsumeReq class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameConsumeReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002DA\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameConsumeResp

@implementation GameConsumeResp

@dynamic hasBaseResponse, baseResponse;
@dynamic hasConsumeOk, consumeOk;
@dynamic hasGameCoinCount, gameCoinCount;

typedef struct GameConsumeResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t consumeOk;
  uint32_t gameCoinCount;
  BaseResponse *baseResponse;
} GameConsumeResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameConsumeResp_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameConsumeResp__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consumeOk",
        .dataTypeSpecific.className = NULL,
        .number = GameConsumeResp_FieldNumber_ConsumeOk,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameConsumeResp__storage_, consumeOk),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gameCoinCount",
        .dataTypeSpecific.className = NULL,
        .number = GameConsumeResp_FieldNumber_GameCoinCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameConsumeResp__storage_, gameCoinCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameConsumeResp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameConsumeResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002I\000\003M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddGameMsg

@implementation AddGameMsg

@dynamic hasMsgId, msgId;
@dynamic hasFromUserName, fromUserName;
@dynamic hasToUserName, toUserName;
@dynamic hasType, type;
@dynamic hasFlag, flag;
@dynamic hasStatus, status;
@dynamic hasUpdateTime, updateTime;
@dynamic hasUpdateSeq, updateSeq;

typedef struct AddGameMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgId;
  int32_t type;
  uint32_t flag;
  uint32_t status;
  uint32_t updateTime;
  uint32_t updateSeq;
  NSString *fromUserName;
  NSString *toUserName;
} AddGameMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_FromUserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_ToUserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_Flag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_UpdateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "updateSeq",
        .dataTypeSpecific.className = NULL,
        .number = AddGameMsg_FieldNumber_UpdateSeq,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddGameMsg__storage_, updateSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddGameMsg class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddGameMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001E\000\002L\000\003J\000\004D\000\005D\000\006F\000\007J\000\010I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameSyncRequest

@implementation GameSyncRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasSelector, selector;
@dynamic hasKeyBuf, keyBuf;

typedef struct GameSyncRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t selector;
  BaseRequest *baseRequest;
  SKBuiltinBuffer_t *keyBuf;
} GameSyncRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = GameSyncRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameSyncRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = GameSyncRequest_FieldNumber_Selector,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameSyncRequest__storage_, selector),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GameSyncRequest_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameSyncRequest__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameSyncRequest class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameSyncRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002H\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameSyncResponse

@implementation GameSyncResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCmdList, cmdList;
@dynamic hasKeyBuf, keyBuf;
@dynamic hasContinueFlag, continueFlag;

typedef struct GameSyncResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t continueFlag;
  BaseResponse *baseResponse;
  CmdList *cmdList;
  SKBuiltinBuffer_t *keyBuf;
} GameSyncResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GameSyncResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameSyncResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cmdList",
        .dataTypeSpecific.className = GPBStringifySymbol(CmdList),
        .number = GameSyncResponse_FieldNumber_CmdList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameSyncResponse__storage_, cmdList),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyBuf",
        .dataTypeSpecific.className = GPBStringifySymbol(SKBuiltinBuffer_t),
        .number = GameSyncResponse_FieldNumber_KeyBuf,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameSyncResponse__storage_, keyBuf),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continueFlag",
        .dataTypeSpecific.className = NULL,
        .number = GameSyncResponse_FieldNumber_ContinueFlag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameSyncResponse__storage_, continueFlag),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameSyncResponse class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameSyncResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001L\000\002G\000\003F\000\004L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GameMsg

@implementation GameMsg

@dynamic hasMsgId, msgId;
@dynamic hasStatus, status;
@dynamic hasObject, object;
@dynamic hasUpdateTime, updateTime;
@dynamic hasUpdateSeq, updateSeq;

typedef struct GameMsg__storage_ {
  uint32_t _has_storage_[1];
  uint32_t msgId;
  uint32_t status;
  uint32_t updateTime;
  uint32_t updateSeq;
  NSString *object;
} GameMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = GameMsg_FieldNumber_MsgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GameMsg_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GameMsg__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "object",
        .dataTypeSpecific.className = NULL,
        .number = GameMsg_FieldNumber_Object,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GameMsg__storage_, object),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updateTime",
        .dataTypeSpecific.className = NULL,
        .number = GameMsg_FieldNumber_UpdateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GameMsg__storage_, updateTime),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "updateSeq",
        .dataTypeSpecific.className = NULL,
        .number = GameMsg_FieldNumber_UpdateSeq,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GameMsg__storage_, updateSeq),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameMsg class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001E\000\002F\000\003F\000\004J\000\005I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetGameMsgRequest

@implementation BatchGetGameMsgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic msgIdListArray, msgIdListArray_Count;

typedef struct BatchGetGameMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  GPBUInt32Array *msgIdListArray;
} BatchGetGameMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchGetGameMsgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetGameMsgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetGameMsgRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetGameMsgRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetGameMsgRequest_FieldNumber_MsgIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetGameMsgRequest__storage_, msgIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetGameMsgRequest class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetGameMsgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003\000MsgIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchGetGameMsgResponse

@implementation BatchGetGameMsgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic msgListArray, msgListArray_Count;

typedef struct BatchGetGameMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *msgListArray;
} BatchGetGameMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchGetGameMsgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchGetGameMsgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchGetGameMsgResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchGetGameMsgResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GameMsg),
        .number = BatchGetGameMsgResponse_FieldNumber_MsgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchGetGameMsgResponse__storage_, msgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchGetGameMsgResponse class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchGetGameMsgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000MsgList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchDelGameMsgRequest

@implementation BatchDelGameMsgRequest

@dynamic hasBaseRequest, baseRequest;
@dynamic hasCount, count;
@dynamic msgIdListArray, msgIdListArray_Count;

typedef struct BatchDelGameMsgRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseRequest *baseRequest;
  GPBUInt32Array *msgIdListArray;
} BatchDelGameMsgRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRequest),
        .number = BatchDelGameMsgRequest_FieldNumber_BaseRequest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchDelGameMsgRequest__storage_, baseRequest),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchDelGameMsgRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchDelGameMsgRequest__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = BatchDelGameMsgRequest_FieldNumber_MsgIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchDelGameMsgRequest__storage_, msgIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchDelGameMsgRequest class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchDelGameMsgRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001K\000\002E\000\003\000MsgIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelGameMsgRsp

@implementation DelGameMsgRsp

@dynamic hasRet, ret;
@dynamic hasMsgId, msgId;

typedef struct DelGameMsgRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t ret;
  uint32_t msgId;
} DelGameMsgRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = DelGameMsgRsp_FieldNumber_Ret,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelGameMsgRsp__storage_, ret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = DelGameMsgRsp_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelGameMsgRsp__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DelGameMsgRsp class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelGameMsgRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001C\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchDelGameMsgResponse

@implementation BatchDelGameMsgResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCount, count;
@dynamic listArray, listArray_Count;

typedef struct BatchDelGameMsgResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  BaseResponse *baseResponse;
  NSMutableArray *listArray;
} BatchDelGameMsgResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = BatchDelGameMsgResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchDelGameMsgResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BatchDelGameMsgResponse_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchDelGameMsgResponse__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DelGameMsgRsp),
        .number = BatchDelGameMsgResponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchDelGameMsgResponse__storage_, listArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchDelGameMsgResponse class]
                                     rootClass:[MmgameRoot class]
                                          file:MmgameRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchDelGameMsgResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002E\000\003\000List\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
