// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmextdevice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Mmextdevice.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
#import "Mmbase.pbobjc.h"
#import "Mmutils.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MmextdeviceRoot

@implementation MmextdeviceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MmextdeviceRoot_FileDescriptor

static GPBFileDescriptor *MmextdeviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum ExtDevLoginType

GPBEnumDescriptor *ExtDevLoginType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ExtdevLogintypeNormal\000ExtdevLogintypeTmp"
        "\000ExtdevLogintypePair\000";
    static const int32_t values[] = {
        ExtDevLoginType_ExtdevLogintypeNormal,
        ExtDevLoginType_ExtdevLogintypeTmp,
        ExtDevLoginType_ExtdevLogintypePair,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ExtDevLoginType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ExtDevLoginType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ExtDevLoginType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ExtDevLoginType_ExtdevLogintypeNormal:
    case ExtDevLoginType_ExtdevLogintypeTmp:
    case ExtDevLoginType_ExtdevLogintypePair:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ExtDeviceLoginConfirmGetRequest

@implementation ExtDeviceLoginConfirmGetRequest

@dynamic hasLoginURL, loginURL;

typedef struct ExtDeviceLoginConfirmGetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginURL;
} ExtDeviceLoginConfirmGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginURL",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmGetRequest_FieldNumber_LoginURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmGetRequest__storage_, loginURL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmGetRequest class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmGetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001F!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmOKRet

@implementation ExtDeviceLoginConfirmOKRet

@dynamic hasIconType, iconType;
@dynamic hasContentStr, contentStr;
@dynamic hasButtonOkStr, buttonOkStr;
@dynamic hasButtonCancelStr, buttonCancelStr;
@dynamic hasReqSessionLimit, reqSessionLimit;
@dynamic hasConfirmTimeOut, confirmTimeOut;
@dynamic hasLoginedDevTip, loginedDevTip;
@dynamic hasTitleStr, titleStr;

typedef struct ExtDeviceLoginConfirmOKRet__storage_ {
  uint32_t _has_storage_[1];
  uint32_t iconType;
  uint32_t reqSessionLimit;
  uint32_t confirmTimeOut;
  NSString *contentStr;
  NSString *buttonOkStr;
  NSString *buttonCancelStr;
  NSString *loginedDevTip;
  NSString *titleStr;
} ExtDeviceLoginConfirmOKRet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iconType",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_IconType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contentStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_ContentStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, contentStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonOkStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_ButtonOkStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, buttonOkStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonCancelStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_ButtonCancelStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, buttonCancelStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reqSessionLimit",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_ReqSessionLimit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, reqSessionLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "confirmTimeOut",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_ConfirmTimeOut,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, confirmTimeOut),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "loginedDevTip",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_LoginedDevTip,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, loginedDevTip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRet_FieldNumber_TitleStr,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRet__storage_, titleStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmOKRet class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmOKRet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001H\000\002J\000\003K\000\004O\000\005O\000\006N\000\007M\000\010H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmErrorRet

@implementation ExtDeviceLoginConfirmErrorRet

@dynamic hasIconType, iconType;
@dynamic hasContentStr, contentStr;
@dynamic hasTitleStr, titleStr;
@dynamic hasButtonStr, buttonStr;

typedef struct ExtDeviceLoginConfirmErrorRet__storage_ {
  uint32_t _has_storage_[1];
  uint32_t iconType;
  NSString *contentStr;
  NSString *titleStr;
  NSString *buttonStr;
} ExtDeviceLoginConfirmErrorRet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iconType",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmErrorRet_FieldNumber_IconType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmErrorRet__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contentStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmErrorRet_FieldNumber_ContentStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmErrorRet__storage_, contentStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmErrorRet_FieldNumber_TitleStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmErrorRet__storage_, titleStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmErrorRet_FieldNumber_ButtonStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmErrorRet__storage_, buttonStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmErrorRet class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmErrorRet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002J\000\003H\000\004I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmExpiredRet

@implementation ExtDeviceLoginConfirmExpiredRet

@dynamic hasIconType, iconType;
@dynamic hasContentStr, contentStr;
@dynamic hasButtonStr, buttonStr;
@dynamic hasTitleStr, titleStr;

typedef struct ExtDeviceLoginConfirmExpiredRet__storage_ {
  uint32_t _has_storage_[1];
  uint32_t iconType;
  NSString *contentStr;
  NSString *buttonStr;
  NSString *titleStr;
} ExtDeviceLoginConfirmExpiredRet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iconType",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmExpiredRet_FieldNumber_IconType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmExpiredRet__storage_, iconType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contentStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmExpiredRet_FieldNumber_ContentStr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmExpiredRet__storage_, contentStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buttonStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmExpiredRet_FieldNumber_ButtonStr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmExpiredRet__storage_, buttonStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmExpiredRet_FieldNumber_TitleStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmExpiredRet__storage_, titleStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmExpiredRet class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmExpiredRet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002J\000\003I\000\004H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmGetResponse

@implementation ExtDeviceLoginConfirmGetResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasOkret, okret;
@dynamic hasErrorRet, errorRet;
@dynamic hasExpiredRet, expiredRet;
@dynamic hasDeviceNameStr, deviceNameStr;

typedef struct ExtDeviceLoginConfirmGetResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  ExtDeviceLoginConfirmOKRet *okret;
  ExtDeviceLoginConfirmErrorRet *errorRet;
  ExtDeviceLoginConfirmExpiredRet *expiredRet;
  NSString *deviceNameStr;
} ExtDeviceLoginConfirmGetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ExtDeviceLoginConfirmGetResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmGetResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "okret",
        .dataTypeSpecific.className = GPBStringifySymbol(ExtDeviceLoginConfirmOKRet),
        .number = ExtDeviceLoginConfirmGetResponse_FieldNumber_Okret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmGetResponse__storage_, okret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errorRet",
        .dataTypeSpecific.className = GPBStringifySymbol(ExtDeviceLoginConfirmErrorRet),
        .number = ExtDeviceLoginConfirmGetResponse_FieldNumber_ErrorRet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmGetResponse__storage_, errorRet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expiredRet",
        .dataTypeSpecific.className = GPBStringifySymbol(ExtDeviceLoginConfirmExpiredRet),
        .number = ExtDeviceLoginConfirmGetResponse_FieldNumber_ExpiredRet,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmGetResponse__storage_, expiredRet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceNameStr",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmGetResponse_FieldNumber_DeviceNameStr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmGetResponse__storage_, deviceNameStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmGetResponse class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmGetResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001L\000\002c\002\000\003H\000\004J\000\005M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmOKRequest

@implementation ExtDeviceLoginConfirmOKRequest

@dynamic hasLoginURL, loginURL;
@dynamic hasSessionList, sessionList;
@dynamic unReadChatContactListArray, unReadChatContactListArray_Count;

typedef struct ExtDeviceLoginConfirmOKRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginURL;
  NSString *sessionList;
  NSMutableArray *unReadChatContactListArray;
} ExtDeviceLoginConfirmOKRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginURL",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRequest_FieldNumber_LoginURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRequest__storage_, loginURL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionList",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRequest_FieldNumber_SessionList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRequest__storage_, sessionList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unReadChatContactListArray",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmOKRequest_FieldNumber_UnReadChatContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKRequest__storage_, unReadChatContactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmOKRequest class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmOKRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F!!\000\002K\000\003\000UnReadChatContactList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmOKResponse

@implementation ExtDeviceLoginConfirmOKResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ExtDeviceLoginConfirmOKResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ExtDeviceLoginConfirmOKResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ExtDeviceLoginConfirmOKResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmOKResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmOKResponse class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmOKResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmCancelRequest

@implementation ExtDeviceLoginConfirmCancelRequest

@dynamic hasLoginURL, loginURL;

typedef struct ExtDeviceLoginConfirmCancelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginURL;
} ExtDeviceLoginConfirmCancelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginURL",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceLoginConfirmCancelRequest_FieldNumber_LoginURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmCancelRequest__storage_, loginURL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmCancelRequest class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmCancelRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001F!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceLoginConfirmCancelResponse

@implementation ExtDeviceLoginConfirmCancelResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ExtDeviceLoginConfirmCancelResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ExtDeviceLoginConfirmCancelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ExtDeviceLoginConfirmCancelResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceLoginConfirmCancelResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceLoginConfirmCancelResponse class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceLoginConfirmCancelResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceInitRequest

@implementation ExtDeviceInitRequest

@dynamic hasUserName, userName;

typedef struct ExtDeviceInitRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
} ExtDeviceInitRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceInitRequest_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceInitRequest__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceInitRequest class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceInitRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceInitResponse

@implementation ExtDeviceInitResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic hasCmdList, cmdList;
@dynamic chatContactListArray, chatContactListArray_Count;

typedef struct ExtDeviceInitResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
  CmdList *cmdList;
  NSMutableArray *chatContactListArray;
} ExtDeviceInitResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ExtDeviceInitResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceInitResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cmdList",
        .dataTypeSpecific.className = GPBStringifySymbol(CmdList),
        .number = ExtDeviceInitResponse_FieldNumber_CmdList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceInitResponse__storage_, cmdList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chatContactListArray",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceInitResponse_FieldNumber_ChatContactListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExtDeviceInitResponse__storage_, chatContactListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceInitResponse class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceInitResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002G\000\003\000ChatContactList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceControlRequest

@implementation ExtDeviceControlRequest

@dynamic hasOpType, opType;
@dynamic hasLockDevice, lockDevice;

typedef struct ExtDeviceControlRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opType;
  uint32_t lockDevice;
} ExtDeviceControlRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceControlRequest_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceControlRequest__storage_, opType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lockDevice",
        .dataTypeSpecific.className = NULL,
        .number = ExtDeviceControlRequest_FieldNumber_LockDevice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExtDeviceControlRequest__storage_, lockDevice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceControlRequest class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceControlRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExtDeviceControlResponse

@implementation ExtDeviceControlResponse

@dynamic hasBaseResponse, baseResponse;

typedef struct ExtDeviceControlResponse__storage_ {
  uint32_t _has_storage_[1];
  BaseResponse *baseResponse;
} ExtDeviceControlResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = ExtDeviceControlResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExtDeviceControlResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExtDeviceControlResponse class]
                                     rootClass:[MmextdeviceRoot class]
                                          file:MmextdeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExtDeviceControlResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
