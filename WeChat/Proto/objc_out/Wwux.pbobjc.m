// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wwux.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Wwux.pbobjc.h"
#import "Mmbuiltintype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WwuxRoot

@implementation WwuxRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WwuxRoot_FileDescriptor

static GPBFileDescriptor *WwuxRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"micromsg"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ExpItem

@implementation ExpItem

@dynamic hasExpid, expid;
@dynamic hasPriority, priority;

typedef struct ExpItem__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expid;
  uint32_t priority;
} ExpItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expid",
        .dataTypeSpecific.className = NULL,
        .number = ExpItem_FieldNumber_Expid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExpItem__storage_, expid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priority",
        .dataTypeSpecific.className = NULL,
        .number = ExpItem_FieldNumber_Priority,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExpItem__storage_, priority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExpItem class]
                                     rootClass:[WwuxRoot class]
                                          file:WwuxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExpItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetABTestRequest

@implementation GetABTestRequest

@dynamic hasLastTimestamp, lastTimestamp;
@dynamic clientexplistArray, clientexplistArray_Count;
@dynamic hasClientTimestamp, clientTimestamp;
@dynamic hasFlag, flag;

typedef struct GetABTestRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t lastTimestamp;
  uint32_t clientTimestamp;
  uint32_t flag;
  NSMutableArray *clientexplistArray;
} GetABTestRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = GetABTestRequest_FieldNumber_LastTimestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetABTestRequest__storage_, lastTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clientexplistArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExpItem),
        .number = GetABTestRequest_FieldNumber_ClientexplistArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetABTestRequest__storage_, clientexplistArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = GetABTestRequest_FieldNumber_ClientTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetABTestRequest__storage_, clientTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = GetABTestRequest_FieldNumber_Flag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetABTestRequest__storage_, flag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetABTestRequest class]
                                     rootClass:[WwuxRoot class]
                                          file:WwuxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetABTestRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\r\000\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetABTestResponse

@implementation GetABTestResponse

@dynamic hasBaseResponse, baseResponse;
@dynamic experimentListArray, experimentListArray_Count;
@dynamic hasInternalTime, internalTime;
@dynamic hasTimestamp, timestamp;

typedef struct GetABTestResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t internalTime;
  uint32_t timestamp;
  BaseResponse *baseResponse;
  NSMutableArray *experimentListArray;
} GetABTestResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseResponse),
        .number = GetABTestResponse_FieldNumber_BaseResponse,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetABTestResponse__storage_, baseResponse),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "experimentListArray",
        .dataTypeSpecific.className = NULL,
        .number = GetABTestResponse_FieldNumber_ExperimentListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetABTestResponse__storage_, experimentListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "internalTime",
        .dataTypeSpecific.className = NULL,
        .number = GetABTestResponse_FieldNumber_InternalTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetABTestResponse__storage_, internalTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = GetABTestResponse_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetABTestResponse__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetABTestResponse class]
                                     rootClass:[WwuxRoot class]
                                          file:WwuxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetABTestResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001L\000\002\000experimentList\000\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
