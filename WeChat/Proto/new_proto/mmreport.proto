syntax = "proto2";

package micromsg;

//newreportkvcommrsa (997) = newreportidkeyrsa (987)

message HeavyUserReqInfo {
    optional uint32 monitorIdMapVersion = 1;
}

message KVCommReportItem {
    optional uint32 logId = 1;
    optional bytes value = 2;
    optional uint32 startTime = 3;
    optional uint32 endTime = 4;
    optional uint32 count = 5;
    optional uint32 refreshTime = 6;
    optional uint32 type = 7;
    
}

message CliReportKVDataPackage {
    optional uint32 uin = 1;
    optional uint32 clientVersion = 2;
    optional uint32 netType = 3;
    repeated KVCommReportItem itemList = 4;
    optional string deviceModel = 5;
    optional string deviceBrand = 6;
    optional string osName = 7;
    optional string osVersion = 8;
    optional string languageVer = 9;
    optional uint32 datatype = 10;
}

//CliReportKVReq
message CliReportKVReq {
    optional uint32 generalVersion = 1;
    optional uint32 specialVersion = 2;
    optional uint32 whiteOrBlackUinVersion = 3;
    repeated CliReportKVDataPackage dataPkg = 4;
    optional bytes randomEncryKey = 5;
    optional HeavyUserReqInfo heavyUserInfo = 6;
    
}

//CliReportKVResp

message HeavyUserRespInfo {
    optional uint32 monitorIdMapVersion = 1;
    repeated StrategyInterval monitorIdMapStrategys = 2;
    optional uint32 respType = 3;
}

message NewStrategyItem {
    optional uint32 logId = 1;
    optional uint32 reportCycle = 2;
    optional uint32 reportFlag = 3;
    optional uint32 sampleRatio = 4;
    optional uint32 sampleMode = 5;
    optional uint32 sampleValidInterval = 6;
    optional uint32 monitorFlag = 7;
    optional uint32 type = 8;
}

message StrategyInterval {
    optional uint32 logIdbegin = 1;
    optional uint32 logIdend = 2;
    repeated NewStrategyItem strategyItem = 3;
}

message CliReportKVResp {
    optional uint32 ret = 1;
    optional uint32 generalVersion = 2;
    optional uint32 specialVersion = 3;
    optional uint32 whiteOrBlackUinVersion = 4;
    repeated StrategyInterval generalStrategies = 5;
    optional uint32 maxValidDataTime = 8;
    optional uint32 banReportTime = 9;
    optional uint32 askSvrStrategyInterval = 10;
    optional HeavyUserRespInfo heavyUserInfo = 11;
}

message GetCliKVStrategyReq {
    optional uint32 generalVersion = 1;
    optional uint32 specialVersion = 2;
    optional uint32 whiteOrBlackUinVersion = 3;
    repeated bytes randomEncryKey = 4;
    optional uint32 kvgeneralVersion = 5;
    optional uint32 kvspecialVersion = 6;
    optional uint32 kvwhiteOrBlackUinVersion = 7;
    optional HeavyUserRespInfo heavyUserInfo = 8;
}

message GetCliKVStrategyResp {
    optional uint32 ret = 1;
    optional uint32 generalVersion = 2;
    optional uint32 specialVersion = 3;
    optional uint32 whiteOrBlackUinVersion = 4;
    repeated StrategyInterval kvspecialStrategies = 5;
    
    optional uint32 maxValidDataTime = 8;
    optional uint32 banReportTime = 9;
    optional uint32 askSvrStrategyInterval = 10;
    optional uint32 kvgeneralVersion = 11;
    optional uint32 kvspecialVersion = 12;
    optional uint32 kvwhiteOrBlackUinVersion = 13;
    repeated StrategyInterval kvgeneralStrategies = 14;
    optional HeavyUserRespInfo heavyUserInfo = 17;
    optional uint32 aaa = 19;
}
