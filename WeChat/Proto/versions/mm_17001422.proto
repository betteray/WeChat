// Proto Dump From WeChat iOS 7.0.20.34.

syntax = "proto2";

message A8KeyControl {
    repeated  A8KeyControl_QueryStringTransferCookie  queryStringTransferCookieList  = 1;
}

message A8KeyControl_QueryStringTransferCookie {
    required  string  key  = 1;
    optional  string  cookieKey  = 2;
}

message AAAlertItem {
    optional  int32  flag  = 1;
    optional  string  wording  = 2;
    optional  string  leftButtonWording  = 3;
    optional  string  rightButtonWording  = 4;
    optional  string  rightButtonUrl  = 5;
}

message AACloseNotifyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
    optional  string  groupid  = 3;
}

message AACloseNotifyRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  msgxml  = 4;
}

message AACloseReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
    optional  uint32  scene  = 3;
    optional  string  groupid  = 4;
}

message AACloseRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  msgxml  = 4;
}

message AALaunchByMoneyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  totalNum  = 2;
    optional  uint64  perAmount  = 3;
    optional  string  title  = 4;
    repeated  string  payerList  = 5;
    optional  uint32  scene  = 6;
    optional  string  groupid  = 7;
    optional  ActionLocation  actionLocation  = 8;
    optional  uint64  operationTimestamp  = 9;
    optional  string  picCdnUrl  = 10;
    optional  string  picCdnThumbUrl  = 11;
    optional  string  pfOrderNo  = 12;
}

message AALaunchByMoneyRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  billNo  = 4;
    optional  string  msgxml  = 5;
    optional  AARealNameItem  realNameInfo  = 6;
    optional  AAAlertItem  alertItem  = 7;
}

message AALaunchByPersonReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  title  = 2;
    optional  uint64  totalPayAmount  = 3;
    repeated  AALaunchItem  payerList  = 5;
    optional  uint32  scene  = 7;
    optional  string  groupid  = 8;
    optional  ActionLocation  actionLocation  = 9;
    optional  uint64  operationTimestamp  = 10;
    optional  string  picCdnUrl  = 11;
    optional  string  picCdnThumbUrl  = 12;
    optional  string  pfOrderNo  = 13;
}

message AALaunchByPersonRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  billNo  = 4;
    optional  uint64  payAmount  = 5;
    optional  string  msgxml  = 6;
    optional  AARealNameItem  realNameInfo  = 7;
    optional  AAAlertItem  alertItem  = 8;
}

message AALaunchItem {
    optional  string  username  = 1;
    optional  uint64  amount  = 2;
}

message AAListRecord {
    optional  string  billNo  = 1;
    optional  string  title  = 2;
    optional  uint64  amount  = 3;
    optional  string  launchDate  = 5;
    optional  uint32  state  = 10;
    optional  uint32  role  = 11;
    optional  string  h5Url  = 12;
    optional  string  groupid  = 13;
    optional  string  payDate  = 14;
}

message AAOperationInfo {
    optional  uint32  maxPayerNum  = 1;
    optional  uint32  maxReceiverNum  = 2;
    optional  uint32  maxTotalNum  = 3;
    optional  uint64  maxTotalAmount  = 4;
    optional  uint64  maxPerAmount  = 5;
    optional  string  notice  = 6;
    optional  string  noticeUrl  = 7;
}

message AAOperationReq {
    required  BaseRequest  baseRequest  = 1;
}

message AAOperationRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  maxPayerNum  = 4;
    optional  uint32  maxReceiverNum  = 5;
    optional  uint32  maxTotalNum  = 6;
    optional  uint64  maxTotalAmount  = 7;
    optional  uint64  maxPerAmount  = 8;
    optional  string  notice  = 9;
    optional  string  noticeUrl  = 10;
}

message AAPayReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
    optional  uint64  payAmount  = 3;
    optional  uint32  scene  = 4;
    optional  string  groupid  = 5;
}

message AAPayRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  reqkey  = 4;
    optional  string  paymsgid  = 5;
    optional  string  receiverTrueName  = 7;
    optional  string  msgxml  = 8;
    optional  AAAlertItem  alertItem  = 9;
    optional  string  outTradeNo  = 10;
}

message AAPaySuccReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
    optional  uint64  payAmount  = 3;
    optional  uint32  scene  = 4;
    optional  string  groupid  = 5;
    optional  string  outTradeNo  = 6;
    optional  string  transactionId  = 7;
}

message AAPaySuccRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message AAPayUrgeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
    optional  string  groupid  = 3;
    optional  uint32  scene  = 4;
}

message AAPayUrgeRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message AAPayer {
    optional  string  payerUsername  = 1;
    optional  uint64  totalPayAmount  = 2;
    optional  uint64  refundAmount  = 3;
    optional  uint32  payState  = 4;
}

message AAQueryDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
    optional  uint32  scene  = 3;
    optional  string  groupid  = 4;
    optional  string  sign  = 5;
    optional  uint32  ver  = 6;
}

message AAQueryDetailRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  billNo  = 4;
    optional  string  title  = 5;
    optional  uint32  type  = 6;
    optional  string  launcherUsername  = 7;
    optional  uint64  planAmount  = 8;
    optional  uint32  planNum  = 9;
    optional  uint64  paidAmount  = 10;
    optional  uint32  paidNum  = 11;
    optional  uint32  state  = 12;
    optional  uint32  overtimeDays  = 13;
    optional  uint32  isLauncher  = 14;
    optional  uint32  role  = 15;
    optional  uint32  roleState  = 16;
    optional  uint64  roleTotalAmount  = 17;
    optional  uint64  roleFinishAmount  = 18;
    optional  uint64  roleRefundAmount  = 19;
    optional  uint32  rolePairCnt  = 20;
    optional  string  outTradeNo  = 21;
    repeated  AAPayer  payerList  = 22;
    optional  string  changeWording  = 23;
    optional  uint32  jumpChange  = 24;
    optional  uint64  activityAmount  = 25;
    optional  string  picCdnUrl  = 26;
    optional  string  picCdnThumbUrl  = 27;
}

message AAQueryListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  limit  = 2;
    optional  uint32  offset  = 3;
    optional  uint32  type  = 4;
    optional  string  lastBillId  = 5;
    optional  int32  lastBillType  = 6;
    optional  uint32  lastCreateTime  = 7;
    optional  string  lastTransId  = 8;
}

message AAQueryListRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    repeated  AAListRecord  record  = 4;
    optional  string  h5RecordUrl  = 5;
    optional  string  lastBillId  = 6;
    optional  int32  lastBillType  = 7;
    optional  uint32  lastCreateTime  = 8;
    optional  string  lastTransId  = 9;
}

message AARealNameItem {
    optional  int32  guideFlag  = 1;
    optional  string  guideWording  = 2;
    optional  string  leftButtonWording  = 3;
    optional  string  rightButtonWording  = 4;
    optional  string  uploadCreditUrl  = 5;
}

message ADDynamicInfo {
    optional  uint32  aid  = 1;
    repeated  SnsADObjectDynamicInfo  adDynamicInfos  = 2;
}

message APAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  ssid  = 3;
    optional  string  mid  = 4;
    optional  string  apauthData  = 5;
    optional  string  token  = 6;
    optional  uint32  opCode  = 7;
    repeated  ApInfo  apInfo  = 8;
    optional  uint32  channel  = 9;
    optional  string  sessionKey  = 10;
    optional  uint32  hasMobile  = 11;
}

message APAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  authUrl  = 2;
    optional  uint32  expiredTime  = 3;
    optional  uint32  actionCode  = 4;
    optional  string  showUrl  = 5;
    optional  ShowWordsInfo  showWords  = 6;
    optional  uint32  opCode  = 7;
    optional  RegApInfo  regApInfo  = 8;
    optional  ShowWordsInfo  checkWords  = 9;
    optional  QstrInfo  qstrInfo  = 10;
    optional  FrontPageInfo  frontPageInfo  = 11;
    optional  BackPageInfo  backPageInfo  = 12;
    optional  string  openId  = 13;
    optional  string  tid  = 14;
    optional  uint32  relativeExpiredSeconds  = 15;
}

message APCheckRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  configVersion  = 2;
    repeated  ApInfo  apInfo  = 3;
}

message APCheckResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  actionCode  = 2;
    optional  string  showUrl  = 3;
    optional  ShowWordsInfo  showWords  = 4;
    optional  RegApInfo  regApInfo  = 5;
    optional  uint32  relativeExpiredSeconds  = 6;
    optional  Config  config  = 7;
}

message APNSReportReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  apnsjson  = 2;
    optional  uint32  receivedTimestamp  = 3;
}

message APNSReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message APPItem {
    optional  string  userName  = 1;
}

message AcceptCardItemRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  uint32  fromScene  = 3;
    required  string  cardId  = 4;
    optional  string  cardExt  = 5;
    optional  string  jsCheckinfoUrl  = 6;
    optional  string  jsCheckinfoSessionUsername  = 7;
    optional  uint32  statisticScene  = 8;
    optional  uint32  isFollowService  = 9;
    optional  StatisticInfo  statisticInfo  = 10;
}

message AcceptCardItemResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message AcceptCardListFromAppRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  CardListItem  cardList  = 2;
    optional  uint32  fromScene  = 3;
    optional  string  jsCheckinfoUrl  = 4;
    optional  string  jsCheckinfoSessionUsername  = 5;
    optional  uint32  statisticScene  = 6;
}

message AcceptCardListFromAppResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message AcceptFriReqInWxWork {
    optional  string  userName  = 1;
    optional  string  ticket  = 2;
    optional  string  cliMsgId  = 3;
    optional  string  content  = 4;
}

message AcceptGiftCardRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint32  bizUin  = 2;
    optional  string  orderId  = 3;
    optional  string  chatroomName  = 4;
    optional  bool  doNotAccept  = 5;
}

message AcceptGiftCardResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  toUserName  = 2;
    optional  string  fromUserName  = 3;
    optional  string  fromUserHeadImgUrl  = 4;
    optional  string  content  = 5;
    optional  string  contentPicUrl  = 6;
    optional  string  contentVideoUrl  = 7;
    optional  string  contentVideoThumbPicUrl  = 8;
    optional  string  picAesKey  = 9;
    optional  string  videoAesKey  = 10;
    optional  string  thumbPicAesKey  = 11;
    optional  string  cardBackgroundPicUrl  = 12;
    optional  string  cardLogoUrl  = 13;
    optional  string  cardTitle  = 14;
    optional  string  cardPrice  = 15;
    optional  string  footerWording  = 16;
    optional  bool  needJump  = 17;
    optional  uint32  picDataLength  = 18;
    optional  uint32  videoDataLength  = 19;
    optional  uint32  thumbDataLength  = 20;
    optional  string  color  = 21;
    optional  string  descriptionTitle  = 22;
    optional  string  descriptionIconUrl  = 23;
    optional  uint32  descriptionLayoutMode  = 24;
    optional  string  giftingMediaTitle  = 25;
    optional  string  descriptionTitleColor  = 26;
    optional  string  cardTitleColor  = 27;
    optional  string  cardPriceTitleColor  = 28;
    optional  string  userCardId  = 29;
    optional  string  operationTitle  = 30;
    optional  string  operationUrl  = 31;
    optional  string  cardTpId  = 32;
    optional  string  cardCode  = 33;
    repeated  AcceptedCardItem  acceptedCardList  = 34;
    repeated  AccepterItem  accepterList  = 35;
    optional  string  accepterListTitle  = 36;
    optional  uint32  outOfCard  = 37;
    optional  string  operationWxaUsername  = 38;
    optional  string  operationWxaPath  = 39;
    optional  string  operationWxaTitle  = 40;
    optional  string  underButtonTitle  = 41;
    optional  string  underButtonUrl  = 42;
    optional  string  centerButtonTitle  = 43;
    optional  uint32  centerButtonJumpType  = 44;
    optional  string  centerButtonJumpUrl  = 45;
    optional  string  centerButtonJumpWxaName  = 46;
    optional  string  centerButtonJumpWxaPath  = 47;
    optional  string  centerButtonJumpWxaConfirmpageTitle  = 48;
}

message AcceptLiveMicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  micSdkUserId  = 3;
    optional  string  roomId  = 4;
    optional  string  cliMsgId  = 5;
    optional  string  liveMicId  = 6;
}

message AcceptLiveMicResponse {
    required  BaseResponse  baseResponse  = 1;
}

message AcceptedCardItem {
    optional  string  cardTitle  = 1;
    optional  string  cardPrice  = 2;
}

message AccepterItem {
    optional  string  cardTitle  = 1;
    optional  string  cardPrice  = 2;
    optional  string  accepterNickname  = 3;
    optional  string  accepterHeadimgUrl  = 4;
}

message AccountExtraSettingConfig {
    repeated  AcctConfig  configs  = 1;
}

message AccountStatusItem {
    optional  string  title  = 1;
    optional  uint32  openStatus  = 2;
}

message AcctConfig {
    optional  string  miniappUsername  = 1;
    optional  string  miniappPath  = 2;
    optional  string  cellName  = 3;
    optional  uint32  actionType  = 4;
    optional  string  webUrl  = 5;
    optional  uint32  miniappScene  = 6;
}

message AcctSectResp {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    required  uint32  bindUin  = 3;
    optional  string  bindEmail  = 4;
    optional  string  bindMobile  = 5;
    optional  string  alias  = 6;
    required  uint32  status  = 8;
    optional  uint32  pluginFlag  = 9;
    optional  uint32  regType  = 10;
    optional  string  deviceInfoXml  = 11;
    optional  uint32  safeDevice  = 12;
    optional  string  officialUserName  = 13;
    optional  string  officialNickName  = 14;
    optional  uint32  pushMailStatus  = 15;
    optional  string  fsurl  = 16;
    optional  string  historyAliasList  = 17;
    optional  uint32  userXagreementId  = 18;
    optional  XAgreementWordingSetting  xagreementWordingSetting  = 19;
    optional  XAgreementDmSetting  xagreementDmSetting  = 20;
}

message AcctTransferConfig {
    optional  string  acctTransferMiniappUsername  = 1;
    optional  string  acctTransferMiniappPath  = 2;
    optional  string  cellName  = 3;
}

message AcctTypeResource {
    optional  string  acctTypeId  = 1;
    repeated  OpenIMWording  wordings  = 2;
    repeated  OpenIMUrl  urls  = 3;
}

message ActionAttr {
    optional  string  name  = 1;
    optional  string  tips  = 2;
    optional  uint32  type  = 3;
    optional  string  content  = 4;
    optional  string  iconUrl  = 5;
}

message ActionConfig {
    required  int32  type  = 1;
    required  string  title  = 2;
    optional  string  url  = 3;
}

message ActionLocation {
    optional  string  province  = 1;
    optional  string  city  = 2;
    optional  double  latitude  = 3;
    optional  double  longitude  = 4;
    optional  uint64  locationTimestamp  = 5;
    optional  string  encryptLatitude  = 6;
    optional  string  encryptLongitude  = 7;
    optional  string  encryptUserinfo  = 8;
    optional  string  encryptKey  = 9;
}

message ActionSheetInfo {
    optional  bool  openComment  = 1;
    optional  bool  shouldPopEvaluate  = 2;
    optional  uint32  popEvaluateLeastStayTime  = 3;
    optional  bytes  controlBytes  = 5;
}

message ActionSheetItem {
    optional  TextViewData  title  = 1;
    optional  TextViewData  subTitle  = 2;
    optional  RouteInfo  routeInfo  = 3;
}

message ActionSheetViewData {
    repeated  ActionSheetItem  item  = 1;
    optional  TextViewData  cancelText  = 2;
}

message AdAppList {
    optional  string  appId  = 1;
    optional  string  appCoverUrl  = 2;
    optional  string  appDownloadUrl  = 3;
    optional  string  androidApkMd5  = 4;
    optional  string  appName  = 5;
    optional  string  appIconUrl  = 6;
    optional  string  appSnsDesc  = 7;
    optional  string  androidPackageName  = 8;
    optional  string  googlePlayDownloadUrl  = 9;
    optional  YYBStruct  syyb  = 10;
    optional  string  extAsXml  = 11;
}

message AdChannelMsgHeader {
    optional  uint32  uin  = 1;
    optional  uint32  networkType  = 2;
    optional  uint32  clientIp  = 3;
    optional  bytes  clientIpV6  = 4;
    optional  int32  osType  = 5;
    optional  int32  clientVersion  = 6;
    optional  string  oaid  = 7;
    optional  string  imei  = 8;
    optional  string  idfa  = 9;
    optional  string  idfv  = 10;
    optional  string  ua  = 11;
    optional  string  commonDeviceId  = 12;
}

message AdChannelMsgReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  channel  = 2;
    optional  AdChannelMsgHeader  header  = 3;
    optional  string  content  = 4;
}

message AdChannelMsgResp {
    required  BaseResponse  baseResponse  = 1;
}

message AdClickRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  viewid  = 2;
    optional  int32  clickpos  = 3;
    optional  string  descxml  = 4;
    optional  uint32  scene  = 5;
    optional  string  ssid  = 6;
    optional  string  bssid  = 7;
    optional  uint64  timestampMs  = 8;
    optional  AdShareInfo  shareInfo  = 9;
    optional  uint32  adType  = 10;
    optional  uint32  clickAction  = 11;
    optional  uint32  source  = 12;
    optional  string  snsStatext  = 13;
    optional  uint32  flipStatus  = 14;
    optional  bytes  atFriendSourceInfo  = 15;
    optional  bytes  atFriendSelfInfo  = 16;
    optional  uint64  exposureStartTime  = 17;
    optional  string  oaid  = 18;
    optional  string  waid  = 19;
    optional  string  pkgName  = 20;
    optional  uint32  videoPlayTime  = 21;
    optional  uint32  followStatus  = 22;
    optional  uint32  appInstallStatus  = 23;
    optional  string  imei  = 24;
    optional  string  idfa  = 25;
    optional  string  idfv  = 26;
    optional  string  ua  = 27;
    optional  string  commonDeviceId  = 28;
}

message AdClickResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  msg  = 3;
}

message AdDataReportRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  AdLogItem  logItem  = 2;
}

message AdDataReportResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  msg  = 3;
}

message AdDynamicUpdateItem {
    required  uint32  actionType  = 1;
    optional  string  data  = 2;
}

message AdDynamicUpdateReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  snsId  = 2;
    optional  string  uxinfo  = 3;
    repeated  AdDynamicUpdateItem  reqDataList  = 4;
}

message AdDynamicUpdateResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  snsId  = 2;
    repeated  AdDynamicUpdateItem  respDataList  = 3;
}

message AdExposureInfo {
    optional  uint32  startPositionType  = 1;
    optional  uint32  endPositionType  = 2;
    optional  float  readHeight  = 3;
    optional  float  unReadTopHeight  = 4;
    optional  float  unReadBottomHeight  = 5;
    optional  uint64  startTime  = 6;
    optional  uint64  endTime  = 7;
    optional  uint64  halfStartTime  = 8;
    optional  uint64  halfEndTime  = 9;
    optional  uint64  allStartTime  = 10;
    optional  uint64  allEndTime  = 11;
}

message AdExposureRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  viewid  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  type  = 4;
    optional  uint32  exposureDuration  = 5;
    optional  string  ssid  = 6;
    optional  string  bssid  = 7;
    optional  uint64  timestampMs  = 8;
    optional  AdExposureInfo  exposureInfo  = 9;
    optional  AdExposureSocialInfo  socialInfo  = 10;
    optional  uint32  adType  = 11;
    optional  string  descxml  = 12;
    optional  uint32  source  = 13;
    optional  string  snsStatext  = 14;
    optional  uint32  exposureCnt  = 15;
    optional  uint64  feedDuration  = 16;
    optional  uint64  feedFullDuration  = 17;
    optional  uint32  flipStatus  = 18;
    optional  bytes  atFriendSourceInfo  = 19;
    optional  bytes  atFriendSelfInfo  = 20;
    optional  string  oaid  = 21;
    optional  string  waid  = 22;
    optional  string  pkgName  = 23;
    optional  float  screenWidth  = 24;
    optional  float  screenHeight  = 25;
    optional  float  adHeight  = 26;
    optional  uint32  userInterfaceStyle  = 27;
    optional  uint64  timerHalfDuration  = 28;
    optional  uint64  timerFullDuration  = 29;
    optional  uint32  followStatus  = 30;
    optional  uint32  appInstallStatus  = 31;
    optional  uint32  timelineIndex  = 32;
    optional  string  imei  = 33;
    optional  string  idfa  = 34;
    optional  string  idfv  = 35;
    optional  string  ua  = 36;
    optional  string  commonDeviceId  = 37;
}

message AdExposureResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  msg  = 3;
}

message AdExposureSocialInfo {
    optional  uint32  likeCount  = 1;
    optional  uint32  commentCount  = 2;
}

message AdItem {
    optional  AppItem  appItem  = 1;
    required  string  adUrl  = 2;
    optional  string  webUrl  = 3;
}

message AdLogItem {
    optional  int32  logId  = 1;
    optional  bytes  logStr  = 2;
    optional  int64  createTime  = 3;
}

message AdLogRequest {
    required  KVLogHead  logHead  = 1;
    repeated  KVLogItem  logList  = 2;
}

message AdLogResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  frequency  = 2;
}

message AdShareInfo {
    optional  string  username  = 1;
    optional  uint32  memberCount  = 2;
}

message AddAvatarHeadImgReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  headimgurlCdn  = 2;
    optional  string  appid  = 3;
}

message AddAvatarHeadImgResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  fileid  = 2;
}

message AddAvatarReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  nickname  = 2;
    optional  bytes  headimgdata  = 3;
    optional  string  fileid  = 4;
    optional  uint32  headimgflag  = 5;
    optional  string  appid  = 6;
}

message AddAvatarResp {
    required  BaseResponse  baseResponse  = 1;
    optional  OauthAvatarInfo  avatarInfo  = 2;
}

message AddBypChat {
    optional  uint32  seq  = 1;
    optional  string  msgSessionId  = 2;
    optional  string  fromusername  = 3;
    optional  int32  msgType  = 4;
    optional  uint64  newmsgid  = 5;
    optional  uint32  createTime  = 6;
    optional  string  digestContent  = 7;
    optional  uint32  unreadCount  = 8;
}

message AddBypMsg {
    optional  AddMsg  msg  = 1;
    optional  string  msgSessionId  = 2;
    optional  uint64  seq  = 3;
    optional  bytes  extinfo  = 4;
    optional  bool  isSender  = 5;
}

message AddChatRoomAdminRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  chatRoomName  = 2;
    repeated  string  userNameList  = 3;
}

message AddChatRoomAdminResponse {
    required  BaseResponse  baseResponse  = 1;
}

message AddChatRoomMemberRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  memberCount  = 2;
    repeated  MemberReq  memberList  = 3;
    required  SKBuiltinString_t  chatRoomName  = 4;
    optional  uint32  lastRoomMsgTimeStamp  = 5;
    optional  string  accessApplicationDesp  = 6;
    optional  HistoryInfo  history  = 7;
}

message AddChatRoomMemberResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  memberCount  = 2;
    repeated  MemberResp  memberList  = 3;
}

message AddContactLabelRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  labelCount  = 2;
    repeated  LabelPair  labelPairList  = 3;
}

message AddContactLabelResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  labelCount  = 2;
    repeated  LabelPair  labelPairList  = 3;
}

message AddContactRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  url  = 3;
    optional  uint32  channel  = 4;
    optional  string  sessionKey  = 5;
}

message AddContactResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  errCode  = 2;
    optional  string  errMsg  = 3;
}

message AddFavItem {
    required  int32  favId  = 1;
    required  int32  type  = 2;
    required  uint32  flag  = 3;
    required  uint32  updateTime  = 4;
    required  uint32  updateSeq  = 5;
}

message AddFavItemRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientId  = 2;
    required  uint32  type  = 3;
    required  uint32  sourceType  = 4;
    optional  string  sourceId  = 5;
    optional  string  object  = 6;
}

message AddFavItemResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  favId  = 2;
    required  uint32  updateSeq  = 3;
    optional  uint64  usedSize  = 4;
}

message AddFollowRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  usernames  = 2;
}

message AddFollowResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  Follow  follows  = 2;
}

message AddForcePush {
    optional  string  forcePushId  = 1;
    optional  int32  endDiff  = 2;
    optional  string  desc  = 3;
}

message AddMsg {
    required  int32  msgId  = 1;
    required  SKBuiltinString_t  fromUserName  = 2;
    required  SKBuiltinString_t  toUserName  = 3;
    required  int32  msgType  = 4;
    required  SKBuiltinString_t  content  = 5;
    required  uint32  status  = 6;
    required  uint32  imgStatus  = 7;
    required  SKBuiltinBuffer_t  imgBuf  = 8;
    required  uint32  createTime  = 9;
    optional  string  msgSource  = 10;
    optional  string  pushContent  = 11;
    optional  int64  newMsgId  = 12;
    optional  uint32  msgSeq  = 13;
}

message AddMsgDigest {
    required  SKBuiltinString_t  chatRoomId  = 1;
    required  int64  newMsgId  = 2;
    required  uint32  msgSeq  = 3;
    required  uint32  createTime  = 4;
    required  uint32  unDeliverCount  = 5;
    required  SKBuiltinString_t  digestContent  = 6;
    required  uint32  isAted  = 7;
    required  int32  msgType  = 8;
}

message AddOpenIMChatRoomAdminRequest {
    optional  string  roomName  = 1;
    repeated  string  userNameList  = 2;
}

message AddOpenIMChatRoomAdminResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message AddOpenIMChatRoomMemberReq {
    optional  string  roomName  = 1;
    repeated  OpenIMChatRoomMemberInReq  memberList  = 2;
    optional  string  desc  = 3;
}

message AddOpenIMChatRoomMemberResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  OpenIMChatRoomMemberInResp  memberList  = 2;
    optional  string  popUpWording  = 3;
}

message AddOpenIMContactReq {
    required  string  tpUsername  = 1;
    required  string  antispamTicket  = 2;
    optional  uint64  friendFlag  = 3;
}

message AddOpenIMContactResp {
    required  BaseResponse  baseResponse  = 1;
}

message AddPlanReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  amount  = 2;
    optional  string  bankType  = 3;
    optional  string  cardTail  = 4;
    optional  string  bindSerialNo  = 5;
    optional  uint32  day  = 6;
    optional  string  wxpEncPasswd  = 7;
    optional  uint32  usrPlanId  = 8;
}

message AddPlanResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message AddTrustedFriendsReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  TrustedFriendContactInfo  contacts  = 2;
}

message AddTrustedFriendsResp {
    required  BaseResponse  baseResponse  = 1;
}

message AdditionalContactList {
    optional  LinkedinContactItem  linkedinContactItem  = 1;
}

message Address {
    optional  string  country  = 1;
    optional  string  province  = 2;
    optional  string  city  = 3;
    optional  string  detail  = 4;
    optional  string  userName  = 5;
    optional  string  tel  = 6;
    optional  string  zipCode  = 7;
}

message AdvertiseObject {
    required  SnsADObject  snsAdobject  = 1;
    optional  SKBuiltinString_t  adinfo  = 2;
    optional  uint32  adpos  = 3;
    optional  RemindFriendsInfo  remindFriendsInfo  = 4;
}

message AfterPlaceOrderCommReq {
    required  string  f2FId  = 1;
    optional  string  transId  = 2;
    required  uint32  channel  = 3;
    required  uint32  scanScene  = 4;
    required  uint32  scene  = 5;
    required  string  payokChecksign  = 6;
    optional  FavorComposeInfo  favorComposeInfo  = 7;
    optional  string  receiverUsername  = 8;
    optional  string  receiverOpenid  = 9;
    optional  uint32  totalAmount  = 10;
}

message AirKissConfData {
    optional  string  airkissKey  = 1;
    repeated  AirKissConfData_Step  steps  = 2;
    optional  string  title  = 3;
}

message AirKissConfData_Step {
    required  string  type  = 1;
    optional  string  content  = 2;
}

message AlertItem {
    optional  int32  flag  = 1;
    optional  string  wording  = 2;
    optional  string  leftButtonWording  = 3;
    optional  string  rightButtonWording  = 4;
    optional  string  rightButtonUrl  = 5;
}

message AlertPrivacyInfo {
    optional  bool  needShowPrivacy  = 1;
    optional  string  privacyWording  = 2;
}

message AllGameItem {
    required  uint32  type  = 1;
    optional  AppItem  appItem  = 2;
    optional  AdItem  adItem  = 3;
    optional  string  noticeId  = 4;
}

message AmountRemindPage {
    optional  string  title  = 1;
    optional  string  wording  = 2;
    optional  string  amountRemindSign  = 3;
}

message AmountRemindWin {
    optional  string  wording  = 1;
    optional  JumpItem  leftButton  = 2;
    optional  JumpItem  rightButton  = 3;
    optional  uint32  remindAmount  = 4;
}

message AndroidDeviceInfo {
    optional  uint32  osVersion  = 1;
    optional  uint32  deviceLevel  = 2;
}

message AndroidSelectData {
    optional  string  buildDevice  = 1;
    optional  string  buildHardware  = 2;
    optional  string  buildBrand  = 3;
    optional  string  buildModel  = 4;
    optional  float  lux  = 5;
    optional  string  buildDisplay  = 6;
    optional  string  buildProduct  = 7;
}

message Announce {
    required  int32  type  = 1;
    required  string  wording  = 2;
    required  string  url  = 3;
}

message ApInfo {
    optional  string  mac  = 1;
    optional  int32  signal  = 2;
    optional  string  ssid  = 3;
}

message ApKeyInfo {
    optional  string  apKey  = 1;
    optional  string  storeName  = 2;
}

message AppCenterRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  type  = 2;
    required  SKBuiltinBuffer_t  reqBuf  = 3;
}

message AppCenterResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  respBuf  = 2;
}

message AppCommentRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  status  = 2;
}

message AppCommentResponse {
    required  BaseResponse  baseResponse  = 1;
}

message AppConfig {
    optional  string  appId  = 1;
    optional  uint32  type  = 2;
    optional  uint32  configVersion  = 3;
    optional  string  config  = 4;
}

message AppIdItem {
    required  string  appid  = 1;
    required  uint32  status  = 2;
}

message AppIdResource {
    optional  uint32  functionFlag  = 1;
    repeated  OpenIMWording  wordings  = 2;
    repeated  OpenIMUrl  urls  = 3;
}

message AppItem {
    required  string  appId  = 1;
    required  string  iconUrl  = 2;
    optional  string  name  = 3;
    optional  string  desc  = 4;
    optional  string  brief  = 5;
    optional  string  webUrl  = 6;
    optional  string  packageName  = 7;
    optional  uint32  versionCode  = 8;
    optional  DownloadInfo  downloadInfo  = 9;
    optional  uint32  status  = 10;
    optional  uint32  appInfoFlag  = 11;
    optional  string  noticeId  = 12;
    optional  bool  isSubscribed  = 13;
    repeated  string  label  = 14;
    optional  bool  isActive  = 15;
    optional  uint32  version  = 16;
    optional  bool  isForceUpdate  = 17;
    optional  bool  hasDownloadGift  = 18;
    optional  bool  hasEnableChatroom  = 19;
    optional  LabelInfo  labelInfo  = 20;
    optional  uint32  appType  = 21;
    optional  HVAppInfo  hvappInfo  = 22;
    repeated  string  tagList  = 23;
}

message AppMsg {
    optional  string  fromUserName  = 1;
    optional  string  appId  = 2;
    required  uint32  sdkVersion  = 3;
    optional  string  toUserName  = 4;
    required  uint32  type  = 5;
    optional  string  content  = 6;
    required  uint32  createTime  = 7;
    optional  string  clientMsgId  = 8;
    optional  SKBuiltinBuffer_t  thumb  = 9;
    optional  int32  source  = 10;
    optional  int32  remindId  = 11;
    optional  string  msgSource  = 12;
    optional  string  shareUrlOriginal  = 13;
    optional  string  shareUrlOpen  = 14;
    optional  string  jsAppId  = 15;
}

message AppMsgAdvert {
    optional  uint32  enabled  = 1;
    optional  string  url  = 2;
}

message AppMsgCommDataReport {
    optional  uint32  type  = 1;
    repeated  AppMsgCommReportItem  item  = 2;
}

message AppMsgCommDataReportReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  AppMsgCommDataReport  report  = 2;
    optional  AppMsgCommDataReport  commFields  = 3;
}

message AppMsgCommDataReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message AppMsgCommReportItem {
    optional  string  key  = 1;
    optional  string  val  = 2;
}

message AppMsgCommentExposureResp {
    required  BaseResponse  baseResponse  = 1;
}

message AppMsgCommentListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  uint32  offset  = 4;
    optional  uint32  actionType  = 6;
    optional  uint32  scene  = 7;
    optional  uint32  subscene  = 8;
    optional  uint32  enterId  = 9;
    optional  uint32  itemShowType  = 10;
    optional  string  sessionId  = 11;
    optional  uint64  commentTopicId  = 12;
}

message AppMsgCommentListResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  BizComment  comment  = 2;
    optional  bool  onlyFansCanComment  = 3;
    optional  uint32  isFans  = 4;
    optional  uint32  enabled  = 5;
    optional  int32  nextOffset  = 6;
}

message AppMsgContext {
    optional  string  url  = 1;
    optional  string  content  = 2;
    optional  uint32  clientCacheTime  = 3;
    optional  string  forceUrl  = 4;
    optional  uint32  lastModifyTime  = 5;
    optional  bool  noNeedUpdate  = 6;
    optional  uint32  tmplVersion  = 7;
    optional  uint32  bizUin  = 8;
    optional  uint32  msgId  = 9;
    optional  uint32  itemIdx  = 10;
    optional  uint32  traceFlag  = 11;
    optional  int32  itemShowType  = 12;
    optional  bool  nativePageNeedFullScreenForceUrl  = 13;
    repeated  CheckTmplVerResp_TmplInfo  tmplVersions  = 14;
}

message AppMsgCoverPreloadInfo {
    optional  bool  needPreloadFold  = 1;
    optional  bool  needPreload  = 2;
    optional  uint32  preloadTopNum  = 3;
    optional  uint32  preloadInterval  = 4;
    optional  uint32  preloadSyncGap  = 5;
    optional  uint32  preloadPicGap  = 6;
    optional  uint32  preloadPicLimit  = 7;
    optional  bool  needPreloadAtForeground  = 8;
    optional  bool  needPreloadAtChatList  = 9;
    optional  bool  needPreloadAtAppMsgExpose  = 10;
    optional  bool  needCheckTabAtForegroundPreload  = 11;
}

message AppMsgGetExtReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  subscene  = 4;
    optional  uint32  enterId  = 5;
    optional  uint32  itemShowType  = 6;
    optional  string  sessionId  = 7;
}

message AppMsgGetExtResp {
    required  BaseResponse  baseResponse  = 1;
    optional  BizAppMsgStat  appmsgstat  = 2;
    optional  AppMsgGetExtResp_BizHeadImgInfo  bizInfo  = 3;
}

message AppMsgGetExtResp_BizHeadImgInfo {
    optional  string  bigheadimgurl  = 1;
    optional  string  smallheadimgurl  = 2;
}

message AppMsgGetReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  vid  = 3;
    optional  uint32  scene  = 4;
    optional  uint32  subscene  = 5;
    optional  uint32  nettype  = 6;
    optional  string  sessionId  = 7;
    optional  uint32  enterId  = 8;
    optional  uint32  needBaseAppmsgInfo  = 9;
    optional  uint32  wkSimCardType  = 10;
    optional  uint64  lastPlayTimestamp  = 11;
    optional  uint64  lastPlayFilesize  = 12;
    optional  BizVideoScreenInfo  screenInfo  = 13;
    optional  uint32  noNeedPicUrl  = 14;
    optional  uint32  lastTrafficPopupMode  = 15;
    optional  uint32  m3U8TextPreload  = 16;
    optional  string  channelSessionId  = 17;
}

message AppMsgGetResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  AppMsgVideoUrlInfo  urlInfo  = 2;
    optional  uint32  redirectFlag  = 3;
    optional  string  redirectUrl  = 4;
    optional  uint32  isTempUrl  = 5;
    optional  uint32  playFlag  = 6;
    optional  uint32  funcFlag  = 7;
    optional  AppMsgAdvert  appmsgadvert  = 8;
    optional  string  url  = 9;
    optional  string  vid  = 10;
    optional  VideoPlayErrorInfo  playErrorInfo  = 11;
    optional  string  copyUrl  = 12;
    optional  AppMsgGetResp_MaliciousTitleInfo  maliciousTitleInfo  = 13;
    optional  AppMsgGetResp_AppMsgExtBaseAppMsgInfo  baseAppmsgInfo  = 14;
    optional  VideoPlayerConfig  videoPlayerConfig  = 19;
}

message AppMsgGetResp_AppMsgExtBaseAppMsgInfo {
    optional  string  title  = 1;
    optional  string  digest  = 2;
}

message AppMsgGetResp_MaliciousTitleInfo {
    optional  string  title  = 1;
    optional  string  digest  = 2;
    optional  string  cover  = 3;
    optional  string  titleWarning  = 4;
}

message AppMsgLikeCommentReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  uint32  personalCommentId  = 5;
    optional  string  openid  = 6;
    optional  int32  like  = 7;
    optional  uint32  actionType  = 8;
    optional  uint32  replyId  = 9;
    optional  uint32  scene  = 10;
    optional  uint32  subscene  = 11;
    optional  uint32  enterId  = 12;
    optional  uint32  itemShowType  = 13;
    optional  string  sessionId  = 14;
}

message AppMsgLikeCommentResp {
    required  BaseResponse  baseResponse  = 1;
}

message AppMsgLikeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  requestId  = 3;
    optional  string  comment  = 4;
    optional  uint32  scene  = 5;
    optional  uint32  subscene  = 6;
    optional  uint32  enterId  = 7;
    optional  uint32  actionType  = 8;
    optional  uint32  itemShowType  = 10;
    optional  string  sessionId  = 11;
}

message AppMsgLikeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  hasComment  = 2;
}

message AppMsgOperateCommentReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  content  = 4;
    optional  uint64  clientId  = 5;
    optional  uint32  actionType  = 6;
    optional  uint32  personalCommentId  = 7;
    optional  string  title  = 8;
    optional  uint32  scene  = 9;
    optional  uint32  subscene  = 10;
    optional  uint32  enterId  = 11;
    optional  uint32  itemShowType  = 12;
    optional  string  sessionId  = 13;
    optional  uint64  commentTopicId  = 14;
    optional  uint32  replyId  = 15;
}

message AppMsgOperateCommentResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  personalCommentId  = 2;
    optional  uint32  replyId  = 3;
}

message AppMsgReportContext {
    optional  string  url  = 1;
}

message AppMsgReportReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  AppMsgReportContext  reportList  = 2;
    optional  int32  reportScene  = 3;
    optional  string  netType  = 4;
}

message AppMsgReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message AppMsgVideoUrlInfo {
    optional  string  url  = 1;
    optional  uint32  formatId  = 2;
    optional  uint32  durationMs  = 3;
    optional  uint64  filesize  = 4;
    optional  uint32  width  = 5;
    optional  uint32  height  = 6;
    optional  uint32  totalRange  = 10;
    optional  uint32  videoQualityLevel  = 12;
    optional  string  videoQualityWording  = 13;
    optional  uint32  trafficPopupFlag  = 15;
}

message AppPersonalInfo {
    optional  string  appId  = 1;
    optional  string  personalSettingXml  = 2;
}

message AppSetting {
    optional  string  appId  = 1;
    required  uint32  appFlag  = 2;
    optional  string  openId  = 3;
}

message AppSettingReq {
    optional  string  appId  = 1;
}

message AppStoreControl {
    required  uint32  downloadInternal  = 1;
    required  uint32  promptCycle  = 2;
    required  uint32  promptDuration  = 3;
}

message AppStorePreloadControl {
    repeated  AppStorePreloadInfo  infoList  = 1;
}

message AppStorePreloadInfo {
    required  string  appStoreUrl  = 1;
}

message AppleIdAuthReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userId  = 2;
    optional  string  identityToken  = 3;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 4;
}

message AppleIdAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ticket  = 2;
    optional  string  userName  = 3;
    optional  string  authpwd  = 4;
    optional  HostList  newHostList  = 5;
    optional  NetworkControl  networkControl  = 6;
    optional  BuiltinIPList  builtinIplist  = 7;
}

message ApplyLiveMicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  string  cliMsgId  = 4;
}

message ApplyLiveMicResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  liveMicId  = 2;
    optional  bool  isVerified  = 3;
    optional  string  verifyUrl  = 4;
}

message AppointBankReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bankCardSeqno  = 2;
    optional  string  bankType  = 3;
    optional  string  timingId  = 4;
}

message AppointBankRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  BankcardElem  bankElem  = 4;
    optional  string  encryptData  = 5;
}

message ApproveAddChatRoomMemberReq {
    required  string  roomname  = 1;
    optional  string  ticket  = 2;
    optional  string  inviterusername  = 3;
    repeated  string  username  = 4;
    optional  uint64  approvenewmsgid  = 5;
}

message ApproveAddChatRoomMemberResp {
    required  BaseResponse  baseResponse  = 1;
}

message ApproveAddOpenIMChatRoomMemberReq {
    optional  string  roomName  = 1;
    optional  OpenIMChatRoomMemberInReq  inviter  = 2;
    repeated  OpenIMChatRoomMemberInReq  invitedMember  = 3;
    optional  string  ticket  = 4;
}

message ApproveAddOpenIMChatRoomMemberResp {
    optional  BaseResponse  baseResponse  = 1;
}

message AskForRewardRequest {
    required  string  productId  = 1;
    required  EmotionPrice  price  = 2;
}

message AskForRewardResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  reqKey  = 2;
    required  string  appId  = 3;
}

message AsyncBizSubscribeRequest {
    required  string  bizUserName  = 1;
}

message AsyncBizSubscribeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message AuthApp {
    optional  string  appid  = 1;
    optional  string  appname  = 2;
    optional  uint32  apptype  = 3;
    repeated  AuthApp_AuthItem  authItem  = 4;
    optional  uint32  allscopeState  = 5;
    optional  string  apptypeDesc  = 6;
    optional  string  tips  = 7;
    optional  uint32  isShowAllscope  = 8;
}

message AuthAppBaseInfo {
    optional  string  appId  = 1;
    optional  string  appType  = 2;
    optional  string  iconUrl  = 3;
    optional  string  appName  = 4;
    required  uint32  appFlag  = 5;
    optional  string  externInfo  = 6;
    optional  string  authInfo  = 7;
    optional  string  devInfo  = 8;
}

message AuthApp_AuthItem {
    optional  string  scope  = 1;
    optional  string  scopeDesc  = 2;
    optional  uint32  state  = 3;
    optional  uint32  isSwitchEnable  = 4;
}

message AuthSectResp {
    required  uint32  uin  = 1;
    required  ECDHKey  svrPubEcdhkey  = 2;
    required  SKBuiltinBuffer_t  sessionKey  = 3;
    required  SKBuiltinBuffer_t  autoAuthKey  = 4;
    required  uint32  wtloginRspBuffFlag  = 5;
    optional  SKBuiltinBuffer_t  wtloginRspBuff  = 6;
    optional  WTLoginImgRespInfo  wtloginImgRespInfo  = 7;
    optional  WxVerifyCodeRespInfo  wxVerifyCodeRespInfo  = 8;
    optional  SKBuiltinBuffer_t  cliDbencryptKey  = 9;
    optional  SKBuiltinBuffer_t  cliDbencryptInfo  = 10;
    optional  string  authKey  = 11;
    optional  SKBuiltinBuffer_t  a2Key  = 12;
    optional  string  applyBetaUrl  = 14;
    optional  ShowStyleKey  showStyle  = 15;
    optional  string  authTicket  = 16;
    optional  uint32  newVersion  = 17;
    optional  uint32  updateFlag  = 18;
    optional  uint32  authResultFlag  = 19;
    optional  string  fsurl  = 20;
    optional  uint32  mmtlsControlBitFlag  = 21;
    optional  uint32  serverTime  = 22;
    optional  SKBuiltinBuffer_t  clientSessionKey  = 23;
    optional  SKBuiltinBuffer_t  serverSessionKey  = 24;
    optional  uint32  ecdhControlFlag  = 25;
}

message AuthUserAutoFillInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  string  authInfoList  = 3;
    optional  bool  userConfirm  = 4;
    optional  uint32  authStatus  = 5;
    optional  uint32  source  = 6;
    optional  uint32  clientVersion  = 7;
}

message AuthUserAutoFillInfoResp {
    required  BaseResponse  baseResponse  = 1;
}

message AuthenticNameInfo {
    optional  string  maskRealname  = 1;
    optional  string  maskId  = 2;
}

message AuthorizeInfoWithPhone {
    optional  AuthenticNameInfo  realnameInfo  = 1;
    optional  GetAllPhoneData  allphoneInfo  = 2;
    optional  string  applyWording  = 3;
    optional  string  realnameWording  = 4;
    optional  string  phoneWording  = 5;
    optional  ScopeWording  scopeWording  = 6;
    optional  AuthorizeWording  authorizeWording  = 7;
}

message AuthorizeUserIDAlarm {
    optional  string  title  = 1;
    optional  string  desc  = 2;
}

message AuthorizeUserIDBaseResponse {
    optional  int32  errCode  = 1;
    optional  string  errMsg  = 2;
}

message AuthorizeUserIDItem {
    optional  string  key  = 1;
    optional  string  val  = 2;
}

message AuthorizeUserIDJumpItem {
    optional  string  name  = 1;
    optional  string  url  = 2;
}

message AuthorizeUserIDPhoneItem {
    optional  string  phoneId  = 1;
    optional  string  showPhone  = 2;
    optional  string  bankType  = 3;
}

message AuthorizeUserIDSmsInfo {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    repeated  AuthorizeUserIDPhoneItem  phoneList  = 3;
}

message AuthorizeWording {
    optional  string  wording  = 1;
    optional  string  html  = 2;
    optional  string  title  = 3;
}

message AutoAuthAesReqData {
    required  BaseRequest  baseRequest  = 1;
    optional  BaseAuthReqInfo  baseReqInfo  = 2;
    required  SKBuiltinBuffer_t  autoAuthKey  = 3;
    optional  string  imei  = 4;
    optional  string  softType  = 5;
    required  uint32  builtinIpseq  = 6;
    optional  string  clientSeqId  = 7;
    optional  string  signature  = 8;
    optional  string  deviceName  = 9;
    optional  string  deviceType  = 10;
    optional  string  language  = 11;
    optional  string  timeZone  = 12;
    optional  int32  channel  = 13;
    optional  SKBuiltinBuffer_t  clientCheckData  = 14;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 15;
    optional  string  bundleId  = 16;
    optional  string  androidPackageName  = 17;
    optional  PubKeyInfo  pubKey  = 18;
}

message AutoAuthKey {
    required  SKBuiltinBuffer_t  encryptKey  = 1;
    required  SKBuiltinBuffer_t  key  = 2;
}

message AutoAuthRequest {
    required  AutoAuthRsaReqData  rsaReqData  = 1;
    required  AutoAuthAesReqData  aesReqData  = 2;
}

message AutoAuthRsaReqData {
    required  SKBuiltinBuffer_t  aesEncryptKey  = 2;
    optional  ECDHKey  cliPubEcdhkey  = 3;
}

message AutoRunTaskSettingControl {
    optional  bool  disableMd5Check  = 1;
    optional  bool  disableDownloadResume  = 2;
    optional  bool  disablePreloadCommlib  = 3;
    optional  bool  disableGameSilentDownload  = 4;
    optional  bool  disableWepkgDownloadRetry  = 5;
    optional  bool  disableWepkgExpiredClean  = 6;
    optional  bool  disableGameMediaCacheClean  = 7;
}

message AxAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  businessType  = 2;
    required  SKBuiltinBuffer_t  axTicket  = 3;
    optional  string  imei  = 4;
    optional  string  softType  = 5;
    optional  string  signature  = 6;
    optional  string  deviceName  = 7;
    optional  string  deviceType  = 8;
    optional  string  language  = 9;
    optional  string  timeZone  = 10;
    optional  int32  channel  = 11;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 12;
}

message AxAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  SKBuiltinBuffer_t  clientSessionKey  = 2;
    optional  SKBuiltinBuffer_t  serverSessionKey  = 3;
}

message AxAuthSecResp {
    required  uint32  businessType  = 1;
    required  SKBuiltinBuffer_t  axTicket  = 2;
    optional  HostList  axHostList  = 3;
    required  uint32  axAuthCgiId  = 4;
    required  SKBuiltinBuffer_t  randomKey  = 5;
    optional  string  axAuthUri  = 6;
}

message AxAuthSecRespList {
    required  uint32  count  = 1;
    repeated  AxAuthSecResp  list  = 2;
    optional  uint32  axTicketExpireTime  = 3;
    optional  uint32  axTicketAutoRetry  = 4;
}

message BackPageInfo {
    optional  string  appid  = 1;
    optional  string  nickName  = 2;
    optional  string  userName  = 3;
    optional  uint32  finishActionCode  = 4;
    optional  string  finishUrl  = 5;
    optional  string  signature  = 6;
    optional  string  qingHuaiPageUrl  = 7;
    optional  uint32  isDefaultFocus  = 8;
}

message BackupCancelRequest {
    required  string  id  = 1;
}

message BackupCommandRequest {
    required  int32  command  = 1;
    optional  bytes  data  = 2;
}

message BackupCommandResponse {
    required  int32  command  = 1;
    optional  bytes  data  = 2;
}

message BackupEmojiOperateRequest {
    repeated  string  md5List  = 1;
    required  uint32  opcode  = 2;
    optional  uint32  panelType  = 3;
}

message BackupEmojiOperateResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  needUploadMd5List  = 2;
}

message BackupFinishRequest {
    required  string  id  = 1;
    optional  BackupReportList  data  = 2;
    optional  uint32  serverSessionCount  = 3;
    optional  uint32  serverMessageCount  = 4;
    optional  uint32  serverFileCount  = 5;
    optional  uint32  calculateSize  = 6;
    optional  uint32  serverDataPushSize  = 7;
    optional  uint32  serverReadDbtotalTime  = 8;
    optional  uint32  serverReadFileTotalTime  = 9;
    optional  uint32  serverCostTotalTime  = 10;
    optional  uint32  serverVersion  = 11;
}

message BackupHeartBeatRequest {
    required  uint64  ack  = 1;
}

message BackupHeartBeatResponse {
    required  uint64  ack  = 1;
}

message BackupInfoItem {
    required  string  bakChatName  = 1;
    required  string  nickName  = 2;
    required  uint32  msgCount  = 3;
    required  uint32  noSvrIdMsgCount  = 4;
    required  uint32  filterdMsgCount  = 5;
    required  uint32  bigImgCount  = 6;
    required  uint32  middleImgCount  = 7;
    required  uint32  smallImgCount  = 8;
    required  uint32  voiceCount  = 9;
    required  uint32  videoThumbCount  = 10;
    required  uint32  videoCount  = 11;
    required  uint32  sightThumbCount  = 12;
    required  uint32  signtCount  = 13;
    required  uint32  appThumbCount  = 14;
    required  uint32  appDataCount  = 15;
    required  uint32  voiceDontDownloaded  = 16;
    required  uint32  filerdBecauseTime  = 17;
}

message BackupInfoReport {
    repeated  BackupInfoItem  bakItemList  = 1;
}

message BackupReportItem {
    required  string  bakChatName  = 1;
    required  uint32  msgCount  = 2;
}

message BackupReportList {
    required  uint32  count  = 1;
    repeated  BackupReportItem  list  = 2;
}

message BackupRequestSession {
    repeated  string  sessionName  = 1;
    repeated  int64  timeInterval  = 2;
}

message BackupRequestSessionResponse {
    repeated  string  sessionName  = 1;
    repeated  int64  timeInterval  = 2;
}

message BackupSessionInfo {
    required  uint32  sessionTime  = 1;
    required  uint32  unReadCount  = 2;
    required  string  userName  = 3;
}

message BackupSessionInfoList {
    repeated  BackupSessionInfo  sessionInfoList  = 1;
    required  uint32  fmessageUnreadCount  = 2;
}

message BackupStartGeneralInfo {
    required  string  deviceId  = 1;
    required  string  deviceName  = 2;
    required  string  model  = 3;
    required  string  systemName  = 4;
    required  string  systemVersion  = 5;
    required  uint32  wechatVersion  = 6;
    required  uint64  deviceFreeSpace  = 7;
}

message BackupStartRequest {
    required  string  id  = 1;
    optional  uint64  bigDataSize  = 2;
    optional  uint64  sessionCount  = 3;
    optional  uint64  msgCount  = 4;
    optional  BackupStartGeneralInfo  generalInfo  = 5;
    optional  uint64  dataSize  = 6;
    optional  int32  transferType  = 7;
}

message BackupStartResponse {
    required  string  id  = 1;
    required  uint64  totalCount  = 2;
    required  uint64  totalSize  = 3;
    required  int32  status  = 4;
    optional  uint32  networkState  = 5;
    optional  uint64  bigDataSize  = 6;
    optional  BackupStartGeneralInfo  generalInfo  = 7;
    optional  int32  transferType  = 8;
}

message BakChatCreateQRCodeOfflineRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  addrCount  = 2;
    repeated  ConnectInfoAddr  addrList  = 3;
    optional  string  pcname  = 4;
    optional  string  pcacctName  = 5;
    required  uint32  scene  = 6;
    optional  uint64  dataSize  = 7;
    optional  string  wifiName  = 8;
    optional  string  tickit  = 9;
}

message BakChatCreateQRCodeRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  addrCount  = 2;
    repeated  ConnectInfoAddr  addrList  = 3;
    optional  string  pcname  = 4;
    optional  string  pcacctName  = 5;
    required  uint32  scene  = 6;
    optional  uint64  dataSize  = 7;
    optional  string  wifiName  = 8;
    optional  int32  op  = 9;
}

message BakChatCreateQRcodeOfflineResponse {
    required  uint32  ret  = 1;
    required  SKBuiltinBuffer_t  qrcodeBuffer  = 2;
    optional  string  qrcodeUrl  = 3;
    required  uint32  encryFlag  = 4;
    optional  string  id  = 5;
}

message BakChatCreateQRcodeResponse {
    required  uint32  ret  = 1;
    required  SKBuiltinBuffer_t  qrcodeBuffer  = 2;
    optional  string  qrcodeUrl  = 3;
    required  SKBuiltinBuffer_t  key  = 4;
    optional  string  hello  = 5;
    optional  string  ok  = 6;
    required  uint32  encryFlag  = 7;
    optional  string  id  = 8;
    optional  string  tickit  = 9;
}

message BakChatDeleteResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    required  uint32  bakChatSvrId  = 3;
}

message BakChatItem {
    optional  string  bakChatClientId  = 1;
    optional  string  bakChatName  = 2;
    required  bytes  deviceId  = 3;
    required  int32  clientVersion  = 4;
    required  bytes  deviceType  = 5;
    required  uint32  scene  = 6;
    required  uint32  createTime  = 7;
    required  uint32  bakChatSvrId  = 8;
    required  uint32  bakChatSize  = 9;
    required  uint32  updateTime  = 10;
    optional  uint32  deviceNum  = 11;
    optional  uint32  needPwd  = 12;
    optional  SKBuiltinString_t  wording  = 13;
    optional  int32  key  = 14;
    optional  uint32  encryptType  = 15;
}

message BakChatMsgItem {
    required  uint32  type  = 1;
    optional  string  clientMsgId  = 2;
    required  SKBuiltinString_t  fromUserName  = 3;
    required  SKBuiltinString_t  toUserName  = 4;
    required  SKBuiltinString_t  content  = 5;
    required  uint32  msgStatus  = 6;
    required  uint32  clientMsgTime  = 7;
    optional  string  msgSource  = 8;
    required  uint32  msgId  = 9;
    optional  uint32  mediaIdCount  = 10;
    repeated  SKBuiltinString_t  mediaId  = 11;
    repeated  SKBuiltinUint32_t  mediaType  = 12;
    optional  SKBuiltinBuffer_t  buffer  = 13;
    optional  uint32  bufferLength  = 14;
    optional  uint32  bufferType  = 15;
    optional  uint64  newMsgId  = 16;
    optional  uint32  sequentId  = 17;
    optional  int64  clientMsgMillTime  = 18;
    optional  uint32  msgFlag  = 19;
}

message BakChatMsgList {
    required  uint32  count  = 1;
    repeated  BakChatMsgItem  list  = 2;
}

message BakChatRecoverDataResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    required  uint32  bakChatSvrId  = 3;
    optional  string  clientMsgId  = 4;
    required  uint32  offset  = 5;
    required  uint32  length  = 6;
    required  SKBuiltinBuffer_t  data  = 7;
    required  uint32  endFlag  = 8;
    required  uint32  cancelFlag  = 9;
    required  uint32  totalLen  = 10;
    optional  uint32  aesKey  = 11;
    optional  uint32  encryVer  = 12;
    optional  string  cdnurl  = 13;
}

message BakChatRecoverGetListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  BakChatItem  list  = 3;
}

message BakChatRecoverHeadResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    required  uint32  count  = 3;
    repeated  SKBuiltinString_t  list  = 4;
    required  uint32  bakChatSvrId  = 5;
    required  uint32  startIndex  = 6;
    required  uint32  type  = 7;
    required  uint32  endFlag  = 8;
    required  uint32  totalCount  = 9;
}

message BakChatUploadEndResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    required  uint32  bakChatSvrId  = 3;
}

message BakChatUploadHeadResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    required  uint32  bakChatSvrId  = 3;
}

message BakChatUploadMediaResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    required  uint32  offset  = 3;
    required  uint32  maxLength  = 4;
    required  uint32  createTime  = 5;
    optional  string  mediaId  = 6;
    required  uint32  endFlag  = 7;
    required  uint32  cancelFlag  = 8;
    required  uint32  bakChatSvrId  = 9;
}

message BakChatUploadMsgResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  bakChatClientId  = 2;
    optional  string  clientMsgId  = 3;
    required  uint32  bakChatSvrId  = 4;
}

message BalanceInfo {
    optional  string  useCftBalance  = 1;
    optional  string  balanceBankType  = 2;
    optional  string  balanceBindSerial  = 3;
    optional  string  balanceForbidWord  = 4;
    optional  string  totalBalance  = 5;
    optional  string  availBalance  = 6;
    optional  string  frozenBalance  = 7;
    optional  string  fetchBalance  = 8;
    optional  string  mobile  = 9;
    optional  string  supportMicropay  = 10;
    optional  string  balanceListUrl  = 11;
    optional  string  availFetchWording  = 12;
    optional  string  maxFetchWording  = 13;
    optional  uint64  balanceVersion  = 14;
    optional  uint32  timeOut  = 15;
    optional  string  balanceLogoUrl  = 16;
    optional  string  forbidTitle  = 17;
    optional  string  forbidUrl  = 18;
    optional  string  balanceShowWording  = 19;
    optional  string  balanceForbidId  = 20;
    optional  BalanceMenuInfo  balanceMenuInfo  = 21;
    optional  PromptInfo  promptInfo  = 23;
}

message BalanceMenuInfo {
    optional  bool  isShowMenu  = 1;
    repeated  BalanceMenuItem  balanceMenuItem  = 2;
}

message BalanceMenuItem {
    optional  string  title  = 1;
    optional  uint32  jumpType  = 2;
    optional  string  jumpH5Url  = 3;
    optional  string  tinyappUsername  = 4;
    optional  string  tinyappPath  = 5;
}

message BalanceMobileInfo {
    optional  string  mobileFlag  = 1;
    optional  string  mobileNo  = 2;
    optional  string  bankType  = 3;
    optional  string  bindSerial  = 4;
    optional  string  bankName  = 5;
    optional  string  bankaccType  = 6;
    optional  string  bindTail  = 7;
    optional  string  bankaccTypeName  = 8;
}

message BanLiveCommentRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  bool  enableComment  = 4;
}

message BanLiveCommentResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BankCardInfo {
    optional  string  bindSerialno  = 1;
    optional  string  bankType  = 2;
    optional  string  bankName  = 3;
    optional  string  cardTail  = 4;
}

message BankCardResult {
    optional  uint32  type  = 1;
    optional  OcrItem  number  = 2;
    optional  OcrItem  validDate  = 3;
    optional  OcrItem  bankName  = 4;
    optional  OcrItem  cardPosition  = 11;
    optional  uint32  imageWidth  = 100;
    optional  uint32  imageHeight  = 101;
    optional  uint32  seqNum  = 102;
}

message BankElement {
    optional  string  bankName  = 1;
    optional  string  bankLogo  = 2;
    optional  string  bankType  = 3;
    optional  bool  bankIsUsable  = 4;
    optional  string  bankaccTypeName  = 5;
    optional  string  bankaccType  = 6;
    optional  string  bankNamePinyin  = 7;
}

message BankElements {
    repeated  BankElement  bankElements  = 1;
}

message BankFavGuideForBindCard {
    optional  MktPaymentChannel  paymentChannel  = 1;
    optional  uint32  isShowGuide  = 2;
    optional  string  defaultFavCombId  = 3;
    optional  string  guideContent  = 4;
    optional  string  guideContentColor  = 5;
    optional  string  guideBtnText  = 6;
    optional  string  guideBtnTextColor  = 7;
    optional  string  guideBtnBgColor  = 8;
    optional  string  guideLogo  = 9;
}

message BankInfoItem {
    optional  string  bankName  = 1;
    optional  string  bankType  = 2;
    optional  string  cardType  = 3;
    optional  string  mobileNo  = 4;
    optional  string  bankNoSuffix  = 5;
    optional  string  bindSerailno  = 6;
    optional  string  bankIcon  = 8;
    optional  bool  isGrayCard  = 9;
    optional  string  veriHint  = 10;
}

message BankRedeemTypeInfo {
    optional  string  bindSerialno  = 1;
    repeated  RedeemTypeList  redeemTypeList  = 2;
    optional  SlowRedeemDisplayInfo  slowRedeemDisplayInfo  = 3;
}

message BankcardElem {
    optional  string  bankType  = 1;
    optional  string  bankName  = 2;
    optional  string  bankLogo  = 3;
    optional  uint32  bankCardFee  = 4;
    optional  uint32  bankFlag  = 5;
    repeated  EnterTimeItem  enterTimeList  = 6;
    optional  string  maintenanceText  = 7;
    optional  string  maintenanceColor  = 8;
    optional  string  maintenanceAlertText  = 9;
    optional  string  sortPingyin  = 10;
    optional  string  feeRateExplain  = 11;
    optional  uint64  minPoundage  = 12;
}

message Banner {
    optional  string  content  = 1;
    optional  string  url  = 2;
}

message BannerTips {
    optional  string  barTips  = 1;
    optional  string  confirmTips  = 2;
    optional  string  confirmButtonTips  = 3;
    optional  string  iconUrl  = 4;
    optional  string  jumpUrl  = 5;
    optional  string  bannerColor  = 6;
    optional  string  wordingColor  = 7;
}

message BannerViewData {
    optional  string  title  = 1;
    optional  RouteInfo  routeInfo  = 2;
    optional  string  viewId  = 3;
}

message BaseAuthReqInfo {
    optional  SKBuiltinBuffer_t  wtloginReqBuff  = 1;
    optional  WTLoginImgReqInfo  wtloginImgReqInfo  = 2;
    optional  WxVerifyCodeReqInfo  wxVerifyCodeReqInfo  = 3;
    optional  SKBuiltinBuffer_t  cliDbencryptKey  = 4;
    optional  SKBuiltinBuffer_t  cliDbencryptInfo  = 5;
    optional  uint32  authReqFlag  = 6;
    optional  string  authTicket  = 7;
}

message BaseEvent {
    required  string  uuid  = 1;
    required  uint32  channel  = 2;
}

message BaseRequest {
    required  bytes  sessionKey  = 1;
    required  uint32  uin  = 2;
    required  bytes  deviceId  = 3;
    required  int32  clientVersion  = 4;
    required  bytes  deviceType  = 5;
    optional  uint32  scene  = 6;
}

message BaseResponse {
    required  int32  ret  = 1;
    required  SKBuiltinString_t  errMsg  = 2;
}

message BaseResponseErrMsg {
    required  int32  showType  = 1;
    optional  string  content  = 2;
    optional  string  url  = 3;
    required  int32  dispSec  = 4;
    optional  string  title  = 5;
    required  int32  action  = 6;
    optional  int32  delayConnSec  = 7;
    optional  uint32  countdown  = 8;
    optional  string  ok  = 9;
    optional  string  cancel  = 10;
}

message BatchBizAttrSyncResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  BizAttrSyncSingleRespInfo  respInfoList  = 2;
}

message BatchCheckBigFileUploadRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  CheckBigFileUploadRequest  list  = 3;
}

message BatchCheckBigFileUploadResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  CheckBigFileUploadResponse  list  = 3;
}

message BatchDelCardItemRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  cardIds  = 2;
}

message BatchDelCardItemResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  succCardIds  = 2;
}

message BatchDelFavItemRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  uint32  favIdList  = 3[packed=true];
}

message BatchDelFavItemResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  DelFavItemRsp  list  = 3;
}

message BatchDeleteCardInInvalidListRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  userCardId  = 2;
}

message BatchDeleteCardInInvalidListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message BatchEmojiBackupResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  needUploadMd5List  = 2;
}

message BatchEmojiDownLoadRequest {
    required  uint32  index  = 1;
    optional  uint32  reqType  = 2;
    repeated  string  reqMd5  = 3;
    optional  uint32  panelType  = 4;
}

message BatchEmojiDownLoadResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  index  = 2;
    repeated  string  md5List  = 3;
    required  uint32  endFlag  = 4;
    repeated  EmojiInfo  emojiList  = 5;
}

message BatchFunctionOperateRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  PayFunctionCell  operateFunctionList  = 2;
    optional  uint32  tpaCountry  = 3;
    optional  uint32  funcType  = 4;
}

message BatchFunctionOperateResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message BatchGetAppMsgReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  urlList  = 2;
    repeated  BatchGetAppMsgReq_ReqInfo  reqInfoList  = 3;
    optional  string  netType  = 4;
    optional  uint64  tmplControlFlag  = 5;
    optional  uint32  stripPreloadNum  = 6;
    optional  uint32  listType  = 7;
    repeated  CheckTmplVerReq_TypeInfo  typeInfoList  = 8;
}

message BatchGetAppMsgReq_ReqInfo {
    optional  string  url  = 1;
    optional  uint32  lastModifyTime  = 2;
    optional  uint32  scene  = 3;
    optional  bool  isNativePage  = 4;
}

message BatchGetAppMsgResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  AppMsgContext  appMsgContextList  = 2;
}

message BatchGetCardItemByTpInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  CardTpInfoItem  items  = 2;
    optional  StatisticInfo  statisticInfo  = 3;
    optional  uint32  fromScene  = 4;
}

message BatchGetCardItemByTpInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message BatchGetCardItemRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  cardIds  = 2;
}

message BatchGetCardItemResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message BatchGetContactBriefInfoReq {
    repeated  string  contactUsernameList  = 1;
}

message BatchGetContactBriefInfoResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  BatchGetContactBriefInfoResp_ContactBriefInfo  contactList  = 2;
}

message BatchGetContactBriefInfoResp_ContactBriefInfo {
    optional  string  username  = 1;
    optional  int32  ret  = 2;
    optional  ModContact  contact  = 3;
}

message BatchGetContactProfileRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  mode  = 2;
    required  uint32  count  = 3;
    repeated  SKBuiltinString_t  userNameList  = 4;
}

message BatchGetContactProfileResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  SKBuiltinBuffer_t  contactProfileBufList  = 3;
}

message BatchGetDownloadUrlRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  GetDownloadUrlReqItem  reqList  = 2;
    optional  uint32  scene  = 3;
}

message BatchGetDownloadUrlResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetDownloadUrlRespItem  respList  = 2;
}

message BatchGetFavItemRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  uint32  favIdList  = 3[packed=true];
}

message BatchGetFavItemResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  FavObject  objectList  = 3;
}

message BatchGetHeadImgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  SKBuiltinString_t  userNameList  = 3;
}

message BatchGetHeadImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  ImgPair  imgPairList  = 3;
}

message BatchGetShakeTranImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  ShakeTranImgGetItem  imgUrlList  = 3;
}

message BatchGetSnsObjectDetailRequest {
    optional  BaseRequest  baseRequest  = 1;
    repeated  uint64  feedIdList  = 2;
}

message BatchGetSnsObjectDetailResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  SnsObject  objectList  = 2;
}

message BatchGetUrlInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  batchCount  = 2;
    repeated  GetUrlInfoReqItem  itemList  = 3;
    optional  uint32  scene  = 4;
}

message BatchGetUrlInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  batchCount  = 2;
    repeated  GetUrlInfoRespItem  itemList  = 3;
}

message BatchModContactTypeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  modTypeInfoCount  = 2;
    repeated  ModContactTypeInfo  modTypeInfoList  = 3;
    optional  uint32  scene  = 4;
}

message BatchModContactTypeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  resInfoCount  = 2;
    repeated  ModContactTypeResInfo  resInfoList  = 3;
}

message BatchModFavItemRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  ModFavItemMeta  metaList  = 2;
}

message BatchModFavItemResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ModFavItemRspInfo  list  = 2;
}

message BatchRecordWxaTemplateMsgEventRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaTemplateMsgEvent  events  = 2;
}

message BatchRecordWxaTemplateMsgEventResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BatchSearchHardDeviceFilter {
    optional  string  bizName  = 1;
}

message BatchSearchHardDeviceInfo {
    required  string  mac  = 1;
}

message BatchSearchHardDeviceReq {
    repeated  BatchSearchHardDeviceInfo  searchInfo  = 1;
    optional  BatchSearchHardDeviceFilter  searchFilter  = 2;
    optional  uint32  batchSearchSence  = 3;
}

message BatchSearchHardDeviceResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  BatchSearchHardDeviceResult  searchResult  = 2;
}

message BatchSearchHardDeviceResult {
    required  uint32  ret  = 1;
    optional  string  bindTicket  = 2;
    optional  ModContact  contact  = 3;
    optional  string  mac  = 4;
    optional  string  deviceName  = 5;
    optional  HardDevice  device  = 6;
}

message BatchSwitchServiceNotifyOptionRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  SwitchServiceNotifyOptionItem  operationList  = 2;
}

message BatchSwitchServiceNotifyOptionResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BatchSyncVersionReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  SyncVersionSingleReqInfo  reqInfoList  = 2;
}

message BatchSyncVersionResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  SyncVersionSingleRespInfo  respInfoList  = 2;
}

message BatchTransCDNRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  TransCDNItem  list  = 3;
}

message BatchTransCDNResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  TransCDNItem  list  = 3;
}

message BatchWxaAttrSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaAttrSyncSingleReqInfo  reqInfoList  = 2;
}

message BatchWxaAttrSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WxaAttrSyncSingleRespInfo  respInfoList  = 2;
}

message BestSellingGameListModule {
    repeated  GameListItem  gameList  = 1;
    optional  string  externInfo  = 2;
}

message BgFgRequest {
    required  uint32  clientVersion  = 1;
    required  uint32  deviceTypeId  = 2;
    required  uint32  networkMode  = 3;
    required  uint32  onlineMode  = 4;
}

message BgmSearchReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint64  reqUin  = 2;
    optional  uint64  searchReqId  = 3;
    optional  string  query  = 4;
    optional  uint32  offset  = 5;
    optional  uint32  reqNum  = 6;
    optional  uint64  relatedRecId  = 7;
}

message BgmSearchResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint64  requestId  = 2;
    repeated  RecommendedMusicInfo  musicList  = 3;
}

message BindAppleIdReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userId  = 2;
    optional  string  identityToken  = 3;
}

message BindAppleIdResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BindECardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ecardType  = 2;
    optional  string  reqSerial  = 3;
    optional  string  verifyCode  = 4;
    optional  string  bindToken  = 5;
    optional  uint32  openScene  = 7;
}

message BindECardRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  PopItem  guideInfo  = 6;
    optional  OpenSuccItem  succTips  = 7;
}

message BindEmailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    optional  string  email  = 3;
}

message BindEmailResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BindHardDeviceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bindTicket  = 4;
    optional  uint32  subscribeFlag  = 5;
}

message BindHardDeviceResponse {
    required  BaseResponse  baseResponse  = 1;
    required  HardDevice  hardDevice  = 2;
    required  HardDeviceAttr  hardDeviceAttr  = 3;
    optional  uint32  flag  = 4;
}

message BindLinkedinContactRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opcode  = 2;
    required  uint32  visible  = 3;
    optional  string  linkedinMemberId  = 4;
    optional  string  linkedinName  = 5;
    optional  string  linkedinPublicUrl  = 6;
    optional  string  timestamp  = 7;
    optional  string  nounce  = 8;
    optional  string  linkedinSignature  = 9;
    optional  string  linkedinReturnSignature  = 10;
}

message BindLinkedinContactResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BindOldWxRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  qrcode  = 2;
}

message BindOldWxResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  sessionId  = 2;
    optional  string  oldUsername  = 3;
    optional  string  oldAlias  = 4;
}

message BindOpMobileRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  string  mobile  = 3;
    required  int32  opcode  = 4;
    optional  string  verifycode  = 5;
    optional  int32  dialFlag  = 6;
    optional  string  dialLang  = 7;
    optional  string  authTicket  = 8;
    optional  uint32  forceReg  = 9;
    optional  string  safeDeviceName  = 10;
    optional  string  safeDeviceType  = 11;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 12;
    optional  string  language  = 13;
    optional  uint32  inputMobileRetrys  = 14;
    optional  uint32  adjustRet  = 15;
    optional  string  clientSeqId  = 16;
    optional  uint32  mobileCheckType  = 17;
    optional  string  regSessionId  = 18;
    optional  SKBuiltinBuffer_t  spamBuffer  = 19;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 20;
    optional  string  thirdAppAuthTicket  = 21;
    optional  SmsUpCheckExtInfo  smsUpCheckExtInfo  = 22;
    optional  string  extRegUrl  = 24;
}

message BindOpMobileResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ticket  = 2;
    optional  string  smsNo  = 3;
    optional  uint32  needSetPwd  = 4;
    optional  string  pwd  = 5;
    optional  string  username  = 6;
    optional  HostList  newHostList  = 7;
    optional  BuiltinIPList  builtinIplist  = 8;
    optional  NetworkControl  networkControl  = 9;
    optional  string  authTicket  = 10;
    optional  uint32  safeDevice  = 11;
    optional  string  cc  = 12;
    optional  uint32  obsoleteItem1  = 13;
    optional  SafeDeviceList  safeDeviceList  = 14;
    optional  string  pureMobile  = 15;
    optional  string  formatedMobile  = 16;
    optional  ShowStyleKey  showStyle  = 17;
    optional  uint32  mmtlsControlBitFlag  = 18;
    optional  string  smsUpCode  = 19;
    optional  string  smsUpMobile  = 20;
    optional  uint32  mobileCheckType  = 21;
    optional  string  regSessionId  = 22;
    optional  uint32  restart  = 23;
}

message BindQQRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  qq  = 2;
    optional  string  pwd  = 3;
    optional  string  pwd2  = 4;
    optional  string  imgSid  = 5;
    optional  string  imgCode  = 6;
    required  uint32  opcode  = 7;
    optional  SKBuiltinString_t  imgEncryptKey  = 8;
    optional  SKBuiltinBuffer_t  ksid  = 9;
    optional  uint32  setAsMainAcct  = 10;
    optional  string  safeDeviceName  = 11;
    optional  string  safeDeviceType  = 12;
    optional  SKBuiltinBuffer_t  wtloginReqBuff  = 13;
}

message BindQQResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  imgSid  = 2;
    required  SKBuiltinBuffer_t  imgBuf  = 3;
    optional  uint32  pushMailStatus  = 4;
    optional  uint32  privateMsgStatus  = 5;
    optional  string  microBlogName  = 6;
    optional  uint32  status  = 7;
    optional  string  qqmailSkey  = 8;
    optional  SKBuiltinString_t  imgEncryptKey  = 9;
    optional  SKBuiltinBuffer_t  a2Key  = 10;
    optional  SKBuiltinBuffer_t  ksid  = 11;
    optional  SafeDeviceList  safeDeviceList  = 12;
    optional  uint32  safeDevice  = 13;
    optional  SKBuiltinBuffer_t  wtloginRspBuff  = 14;
}

message BioBuffer {
    optional  bytes  head  = 1;
    optional  bytes  dataBody  = 2;
}

message BitFeature {
    optional  uint64  feature  = 1;
}

message BizAccountInfo {
    optional  string  userName  = 1;
    optional  uint32  banType  = 2;
    optional  string  banReason  = 3;
    optional  uint32  userRole  = 4;
    optional  uint32  serviceType  = 5;
}

message BizAiScanImageAdInfo {
    optional  string  uxinfo  = 1;
    optional  uint32  handId  = 2;
}

message BizAiScanImageJsapiInfo {
    optional  string  extBuffer  = 3;
}

message BizAiScanImageLocation {
    optional  float  latitude  = 1;
    optional  float  longitude  = 2;
    optional  float  precision  = 3;
}

message BizAiScanImageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  imgData  = 2;
    optional  uint32  type  = 11;
    optional  uint32  mode  = 12;
    optional  uint32  sessionid  = 16;
    optional  uint32  scanid  = 17;
    optional  uint64  sessionid64  = 18;
    optional  bool  isAiCrop  = 19;
    optional  bool  isUseAi  = 20;
    optional  GoodsObject  cropObj  = 21;
    optional  uint32  cameraImgW  = 22;
    optional  uint32  cameraImgH  = 23;
    optional  uint32  isUserCrop  = 24;
    optional  string  reqKey  = 25;
    optional  BizAiScanImageLocation  location  = 26;
    optional  BizAiScanImageAdInfo  adInfo  = 31;
    optional  BizAiScanImageJsapiInfo  jsapiInfo  = 32;
    optional  uint64  sendSvrTime  = 50;
}

message BizAiScanImageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  aiscanJumpType  = 2;
    optional  string  wxaAppid  = 3;
    optional  string  wxaPath  = 4;
    optional  string  reqKey  = 7;
    optional  string  imgUrl  = 8;
    optional  GoodsObject  matchObj  = 9;
    optional  uint32  sessionid  = 10;
    optional  uint64  sessionid64  = 11;
    optional  uint32  scanid  = 12;
    optional  bool  forceJump  = 13;
    optional  uint32  catId  = 14;
    optional  bool  needUserCrop  = 15;
    optional  uint32  clientReturnType  = 16;
    optional  bool  needPoi  = 17;
    optional  uint32  networkLimitedTime  = 50;
}

message BizAiScanImageRetrievalReqJson {
    optional  string  action  = 1;
    optional  string  reqKey  = 2;
    optional  uint32  badReason  = 10;
}

message BizAiScanImageRetrievalRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  jsonStr  = 2;
    optional  uint32  type  = 3;
}

message BizAiScanImageRetrievalResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonStr  = 2;
}

message BizAiScanImageScenePreviewRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  int64  phashValue  = 2;
    optional  string  phashStr  = 4;
    optional  string  phashVersion  = 5;
    optional  uint64  sessionid64  = 18;
    optional  uint32  seqNum  = 22;
}

message BizAiScanImageScenePreviewResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  chatImageSearching  = 2;
    optional  uint64  sessionid64  = 11;
    optional  uint32  seqNum  = 15;
}

message BizAiScanImageSceneRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  imgData  = 2;
    optional  uint32  type  = 11;
    optional  uint32  mode  = 12;
    optional  uint64  sessionid64  = 18;
    optional  GoodsObject  cropObj  = 21;
    optional  uint32  seqNum  = 22;
    optional  BizAiScanImageSearchInfo  searchInfo  = 23;
    optional  BizAiScanImageLocation  location  = 26;
    optional  int64  phashValue  = 27;
    optional  string  phashStr  = 28;
    optional  string  phashVersion  = 29;
}

message BizAiScanImageSceneResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  aiscanJumpType  = 2;
    optional  string  reqKey  = 7;
    optional  string  imgUrl  = 8;
    optional  GoodsObject  matchObj  = 9;
    optional  uint64  sessionid64  = 11;
    optional  uint32  catId  = 14;
    optional  uint32  seqNum  = 15;
    optional  string  jumpKeyword  = 21;
}

message BizAiScanImageSearchInfo {
    optional  uint32  h5Version  = 1;
}

message BizApiInfo {
    optional  string  apiName  = 1;
}

message BizAppInfo {
    optional  string  appId  = 1;
    optional  string  name  = 2;
    optional  string  description  = 3;
    optional  string  name4EnUs  = 4;
    optional  string  description4EnUs  = 5;
    optional  string  name4ZhTw  = 6;
    optional  string  description4ZhTw  = 7;
    optional  string  iconUrlSd  = 8;
    optional  string  iconUrlHd  = 9;
    optional  string  storeUrl  = 10;
    optional  string  watermarkUrl  = 11;
    optional  string  androidPackageName  = 12;
    optional  string  androidSignature  = 13;
    optional  string  appType  = 14;
    optional  string  devInfo  = 15;
    required  uint32  appInfoFlag  = 16;
    required  uint32  appVersion  = 17;
    optional  uint32  appUpdateVersion  = 18;
    optional  string  iconUrlMdpi  = 19;
    optional  string  downloadUrl  = 20;
    optional  string  downloadUrlMd5  = 21;
    optional  string  googlePlayDownloadUrl  = 22;
    required  uint64  appSupportContentType  = 23;
}

message BizAppMsgBaseInfo {
    optional  uint32  appMsgId  = 1;
    optional  uint32  createTime  = 2;
    optional  uint32  updateTime  = 3;
    optional  uint32  type  = 4;
    optional  uint32  bigPic  = 5;
}

message BizAppMsgDetailInfo {
    optional  string  title  = 1;
    optional  string  digest  = 2;
    optional  string  content  = 3;
    optional  uint32  itemIndex  = 4;
    optional  string  contentUrl  = 5;
    optional  string  sourceUrl  = 6;
    optional  string  coverImgUrl  = 7;
    optional  string  coverImgUrl11  = 8;
    optional  string  coverImgUrl2351  = 9;
    optional  uint32  itemShowType  = 10;
    optional  string  author  = 11;
    optional  uint32  copyRightStatus  = 12;
    optional  uint32  isOriginal  = 13;
    optional  uint32  audioId  = 14;
    optional  uint32  audioDuRation  = 15;
    optional  string  audioPlayUrl  = 16;
    optional  string  videoId  = 17;
    optional  uint32  videoWidth  = 18;
    optional  uint32  videoHeight  = 19;
    optional  uint32  videoDuration  = 20;
    optional  string  showDesc  = 21;
    optional  string  authorDesc  = 22;
    optional  uint32  hitTxVideo  = 23;
    optional  string  txVideoVid  = 24;
    optional  uint32  isMpVideo  = 25;
    optional  uint32  canReward  = 26;
    optional  bytes  appMsgContext  = 27;
    optional  uint32  picCount  = 28;
    optional  uint32  isPaySubscribe  = 29;
    optional  uint32  isPaid  = 30;
    optional  BizAppMsgDetailInfo_PicUrlsMsg  picUrls  = 31;
    optional  string  coverImgUrl169  = 32;
    optional  string  coverImgUrl169640  = 33;
}

message BizAppMsgDetailInfo_PicUrlsMsg {
    repeated  BizAppMsgDetailInfo_PicUrlsMsg_PicInfo  picInfoList  = 1;
    repeated  string  picUrlV1  = 2;
    repeated  string  picUrlV1Preload  = 3;
}

message BizAppMsgDetailInfo_PicUrlsMsg_PicInfo {
    optional  string  picUrl  = 1;
    optional  uint32  width  = 2;
    optional  uint32  height  = 3;
}

message BizAppMsgInfo {
    optional  BizAppMsgBaseInfo  baseInfo  = 1;
    repeated  BizAppMsgDetailInfo  detailInfo  = 2;
}

message BizAppMsgRelatedInfoReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  BizAppMsgRelatedInfoReq_AppMsgUrlInfo  urlInfo  = 2;
    optional  uint32  scene  = 3;
}

message BizAppMsgRelatedInfoReq_AppMsgUrlInfo {
    optional  string  clientId  = 1;
    optional  string  url  = 2;
    optional  uint32  reqType  = 3;
    optional  uint32  itemShowType  = 4;
    optional  uint64  commentTopicId  = 5;
}

message BizAppMsgRelatedInfoResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  BizAppMsgRelatedInfoResp_AppMsgRelatedInfo  relatedInfo  = 2;
    optional  uint32  refreshIntervalSec  = 3;
    optional  uint32  maxUrlCount  = 4;
}

message BizAppMsgRelatedInfoResp_AppMsgFriendInfo {
    optional  string  friendReadCountStr  = 1;
    optional  uint32  friendReadcount  = 2;
}

message BizAppMsgRelatedInfoResp_AppMsgPayInfo {
    optional  uint32  isChargeAppMsg  = 1;
    optional  uint32  isPaid  = 2;
    optional  string  friendPayCountStr  = 3;
}

message BizAppMsgRelatedInfoResp_AppMsgRelatedInfo {
    optional  string  clientId  = 1;
    optional  string  url  = 2;
    optional  string  friendReadCountStr  = 3;
    optional  BizAppMsgRelatedInfoResp_AppMsgPayInfo  payInfo  = 4;
    optional  BizAppMsgRelatedInfoResp_AppMsgFriendInfo  friendInfo  = 5;
    optional  string  wordingReportInfo  = 6;
}

message BizAppMsgStat {
    optional  uint32  enabled  = 1;
    optional  uint32  readNum  = 2;
    optional  uint32  likeNum  = 3;
    optional  uint32  likeStatus  = 4;
    optional  uint32  likeEnabled  = 5;
    optional  uint32  prompted  = 6;
    optional  uint32  hasComment  = 7;
}

message BizAttrSyncReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUserName  = 2;
    optional  bytes  lastAttrVersion  = 3;
}

message BizAttrSyncResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  lastAttrVersion  = 2;
    repeated  BizAttrSyncResp_KeyValue  updateInfoList  = 3;
}

message BizAttrSyncResp_KeyValue {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message BizAttrSyncSingleRespInfo {
    required  string  bizUserName  = 1;
    optional  bytes  lastAttrVersion  = 2;
    repeated  BizAttrSyncResp_KeyValue  updateInfoList  = 3;
}

message BizBaseInfo {
    optional  uint32  originalArticleCount  = 1;
    optional  uint32  friendSubscribeCount  = 2;
    optional  uint32  isSubscribed  = 3;
    optional  string  originalContentStr  = 4;
    optional  string  friendSubscribeStr  = 5;
}

message BizBrandBlock {
    optional  string  title  = 1;
    repeated  BizBrandItem  items  = 2;
    optional  bool  useSeparator  = 3;
}

message BizBrandInfo {
    repeated  BizBrandBlock  brandBlock  = 1;
}

message BizBrandItem {
    optional  string  text  = 1;
    optional  uint32  fontSize  = 2;
    optional  string  fontColor  = 3;
    optional  uint32  lineHeight  = 4;
    optional  uint32  fontStyle  = 5;
}

message BizChat {
    optional  string  bizchatId  = 1;
    optional  uint32  type  = 2;
    optional  string  headImageUrl  = 3;
    optional  string  name  = 4;
    optional  uint32  ver  = 5;
    optional  uint32  bitFlag  = 6;
    optional  uint32  maxMemberCnt  = 7;
    optional  string  ownerUserId  = 8;
    optional  string  addMemberUrl  = 9;
}

message BizChatInfoReq {
    optional  string  brandUserName  = 2;
    optional  string  bizchatId  = 3;
}

message BizChatMember {
    optional  string  userId  = 1;
    optional  string  userName  = 2;
    optional  uint32  ver  = 3;
}

message BizChatMemberList {
    repeated  BizChatMember  member  = 1;
}

message BizChatSearchContactMatchedUser {
    optional  BizChatUser  user  = 1;
    optional  string  matchedField  = 2;
    optional  string  matchedValue  = 3;
}

message BizChatSearchContactReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    optional  string  keyword  = 3;
    optional  uint32  offset  = 4;
}

message BizChatSearchContactResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    repeated  BizChatSearchContactMatchedUser  user  = 3;
    optional  bool  more  = 4;
}

message BizChatUser {
    optional  string  userId  = 1;
    optional  string  userName  = 2;
    optional  uint32  ver  = 3;
    optional  string  headImageUrl  = 4;
    optional  string  profileUrl  = 5;
    optional  uint32  bitFlag  = 6;
    optional  string  addMemberUrl  = 7;
    repeated  BizChatUserExtItem  extItems  = 8;
    optional  uint32  userType  = 9;
}

message BizChatUserExtItem {
    required  string  key  = 1;
    required  string  val  = 2;
}

message BizComment {
    optional  uint32  userCommentId  = 1;
    optional  uint32  personalCommentId  = 2;
    optional  string  openid  = 3;
    optional  string  nickName  = 4;
    optional  string  logoUrl  = 5;
    optional  string  content  = 6;
    optional  uint32  createTime  = 7;
    optional  uint32  isElected  = 8;
    optional  uint32  likeNum  = 9;
    optional  uint32  likeStatus  = 10;
    optional  CommentReplyList  reply  = 11;
    optional  uint32  isFromFriend  = 12;
    optional  uint32  isFromMe  = 13;
    optional  uint32  isTop  = 14;
    optional  uint32  likeId  = 15;
}

message BizEnterpriseAttr {
    required  string  brandUserName  = 1;
    required  uint32  qyUin  = 2;
    optional  uint32  userUin  = 3;
    optional  uint32  userFlag  = 4;
    optional  uint32  wwMaxExposeTimes  = 5;
    optional  uint64  vid  = 6;
    optional  uint64  corpid  = 7;
    optional  uint32  userType  = 8;
    optional  bool  isChatOpened  = 9;
    optional  uint32  unreadCnt  = 10;
    optional  bool  showConfirm  = 11;
    optional  BannerTips  bannerTips  = 12;
    optional  bool  usePresetBannerTips  = 13;
    optional  ChatConfig  chatConfig  = 14;
    repeated  WWHomeContactInfo  homeContacts  = 15;
    optional  bool  hideColleageInvite  = 16;
    repeated  string  hiddenAppUsernameList  = 17;
    optional  string  colleageInviteTitle  = 18;
    optional  string  colleageInviteJumpUrl  = 19;
}

message BizFeedbackReq {
    optional  BaseRequest  baseRequest  = 1;
    repeated  BizFeedbackReq_BizInfoLite  bizInfo  = 2;
    optional  uint32  cardType  = 3;
    optional  uint32  style  = 4;
    optional  string  event  = 5;
    optional  uint64  recId  = 6;
    optional  string  cardId  = 7;
    optional  BizFeedbackReq_CardFeedbackMsg  cardFeedbackInfo  = 8;
    optional  BizFeedbackReq_BizFeedbackMsg  bizFeedbackInfo  = 9;
    optional  BizFeedbackReq_AppMsgFeedbackMsg  appMsgFeedbackInfo  = 10;
    optional  string  expType  = 11;
    optional  string  extraData  = 12;
    repeated  RecycleCard  list  = 13;
}

message BizFeedbackReq_AppMsgFeedbackMsg {
    repeated  BizFeedbackReq_NegativeFeedbackInfo  feedbackInfo  = 1;
    optional  string  appMsgUrl  = 2;
}

message BizFeedbackReq_BizFeedbackMsg {
    repeated  BizFeedbackReq_NegativeFeedbackInfo  feedbackInfo  = 1;
    optional  string  bizUserName  = 2;
}

message BizFeedbackReq_BizInfoLite {
    optional  string  bizUserName  = 1;
    repeated  string  appMsgUrl  = 2;
    optional  string  bizNickName  = 3;
}

message BizFeedbackReq_CardFeedbackMsg {
    repeated  BizFeedbackReq_NegativeFeedbackInfo  feedbackInfo  = 1;
    optional  uint32  action  = 2;
}

message BizFeedbackReq_NegativeFeedbackInfo {
    optional  string  content  = 1;
}

message BizFeedbackResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  RecycleCard  list  = 2;
    optional  uint32  maxMsgCount  = 3;
}

message BizGetActionInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    repeated  string  actionKeyList  = 3;
    required  uint32  scene  = 4;
    optional  string  qrUrl  = 5;
    optional  double  longitude  = 6;
    optional  double  latitude  = 7;
}

message BizGetActionInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  productId  = 3;
    repeated  string  xmlList  = 4;
}

message BizGetProductInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    required  uint32  scene  = 3;
    optional  string  qrUrl  = 4;
}

message BizGetProductInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  type  = 2;
    optional  string  descXml  = 3;
    optional  string  productId  = 4;
}

message BizImageMsgInfo {
    optional  uint32  fileId  = 1;
    optional  uint32  length  = 2;
    optional  uint64  masterId  = 3;
    optional  string  cdnUrl  = 4;
    optional  string  contentUrl  = 5;
}

message BizListShowInfo {
    optional  string  bizUsername  = 1;
    optional  uint64  msgid  = 2;
    optional  uint32  pos  = 3;
    repeated  uint32  idxList  = 4;
    optional  uint32  exposeTimes  = 5;
    optional  uint32  unfold  = 6;
    optional  uint32  isClickUnfold  = 7;
    optional  uint32  unfoldExpose  = 8;
    optional  uint32  iconIsClick  = 9;
    optional  uint32  iconLongPress  = 10;
    optional  uint32  isTop  = 11;
    optional  uint32  topStatus  = 12;
    optional  uint32  enterProfile  = 13;
    optional  uint32  cancel  = 14;
    optional  uint32  exposeTimestamp  = 15;
    optional  uint32  sendTimestamp  = 16;
    optional  uint32  isStar  = 17;
    optional  uint32  isNewmsg  = 18;
    optional  uint32  msgType  = 19;
    optional  string  showStrategyNum  = 20;
    optional  uint64  sendMsgid  = 21;
    optional  uint32  posInCard  = 22;
    optional  uint32  isUnfold  = 23;
    optional  uint32  isBefore24Hour  = 24;
    optional  uint32  isReadAtFirstExpose  = 25;
    optional  uint32  isClick  = 26;
    optional  uint32  isBigPic  = 27;
    optional  uint32  isOftenReadBiz  = 28;
    optional  uint32  cardType  = 29;
    optional  uint64  recId  = 30;
    optional  string  recReason  = 31;
    optional  uint32  ifPaidArticle  = 32;
    optional  uint32  weight  = 33;
    optional  string  rankSessionid  = 34;
    optional  uint32  style  = 35;
    optional  string  expType  = 36;
    optional  string  event  = 37;
    optional  string  cardId  = 38;
    optional  uint32  recRk  = 39;
    optional  string  recInfo  = 40;
    optional  string  aggregationUrl  = 45;
    optional  string  aggregationTitle  = 46;
    optional  uint32  isAutoPlay  = 47;
    optional  uint32  autoPlayTime  = 48;
    optional  string  cardTitle  = 49;
    optional  string  wordingReportInfo  = 50;
    optional  uint64  exposeTimestampMs  = 51;
}

message BizMessage {
    optional  CommMsgBaseInfo  baseInfo  = 1;
    optional  BizTextMsgInfo  text  = 2;
    optional  BizImageMsgInfo  image  = 3;
    optional  BizVoiceMsgInfo  voice  = 4;
    optional  BizVideoMsgInfo  video  = 5;
    optional  BizAppMsgInfo  appMsg  = 6;
}

message BizMessageList {
    repeated  BizMessage  msg  = 1;
    optional  BizProfileV2PagingInfo  pagingInfo  = 5;
}

message BizMsgItem {
    optional  string  bizclientmsgid  = 1;
    optional  uint32  weight  = 2;
    optional  uint32  picType  = 3;
    optional  uint32  flag  = 4;
    optional  string  url  = 5;
    optional  uint32  time  = 6;
    optional  uint32  digestExposure  = 7;
    optional  uint32  digestExposureCnt  = 8;
    optional  uint32  digestExposurePeriod  = 9;
    optional  uint32  digestExposurePos  = 10;
    optional  uint32  itemShowType  = 12;
    optional  uint32  cardType  = 13;
    repeated  string  urls  = 14;
    repeated  string  recInfo  = 19;
}

message BizMsgReSortReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  BizMsgItem  msg  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  bitFlag  = 4;
}

message BizMsgReSortResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  nextReqTime  = 2;
    optional  uint32  threshold  = 3;
    optional  uint32  unreadThreshold  = 4;
    optional  uint64  limitTime  = 5;
    optional  uint32  maxMsgCount  = 6;
    repeated  BizMsgItem  updateMsg  = 7;
    optional  string  rankSessionid  = 9;
    repeated  BizMsgReSortResp_RecommendArticleInfo  recommendArticleInfo  = 12;
}

message BizMsgReSortResp_RecommendArticleInfo {
    optional  string  xml  = 1;
}

message BizOcrImageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  imgData  = 2;
    optional  uint32  source  = 3;
    optional  uint32  ocrType  = 4;
    optional  string  sessionKey  = 5;
    optional  uint32  seqNum  = 6;
}

message BizOcrImageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  BankCardResult  bankcardRes  = 6;
}

message BizProfileV2PagingInfo {
    optional  bytes  offset  = 1;
    optional  uint32  isEnd  = 2;
}

message BizProfileV2Req {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUserName  = 2;
    optional  uint32  actionType  = 3;
    optional  bytes  offset  = 4;
    optional  uint32  pageSize  = 5;
    optional  uint64  tmplControlFlag  = 6;
    optional  uint32  bizSessionId  = 7;
    optional  uint32  scene  = 8;
}

message BizProfileV2Resp {
    required  BaseResponse  baseResponse  = 1;
    optional  BizAccountInfo  accountInfo  = 2;
    optional  BizBaseInfo  baseInfo  = 3;
    optional  BizMessageList  msgList  = 4;
    optional  BizBrandInfo  brandInfo  = 5;
    optional  BizMessageList  videoList  = 6;
    optional  BizServiceInfo  serviceInfo  = 7;
    optional  uint32  funcFlag  = 8;
    repeated  BizProfileV2Resp_FuncFlagDesc  funcFlagWording  = 9;
    optional  uint32  preLoad  = 10;
    optional  string  searchGuideInfo  = 12;
    optional  BizTopicList  topicList  = 13;
}

message BizProfileV2Resp_FuncFlagDesc {
    optional  uint32  funcFlag  = 1;
    optional  string  wording  = 2;
}

message BizRecArtCardAppMsg {
    optional  uint32  flag  = 1;
    optional  string  title  = 2;
    optional  string  digest  = 3;
    optional  string  contentUrl  = 6;
    optional  string  coverImgUrl  = 8;
    optional  string  coverImgUrl11  = 9;
    optional  string  coverImgUrl2351  = 10;
    optional  uint32  itemShowType  = 11;
    optional  string  videoId  = 15;
    optional  uint32  videoWidth  = 16;
    optional  uint32  videoHeight  = 17;
    optional  uint32  videoDuration  = 18;
    optional  uint32  createTime  = 19;
    optional  uint64  videoViewNum  = 20;
    repeated  string  negativeFeedbackReason  = 21;
    optional  uint32  showNegativeFeedbackReason  = 22;
    optional  string  recommendReason  = 23;
    optional  string  voicePlayUrl  = 24;
    optional  uint32  voiceDuration  = 25;
    optional  uint32  recRk  = 26;
    optional  string  recInfo  = 27;
}

message BizRecArtCardBizInfo {
    optional  uint32  flag  = 1;
    optional  string  userName  = 2;
    optional  string  nickName  = 3;
    optional  string  recommendReason  = 4;
    optional  string  signature  = 5;
    optional  string  brandIconUrl  = 6;
    optional  string  appMsgRecReason  = 7;
    repeated  BizRecArtCardAppMsg  appMsg  = 8;
    repeated  string  negativeFeedbackReason  = 9;
    optional  uint32  showNegativeFeedbackReason  = 10;
}

message BizRecArticleCard {
    optional  uint32  flag  = 1;
    optional  string  title  = 2;
    repeated  BizRecArtCardBizInfo  bizInfo  = 3;
    optional  uint64  clientId  = 4;
}

message BizRecArticleCardLite {
    optional  uint64  clientId  = 1;
    repeated  BizRecArticleCardLite_BizCardInfo  cardInfo  = 2;
    optional  uint32  style  = 3;
    optional  string  event  = 4;
    optional  string  extraData  = 5;
}

message BizRecArticleCardLite_BizCardInfo {
    optional  string  bizUserName  = 1;
    repeated  string  appMsgUrl  = 2;
}

message BizRecommendArticleReq {
    required  BaseRequest  baseRequest  = 1;
    optional  BizRecArticleCardLite  recCard  = 2;
}

message BizRecommendArticleResp {
    required  BaseResponse  baseResponse  = 1;
    optional  BizRecArticleCard  recCard  = 2;
    optional  uint32  refreshIntervalSec  = 3;
}

message BizRecommendCardReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  TLRecCardLite  recCard  = 2;
}

message BizRecommendCardResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  TLRecCard  recCard  = 2;
    optional  uint32  refreshIntervalSec  = 3;
}

message BizResult {
    optional  ResultCommContent  commContent  = 1;
    optional  string  bizUserAttrInfo  = 2;
}

message BizScanBarcodeRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  type  = 2;
    optional  string  barcode  = 3;
    optional  uint32  scene  = 4;
    optional  uint32  mode  = 5;
    optional  BizScanTabBarInfo  tabBarInfo  = 6;
}

message BizScanBarcodeResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  type  = 2;
    optional  string  descXml  = 3;
    repeated  BizScanBarcodeWordingItem  wordingList  = 4;
}

message BizScanBarcodeWordingItem {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message BizScanImageRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  clientScanId  = 2;
    required  SKBuiltinBuffer_t  imageBuffer  = 3;
    required  uint32  totalLength  = 4;
    required  uint32  offset  = 5;
    required  uint32  endFlag  = 6;
    required  uint32  imageType  = 7;
    optional  uint32  opcode  = 8;
    optional  uint32  sessionId  = 9;
    optional  uint32  scene  = 10;
}

message BizScanImageResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  clientScanId  = 2;
    required  uint32  type  = 3;
    optional  string  descriptionXml  = 4;
    required  uint32  endFlag  = 5;
    required  uint32  imageType  = 6;
    optional  float  x  = 7;
    optional  float  y  = 8;
}

message BizScanLicenseRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  imgType  = 2;
    optional  bytes  imgBuff  = 3;
}

message BizScanLicenseResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  json  = 2;
}

message BizScanProductReportReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  deviceModel  = 2;
    optional  string  deviceBrand  = 3;
    optional  string  osName  = 4;
    optional  string  osVersion  = 5;
    optional  string  languageVer  = 6;
    required  uint32  logId  = 7;
    optional  string  logExt  = 8;
    optional  string  productid  = 9;
    optional  string  statid  = 10;
    optional  uint32  type  = 11;
    optional  string  value  = 12;
    optional  uint32  count  = 13;
    optional  uint32  showtype  = 14;
}

message BizScanProductReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message BizScanTabBarInfo {
    optional  bool  hasTabBar  = 1;
    repeated  uint32  tabBarTypeList  = 2;
}

message BizScopeInfo {
    optional  string  scope  = 1;
    required  uint32  scopeStatus  = 2;
    optional  string  scopeDesc  = 3;
    required  uint32  apiCount  = 4;
    repeated  BizApiInfo  apiList  = 5;
}

message BizServiceInfo {
    optional  BizServiceMenu  menuInfo  = 1;
}

message BizServiceMenu {
    optional  uint32  uin  = 1;
    optional  uint32  interactiveMode  = 2;
    optional  uint32  updateTime  = 3;
    repeated  BizServiceMenuButton  buttonList  = 4;
    optional  uint32  version  = 5;
    optional  uint32  type  = 6;
}

message BizServiceMenuButton {
    optional  uint32  id  = 1;
    optional  uint32  type  = 2;
    optional  string  name  = 3;
    optional  string  key  = 4;
    optional  string  value  = 5;
    repeated  BizServiceMenuButton  subButtonList  = 6;
    optional  uint32  acttype  = 7;
    optional  string  nativeUrl  = 8;
}

message BizStrategyControlInfo {
    optional  uint32  refreshInterval  = 1;
}

message BizStrategyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  reqType  = 2;
    optional  VideoChannelReqInfo  videoChannelInfo  = 3;
}

message BizStrategyResp {
    required  BaseResponse  baseResponse  = 1;
    optional  PaySubscribeInfo  userPaySubscribeInfo  = 2;
    optional  AppMsgCoverPreloadInfo  coverPreloadInfo  = 3;
    optional  BizStrategyControlInfo  controlInfo  = 4;
    optional  ProfilePreloadInfo  userProfilePreloadInfo  = 5;
    optional  VideoChannelControlInfo  channelInfo  = 6;
}

message BizTextMsgInfo {
    optional  string  content  = 1;
}

message BizTopic {
    optional  string  topicName  = 1;
    optional  string  topicDesc  = 2;
    optional  string  topicUrl  = 3;
    optional  uint64  topicId  = 4;
}

message BizTopicList {
    optional  string  title  = 1;
    repeated  BizTopic  topic  = 2;
}

message BizTransferReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  mainBrandUserName  = 2;
    optional  uint32  cmdId  = 3;
    optional  bytes  cmdData  = 4;
}

message BizTransferResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  cmdId  = 2;
    optional  bytes  cmdData  = 3;
    optional  QyBaseResponse  qyBaseResp  = 4;
}

message BizUploadQBarSampleRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  clientScanId  = 2;
    required  SKBuiltinBuffer_t  imageBuffer  = 3;
    required  uint32  totalLength  = 4;
    required  uint32  offset  = 5;
    required  uint32  endFlag  = 6;
    optional  uint32  decodeResult  = 7;
    optional  uint32  decodeSeq  = 8;
}

message BizUploadQBarSampleResponse {
    required  BaseResponse  baseResponse  = 1;
}

message BizVideoMsgInfo {
}

message BizVideoScreenInfo {
    optional  uint32  widhtPx  = 1;
    optional  uint32  heightPx  = 2;
    optional  uint32  dpi  = 3;
}

message BizVoiceMsgInfo {
    optional  uint32  fileId  = 1;
    optional  uint32  length  = 2;
    optional  uint32  voiceLength  = 3;
    optional  string  title  = 4;
    optional  string  voiceId  = 5;
    optional  string  contentUrl  = 6;
}

message BizWifiConnectRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUserName  = 2;
    optional  LocationInfo  locationInfo  = 3;
    optional  ScanInfo  scanInfo  = 4;
    optional  uint32  channel  = 5;
    optional  string  sessionKey  = 6;
}

message BizWifiConnectResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ApKeyInfo  apKeyInfoList  = 2;
    optional  int32  errCode  = 3;
    optional  string  errMsg  = 4;
}

message BlackListInfo {
    required  string  username  = 1;
    required  bool  switchB  = 2;
}

message BottomCell {
    optional  string  topWording  = 1;
    repeated  QRButtonInfo  buttonCell  = 2;
}

message BoxWidgetUrlInfo {
    optional  string  appid  = 1;
    optional  uint32  versionType  = 2;
    optional  uint32  appVersion  = 3;
    optional  string  extinfo  = 4;
    optional  uint32  isrefresh  = 7;
    optional  uint32  isdevtools  = 8;
    optional  uint32  isusingCachedLocation  = 9;
    optional  string  fromUrl  = 10;
    optional  uint32  screenWidth  = 15;
}

message BrandBizChatUserReq {
    required  string  brandUserName  = 2;
    repeated  string  userId  = 3;
}

message BtnInfo {
    optional  string  btnWords  = 1;
    optional  string  btnColor  = 2;
    optional  uint32  btnOpType  = 3;
    optional  string  url  = 4;
    optional  MiniAppInfo  miniAppInfo  = 5;
    optional  string  getLotteryParams  = 6;
}

message BuiltinIP {
    required  uint32  type  = 1;
    required  uint32  port  = 2;
    optional  bytes  ip  = 3;
    optional  bytes  domain  = 4;
}

message BuiltinIPList {
    required  uint32  longConnectIpcount  = 1;
    required  uint32  shortConnectIpcount  = 2;
    repeated  BuiltinIP  longConnectIplist  = 3;
    repeated  BuiltinIP  shortConnectIplist  = 4;
    required  uint32  seq  = 5;
}

message BusiF2FActQryReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  f2FId  = 2;
    optional  string  transId  = 3;
    optional  string  receiverOpenid  = 4;
    required  uint32  totalAmount  = 5;
    optional  bytes  actInfo  = 6;
    required  string  payokChecksign  = 7;
}

message BusiF2FActQryResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  ButtonInfo  btnInfo  = 4;
}

message BusiF2FFaultConfig {
    optional  uint32  flag  = 1;
    optional  uint32  succpageFirstDelayMs  = 2;
    optional  uint32  succpageMaxRetryCnt  = 3;
    optional  uint32  succpageRetryWaitingMs  = 4;
}

message BusiF2FFavorCommResp {
    repeated  FavorInfo  favorInfoList  = 1;
    repeated  FavorComposeInfo  favorComposeResultList  = 2;
    optional  string  defaultFavComposeId  = 3;
    optional  string  favorRespSign  = 4;
    optional  string  noComposeWording  = 5;
}

message BusiF2FGetFavorReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  amount  = 2;
    required  uint32  channel  = 3;
    required  uint32  scanScene  = 4;
    optional  string  receiverDesc  = 5;
    optional  string  mchName  = 6;
    optional  string  favorReqSign  = 7;
    optional  string  receiverOpenid  = 8;
    optional  string  receiverUsername  = 9;
    optional  string  favorReqExtend  = 10;
    optional  uint32  failClickCell  = 11;
}

message BusiF2FGetFavorResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  BusiF2FFavorCommResp  favorCommResp  = 4;
}

message BusiF2FPayCheckReq {
    required  BaseRequest  baseRequest  = 1;
    optional  AfterPlaceOrderCommReq  afterPlaceorderCommReq  = 2;
    optional  string  paycheckExtend  = 3;
}

message BusiF2FPayCheckResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message BusiF2FPayOkResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  ButtonInfo  btnInfo  = 4;
    optional  bytes  actInfo  = 5;
}

message BusiF2FPlaceOrderReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  receiverOpenid  = 2;
    required  string  qrcodeId  = 3;
    required  uint32  scene  = 4;
    optional  string  rcverDesc  = 5;
    optional  string  payerDesc  = 6;
    required  uint32  totalAmount  = 7;
    optional  uint32  channel  = 8;
    optional  string  mchType  = 9;
    optional  string  rcvrTicket  = 10;
    optional  string  wifiBssid  = 11;
    optional  uint32  wifiUpdatatime  = 12;
    optional  uint32  mchTime  = 13;
    optional  string  receiverUsername  = 14;
    optional  FavorComposeInfo  favorComposeInfo  = 15;
    optional  string  favorRespSign  = 16;
    optional  uint32  scanScene  = 17;
    optional  bool  isRoot  = 18;
    optional  bool  isOpenTouch  = 19;
    optional  bytes  cpuId  = 20;
    optional  bytes  uid  = 21;
    optional  string  dynamicCodeUrl  = 22;
    optional  string  mchName  = 23;
    optional  string  nickname  = 24;
    optional  string  receiverTrueName  = 25;
    optional  uint32  dynamicCodeSource  = 26;
    optional  string  cancelF2Fid  = 27;
    optional  uint32  unpayType  = 28;
    optional  uint32  cancelReason  = 29;
    optional  string  amountRemindSign  = 30;
    optional  string  inputRecvName  = 31;
    optional  string  checkRecvNameSign  = 32;
}

message BusiF2FPlaceOrderResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  reqKey  = 4;
    optional  string  interruptDesc  = 5;
    optional  ShowMessage  showmessage  = 6;
    optional  string  f2FId  = 7;
    optional  string  payokChecksign  = 8;
    optional  string  sucPageExtend  = 9;
    optional  string  unlockFavorExtend  = 10;
    optional  uint32  reGetfavor  = 11;
    optional  string  transId  = 12;
    optional  string  paycheckExtend  = 13;
    optional  uint32  zeroPayFlag  = 14;
    optional  uint32  payerNeedAuthFlag  = 15;
    optional  TokeMess  tockMess  = 16;
    optional  string  zeroPayExtend  = 17;
    optional  uint32  zeroTryTime  = 18;
    optional  uint32  zeroTryIntervalMs  = 19;
    optional  uint32  canUseFingerprint  = 20;
    optional  bytes  touchChallenge  = 21;
    optional  int32  needChangeAuthKey  = 22;
    optional  uint32  getDynamicCodeFlag  = 23;
    optional  string  getDynamicCodeSign  = 24;
    optional  string  getDynamicCodeExtend  = 25;
    optional  uint32  dynamicCodeAmount  = 26;
    optional  string  showPayingWording  = 27;
    optional  string  dynamicCodeSpamWording  = 28;
    optional  uint32  returnToMainPage  = 29;
    optional  BusiF2FFaultConfig  faultConfig  = 30;
    optional  AmountRemindWin  amountRemindWin  = 31;
    optional  AmountRemindPage  amountRemindPage  = 32;
    optional  CheckRecvNameWin  checkRecvNameWin  = 33;
}

message BusiF2FSucPageReq {
    required  BaseRequest  baseRequest  = 1;
    optional  AfterPlaceOrderCommReq  afterPlaceorderCommReq  = 2;
    optional  string  sucPageExtend  = 3;
    optional  uint32  faultFlag  = 4;
    optional  uint32  faultRetryCnt  = 5;
    optional  uint64  faultRetryClientTime  = 6;
}

message BusiF2FSucPageResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint64  activityType  = 4;
    optional  ExposureInfo  exposureInfo  = 5;
    optional  uint64  receivedAmount  = 6;
    repeated  string  favorDescList  = 7;
    optional  uint32  showFavorFlag  = 8;
    optional  uint32  showReceivedAmountFlag  = 9;
    optional  string  totalFavorDesc  = 10;
    optional  string  noticeWording  = 11;
    optional  string  noticeColor  = 12;
    optional  bool  faultRetry  = 13;
}

message BusiF2FUnlockFavorReq {
    required  BaseRequest  baseRequest  = 1;
    optional  AfterPlaceOrderCommReq  afterPlaceorderCommReq  = 2;
    optional  string  unlockFavorExtend  = 3;
}

message BusiF2FUnlockFavorResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message BusiF2FZeroCallBackReq {
    required  BaseRequest  baseRequest  = 1;
    required  TokeMess  tockMess  = 2;
    required  AfterPlaceOrderCommReq  afterPlaceorderCommReq  = 3;
    optional  string  zeroPayExtend  = 4;
    optional  uint32  fromTryFlag  = 5;
    required  string  token  = 6;
}

message BusiF2FZeroCallBackResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  notSureFlag  = 4;
}

message BusinessActionInfo {
    required  uint32  type  = 1;
    optional  string  url  = 2;
}

message BusinessCallbackReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  transferBillId  = 2;
    optional  string  transactionId  = 3;
}

message BusinessCallbackRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message BusinessCommonItem {
    required  string  title  = 1;
    required  string  desc  = 2;
    required  string  thumbUrl  = 3;
    required  BusinessDetailInfo  detailInfo  = 4;
    optional  BusinessExtendInfo  extendInfo  = 5;
    required  BusinessActionInfo  actionInfo  = 6;
}

message BusinessContactItem {
    required  string  nickName  = 1;
    optional  BusinessDetailInfo  detailInfo  = 2;
    required  SearchOrRecommendItemNew  contactItem  = 3;
    optional  BusinessServiceInfo  serviceInfo  = 4;
    optional  string  jumpUrl  = 5;
}

message BusinessContent {
    required  uint64  businessType  = 1;
    required  uint32  continueFlag  = 2;
    optional  string  title  = 3;
    repeated  string  keyWordList  = 4;
    repeated  BusinessResultItem  itemList  = 5;
    required  uint32  totalCount  = 6;
    required  string  searchId  = 7;
    optional  uint32  offset  = 8;
}

message BusinessDetailInfo {
    required  string  iconUrl  = 1;
    optional  string  descrption  = 2;
    optional  string  descFormat  = 3;
}

message BusinessExtendInfo {
}

message BusinessInfo {
    optional  uint64  businessId  = 1;
    optional  bytes  businessBuff  = 2;
}

message BusinessPOIItem {
    required  string  title  = 1;
    required  string  url  = 2;
    required  string  position  = 3;
    required  string  detailInfo  = 4;
    optional  uint32  starLevel  = 5;
    optional  string  average  = 6;
    optional  uint32  poiflag  = 7;
}

message BusinessProductItem {
    required  string  productId  = 1;
    required  string  productName  = 2;
    required  string  sellerName  = 3;
    required  string  sellerUserName  = 4;
    optional  uint32  price  = 5;
    optional  string  productImgUrl  = 6;
}

message BusinessResult {
    optional  uint32  type  = 1;
    repeated  BizResult  bizResults  = 2;
    repeated  WeappResult  weappResults  = 3;
    repeated  DocResult  docResults  = 4;
    repeated  WidgetResult  widgetResults  = 5;
    optional  WSReportInfo  reportInfo  = 6;
    optional  bytes  debugInfo  = 7;
    repeated  PardusResult  pardusResults  = 8;
}

message BusinessResultItem {
    optional  uint32  type  = 1;
    optional  BusinessContactItem  contactItem  = 2;
    optional  BusinessCommonItem  commonItem  = 3;
    required  uint64  docId  = 4;
    optional  BusinessProductItem  productItem  = 5;
    optional  BusinessSnsItem  snsItem  = 6;
    optional  BusinessPOIItem  poiitem  = 7;
}

message BusinessServiceInfo {
    required  bytes  title  = 1;
    required  bytes  serviceUrl  = 2;
    repeated  ServiceItemField  itemFieldList  = 3;
}

message BusinessSnsItem {
    required  uint64  id  = 1;
    required  string  objectDesc  = 2;
}

message ButtomJumpInfo {
    optional  uint32  action  = 1;
    optional  string  url  = 2;
    optional  string  appUsername  = 3;
    optional  string  wording  = 4;
}

message ButtonInfo {
    optional  uint32  type  = 1;
    optional  string  btnText  = 2;
    optional  string  icon  = 3;
    optional  string  title  = 4;
    optional  string  smallTitle  = 5;
    optional  string  url  = 6;
    optional  string  miniappUsername  = 7;
    optional  string  miniappPath  = 8;
    optional  uint32  clientVersion  = 9;
}

message ButtonViewData {
    optional  int32  state  = 1;
    optional  RouteInfo  routeInfo  = 2;
    optional  int32  buttonType  = 3;
    optional  ImageViewData  image  = 4;
    optional  string  text  = 5;
    optional  string  viewId  = 6;
    optional  int32  actionType  = 7;
    optional  CmdInfo  cmdInfo  = 8;
}

message ButtonWithConfirmProtocalViewData {
    optional  ConfrimProtocalViewData  protocal  = 1;
    optional  ButtonViewData  button  = 2;
}

message BypGetChatListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  int32  bizType  = 2;
    optional  uint32  seq  = 3;
    optional  int32  nextPageType  = 4;
    optional  uint32  limitCount  = 5;
}

message BypGetChatListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  AddBypChat  chatList  = 2;
    optional  uint32  minSeq  = 3;
    optional  uint32  maxSeq  = 4;
    optional  uint32  totalUnreadCount  = 5;
}

message BypGetMsgByChatRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  msgSessionId  = 2;
    optional  uint32  minSeq  = 3;
    optional  uint32  maxSeq  = 4;
    optional  int32  nextPageType  = 5;
    optional  uint32  limitCount  = 6;
}

message BypGetMsgByChatResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  AddBypMsg  msgList  = 2;
    optional  uint32  minSeq  = 3;
    optional  uint32  maxSeq  = 4;
}

message BypMsgEmoji {
    required  string  md5  = 1;
    required  uint32  len  = 2;
    optional  string  productid  = 3;
    optional  uint32  type  = 4;
    optional  string  extxml  = 5;
    optional  string  cdnurl  = 6;
    optional  uint32  newxmlflag  = 7;
    optional  string  designerid  = 8;
    optional  string  thumburl  = 9;
    optional  string  encrypturl  = 10;
    optional  string  aeskey  = 11;
    optional  uint32  width  = 12;
    optional  uint32  height  = 13;
    optional  string  externurl  = 14;
    optional  string  externmd5  = 15;
    optional  string  activityid  = 16;
    optional  string  tpurl  = 17;
    optional  string  authkey  = 18;
    optional  string  attachedtext  = 19;
    optional  string  attachedtextcolor  = 20;
    optional  string  lensid  = 21;
    optional  bool  isCharge  = 22;
    optional  string  emojiattr  = 23;
}

message BypMsgImage {
    optional  string  aeskey  = 1;
    optional  uint32  cryptVer  = 2;
    optional  string  url  = 3;
    optional  uint32  hdSize  = 4;
    optional  uint32  midSize  = 5;
    optional  uint32  thumbSize  = 6;
    optional  uint32  thumbHeight  = 7;
    optional  uint32  thumbWidth  = 8;
    optional  string  md5  = 9;
    optional  uint32  midHeight  = 10;
    optional  uint32  midWidth  = 11;
    optional  uint32  hdHeight  = 12;
    optional  uint32  hdWidth  = 13;
    optional  uint32  hevcHdSize  = 14;
    optional  uint32  hevcMidSize  = 15;
    optional  uint32  hevcThumbSize  = 16;
}

message BypMsgPack {
    optional  uint32  msgType  = 1;
    optional  string  fromUsername  = 2;
    optional  string  toUsername  = 3;
    optional  string  cliMsgId  = 4;
    optional  string  msgSource  = 5;
    optional  bytes  msgExtInfo  = 6;
    optional  string  msgSessionId  = 7;
    optional  BypMsgText  bypText  = 101;
    optional  BypMsgImage  bypImage  = 102;
    optional  BypMsgVideo  bypVideo  = 103;
    optional  BypMsgEmoji  bypEmoji  = 107;
}

message BypMsgText {
    optional  string  content  = 1;
}

message BypMsgVideo {
    required  string  aeskey  = 1;
    required  string  url  = 2;
    required  uint32  type  = 3;
    required  uint32  length  = 4;
    required  uint32  playtime  = 5;
    optional  string  thumbAeskey  = 6;
    optional  string  thumbUrl  = 7;
    optional  uint32  thumbSize  = 8;
    optional  uint32  thumbWidth  = 9;
    optional  uint32  thumbHeight  = 10;
    optional  string  md5  = 11;
    optional  string  fileparam  = 12;
    optional  string  newmd5  = 13;
}

message BypNotifySelector {
    repeated  uint32  selector  = 1;
}

message BypSendRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  int32  bizType  = 2;
    optional  BypMsgPack  msgPack  = 3;
}

message BypSendResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  newmsgid  = 2;
}

message BypSyncData {
    repeated  uint32  selectorSyncKeyType  = 1;
    optional  BypSyncKey  cliSyncKey  = 2;
    optional  BypSyncKey  maxSyncKey  = 3;
}

message BypSyncItem {
    optional  uint32  syncKeyType  = 1;
    optional  uint32  itemType  = 2;
    optional  bytes  buff  = 3;
}

message BypSyncKey {
    optional  uint64  bypMsgFinderKey  = 1;
    optional  uint64  bypMsgAvatarKey  = 2;
    optional  uint64  bypMsgGameKey  = 3;
}

message BypSyncKeyBuff {
    repeated  BypSyncKeyPair  syncKeyPairList  = 1;
    optional  bool  reset  = 2;
}

message BypSyncKeyPair {
    optional  uint32  synckeyId  = 1;
    optional  uint64  synckeyValue  = 2;
}

message BypSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  uint32  selector  = 2;
    optional  BypSyncKeyBuff  cliSyncKeyBuff  = 3;
    optional  int32  scene  = 4;
}

message BypSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  uint32  respContinueFlag  = 2;
    optional  BypSyncKeyBuff  respSyncKeyBuff  = 3;
    repeated  BypSyncItem  syncItemList  = 4;
}

message BypSyncResult {
    repeated  uint32  continueSyncKeyType  = 1;
    optional  BypSyncKey  respSyncKey  = 2;
    repeated  BypSyncItem  syncItemList  = 3;
}

message C2CMsgNode {
    optional  string  c2CmsgContent  = 1;
    optional  string  sessionid  = 2;
    optional  string  paymsgid  = 3;
}

message CDNClientConfig {
    required  int32  c2CshowErrorDelayMs  = 1;
    required  int32  snsshowErrorDelayMs  = 2;
    required  int32  c2CretryInterval  = 3;
    required  int32  snsretryInterval  = 4;
    required  int32  c2Crwtimeout  = 5;
    required  int32  snsrwtimeout  = 6;
}

message CDNDnsInfo {
    required  uint32  ver  = 1;
    required  uint32  uin  = 2;
    required  uint32  expireTime  = 3;
    required  int32  frontId  = 4;
    required  int32  frontIpcount  = 5;
    repeated  SKBuiltinString_t  frontIplist  = 6;
    optional  string  zoneDomain  = 7;
    required  SKBuiltinBuffer_t  authKey  = 8;
    required  int32  zoneId  = 9;
    required  int32  zoneIpcount  = 10;
    repeated  SKBuiltinString_t  zoneIplist  = 11;
    repeated  CDNDnsPortInfo  frontIpportList  = 12;
    repeated  CDNDnsPortInfo  zoneIpportList  = 13;
    optional  int32  frontIpportCount  = 14;
    optional  int32  zoneIpportCount  = 15;
    optional  uint32  fakeUin  = 16;
    optional  SKBuiltinBuffer_t  newAuthKey  = 17;
}

message CDNDnsPortInfo {
    required  uint32  portCount  = 1;
    repeated  uint32  portList  = 2[packed=true];
}

message CDNUploadMsgImgPrepareRequest {
    optional  string  clientImgId  = 1;
    optional  string  fromUserName  = 2;
    optional  string  toUserName  = 3;
    required  int32  thumbHeight  = 4;
    required  int32  thumbWidth  = 5;
    optional  string  msgSource  = 6;
    optional  SKBuiltinBuffer_t  clientStat  = 7;
    optional  int32  scene  = 8;
    optional  float  longitude  = 9;
    optional  float  latitude  = 10;
    optional  string  attachedContent  = 11;
    optional  string  aeskey  = 16;
    optional  int32  encryVer  = 17;
    optional  uint32  crc32  = 18;
    optional  uint32  msgForwardType  = 19;
    optional  uint32  source  = 20;
    optional  string  appid  = 21;
    optional  string  messageAction  = 22;
    optional  string  meesageExt  = 23;
    optional  string  mediaTagName  = 24;
    optional  string  sendMsgTicket  = 25;
}

message CDNUploadMsgImgPrepareResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  clientImgId  = 3;
    optional  string  fromUserName  = 4;
    optional  string  toUserName  = 5;
    required  uint32  createTime  = 9;
    optional  uint64  newMsgId  = 10;
    optional  string  aeskey  = 11;
    optional  string  fileId  = 12;
    optional  string  msgSource  = 13;
    required  uint32  actionFlag  = 14;
}

message CRGameChannelReportInfo {
    optional  string  channel  = 1;
    optional  string  channelVersion  = 2;
    optional  uint64  sceneId  = 3;
    optional  string  uinType  = 4;
    optional  string  uin  = 5;
    optional  string  gameAppid  = 6;
    optional  int64  scenePopTime  = 7;
    optional  string  packageId  = 8;
    optional  string  deviceId  = 9;
    optional  string  extra  = 10;
}

message CallbackRetryConf {
    optional  uint32  intevalTime  = 1;
    optional  uint32  maxCount  = 2;
    optional  string  defaultWording  = 3;
}

message CancelDescItem {
    optional  string  cancelDescTitle  = 1;
    repeated  string  cancelDescList  = 2;
}

message CancelPayRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  payScene  = 2;
    required  int32  payChannel  = 3;
    required  string  reqKey  = 4;
}

message CancelPayResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CancelPreOrderRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  productCount  = 2;
    repeated  SampleProduct  product  = 3;
    optional  string  lockId  = 4;
}

message CancelPreOrderResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message CancelPurchaseRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    required  uint32  verifyType  = 3;
    required  uint32  payType  = 4;
    optional  string  price  = 5;
    optional  string  currencyType  = 6;
    optional  string  billNo  = 7;
    required  uint32  payTime  = 8;
    required  int32  errorCode  = 9;
    optional  string  errorDescription  = 10;
}

message CancelPurchaseResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CancelQRPayRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  qrUuid  = 2;
    optional  string  reqKey  = 3;
    optional  ActionLocation  actionLocation  = 5;
}

message CancelQRPayResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CancelWecoinRechargeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  billNo  = 2;
}

message CancelWecoinRechargeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CanvasInfo {
    optional  string  dataBuffer  = 1;
}

message CardElementCouponLabel {
    optional  string  couponLabelName  = 1;
    optional  string  couponLabelTextColor  = 2;
    optional  string  couponLabelBackColor  = 3;
    optional  uint32  couponLabelJumpFlag  = 4;
    optional  CardMiniAppInfo  couponLabelMiniAppInfo  = 5;
    optional  uint32  couponLabelBackColorAlpha  = 6;
}

message CardElementCouponList {
    optional  string  userCardId  = 1;
    optional  string  couponName  = 2;
    optional  string  couponDesc  = 3;
    optional  string  couponUseWay  = 4;
    optional  string  couponColor  = 5;
    optional  string  couponBackUrl  = 6;
    repeated  CardElementCouponLabel  couponLabel  = 7;
    optional  uint32  couponType  = 8;
    optional  string  couponIcon  = 9;
    optional  string  couponBorderColor  = 10;
    optional  string  couponNameColor  = 11;
    optional  uint32  couponNameColorAlpha  = 12;
    optional  string  couponDescColor  = 13;
    optional  uint32  couponDescColorAlpha  = 14;
    optional  string  cardIconUrl  = 15;
    optional  int32  cardElementOpType  = 16;
    optional  string  cardElementJumpUrl  = 17;
    optional  CardMiniAppInfo  cardElementMiniAppInfo  = 18;
    optional  string  cardElementNativeUrl  = 19;
    optional  string  cardSubLabel  = 20;
}

message CardElementMchLabel {
    optional  string  mchLabelName  = 1;
    optional  string  mchLabelTextColor  = 2;
    optional  string  mchLabelBackColor  = 3;
    optional  uint32  mchLabelJumpFlag  = 4;
    optional  CardMiniAppInfo  mchLabelMiniAppInfo  = 5;
    optional  uint32  mchLabelBackColorAlpha  = 6;
}

message CardHomePageElement {
    optional  string  cardPackMerchantId  = 1;
    optional  string  cardElementMchIcon  = 2;
    optional  string  cardElementMchName  = 3;
    optional  string  cardElementTradeRelation  = 4;
    repeated  CardElementMchLabel  cardElementMchLabel  = 5;
    optional  int32  cardElementOpType  = 6;
    optional  string  cardElementJumpUrl  = 7;
    optional  CardMiniAppInfo  cardElementMiniAppInfo  = 8;
    optional  string  cardElementNativeUrl  = 9;
    repeated  CardElementCouponList  cardElementCouponList  = 10;
    optional  string  couponDetailWording  = 11;
    optional  string  couponDetailWordingColor  = 12;
    optional  CardMiniAppInfo  couponDetailMiniAppInfo  = 13;
    optional  CardElementMchLabel  mchActTag  = 14;
    optional  uint32  isExpandCouponList  = 15;
    optional  uint32  couponTotalNum  = 16;
    optional  uint32  expandCouponNum  = 17;
    optional  uint64  lastReceiveTime  = 18;
}

message CardHomePageFAQItem {
    optional  string  faqWording  = 1;
    optional  int32  faqOpType  = 2;
    optional  string  faqJumpUrl  = 3;
    optional  CardMiniAppInfo  faqMiniAppInfo  = 4;
    optional  string  faqNativeUrl  = 5;
}

message CardHomePageRecentlyUsedCell {
    optional  string  cardId  = 1;
    optional  string  userCardId  = 2;
    optional  string  title  = 3;
    optional  string  brandName  = 4;
    optional  string  backgroundUrl  = 5;
    optional  string  couponColor  = 6;
    optional  uint32  cardType  = 7;
    optional  string  iconUrl  = 8;
    optional  int32  cardElementOpType  = 9;
    optional  string  cardElementJumpUrl  = 10;
    optional  CardMiniAppInfo  cardElementMiniAppInfo  = 11;
    optional  string  cardElementNativeUrl  = 12;
}

message CardHomePageRecentlyUsedList {
    repeated  CardHomePageRecentlyUsedCell  cardHomePageRecentlyUsedCell  = 1;
}

message CardHomePageStoreList {
    repeated  CardHomePageElement  cardHomePageElement  = 1;
}

message CardHomePageTopCell {
    optional  string  cardTopCellIcon  = 1;
    optional  string  cardTopCellTitle  = 2;
    optional  string  cardTopCellWording  = 3;
    optional  int32  cardTopCellOpType  = 4;
    optional  string  cardTopCellJumpUrl  = 5;
    optional  CardMiniAppInfo  cardTopCellMiniAppInfo  = 6;
    optional  string  cardTopCellNativeUrl  = 7;
    optional  uint32  isShowRedDot  = 8;
    optional  uint32  isShowNew  = 9;
}

message CardHomePageTopCellGroup {
    repeated  CardHomePageTopCellList  cardHomePageTopCellList  = 1;
}

message CardHomePageTopCellList {
    repeated  CardHomePageTopCell  cardHomePageTopCell  = 1;
}

message CardHomePageUnderList {
    repeated  CardHomePageElement  cardHomePageElement  = 1;
    optional  string  sectionTitle  = 2;
}

message CardListItem {
    optional  string  cardTpId  = 1;
    optional  string  cardExt  = 2;
    optional  int32  isSucc  = 3;
}

message CardMiniAppInfo {
    optional  string  tinyappUsername  = 1;
    optional  string  tinyappPath  = 2;
    optional  uint32  tinyappVersion  = 3;
}

message CardPrimaryPkgElement {
    optional  uint32  cardHomePageId  = 1;
    optional  string  primaryElementWording  = 2;
    optional  string  primaryElementIcon  = 3;
    optional  string  primaryElementSkipWording  = 4;
    optional  int32  primaryOpType  = 5;
    optional  string  primaryUrl  = 6;
    optional  CardMiniAppInfo  primaryMiniAppInfo  = 7;
    optional  string  primaryNativeUrl  = 8;
}

message CardRecordViewData {
    optional  ImageViewData  logo  = 1;
    optional  TextViewData  title  = 2;
    repeated  TextViewData  subTitle  = 3;
    optional  string  bindSerial  = 4;
    optional  string  bankType  = 5;
    optional  RouteInfo  routeInfo  = 6;
    optional  int32  state  = 7;
    optional  uint32  subtitleShowIndex  = 8;
    optional  int32  bankCardTag  = 9;
    optional  string  viewId  = 10;
}

message CardSecondaryPkgElement {
    optional  string  secondaryElementWording  = 1;
    optional  string  secondaryElementIcon  = 2;
    optional  string  secondaryElementSkipWording  = 3;
    optional  int32  secondaryOpType  = 4;
    optional  string  secondaryUrl  = 5;
    optional  CardMiniAppInfo  secondaryMiniAppInfo  = 6;
    optional  string  secondaryNativeUrl  = 7;
}

message CardShopLBSRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardTpId  = 2;
    required  float  longitude  = 3;
    required  float  latitude  = 4;
    optional  string  cardId  = 5;
}

message CardShopLBSResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message CardSortInfo {
    optional  uint32  sortRule  = 1;
    optional  uint32  reqNum  = 2;
    optional  string  sortWording  = 3;
}

message CardSortInfoList {
    repeated  CardSortInfo  cardSortInfo  = 1;
}

message CardSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  selector  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
    optional  LayOut  layout  = 4;
    optional  uint32  layoutScene  = 5;
}

message CardSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    required  CmdList  cmdList  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
    required  uint32  continueFlag  = 4;
    optional  uint32  needLayout  = 5;
}

message CardTpInfoItem {
    optional  string  cardTpId  = 1;
    optional  string  code  = 2;
    optional  string  openCardParams  = 3;
    optional  string  appid  = 4;
}

message CardUserItem {
    optional  string  cardId  = 1;
    optional  uint64  updateSequence  = 2;
    optional  uint32  stateFlag  = 3;
    optional  uint32  updateTime  = 4;
    optional  uint32  status  = 5;
}

message CardsHomePageList {
    repeated  CardPrimaryPkgElement  cardPrimaryPkgElement  = 1;
}

message CdnInfo {
    optional  CDNDnsInfo  dnsInfo  = 1;
    optional  CDNDnsInfo  snsDnsInfo  = 2;
    optional  CDNDnsInfo  appDnsInfo  = 4;
    optional  SKBuiltinBuffer_t  cdndnsRuleBuf  = 5;
    optional  SKBuiltinBuffer_t  fakeCdndnsRuleBuf  = 6;
    optional  CDNDnsInfo  fakeDnsInfo  = 7;
    optional  int32  getCdnDnsIntervalMs  = 8;
    optional  CDNClientConfig  defaultConfig  = 9;
    optional  CDNClientConfig  disasterConfig  = 10;
}

message CdnTransInfo {
    optional  int32  tag  = 1;
    optional  string  url  = 2;
    optional  uint32  qualityTag  = 3;
    optional  string  tagName  = 4;
    optional  uint32  rate  = 5;
    optional  uint32  videoTagType  = 6;
}

message CgiBindQueryRecord {
    optional  string  isSaveYfq  = 1;
    optional  string  bankFlag  = 2;
    optional  string  bankName  = 3;
    optional  string  bankPhone  = 4;
    optional  string  bankType  = 5;
    optional  string  bankaccType  = 6;
    optional  string  bindDayQuota  = 7;
    optional  string  bindOnceQuota  = 8;
    optional  string  bindSerial  = 9;
    optional  string  bindTail  = 10;
    optional  string  creditTypeId  = 11;
    optional  string  dayQuota1  = 12;
    optional  string  dayQuota2  = 13;
    optional  string  dayQuota3  = 14;
    optional  string  expiredFlag  = 15;
    optional  string  mobile  = 16;
    optional  string  onceQuota1  = 17;
    optional  string  onceQuota2  = 18;
    optional  string  onceQuota3  = 19;
    optional  string  bankCardTag  = 20;
    optional  string  bindBankName  = 21;
    optional  string  forbidWord  = 22;
    optional  string  forbidId  = 23;
    optional  string  extraBindFlag  = 24;
    optional  string  bindIcharacter4  = 25;
    optional  string  repayUrl  = 26;
    optional  int32  supportMicropay  = 27;
    optional  string  supportSave  = 28;
    optional  string  supportFetch  = 29;
    optional  string  fetchPreArriveTime  = 30;
    optional  string  drawAvailable  = 31;
    optional  string  drawType  = 32;
    optional  string  exportStart  = 33;
    optional  string  exportEnd  = 34;
    optional  string  bankaccTypeName  = 35;
    optional  string  drawStatus  = 36;
    optional  string  arriveType  = 37;
    optional  string  noMicroWord  = 38;
    optional  string  availSaveWording  = 39;
    optional  string  maintainStarttime  = 40;
    optional  string  maintainEndtime  = 41;
    optional  string  bankLogoUrl  = 42;
    optional  string  fetchPreArriveTimeWording  = 43;
    optional  uint32  fetchChargeRate  = 44;
    optional  uint32  fullFetchChargeFee  = 45;
    optional  string  fetchChargeInfo  = 46;
    optional  string  tips  = 47;
    optional  string  cardDetailFlag  = 48;
    optional  string  forbidTitle  = 49;
    optional  string  forbidUrl  = 50;
    optional  string  wxUnionCardFlag  = 51;
    optional  string  resourceBankType  = 52;
    optional  string  wxUnionCardState  = 53;
    optional  uint64  wxUnionCardBalance  = 54;
    optional  string  cardBottomWording  = 55;
    optional  string  bindType  = 56;
    optional  int32  isHightlightPreArriveTimeWording  = 57;
    optional  int32  supportLqtTurnIn  = 58;
    optional  int32  supportLqtTurnOut  = 59;
    optional  PromptInfo  promptInfo  = 73;
}

message CgiF2FAnnounceReq {
    required  BaseRequest  baseRequest  = 1;
}

message CgiF2FAnnounceResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  Announce  accounceItems  = 2;
}

message CgiF2FDynamicCodeReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  amount  = 2;
    optional  string  userName  = 3;
    optional  string  receiverOpenid  = 4;
    optional  string  transferQrcodeId  = 5;
    optional  string  getDynamicCodeSign  = 6;
    optional  string  getDynamicCodeExtend  = 7;
    optional  string  mchInfoString  = 8;
    optional  string  nickname  = 9;
    optional  string  receiverTrueName  = 10;
}

message CgiF2FDynamicCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  supervisionWording  = 4;
    optional  string  qrcodeUrl  = 5;
    repeated  F2FDynamicItems  showItems  = 6;
    optional  uint32  qrcodeLevel  = 7;
}

message CgiF2FPaySucPageReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  f2FId  = 2;
    optional  string  transId  = 3;
    optional  uint32  amount  = 4;
    optional  string  payerDesc  = 5;
    optional  string  rcvrDesc  = 6;
    optional  int32  channel  = 7;
    optional  uint32  scanScene  = 8;
    optional  string  placeorderSucSign  = 9;
    optional  string  paySucExtend  = 10;
    optional  uint32  scene  = 11;
}

message CgiF2FPaySucPageResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint64  activityType  = 4;
    optional  ExposureInfo  exposureInfo  = 5;
}

message CgiF2FQrcodeReq {
    required  BaseRequest  baseRequest  = 1;
}

message CgiF2FQrcodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  url  = 2;
    repeated  MenuItem  upperRightItems  = 3;
    optional  MenuItem  bottomItem  = 4;
    optional  string  trueName  = 5;
    optional  string  bottomLeftIconUrl  = 6;
    optional  bool  bottomRightArrowFlag  = 7;
    optional  uint32  busiType  = 8;
    optional  string  upperWording  = 9;
    optional  string  mchName  = 10;
    optional  string  mchPhoto  = 11;
    optional  uint32  guideMaterialFlag  = 12;
    optional  MiniProgramInfo  buyMaterialInfo  = 13;
    optional  RealNameInfo  realNameInfo  = 14;
    optional  uint32  retcode  = 15;
    optional  uint32  qrcodeLevel  = 16;
    optional  string  notice  = 17;
    optional  string  noticeUrl  = 18;
    optional  string  screenshotMaterialWording  = 19;
    optional  string  longpressMaterialWording  = 20;
    optional  string  saveqrcodeMaterialWording  = 21;
    optional  QRActionInfo  screenShotAction  = 22;
    optional  QRActionInfo  longPressAction  = 23;
    optional  QRActionInfo  saveQrcodeAction  = 24;
    optional  bytes  saveNotifyInfo  = 25;
}

message CgiF2FRcvVoiceReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  amount  = 2;
    optional  bytes  prefix  = 3;
    optional  bytes  suffix  = 4;
    optional  string  outtradeno  = 5;
}

message CgiF2FRcvVoiceResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  bytes  voice  = 4;
    optional  uint32  voiceType  = 5;
    optional  uint32  overtimeFlag  = 6;
}

message CgiGetRewardQrcodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  bool  hasCache  = 2;
    optional  string  photoUrl  = 3;
    optional  string  photoAeskey  = 4;
}

message CgiGetRewardQrcodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  bool  emptyFlag  = 4;
    optional  string  photoUrl  = 5;
    optional  string  photoAeskey  = 6;
    optional  string  word  = 7;
    optional  uint32  iconLength  = 8;
    optional  string  desc  = 9;
    optional  string  trueName  = 10;
    repeated  uint32  amtList  = 11;
    optional  string  buttonUrl  = 12;
    optional  string  buttonWording  = 13;
    optional  uint32  maxAmt  = 14;
    optional  uint32  photoWidth  = 15;
    optional  RealNameInfo  realNameInfo  = 16;
}

message CgiMDRcvVoiceReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  amount  = 2;
    optional  bytes  prefix  = 3;
    optional  bytes  suffix  = 4;
    optional  string  outtradeno  = 5;
    optional  uint32  voiceType  = 6;
}

message CgiMDRcvVoiceResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  bytes  voice  = 4;
    optional  uint32  voiceType  = 5;
}

message CgiPayCheckReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  f2FId  = 2;
    required  string  transId  = 3;
    optional  string  extendStr  = 4;
    required  string  receiverOpenId  = 5;
    required  uint32  amount  = 6;
}

message CgiPayCheckResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message CgiPayRewardCheckReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqKey  = 2;
    optional  string  rewardId  = 3;
    optional  string  transId  = 4;
    optional  uint32  amount  = 5;
    optional  string  receiverOpenId  = 6;
    optional  string  extendStr  = 7;
}

message CgiPayRewardCheckResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message CgiQrcodeSaveNotifyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  notifyType  = 2;
    optional  uint32  amount  = 3;
    optional  string  memo  = 4;
    optional  string  url  = 5;
    optional  uint32  opTimestamp  = 6;
    optional  bytes  saveNotifyInfo  = 7;
}

message CgiQrcodeSaveNotifyResp {
    required  BaseResponse  baseResponse  = 1;
}

message CgiRewardPlaceOrderReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  receiverName  = 2;
    required  uint32  amount  = 3;
    optional  string  qrcodeDesc  = 4;
    optional  string  payerDesc  = 5;
    required  uint32  amountType  = 6;
    optional  uint32  channel  = 7;
    optional  string  scanId  = 8;
    optional  string  receiverOpenId  = 9;
    optional  string  webviewUrl  = 10;
    optional  string  extendStr1  = 11;
    optional  string  extendStr2  = 12;
    optional  uint32  showPayerInfo  = 13;
}

message CgiRewardPlaceOrderResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  reqKey  = 4;
    optional  string  rewardId  = 5;
    optional  string  transId  = 6;
    optional  uint32  amount  = 7;
    optional  string  remindStr  = 8;
    optional  string  receiverOpenId  = 9;
    optional  string  extendStr  = 10;
}

message CgiScanRewardQrcodeReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  qrcodeUrl  = 2;
    required  uint32  channel  = 3;
    optional  string  webviewUrl  = 4;
}

message CgiScanRewardQrcodeResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  receiverName  = 4;
    repeated  uint32  amtList  = 5;
    optional  string  desc  = 6;
    optional  string  upperRightStr  = 7;
    optional  string  receiverTrueName  = 8;
    optional  string  scanId  = 9;
    optional  string  extendStr1  = 10;
    optional  string  extendStr2  = 11;
    optional  uint32  maxAmt  = 12;
    optional  string  receiverOpenId  = 13;
    optional  string  receiverNickname  = 14;
    optional  string  phoneUrl  = 15;
}

message CgiSetRewardQrcodePhotoWordReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  word  = 2;
}

message CgiSetRewardQrcodePhotoWordResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message CgiSetRewardQrcodeReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  uint32  amtList  = 2;
    optional  string  desc  = 3;
    optional  bool  firstOpenFlag  = 4;
    optional  bool  modifyDefaultAmt  = 5;
    optional  string  photoUrl  = 6;
    optional  string  photoAeskey  = 7;
}

message CgiSetRewardQrcodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  photoUrl  = 4;
    optional  string  photoAeskey  = 5;
    optional  uint32  iconLength  = 6;
    repeated  uint32  amtList  = 7;
    optional  string  desc  = 8;
    optional  uint32  photoWidth  = 9;
}

message CgiTransferBeforeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  receiverUsername  = 2;
    optional  string  jsapiReqkey  = 3;
}

message CgiTransferBeforeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  maskTruename  = 4;
    optional  string  truenameExtend  = 5;
    optional  bool  isSupportAddress  = 6;
    optional  string  placeorderReserves  = 7;
    optional  uint32  amountRemindBit  = 8;
}

message CgiTransferPayCheckReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  reqKey  = 2;
    required  string  transferId  = 3;
    required  string  transactionId  = 4;
    required  string  receiverOpenid  = 5;
    required  uint64  fee  = 6;
    optional  string  extendStr  = 7;
}

message CgiTransferPayCheckResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message ChatConfig {
    optional  bool  hideCreateChat  = 1;
    optional  bool  hideModChatMember  = 2;
}

message ChatContact {
    optional  string  userName  = 1;
}

message ChatReportRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  UnreadMsgReport  unreadMsgReport  = 2;
}

message ChatReportResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message ChatRoomInfo {
    required  string  message  = 1;
    required  string  gotoBtn  = 2;
    required  string  cancelBtn  = 3;
    required  string  url  = 4;
}

message ChatRoomLiveExtInfo {
    optional  uint64  flag  = 1;
}

message ChatRoomMemberData {
    required  uint32  memberCount  = 1;
    repeated  ChatRoomMemberInfo  chatRoomMember  = 2;
    optional  uint32  infoMask  = 3;
}

message ChatRoomMemberInfo {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  displayName  = 3;
    optional  string  bigHeadImgUrl  = 4;
    optional  string  smallHeadImgUrl  = 5;
    required  uint32  chatroomMemberFlag  = 6;
    optional  string  inviterUserName  = 7;
    optional  uint32  status  = 8;
    optional  string  textStatus  = 9;
    optional  string  associateOpenImappId  = 10;
    optional  string  associateOpenImdescId  = 11;
}

message ChatSearchRequest {
    optional  string  sessionId  = 1;
    optional  string  requestId  = 2;
    optional  string  content  = 3;
    optional  uint32  h5Version  = 4;
    optional  LbsLocationNew  location  = 5;
    optional  uint32  darkMode  = 6;
    optional  uint32  scene  = 7;
}

message ChatSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  searchId  = 2;
    repeated  ChatSearchResponse_Keyword  words  = 3;
    optional  string  jsonResult  = 4;
}

message ChatSearchResponse_Keyword {
    optional  string  word  = 1;
    optional  string  info  = 2;
}

message ChatUserInfo {
    required  string  username  = 1;
    optional  string  nickname  = 2;
    optional  string  avatar  = 3;
    optional  uint32  sex  = 4;
    optional  string  tag  = 5;
    optional  GameLifeJumpInfo  profileJumpInfo  = 6;
    optional  uint32  accountType  = 7;
}

message CheckAliasValidReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  alias  = 2;
}

message CheckAliasValidResp {
    optional  BaseResponse  baseResponse  = 1;
}

message CheckBankBindReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  payeeEncName  = 2;
    optional  string  bankCardEncNo  = 3;
    optional  string  bankName  = 4;
    optional  string  bankType  = 5;
}

message CheckBankBindRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  bankCardSeqno  = 4;
    optional  string  bankCardTailno  = 5;
    optional  string  payeeName  = 6;
    optional  string  encryptData  = 7;
}

message CheckBigFileDownloadRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUserName  = 2;
    optional  string  toUserName  = 3;
    required  uint64  fileSize  = 4;
    optional  string  aeskey  = 5;
    optional  string  fileMd5  = 6;
    required  uint32  fileType  = 7;
    optional  string  fileExt  = 8;
    optional  string  fileName  = 9;
}

message CheckBigFileDownloadResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  signature  = 2;
    optional  uint32  fakeuin  = 3;
    optional  string  fakeAeskey  = 4;
    optional  string  fakeSignature  = 5;
}

message CheckBigFileUploadRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUserName  = 2;
    optional  string  toUserName  = 3;
    required  uint64  fileSize  = 4;
    optional  string  aeskey  = 5;
    optional  string  fileMd5  = 6;
    required  uint32  fileType  = 7;
    optional  string  fileExt  = 8;
    optional  string  fileName  = 9;
}

message CheckBigFileUploadResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  signature  = 2;
    optional  uint32  fakeuin  = 3;
    optional  string  fakeAeskey  = 4;
    optional  string  fakeSignature  = 5;
}

message CheckCDN {
    optional  string  dataId  = 1;
    optional  string  fullMd5  = 2;
    optional  string  head256Md5  = 3;
    required  uint32  fullSize  = 4;
    required  uint32  dataSourceType  = 5;
    optional  string  dataSourceId  = 6;
    required  uint32  isThumb  = 7;
}

message CheckCDNRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  CheckCDN  list  = 3;
}

message CheckCDNResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  FavCDNItem  list  = 3;
}

message CheckCanSetAliasReq {
    optional  BaseRequest  baseRequest  = 1;
}

message CheckCanSetAliasResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  CheckCanSetAliasResult  results  = 2;
    optional  string  ticket  = 3;
    optional  uint32  verifyType  = 4;
    optional  string  verifyUrl  = 5;
}

message CheckCanSetAliasResult {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  result  = 3;
    optional  bool  isPass  = 4;
}

message CheckCanSubscribeBizRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  source  = 2;
    optional  string  toUserName  = 3;
    optional  string  extInfo  = 4;
    optional  string  appId  = 5;
    required  uint32  packNum  = 6;
    repeated  SKBuiltinString_t  androidPackNameList  = 7;
    optional  string  iosBunddleId  = 8;
    optional  string  fromUrl  = 9;
    optional  uint32  scene  = 10;
}

message CheckCanSubscribeBizResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  checkTicket  = 2;
    optional  string  toUserName  = 3;
    optional  string  webViewUrl  = 4;
    optional  string  showWord  = 5;
}

message CheckConversationFileRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  ConversationMsgInfo  msgInfoList  = 3;
}

message CheckConversationFileResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  ConversationFileInfo  fileInfoList  = 3;
}

message CheckDemoInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  demoMd5  = 3;
    optional  string  demoPageMd5  = 4;
}

message CheckDemoInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    optional  bool  hasNewDemo  = 3;
    optional  string  newDemoDownloadUrl  = 4;
    optional  string  newDemoMd5  = 5;
    optional  bool  hasNewDemoPage  = 6;
    optional  string  newDemoPageDownloadUrl  = 7;
    optional  string  newDemoPageMd5  = 8;
    optional  string  newDemoCodeExtJsonInfo  = 9;
    optional  string  applyExprPage  = 10;
}

message CheckFavItemRequest {
    repeated  FavIDAndObject  favIdandObjectList  = 1;
    optional  uint32  scene  = 2;
    optional  FavResendObject  favResendObject  = 3;
}

message CheckFavItemResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  CheckFavItemResult  checkFavItemRequestList  = 2;
}

message CheckFavItemResult {
    optional  uint32  favId  = 1;
    optional  int32  ret  = 2;
}

message CheckHoneyPayerReq {
    required  BaseRequest  baseRequest  = 1;
}

message CheckHoneyPayerResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  HPRealNameInfo  realNameInfo  = 4;
    repeated  CheckHoneyPayerResp_HPCardTypeInfo  cardInfoList  = 5;
    optional  string  hpcardTips  = 6;
}

message CheckHoneyPayerResp_HPCardTypeInfo {
    optional  string  cardTypeName  = 1;
    optional  string  tips  = 2;
    optional  string  icon  = 3;
    optional  bool  isGray  = 4;
    optional  uint32  cardType  = 5;
    optional  HPCardOperItem  operItem  = 6;
}

message CheckHoneyUserReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userUsername  = 2;
    optional  uint32  cardType  = 3;
}

message CheckHoneyUserResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint64  minCreditLine  = 4;
    optional  uint64  maxCreditLine  = 5;
    optional  string  truenameMask  = 6;
    optional  string  takeMessage  = 7;
    optional  string  wishing  = 8;
    optional  string  iconUrl  = 9;
}

message CheckJSApiInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    repeated  CheckJSApiInfoResponse_AppControlInfo  appControlInfo  = 3;
    repeated  CheckJSApiInfoResponse_PluginInfo  pluginInfo  = 4;
    optional  CheckJSApiInfoResponse_PluginHostInfoResp  hostInfoResp  = 5;
    repeated  CheckJSApiInfoResponse_JumpToInfo  jumpToInfo  = 6;
    optional  CheckJSApiInfoResponse_FromAppIdInfoResp  fromInfoResp  = 7;
}

message CheckJSApiInfoResponse_AppControlInfo {
    optional  string  appid  = 1;
    optional  bytes  jsapiControlBytes  = 2;
}

message CheckJSApiInfoResponse_FromAppIdInfoResp {
    optional  bool  fromAppidOk  = 1;
}

message CheckJSApiInfoResponse_JumpToInfo {
    optional  string  jumpToAppid  = 1;
    optional  string  jumpToUsername  = 2;
}

message CheckJSApiInfoResponse_PluginHostInfoResp {
    optional  bool  hostAppidOk  = 1;
}

message CheckJSApiInfoResponse_PluginInfo {
    optional  string  pluginAppid  = 1;
    optional  string  pluginUsername  = 2;
}

message CheckJsApiInfo {
    optional  bytes  jsapiControlBytes  = 1;
    repeated  bytes  stateJsapiBytes  = 2;
}

message CheckLoginQRCodeRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  randomEncryKey  = 2;
    optional  string  uuid  = 3;
    required  uint32  timeStamp  = 4;
    optional  uint32  opcode  = 5;
}

message CheckLoginQRCodeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  LoginQRCodeNotifyPkg  notifyPkg  = 3;
}

message CheckMchServicePosRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  followParam  = 3;
    optional  uint64  timestamp  = 4;
}

message CheckMchServicePosResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint64  timestamp  = 4;
}

message CheckMd5Request {
    required  BaseRequest  baseRequest  = 1;
    required  string  fileid  = 2;
    required  string  md5  = 3;
    optional  string  newmd5  = 4;
    required  uint32  crc32  = 5;
}

message CheckMd5Response {
    required  BaseResponse  baseResponse  = 1;
    optional  string  aeskey  = 2;
}

message CheckMobileSIMTypeReq {
    optional  uint32  scene  = 1;
    optional  uint32  type  = 2;
    optional  string  ip  = 3;
    optional  string  imsi  = 4;
    optional  string  imei  = 5;
    optional  string  idfa  = 6;
    optional  string  idfv  = 7;
}

message CheckMobileSIMTypeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  type  = 2;
    optional  uint32  cacheExpiredTime  = 3;
    optional  uint32  productType  = 4;
    optional  uint32  businessFlag  = 5;
}

message CheckMusicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  musicId  = 2;
    optional  string  title  = 3;
    optional  string  coverImg  = 4;
    optional  string  coverImgHd  = 5;
    optional  string  webUrl  = 6;
    optional  string  dataUrl  = 7;
    optional  string  lowBandUrl  = 8;
    optional  string  appId  = 9;
    optional  uint32  scene  = 10;
    optional  string  extra  = 11;
    optional  string  requestId  = 12;
}

message CheckMusicResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  musicId  = 2;
    optional  uint32  scene  = 3;
}

message CheckPayJsapiRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
    required  uint32  jsApiScene  = 9;
    optional  ActionLocation  actionLocation  = 10;
    optional  string  uuidForBindCard  = 11;
    optional  string  userName  = 12;
    optional  string  path  = 13;
    optional  int32  sourceType  = 14;
    optional  uint32  channelType  = 15;
    optional  string  commandWord  = 16;
}

message CheckPayJsapiResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    optional  string  token  = 4;
    optional  PayJsApiAuthenPageMsgInfo  payJsapiAuthenPageMsgItem  = 5;
    optional  string  jsApiReqKey  = 6;
    optional  bool  canPassPwd  = 7;
    optional  string  usertoken  = 8;
    optional  string  sessionId  = 9;
    optional  string  scene  = 10;
}

message CheckRecvNameWin {
    optional  string  title  = 1;
    optional  string  wording  = 2;
    optional  JumpItem  leftButton  = 3;
    optional  JumpItem  rightButton  = 4;
    optional  string  recvName  = 5;
    optional  string  checkRecvNameSign  = 6;
    optional  uint32  payAmount  = 7;
}

message CheckResUpdateRequest {
    repeated  ResourceTypeReq  resId  = 1;
    optional  uint32  scene  = 2;
    optional  bytes  context  = 3;
}

message CheckResUpdateResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ResourceType  res  = 2;
    optional  bytes  context  = 3;
    optional  uint32  nextTime  = 4;
}

message CheckShortLinkReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  shortLink  = 2;
    optional  uint32  fromBusinessType  = 3;
}

message CheckShortLinkResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  wxaAppid  = 2;
    optional  bytes  wxaPath  = 3;
    optional  bytes  pageTitle  = 4;
    optional  uint32  version  = 5;
    optional  uint32  versionType  = 6;
    optional  bytes  wxaNickName  = 7;
}

message CheckSmsCanAddCardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  encryStr  = 3;
}

message CheckSmsCanAddCardResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  cardId  = 2;
    optional  string  cardExt  = 3;
}

message CheckTmplVerReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 3;
    optional  string  netType  = 4;
    repeated  CheckTmplVerReq_TypeInfo  typeInfoList  = 5;
}

message CheckTmplVerReq_TypeInfo {
    optional  int32  type  = 1;
    repeated  string  fullVersions  = 2;
    optional  string  fullVersionInUse  = 3;
    optional  uint64  controlFlag  = 4;
}

message CheckTmplVerResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  version  = 2;
    optional  string  cdnUrl  = 3;
    optional  string  md5  = 4;
    optional  uint32  versionLowerBound  = 5;
    repeated  CheckTmplVerResp_TmplInfo  tmplInfoList  = 6;
    optional  uint32  checkColdDown  = 7;
}

message CheckTmplVerResp_TmplInfo {
    optional  int32  type  = 1;
    optional  uint32  version  = 2;
    optional  string  cdnUrl  = 3;
    optional  string  md5  = 4;
    optional  uint32  versionLowerBound  = 5;
    optional  uint32  reportId  = 6;
    repeated  CheckTmplVerResp_TmplInfo_HttpHeader  httpHeaderList  = 7;
    optional  bool  needGetA8Key  = 8;
    optional  string  fullVersion  = 9;
    repeated  CheckTmplVerResp_TmplInfo_VersionControl  versionControlList  = 10;
    optional  string  versionGroup  = 11;
}

message CheckTmplVerResp_TmplInfo_HttpHeader {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message CheckTmplVerResp_TmplInfo_VersionControl {
    optional  string  fullVersion  = 1;
    optional  bool  forceH5  = 2;
}

message CheckUnBindRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  bindType  = 2;
}

message CheckUnBindResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  randomPasswd  = 2;
    optional  string  canUnbindNotice  = 3;
}

message CheckUserAuthJsapiRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
    required  uint32  jsApiScene  = 9;
    optional  ActionLocation  actionLocation  = 10;
    optional  string  userName  = 11;
    optional  string  path  = 12;
    optional  int32  sourceType  = 13;
    optional  int32  isRoot  = 14;
    optional  string  cpuId  = 15;
    optional  string  uid  = 16;
    optional  int32  isDeviceOpenTouch  = 17;
    optional  uint32  channelType  = 18;
    optional  string  commandWord  = 19;
}

message CheckUserAuthJsapiResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    optional  string  token  = 4;
    optional  PayJsApiAuthenPageMsgInfo  payJsapiVerifyPaypasswordPageMsg  = 5;
    optional  string  jsApiReqKey  = 6;
    optional  TouchInfo  touchInfo  = 7;
}

message CheckUserIfHasNewVideoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  checkHasNewTicket  = 2;
}

message CheckUserIfHasNewVideoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  errMsg  = 3;
    optional  string  jsonData  = 4;
    optional  bool  hasNewVideo  = 5;
}

message CheckVerifyCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  mobile  = 3;
    optional  string  verifyCode  = 4;
}

message CheckVerifyCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  status  = 2;
    optional  string  encryptedData  = 3;
    optional  string  iv  = 4;
    optional  string  showMobile  = 5;
    optional  string  cloudId  = 6;
}

message CheckVoiceTransRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  voiceId  = 2;
    required  uint32  totalLen  = 3;
    optional  uint32  msgId  = 4;
    optional  VoiceAttr  voiceAttr  = 5;
    optional  uint64  newMsgId  = 6;
    optional  int32  scene  = 7;
    optional  string  fromUserName  = 8;
    optional  string  toUserName  = 9;
}

message CheckVoiceTransResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  status  = 2;
    required  VoiceTransRes  transRes  = 3;
    required  UploadVoiceCtx  uploadCtx  = 4;
    required  QueryResCtx  queryCtx  = 5;
    required  uint32  notifyId  = 6;
}

message CheckWepkgVersionRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  CheckWepkgVersionRequest_ClientPkgVersion  clientPkgVersionList  = 2;
}

message CheckWepkgVersionRequest_ClientPkgVersion {
    required  string  pkgId  = 1;
    optional  string  version  = 2;
    optional  uint32  scene  = 3;
}

message CheckWepkgVersionResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  CheckWepkgVersionResponse_PkgItem  pkgList  = 2;
}

message CheckWepkgVersionResponse_PkgItem {
    required  string  pkgId  = 1;
    optional  WepkgInfo  pkgInfo  = 2;
    optional  WepkgVersionDownloadInfo  downloadInfo  = 3;
    optional  WepkgCmd  pkgCmd  = 4;
}

message CheckWin {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    repeated  KVPair  checkItem  = 3;
    optional  JumpItem  leftButton  = 4;
    optional  JumpItem  rightButton  = 5;
}

message ChildMode {
    optional  int32  bizSwitch  = 1;
    optional  int32  weappSwitch  = 2;
    optional  int32  finderSwitch  = 3;
    optional  bool  childModeSwitch  = 4;
}

message ClassifyItem {
    required  uint32  classifyId  = 1;
    required  string  name  = 2;
    required  string  iconUrl  = 3;
    optional  string  webUrl  = 4;
}

message CliReportKVDataPackage {
    required  uint32  uin  = 1;
    required  uint32  clientVersion  = 2;
    required  uint32  netType  = 3;
    repeated  KVCommReportItem  itemList  = 4;
    optional  string  deviceModel  = 5;
    optional  string  deviceBrand  = 6;
    optional  string  osName  = 7;
    optional  string  osVersion  = 8;
    optional  string  languageVer  = 9;
    optional  uint32  datatype  = 10;
}

message CliReportKVReq {
    required  uint32  generalVersion  = 1;
    required  uint32  specialVersion  = 2;
    required  uint32  whiteOrBlackUinVersion  = 3;
    repeated  CliReportKVDataPackage  dataPkg  = 4;
    optional  bytes  randomEncryKey  = 5;
    optional  HeavyUserReqInfo  heavyUserInfo  = 6;
}

message CliReportKVResp {
    required  int32  ret  = 1;
    required  uint32  generalVersion  = 2;
    required  uint32  specialVersion  = 3;
    required  uint32  whiteOrBlackUinVersion  = 4;
    repeated  StrategyInterval  generalStrategies  = 5;
    repeated  StrategyInterval  specialStrategies  = 6;
    repeated  StrategyInterval  whiteOrBlackUinStrategies  = 7;
    optional  uint32  maxValidDataTime  = 8;
    optional  uint32  banReportTime  = 9;
    optional  uint32  askSvrStrategyInterval  = 10;
    optional  HeavyUserRespInfo  heavyUserInfo  = 11;
}

message ClickCommandMsgInfo {
    optional  uint64  mid  = 1;
    optional  uint32  idx  = 2;
    optional  string  appid  = 3;
    optional  string  path  = 4;
}

message ClickCommandRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  clickType  = 2;
    optional  string  clickInfo  = 3;
    optional  string  bizUserName  = 4;
    optional  string  msgSource  = 5;
    repeated  ClickCommandMsgInfo  msgReport  = 6;
    optional  uint32  scene  = 7;
    optional  uint32  sessionid  = 8;
    optional  SessionStat  sessionStat  = 9;
    optional  SettingPageInfo  settingPageInfo  = 10;
}

message ClickCommandResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WuRaoTips  wuRaoTips  = 2;
}

message ClientContextInfo {
    optional  string  contextId  = 1;
    optional  string  clickTabContextId  = 2;
    optional  string  clientReportBuff  = 3;
}

message ClientPerfReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message ClientStatsInfo {
    optional  uint32  exposeCount  = 1;
    optional  string  oob  = 2;
}

message ClipboardOperation {
    required  uint32  operationType  = 1;
    required  SKBuiltinBuffer_t  operationInfo  = 2;
    required  uint32  operationContentLength  = 3;
    optional  SKBuiltinBuffer_t  extOperationInfo  = 4;
}

message ClipboardOperationReport {
    required  uint32  clipboardOperationCount  = 1;
    repeated  ClipboardOperation  clipboardOperationList  = 2;
}

message CloseApplyLiveMicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  bool  enableApplyLiveMic  = 4;
}

message CloseApplyLiveMicResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CloseFundAccountReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  payPasswdEnc  = 2;
    optional  uint32  accountType  = 3;
    optional  string  traceInfo  = 100;
}

message CloseFundAccountRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  traceInfo  = 100;
}

message CloseLiveMicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  string  cliMsgId  = 4;
    optional  string  liveMicId  = 5;
    optional  string  micSdkUserId  = 6;
}

message CloseLiveMicResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CloseLiveRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  bool  cutLive  = 4;
}

message CloseLiveResponse {
    required  BaseResponse  baseResponse  = 1;
}

message CloseReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  timeStamp  = 2;
    optional  string  payPasswdEnc  = 3;
    optional  string  traceInfo  = 100;
}

message CloseResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message CmdInfo {
    optional  int32  cmdId  = 1;
    optional  bytes  cmdData  = 2;
    optional  PaymentSelectPageData  paymentPage  = 3;
}

message CmdItem {
    required  int32  cmdId  = 1;
    required  SKBuiltinBuffer_t  cmdBuf  = 2;
}

message CmdList {
    required  uint32  count  = 1;
    repeated  CmdItem  list  = 2;
}

message CoLikeInfo {
    optional  uint64  objectId  = 1;
    optional  uint32  status  = 2;
}

message CoinBanner {
    optional  string  content  = 1;
    optional  string  url  = 2;
}

message ColikeAppInfo {
    optional  string  appId  = 1;
    optional  string  appName  = 2;
    optional  uint32  version  = 3;
}

message ColikeBlockRequest {
    repeated  ColikeBlockRequest_Item  items  = 1;
}

message ColikeBlockRequest_Item {
    optional  int32  action  = 1;
    optional  string  username  = 2;
}

message ColikeBlockResponse {
    optional  BaseResponse  baseresponse  = 1;
}

message ColikePostRequest {
    optional  uint64  timestamp  = 1;
    optional  string  objectBuffer  = 2;
    optional  string  comment  = 3;
    optional  string  requestId  = 4;
    optional  ColikeAppInfo  appInfo  = 5;
}

message ColikePostResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message CommJsLibControl {
    optional  string  pkgId  = 1;
}

message CommKvItem {
    required  string  key  = 1;
    optional  uint64  uintValue  = 2;
    optional  string  textValue  = 3;
}

message CommMsgBaseInfo {
    optional  uint32  msgId  = 1;
    optional  uint32  msgType  = 2;
    optional  uint32  dateTime  = 3;
    optional  uint32  status  = 4;
    optional  uint32  funcFlag  = 5;
    optional  string  uniqueId  = 6;
}

message CommentExposure {
    optional  string  openid  = 1;
    optional  uint32  personalCommentId  = 2;
    optional  uint32  isFriendComment  = 3;
    optional  uint32  isElectedComment  = 4;
    optional  uint32  scene  = 5;
    optional  uint32  count  = 6;
}

message CommentReply {
    optional  string  content  = 1;
    optional  string  openid  = 3;
    optional  uint32  createTime  = 4;
    optional  uint32  replyId  = 5;
    optional  uint32  isDeleted  = 6;
    optional  uint32  replyLikeNum  = 8;
    optional  uint32  replyLikeStatus  = 9;
    optional  uint32  replyIsElected  = 10;
    optional  uint32  replyDelFlag  = 11;
}

message CommentReplyList {
    repeated  CommentReply  replyList  = 1;
}

message CommentShareCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  text  = 2;
    optional  string  targetId  = 3;
    optional  string  cardId  = 5;
    optional  string  appUserName  = 6;
}

message CommentShareCardResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message CommitBindXmailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  bindType  = 2;
    optional  string  secPwd  = 3;
    optional  string  mailAddr  = 4;
    optional  string  ticket  = 5;
    optional  string  secPwdEncrypt  = 6;
}

message CommitBindXmailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  mailAddr  = 2;
    optional  int32  mailRetCode  = 3;
}

message ComonPromptInfo {
    optional  string  promptText  = 1;
    optional  string  jumpText  = 2;
    optional  uint32  jumpType  = 3;
    optional  string  jumpUrl  = 4;
    optional  string  tinyappUsername  = 5;
}

message ComposeSendRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientId  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    required  uint32  dataLen  = 5;
    required  SKBuiltinBuffer_t  data  = 6;
    optional  string  fromUser  = 7;
    optional  string  toUserList  = 9;
    required  uint32  realSize  = 10;
}

message ComposeSendResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  startPos  = 2;
    required  uint32  totalLen  = 3;
    optional  string  clientId  = 4;
}

message ConfAVMember {
    optional  uint32  memberid  = 1;
    optional  uint32  avStatus  = 2;
}

message ConfAVMemberList {
    optional  uint64  imroomid  = 1;
    optional  uint64  roomid  = 2;
    repeated  ConfAVMember  memberList  = 3;
}

message ConfDeviceParam {
    optional  uint64  roomid  = 1;
    optional  DeviceAudioParam  audioParam  = 2;
    optional  DeviceVideoParam  videoParam  = 3;
}

message ConfDeviceReport {
    optional  uint32  audioDeviceErrcode  = 1;
    optional  uint32  videoDeviceErrcode  = 2;
    optional  uint32  audioRecorderErrcode  = 3;
    optional  uint32  audioPlayerErrcode  = 4;
    optional  uint32  speakerMode  = 5;
    optional  uint32  phoneMode  = 6;
    optional  uint32  audioSourceMode  = 7;
    optional  uint32  speakerStreamType  = 8;
    optional  uint32  phoneStreamType  = 9;
    optional  uint32  ringPlayerErrcode  = 10;
    optional  uint32  audioSetmodeErrcode  = 11;
    optional  int32  audioRecordReadnum  = 12;
    optional  int32  playVolume  = 13;
}

message ConfEnvInfo {
    optional  string  appId  = 1;
    optional  string  appSubid  = 2;
    optional  string  authKey  = 3;
    optional  string  authCode  = 4;
    optional  string  workDir  = 5;
    optional  uint32  debugSvr  = 6;
    optional  string  debugSvrIp  = 7;
    optional  uint32  outLog  = 8;
    optional  uint32  logLevel  = 9;
    optional  uint32  audioFlag  = 10;
    optional  uint32  videoRatio  = 11;
    optional  uint32  defVideoLength  = 12;
    optional  uint32  videoWidth  = 13;
    optional  uint32  videoHeight  = 14;
    optional  uint32  videoFlag  = 15;
    optional  uint32  isImunion  = 16;
    optional  uint32  cpuCore  = 20;
    optional  uint32  cpuFreq  = 21;
    optional  uint32  cpuFlag  = 22;
    optional  string  deviceManufacturer  = 25;
    optional  string  deviceModel  = 26;
    optional  string  deviceRelease  = 27;
    optional  string  deviceIncremental  = 28;
    optional  string  deviceDisplay  = 29;
    optional  bytes  deviceId  = 30;
    optional  string  osVersion  = 31;
}

message ConfEnvInfoILinkIm {
    optional  string  appId  = 1;
    optional  string  appSubid  = 2;
    optional  string  workDir  = 3;
    optional  uint32  audioFlag  = 4;
    optional  uint32  videoRatio  = 10;
    optional  uint32  defVideoLength  = 11;
    optional  uint32  videoWidth  = 12;
    optional  uint32  videoHeight  = 13;
    optional  uint32  videoFlag  = 14;
    optional  uint32  cpuCore  = 20;
    optional  uint32  cpuFreq  = 21;
    optional  uint32  cpuFlag  = 22;
    optional  string  deviceManufacturer  = 25;
    optional  string  deviceModel  = 26;
    optional  string  deviceRelease  = 27;
    optional  string  deviceIncremental  = 28;
    optional  string  deviceDisplay  = 29;
    optional  bytes  deviceId  = 30;
    optional  string  osVersion  = 31;
}

message ConfInviteInfo {
    repeated  string  calleeList  = 1;
    optional  uint32  roomType  = 2;
    optional  bool  muteVideo  = 3;
    optional  uint32  netType  = 4;
}

message ConfInviteItem {
    optional  string  openid  = 1;
    optional  bytes  inviteData  = 2;
}

message ConfInviteRoomInfo {
    optional  uint64  roomid  = 1;
    optional  string  groupid  = 2;
    optional  uint32  selfMemberid  = 3;
    repeated  ConfInviteItem  inviteItems  = 4;
}

message ConfJoinInfo {
    optional  uint64  imroomid  = 1;
    optional  string  groupid  = 2;
    optional  uint32  roomType  = 3;
    optional  bool  muteAudio  = 4;
    optional  bool  muteVideo  = 5;
    optional  uint32  netType  = 6;
}

message ConfMemberInfo {
    optional  uint32  memberid  = 1;
    optional  string  openid  = 2;
    optional  uint32  status  = 3;
}

message ConfMemberList {
    optional  uint64  imroomid  = 1;
    optional  uint64  roomid  = 2;
    repeated  ConfMemberInfo  memberList  = 3;
    optional  uint32  memberChangeSeq  = 4;
    optional  uint32  memberChangeFrom  = 5;
}

message ConfRecvInviteInfo {
    optional  uint64  roomid  = 1;
    optional  string  callerOpenid  = 2;
    repeated  string  calleeOpenids  = 3;
    optional  uint32  roomType  = 4;
}

message ConfRoomInfo {
    optional  uint64  imroomid  = 1;
    optional  uint64  roomid  = 2;
    optional  uint32  selfMemberid  = 3;
}

message Config {
    required  int32  version  = 1;
    optional  uint32  httpConnectTimeoutMillis  = 2;
    optional  uint32  httpReadTimeoutMillis  = 3;
    optional  string  pingUrl  = 4;
    optional  string  threeTwoBlackUrl  = 5;
    optional  string  pingEnabled  = 6;
    optional  string  echoStr  = 7;
}

message ConfigRequest {
    repeated  string  configKeys  = 1;
    optional  uint32  h5Version  = 2;
    optional  string  language  = 3;
    optional  uint32  scene  = 4;
    optional  uint64  businessType  = 5;
    optional  string  netType  = 6;
    optional  LbsLocationNew  location  = 7;
    repeated  CommKvItem  extParams  = 8;
    optional  ChildMode  childMode  = 9;
}

message ConfigResponse {
    optional  BaseResponse  baseResponse  = 1;
    required  string  json  = 2;
}

message ConfirmShowSourceReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  materialId  = 2;
}

message ConfirmShowSourceResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message ConfrimProtocalViewData {
    optional  SwitchViewData  checkbox  = 1;
    optional  TextViewData  text  = 2;
}

message ConnectInfoAddr {
    optional  string  ip  = 1;
    repeated  uint32  port  = 2;
}

message ConnectedRouterReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  deviceId  = 2;
    required  string  deviceType  = 3;
    required  string  clientInfo  = 4;
    required  string  appId  = 5;
}

message ConnectedRouterResp {
    required  BaseResponse  baseResponse  = 1;
}

message ConsumeWecoinRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  ctxBuff  = 2;
    optional  bytes  sign  = 3;
    optional  string  reportSessionId  = 101;
}

message ConsumeWecoinResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int64  wecoinBalance  = 2;
    optional  RetryInfo  retryInfo  = 100;
}

message ContactProfile {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  pyinitial  = 3;
    optional  string  quanPin  = 4;
    required  int32  sex  = 5;
    required  SKBuiltinBuffer_t  imgBuf  = 6;
    required  uint32  bitMask  = 7;
    required  uint32  bitVal  = 8;
    optional  string  remark  = 9;
    required  uint32  imgRet  = 10;
    optional  string  remarkPyinitial  = 11;
    optional  string  remarkQuanPin  = 12;
    required  uint32  contactType  = 13;
    required  uint32  roomInfoCount  = 14;
    repeated  RoomInfo  roomInfoList  = 15;
    optional  string  domainList  = 16;
    required  uint32  chatRoomNotify  = 17;
    required  uint32  addContactScene  = 18;
    optional  string  extInfo  = 19;
    required  uint32  extUpdateSeq  = 20;
    required  uint32  imgUpdateSeq  = 21;
    optional  string  alias  = 22;
}

message ContentId {
    optional  string  vid  = 4;
}

message ControlData {
    required  int32  theme  = 1;
    optional  string  title  = 2;
    optional  string  message  = 3;
    repeated  ActionConfig  actionConfigs  = 4;
    optional  int32  messageType  = 5;
}

message ControlInfo {
    optional  int32  type  = 1;
    optional  RetryStrategy  retryStrategy  = 2;
    optional  RouteInfo  routeInfo  = 3;
    optional  CmdInfo  cmdInfo  = 4;
}

message ConversationFileInfo {
    required  uint32  msgId  = 1;
    optional  string  attachId  = 2;
    required  uint32  status  = 3;
    required  uint32  fileSize  = 4;
    optional  uint64  newMsgId  = 5;
}

message ConversationMsgInfo {
    required  uint32  msgId  = 1;
    optional  uint64  newMsgId  = 2;
}

message ConvertBizChatReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  corpId  = 2;
    required  string  qychatType  = 3;
    required  string  qychatId  = 4;
}

message ConvertBizChatResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  string  brandUserName  = 3;
    optional  uint32  bizchatType  = 4;
    optional  FullBizChat  groupChat  = 5;
    optional  BizChatUser  singleChat  = 6;
}

message Coordinate {
    optional  double  x  = 1;
    optional  double  y  = 2;
}

message CouponAndGiftList {
    optional  string  listTitleWording  = 1;
    repeated  CardElementCouponList  items  = 2;
}

message CouponItemViewData {
    optional  int32  state  = 1;
    optional  TextViewData  title  = 2;
    repeated  TextViewData  subTitle  = 3;
    repeated  TextViewData  selectedSubTitle  = 4;
    optional  string  favId  = 5;
    optional  string  viewId  = 6;
}

message CoverInfo {
    optional  string  wording  = 1;
    optional  QRButtonInfo  firstButton  = 2;
    optional  QRButtonInfo  secondButton  = 3;
}

message CoverInfoDetail {
    optional  string  senderC2CUrl  = 1;
    optional  string  senderC2CMd5  = 2;
    optional  string  receiverC2CUrl  = 3;
    optional  string  receiverC2CMd5  = 4;
    optional  string  recUrl  = 5;
    optional  string  recMd5  = 6;
    optional  string  detailUrl  = 7;
    optional  string  detailMd5  = 8;
    optional  string  aboutUrl  = 9;
    optional  string  packetId  = 10;
    optional  uint32  packetSource  = 11;
    optional  string  logoUrl  = 12;
    optional  string  logoMd5  = 13;
    optional  bool  hasStory  = 14;
    optional  uint32  materialFlag  = 15;
}

message CreInfo {
    optional  string  trueName  = 1;
    optional  string  creType  = 2;
    optional  string  creName  = 3;
}

message CreateBizChatInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  brandUserName  = 2;
    required  FullBizChat  fullChat  = 3;
}

message CreateBizChatInfoResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  FullBizChat  fullChat  = 3;
}

message CreateChatRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinString_t  topic  = 2;
    required  uint32  memberCount  = 3;
    repeated  MemberReq  memberList  = 4;
    optional  uint32  scene  = 5;
    optional  SKBuiltinBuffer_t  extBuffer  = 6;
}

message CreateChatRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinString_t  topic  = 2;
    required  SKBuiltinString_t  pyinitial  = 3;
    required  SKBuiltinString_t  quanPin  = 4;
    required  uint32  memberCount  = 5;
    repeated  MemberResp  memberList  = 6;
    required  SKBuiltinString_t  chatRoomName  = 7;
    required  SKBuiltinBuffer_t  imgBuf  = 8;
    optional  string  bigHeadImgUrl  = 9;
    optional  string  smallHeadImgUrl  = 10;
}

message CreateHoneyPayCardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  authToken  = 2;
    optional  uint64  creditLine  = 3;
    optional  string  userUsername  = 4;
    optional  string  takeMessage  = 5;
    optional  uint32  cardType  = 6;
    optional  string  wishing  = 7;
}

message CreateHoneyPayCardResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  HoneyPayerDetail  detail  = 4;
}

message CreateLiveRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  liveName  = 2;
    optional  string  roomId  = 3;
}

message CreateLiveResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  LiveInfo  liveInfo  = 2;
    optional  bool  isVerified  = 3;
    optional  string  verifyUrl  = 4;
}

message CreateOpenIMChatRoomReq {
    repeated  OpenIMChatRoomMemberInReq  memberList  = 1;
}

message CreateOpenIMChatRoomResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  roomName  = 2;
    repeated  OpenIMChatRoomMemberInResp  memberList  = 3;
    optional  string  bigHeadimgUrl  = 4;
    optional  string  smallHeadimgUrl  = 5;
    optional  string  appId  = 6;
}

message CreatePoiRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  name  = 2;
    optional  string  district  = 3;
    optional  string  street  = 4;
    required  LbsLocation  loc  = 5;
    required  uint32  count  = 6;
    repeated  SKBuiltinString_t  categories  = 7;
    optional  string  telephone  = 8;
    optional  string  photoUrl  = 9;
}

message CreatePoiResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  poiId  = 2;
}

message CreditType {
    optional  int32  key  = 1;
    optional  string  val  = 2;
}

message CustomModal {
    optional  NavigationBarViewData  naviBar  = 1;
    repeated  DialogAction  action  = 2;
    repeated  ViewData  content  = 3;
    optional  string  modalId  = 4;
}

message CustomizedInfo {
    required  uint32  brandFlag  = 1;
    optional  string  externalInfo  = 2;
    optional  string  brandInfo  = 3;
    optional  string  brandIconUrl  = 4;
}

message CustomizedInfoNew {
    required  uint32  brandFlag  = 1;
    optional  string  externalInfo  = 2;
    optional  string  brandInfo  = 3;
    optional  string  brandIconUrl  = 4;
}

message DailySportRecord {
    optional  uint32  timestamp  = 1;
    optional  rankDesc  rankdesc  = 2;
    repeated  SportRecord  sportrecord  = 3;
    optional  uint32  likecount  = 4;
    repeated  likeUserDetail  likeList  = 5;
    optional  bool  isLike  = 6;
}

message DataCenterConfig {
    optional  bool  enable  = 1;
    optional  uint32  portType  = 2;
    optional  string  webUrl  = 3;
    optional  string  miniappUsername  = 4;
    optional  string  miniappPath  = 5;
    optional  string  title  = 6;
}

message DebugInfoReq {
    optional  bool  isdisplay  = 1;
    optional  bool  isRdm  = 2;
}

message DecryptWxWorkChatRecordReq {
    optional  bytes  content  = 1;
}

message DecryptWxWorkChatRecordResp {
    optional  BaseResponse  baseResp  = 1;
    optional  string  content  = 2;
}

message DeepLinkBitSet {
    required  uint64  bitValue  = 1;
}

message DeepLinkInfo {
    optional  string  ticket  = 1;
    optional  uint32  createTime  = 2;
    optional  uint32  status  = 3;
    optional  string  apiName  = 4;
    optional  uint32  wxaScene  = 5;
    optional  bytes  reqData  = 6;
    optional  bytes  respData  = 7;
    optional  string  hostAppid  = 8;
    optional  string  wxaAppid  = 9;
    optional  uint32  useruin  = 10;
    optional  uint32  lifespan  = 11;
    optional  string  sdkVersion  = 12;
}

message DelAdvertiseObject {
    required  uint64  id  = 1;
}

message DelAvatarReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  avatarId  = 2;
}

message DelAvatarResp {
    required  BaseResponse  baseResponse  = 1;
}

message DelChatContact {
    required  SKBuiltinString_t  userName  = 1;
}

message DelChatRoomAdminRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  chatRoomName  = 2;
    repeated  string  userNameList  = 3;
}

message DelChatRoomAdminResponse {
    required  BaseResponse  baseResponse  = 1;
}

message DelChatRoomMemberRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  memberCount  = 2;
    repeated  DelMemberReq  memberList  = 3;
    optional  string  chatRoomName  = 4;
    optional  uint32  scene  = 5;
}

message DelChatRoomMemberResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  memberCount  = 2;
    repeated  DelMemberResp  memberList  = 3;
}

message DelContact {
    required  SKBuiltinString_t  userName  = 1;
    optional  uint32  deleteContactScene  = 2;
}

message DelContactLabelRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  labelIdlist  = 2;
}

message DelContactLabelResponse {
    required  BaseResponse  baseResponse  = 1;
}

message DelFavItemRsp {
    required  int32  ret  = 1;
    required  uint32  favId  = 2;
}

message DelFollowRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  friendUserName  = 2;
}

message DelFollowResponse {
    required  BaseResponse  baseResponse  = 1;
}

message DelForcePush {
    optional  string  forcePushId  = 1;
}

message DelMemberReq {
    required  SKBuiltinString_t  memberName  = 1;
}

message DelMemberResp {
    required  SKBuiltinString_t  memberName  = 1;
}

message DelOpenIMChatRoomAdminRequest {
    optional  string  roomName  = 1;
    repeated  string  userNameList  = 2;
}

message DelOpenIMChatRoomAdminResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message DelOpenIMChatRoomMemberReq {
    optional  string  roomName  = 1;
    repeated  OpenIMChatRoomMemberInReq  memberList  = 2;
}

message DelOpenIMChatRoomMemberResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  OpenIMChatRoomMemberInResp  memberList  = 2;
}

message DelOpenIMContact {
    required  string  tpUsername  = 1;
}

message DelSafeDeviceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uuid  = 2;
}

message DelSafeDeviceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  safeDevice  = 2;
}

message DelShareCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardId  = 2;
}

message DelShareCardResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
}

message DelTempSessionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUserName  = 2;
    optional  bytes  extInfo  = 3;
}

message DelTempSessionResponse {
    required  BaseResponse  baseResponse  = 1;
}

message DelUserAuthReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  fromScene  = 3;
}

message DelUserAuthResp {
    required  BaseResponse  baseResponse  = 1;
    optional  UserMgrBaseResponse  usermgrBaseresp  = 2;
}

message DelayInfo {
    optional  uint32  layerid  = 1;
    optional  uint32  expid  = 2;
    optional  string  info  = 3;
}

message DeleteCardImgRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  contactUserName  = 2;
}

message DeleteCardImgResponse {
    required  BaseResponse  baseResponse  = 1;
}

message DeleteCardInInvalidListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userCardId  = 2;
}

message DeleteCardInInvalidListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message DeleteCardInTicketListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userCardId  = 2;
}

message DeleteCardInTicketListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message DeleteCouponRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userCardId  = 2;
}

message DeleteCouponResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message DeleteHistoryRecordReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  transferBillId  = 2;
}

message DeleteHistoryRecordRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message DeleteMchInListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message DeleteRecordReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bankCardSeqno  = 2;
}

message DeleteRecordRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message DeleteShowSourceReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  materialId  = 2;
}

message DeleteShowSourceResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message DeleteSnsOldGroup {
    required  uint32  groupCount  = 1;
    repeated  uint64  groupIds  = 2[packed=true];
}

message DeleteUserAutoFillInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  groupKey  = 3;
    optional  uint32  groupId  = 4;
    optional  uint32  source  = 5;
    optional  uint32  collectId  = 6;
    optional  uint32  clientVersion  = 7;
}

message DeleteUserAutoFillInfoResp {
    required  BaseResponse  baseResponse  = 1;
}

message DescItem {
    optional  string  desc  = 1;
    optional  string  color  = 2;
}

message DeviceAudioParam {
    optional  uint32  sampleRate  = 1;
    optional  uint32  sampleLenInms  = 2;
    optional  uint32  channels  = 3;
    optional  int32  sourceMode  = 4;
    optional  int32  phoneMode  = 5;
    optional  int32  speakerMode  = 6;
    optional  int32  phoneStreamtype  = 7;
    optional  int32  speakerStreamtype  = 8;
    optional  int32  voipStreamtype  = 9;
}

message DeviceCamera {
    optional  uint32  enable  = 1;
    optional  uint32  fps  = 2;
    optional  uint32  orien  = 3;
    optional  uint32  isleft  = 4;
    optional  uint32  rotate  = 5;
    optional  uint32  width  = 6;
    optional  uint32  height  = 7;
}

message DeviceVideoParam {
    optional  uint32  cameraNum  = 1;
    optional  DeviceCamera  frontCamera  = 2;
    optional  DeviceCamera  backCamera  = 3;
    optional  uint32  focusType  = 4;
    optional  uint32  fpsMin  = 5;
    optional  uint32  fpsMax  = 6;
    optional  uint32  supportHwenc  = 7;
}

message Dialog {
    repeated  DialogAction  action  = 1;
    optional  string  content  = 2;
    optional  string  title  = 3;
}

message DialogAction {
    optional  int32  type  = 1;
    optional  string  title  = 2;
    optional  RouteInfo  routeInfo  = 3;
    optional  CmdInfo  cmdInfo  = 4;
}

message DirectConnInfo {
    optional  int32  connId  = 1;
    optional  string  localNicDeviceId  = 2;
    optional  string  remoteNicDeviceId  = 3;
    optional  int32  localNetType  = 4;
    optional  int32  remoteNetType  = 5;
    optional  int32  statInterval  = 6;
    optional  VoipAddrSet  punchSvr  = 7;
    optional  uint32  natDetectSessionCnt  = 8;
    repeated  VoipNatDetectSvr  natDetectSession  = 9;
    optional  int32  localNicType  = 10;
    optional  int32  remoteNicType  = 11;
}

message DirectConnSet {
    optional  int32  directConnCnt  = 1;
    repeated  DirectConnInfo  directConns  = 2;
}

message Discount {
    optional  string  title  = 1;
    required  uint32  price  = 2;
}

message DisturbSetting {
    required  uint32  nightSetting  = 1;
    required  DisturbTimeSpan  nightTime  = 2;
    required  uint32  allDaySetting  = 3;
    required  DisturbTimeSpan  allDayTime  = 4;
}

message DisturbTimeSpan {
    required  uint32  beginTime  = 1;
    required  uint32  endTime  = 2;
}

message DmItem {
    optional  string  key  = 1;
    optional  string  value  = 2;
    optional  uint32  xagreementId  = 3;
}

message DocResult {
    optional  ResultCommContent  commContent  = 1;
    optional  string  jumpUrl  = 2;
    optional  string  date  = 3;
    optional  uint32  jumpType  = 4;
    optional  string  userName  = 5;
    optional  string  weappPath  = 6;
    optional  uint32  weappVersion  = 7;
    optional  string  sceneNote  = 8;
    optional  bytes  debugInfo  = 9;
    optional  int32  showStyle  = 10;
}

message DocumentItem {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  directUrl  = 3;
}

message DownLoadPackageRequest {
    required  BaseRequest  baseRequest  = 1;
    required  Package  package  = 2;
    required  uint32  offset  = 3;
    required  uint32  len  = 4;
    optional  uint32  type  = 5;
}

message DownLoadPackageResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  packageBuf  = 2;
    optional  uint32  type  = 3;
    optional  uint32  totalSize  = 4;
}

message DownloadAppAttachRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    required  uint32  sdkVersion  = 3;
    optional  string  mediaId  = 4;
    optional  string  userName  = 5;
    required  uint32  totalLen  = 6;
    required  uint32  startPos  = 7;
    required  uint32  dataLen  = 8;
    optional  string  outFmt  = 9;
    optional  int32  rotation  = 10;
    optional  uint32  type  = 11;
    optional  uint32  cdntype  = 12;
    optional  uint64  newMsgId  = 13;
}

message DownloadAppAttachResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appId  = 2;
    optional  string  mediaId  = 3;
    optional  string  userName  = 4;
    required  uint32  totalLen  = 5;
    required  uint32  startPos  = 6;
    required  uint32  dataLen  = 7;
    required  SKBuiltinBuffer_t  data  = 8;
}

message DownloadGuidance {
    optional  string  mainContent  = 1;
    optional  string  secondaryTitle  = 2;
    optional  string  secondaryContent  = 3;
}

message DownloadInfo {
    required  string  downloadUrl  = 1;
    optional  string  androidApkMd5  = 2;
    optional  string  googlePlayDownloadUrl  = 4;
    optional  YYB  yyb  = 5;
    optional  uint32  downloadFlag  = 6;
    optional  uint32  androidApkSize  = 7;
    optional  string  alternativeDownloadUrl  = 8;
    optional  uint32  downloaderType  = 9;
}

message DownloadVideoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  msgId  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    optional  uint32  networkEnv  = 5;
    optional  uint32  mxPackSize  = 6;
    optional  uint64  newMsgId  = 7;
}

message DownloadVideoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  msgId  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    required  SKBuiltinBuffer_t  data  = 5;
    optional  uint64  newMsgId  = 6;
}

message DownloadVoiceRequest {
    required  uint32  msgId  = 1;
    required  uint32  offset  = 2;
    required  uint32  length  = 3;
    optional  string  clientMsgId  = 4;
    required  BaseRequest  baseRequest  = 5;
    optional  uint64  newMsgId  = 6;
    optional  string  chatRoomName  = 7;
    optional  uint64  masterBufId  = 8;
}

message DownloadVoiceResponse {
    required  uint32  msgId  = 1;
    required  uint32  offset  = 2;
    required  uint32  length  = 3;
    required  uint32  voiceLength  = 5;
    optional  string  clientMsgId  = 6;
    required  SKBuiltinBuffer_t  data  = 7;
    required  uint32  endFlag  = 8;
    required  BaseResponse  baseResponse  = 9;
    optional  uint32  cancelFlag  = 10;
    optional  uint64  newMsgId  = 11;
}

message DrawLotteryInfo {
    optional  MiniAppInfo  miniAppInfo  = 1;
    optional  string  url  = 2;
    optional  string  animationWording  = 3;
    optional  string  animationWordingColor  = 4;
    optional  uint32  opType  = 5;
    optional  string  afterAnimationWording  = 6;
    optional  string  afterAnimationWordingColor  = 7;
}

message DrawLotteryRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  drawLotteryParams  = 2;
    optional  uint32  drayLotteryType  = 3;
}

message DrawLotteryResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  ExposureInfo  exposureInfo  = 4;
}

message DynamicColor {
    optional  int64  normalColor  = 1;
    optional  int64  darkModeColor  = 2;
}

message DynamicDataRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  key  = 2;
    optional  string  appid  = 3;
    optional  string  query  = 4;
    optional  uint32  scene  = 5;
    optional  string  url  = 6;
}

message DynamicDataResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  data  = 2;
    optional  uint32  interval  = 3;
}

message ECDHKey {
    required  int32  nid  = 1;
    required  SKBuiltinBuffer_t  key  = 2;
}

message EmojiInfo {
    required  string  md5  = 1;
    optional  string  url  = 2;
    optional  string  thumbUrl  = 3;
    optional  string  designerId  = 4;
    optional  string  encryptUrl  = 5;
    optional  string  aesKey  = 6;
    optional  string  productId  = 7;
    optional  string  externUrl  = 8;
    optional  string  externMd5  = 9;
    optional  string  activityId  = 10;
    optional  string  attachedText  = 11;
    optional  string  attachedTextColor  = 12;
    optional  string  lensId  = 13;
}

message EmojiTag {
    required  uint32  tagId  = 1;
    required  string  tagDesc  = 2;
}

message EmojiTextAntiSpamRequest {
    required  string  text  = 1;
}

message EmojiTextAntiSpamResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  shouldBlock  = 2;
    optional  string  blockType  = 3;
    optional  string  matchRule  = 4;
}

message EmojiUploadInfoReq {
    optional  string  md5  = 1;
    required  int32  startPos  = 2;
    required  int32  totalLen  = 3;
    required  SKBuiltinBuffer_t  emojiBuffer  = 4;
    required  int32  type  = 5;
    optional  string  toUserName  = 6;
    optional  string  externXml  = 7;
    optional  string  report  = 8;
    optional  string  clientMsgId  = 9;
    optional  string  msgSource  = 10;
    optional  int32  newXmlFlag  = 11;
    optional  string  sendMsgTicket  = 12;
}

message EmojiUploadInfoResp {
    required  int32  ret  = 1;
    required  int32  startPos  = 2;
    required  int32  totalLen  = 3;
    optional  string  md5  = 4;
    required  uint32  msgId  = 5;
    optional  uint64  newMsgId  = 6;
}

message EmojiUploadRequest {
    repeated  UploadEmojiInfoReq  emojiItem  = 1;
    optional  uint32  reqTime  = 2;
    optional  bool  addToTop  = 3;
    optional  uint32  pannelType  = 4;
    optional  uint32  scene  = 5;
}

message EmojiUploadResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  UploadEmojiInfoResp  emojiItem  = 2;
}

message EmotionActivity {
    optional  string  name  = 1;
    optional  string  iconUrl  = 2;
    optional  string  h5Url  = 3;
    optional  int32  cacheTime  = 4;
}

message EmotionBanner {
    required  EmotionSummary  bannerSummary  = 1;
    required  EmotionBannerImg  bannerImg  = 2;
}

message EmotionBannerImg {
    optional  string  imgUrl  = 1;
    required  uint32  width  = 2;
    required  uint32  height  = 3;
    optional  string  stripUrl  = 4;
}

message EmotionBannerSet {
    required  EmotionBannerImg  bannerImg  = 1;
    optional  string  title  = 2;
    optional  string  locateUrl  = 3;
    required  uint32  id  = 4;
    optional  string  secondUrl  = 5;
    optional  uint32  setType  = 6;
    optional  string  iconUrl  = 7;
    optional  string  desc  = 8;
    optional  string  productId  = 9;
    optional  string  tagUrl  = 10;
}

message EmotionCDNUrl {
    optional  string  url  = 1;
    optional  string  aesKey  = 2;
    required  uint32  fileSize  = 3;
}

message EmotionCell {
    optional  string  cellTitle  = 1;
    required  uint32  reqType  = 2;
    required  uint32  position  = 3;
    optional  string  iconUrl  = 4;
    optional  string  tagUrl  = 5;
}

message EmotionDesc {
    optional  string  md5  = 1;
    required  uint32  count  = 2;
    repeated  LangDesc  list  = 3;
}

message EmotionDesigner {
    optional  string  title  = 1;
    optional  string  smallImgUrl  = 2;
    optional  string  bigImgUrl  = 3;
    optional  string  desc  = 4;
    optional  string  motto  = 5;
}

message EmotionDetail {
    optional  string  productId  = 1;
    optional  string  iconUrl  = 2;
    optional  string  packName  = 3;
    optional  string  packDesc  = 4;
    optional  string  packAuthInfo  = 5;
    optional  string  packPrice  = 6;
    required  uint32  packType  = 7;
    required  uint32  packFlag  = 8;
    required  uint32  packThumbCnt  = 9;
    repeated  SKBuiltinString_t  packThumbList  = 10;
    optional  string  coverUrl  = 11;
    required  uint32  packExpire  = 12;
    optional  string  packCopyright  = 13;
    optional  string  priceNum  = 14;
    optional  string  priceType  = 15;
    optional  string  panelUrl  = 16;
    optional  string  consumeProductId  = 17;
    optional  uint32  thumbExtCount  = 18;
    repeated  PackThumbExt  thumbExtList  = 19;
    optional  int32  version  = 20;
    optional  string  timeLimitStr  = 21;
    optional  string  shareDesc  = 22;
    optional  string  oldRedirectUrl  = 23;
    optional  EmotionDesigner  emotionDesigner  = 24;
    optional  PersonalDesigner  personalDesigner  = 25;
}

message EmotionDonor {
    required  string  headUrl  = 1;
}

message EmotionPrice {
    required  string  label  = 1;
    required  string  number  = 2;
    required  string  type  = 3;
}

message EmotionReward {
    required  string  begWord  = 1;
    required  string  begPicUrl  = 2;
    required  string  thanksPicUrl  = 3;
    optional  string  magicUrl  = 4;
    optional  string  magicWord  = 5;
    optional  uint32  magicExpire  = 6;
    optional  uint32  magicLimit  = 7;
    optional  string  magicMd5  = 8;
    optional  uint32  flag  = 9;
}

message EmotionSummary {
    optional  string  productId  = 1;
    optional  string  iconUrl  = 2;
    optional  string  packName  = 3;
    optional  string  packDesc  = 4;
    optional  string  packAuthInfo  = 5;
    optional  string  packPrice  = 6;
    required  uint32  packType  = 7;
    required  uint32  packFlag  = 8;
    optional  string  coverUrl  = 9;
    required  uint32  packExpire  = 10;
    optional  string  packCopyright  = 11;
    optional  uint32  timestamp  = 12;
    optional  string  panelUrl  = 13;
    optional  string  priceNum  = 14;
    optional  string  priceType  = 15;
    optional  string  sendInfo  = 16;
    optional  string  timeLimitStr  = 17;
    optional  string  introduce  = 18;
    optional  string  tagUri  = 19;
    optional  string  exptDesc  = 20;
}

message EncashIncomeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  ctxBuff  = 2;
    optional  bytes  sign  = 3;
    optional  string  token  = 4;
    optional  string  reportSessionId  = 101;
}

message EncashIncomeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  EncashResultPageInfo  resultPageInfo  = 2;
    optional  RetryInfo  retryInfo  = 100;
}

message EncashResultPageInfo {
    optional  uint64  expectedArrivalTime  = 1;
    optional  string  arrivalWording  = 2;
}

message EncryptCheckResUpdateAesReqData {
    required  BaseRequest  baseRequest  = 1;
    required  CheckResUpdateRequest  checkResUpdateReq  = 2;
}

message EncryptCheckResUpdateReqData {
    required  EncryptCheckResUpdateRsaReqData  rsaReqData  = 1;
    required  EncryptCheckResUpdateAesReqData  aesReqData  = 2;
}

message EncryptCheckResUpdateRsaReqData {
    required  SKBuiltinBuffer_t  randomEncryKey  = 1;
}

message EncryptLocation {
    required  string  encryptLatitude  = 1;
    required  string  encryptLongitude  = 2;
}

message EncryptPRConfigAesReqData {
    required  BaseRequest  baseRequest  = 1;
    required  PRConfigRequest  prconfigReq  = 2;
}

message EncryptPRConfigReqData {
    required  EncryptPRConfigRsaReqData  rsaReqData  = 1;
    required  EncryptPRConfigAesReqData  aesReqData  = 2;
}

message EncryptPRConfigRsaReqData {
    required  SKBuiltinBuffer_t  randomEncryKey  = 1;
}

message EnterTalkRoomReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  toUsername  = 2;
    optional  uint32  scene  = 3;
}

message EnterTalkRoomResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    required  int32  micSeq  = 4;
    required  int32  memberNum  = 5;
    repeated  TalkRoomMember  memberList  = 6;
    required  int32  myRoomMemberId  = 7;
    optional  int32  addrCount  = 8;
    repeated  TalkRelayAddr  addrList  = 9;
}

message EnterTempSessionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUserName  = 2;
    optional  uint32  source  = 3;
    optional  bytes  sessionFrom  = 4;
    optional  bytes  extInfo  = 5;
}

message EnterTempSessionResponse {
    required  BaseResponse  baseResponse  = 1;
}

message EnterTimeItem {
    optional  uint32  enterTimeScene  = 1;
    optional  string  enterTimeText  = 2;
    optional  string  enterTimeOtherText  = 3;
    optional  uint32  isSupported  = 4;
    optional  string  color  = 5;
}

message EntranceRedDot {
    optional  uint32  redDotType  = 1;
    optional  string  appId  = 2;
    optional  uint32  resourceTypeBits  = 3;
    optional  string  noticeId  = 4;
    optional  uint32  msgType  = 5;
}

message EvaluateOrderRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  transId  = 2;
    optional  string  appId  = 3;
    required  int32  value  = 4;
    optional  ActionLocation  actionLocation  = 5;
}

message EvaluateOrderResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message Event {
    required  EncryptLocation  location  = 1;
    required  uint32  bizId  = 2;
    required  uint32  action  = 3;
    required  uint32  payScene  = 4;
    required  uint32  payChannel  = 5;
    required  string  uuid  = 6;
    required  uint64  timestamp  = 7;
    required  uint32  bizScene  = 8;
}

message ExchangeEmotionPackRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    optional  string  seriesId  = 3;
    optional  uint32  isAutomatic  = 4;
    optional  uint32  scene  = 5;
}

message ExchangeEmotionPackResponse {
    required  BaseResponse  baseResponse  = 1;
    required  EmotionCDNUrl  downloadInfo  = 2;
}

message ExitReportReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reportJson  = 2;
}

message ExitReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message ExitTalkRoomReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  string  toUsername  = 4;
    optional  uint32  scene  = 5;
}

message ExitTalkRoomResp {
    required  BaseResponse  baseResponse  = 1;
}

message ExitTrackRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  trackRoomId  = 2;
    optional  uint32  scene  = 3;
}

message ExitTrackRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  retMsg  = 2;
}

message ExpItem {
    required  uint32  expid  = 1;
    required  uint32  priority  = 2;
}

message ExposeItem {
    required  uint32  count  = 1;
    repeated  uint32  uinList  = 2[packed=true];
    repeated  uint32  timeList  = 3[packed=true];
    repeated  uint32  countList  = 4[packed=true];
}

message ExposeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  uint32  scene  = 3;
    required  uint32  type  = 4;
    optional  string  albumPhotoId  = 5;
    optional  uint32  albumType  = 6;
    optional  uint64  snsId  = 7;
    optional  string  exposeContent  = 8;
}

message ExposeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ExposeWithProofReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  chatname  = 2;
    required  uint32  exposetype  = 3;
    repeated  ProofItem  list  = 4;
    optional  uint32  scene  = 5;
    optional  string  supplement  = 6;
    repeated  ProofImgItem  imglist  = 7;
    optional  string  htmlContent  = 8;
}

message ExposeWithProofResp {
    required  BaseResponse  baseResponse  = 1;
}

message ExposureInfo {
    repeated  SingleExposureInfo  singleExposureInfoList  = 1;
    optional  uint32  isQueryOthers  = 2;
    optional  string  drawLotteryParams  = 3;
    optional  uint32  isShowBtn  = 4;
    optional  BtnInfo  btnInfo  = 5;
    optional  string  exposureInfoModifyParams  = 6;
    optional  uint32  userOpertaionType  = 7;
    optional  uint32  isShowLayer  = 8;
    optional  LayerInfo  layerInfo  = 9;
    optional  string  backgroundImgWhole  = 10;
    optional  DrawLotteryInfo  drawLotteryInfo  = 11;
    optional  FollowCardBDMchInfo  followCardbdMchInfo  = 12;
}

message ExposureInfoModifyRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  exposureInfoModifyParams  = 2;
}

message ExposureInfoModifyResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    repeated  SingleExposureInfo  singleExposureInfoList  = 4;
    optional  uint32  isShowBtn  = 5;
    optional  BtnInfo  btnInfo  = 6;
}

message Express {
    optional  string  name  = 1;
    optional  uint32  price  = 2;
    optional  string  priceType  = 3;
    optional  uint32  id  = 4;
}

message ExptAppDeviceType {
    optional  string  manufacturer  = 1;
    optional  string  model  = 2;
    optional  string  osApi  = 3;
    optional  string  cpu  = 4;
}

message ExptAppItem {
    required  uint32  exptId  = 1;
    required  uint32  groupId  = 2;
    required  uint32  exptSequence  = 3;
    optional  string  exptContent  = 4;
    optional  uint32  exptType  = 5;
    optional  string  exptCheckSum  = 6;
    optional  uint32  reportFrequency  = 7;
}

message ExptAppReportItem {
    required  uint32  exptId  = 1;
    required  uint32  groupId  = 2;
    required  uint32  exptSequence  = 3;
    required  uint32  count  = 4;
}

message ExptAppResponseitem {
    optional  uint32  exptId  = 1;
    optional  uint32  intervalSecond  = 2;
    optional  uint32  pullsecond  = 3;
}

message ExptDebugReportRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  type  = 2;
    required  uint32  scene  = 3;
    required  uint32  key  = 4;
    required  string  content  = 5;
}

message ExptDebugReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ExptItem {
    required  uint32  exptId  = 1;
    required  uint32  groupId  = 2;
    required  uint32  exptSequence  = 3;
    optional  string  exptContent  = 4;
    optional  uint32  exptType  = 5;
    optional  string  exptCheckSum  = 6;
}

message ExtDeviceControlRequest {
    optional  uint32  opType  = 1;
    optional  uint32  lockDevice  = 2;
}

message ExtDeviceControlResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ExtDeviceLoginConfirmCancelRequest {
    required  string  loginUrl  = 1;
}

message ExtDeviceLoginConfirmCancelResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ExtDeviceLoginConfirmErrorRet {
    optional  uint32  iconType  = 1;
    optional  string  contentStr  = 2;
}

message ExtDeviceLoginConfirmExpiredRet {
    optional  uint32  iconType  = 1;
    optional  string  contentStr  = 2;
    optional  string  buttonStr  = 3;
}

message ExtDeviceLoginConfirmGetRequest {
    required  string  loginUrl  = 1;
    optional  string  deviceName  = 2;
}

message ExtDeviceLoginConfirmGetResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  ExtDeviceLoginConfirmOKRet  okret  = 2;
    optional  ExtDeviceLoginConfirmErrorRet  errorRet  = 3;
    optional  ExtDeviceLoginConfirmExpiredRet  expiredRet  = 4;
    optional  string  deviceNameStr  = 5;
    optional  uint32  loginClientVersion  = 6;
    optional  uint32  funcCtrl  = 7;
}

message ExtDeviceLoginConfirmOKRequest {
    required  string  loginUrl  = 1;
    optional  string  sessionList  = 2;
    repeated  string  unReadChatContactList  = 3;
    optional  bool  syncMsg  = 4;
    optional  uint32  loginScene  = 5;
    optional  KidsAcctInfo  kidsAcct  = 6;
}

message ExtDeviceLoginConfirmOKResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  msgContextPubKey  = 2;
}

message ExtDeviceLoginConfirmOKRet {
    optional  uint32  iconType  = 1;
    optional  string  contentStr  = 2;
    optional  string  buttonOkStr  = 3;
    optional  string  buttonCancelStr  = 4;
    optional  uint32  reqSessionLimit  = 5;
    optional  uint32  confirmTimeOut  = 6;
    optional  string  loginedDevTip  = 7;
    optional  string  titleStr  = 8;
    optional  string  warningStr  = 9;
    optional  string  usageLink  = 10;
}

message ExtItem {
    optional  string  key  = 1;
    optional  ItemType  value  = 2;
}

message ExtRegRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  nickName  = 2;
    optional  string  bindMobile  = 3;
    optional  uint32  regMode  = 4;
    optional  uint32  hasHeadImg  = 5;
    optional  string  regSessionId  = 6;
    optional  string  privacyPolicyCountry  = 7;
    optional  string  extRegUrl  = 8;
    optional  string  headImgFileId  = 9;
    optional  string  headImgAesKey  = 10;
}

message ExtRegResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  uin  = 2;
    optional  string  userName  = 3;
    optional  uint32  status  = 4;
    optional  uint32  serverTime  = 5;
    optional  string  openId  = 6;
}

message ExtSession {
    required  uint32  sessionType  = 1;
    required  SKBuiltinBuffer_t  sessionKey  = 2;
    required  SKBuiltinBuffer_t  serverId  = 3;
}

message ExtStats {
    optional  uint64  objectId  = 1;
    optional  string  finderUsername  = 2;
    optional  string  sessionBuffer  = 3;
    optional  bytes  feedActionValue  = 4;
    optional  uint32  videoDuration  = 5;
    optional  uint32  mediaType  = 6;
}

message F2FDynamicItems {
    required  string  key  = 1;
    required  string  value  = 2;
}

message F2FMiniProgramConfirmRcvrReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  confirmToken  = 2;
    optional  string  appid  = 3;
}

message F2FMiniProgramConfirmRcvrResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  title  = 4;
    optional  string  qrcode  = 5;
    optional  string  headImg  = 6;
    optional  string  distinguishWording  = 7;
    optional  string  rcvrInfo  = 8;
    optional  string  okButtonWording  = 9;
}

message FBFriend {
    required  uint64  id  = 1;
    optional  string  name  = 2;
    required  uint32  imgKey  = 3;
}

message FFHBAuthReceiveResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  sendId  = 4;
    optional  string  nativeUrl  = 5;
    optional  string  sendUserName  = 6;
    optional  string  externMess  = 7;
}

message FFHBClearReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  sendId  = 2;
    optional  double  latitude  = 3;
    optional  double  longitude  = 4;
}

message FFHBClearResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message FFHBInvalidateShareUrlReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  shareUrl  = 2;
    optional  double  latitude  = 3;
    optional  double  longitude  = 4;
}

message FFHBInvalidateShareUrlResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message FFHBOpenReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  shareUrl  = 2;
    optional  string  city  = 3;
    optional  string  province  = 4;
    optional  string  latitude  = 5;
    optional  string  longitude  = 6;
    optional  uint64  locationTimestamp  = 7;
    optional  double  safeLatitude  = 8;
    optional  double  safeLongitude  = 9;
}

message FFHBOpenResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  errorType  = 4;
    optional  string  sendId  = 5;
    optional  int32  hbStatus  = 6;
    optional  int32  receiveStatus  = 7;
    optional  string  sendUserName  = 8;
    optional  uint32  amount  = 9;
    optional  RealNameInfo  realNameInfo  = 10;
    optional  int32  jumpChange  = 11;
    optional  string  changeUrl  = 12;
    optional  string  changeWording  = 13;
    optional  string  externMess  = 14;
    optional  int32  isLucky  = 15;
    optional  string  sendHeadImage  = 16;
    optional  string  sendNickName  = 17;
    optional  InterceptWin  interceptWin  = 18;
}

message FFHBQueryDoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  double  latitude  = 2;
    optional  double  longitude  = 3;
    optional  uint64  timestamp  = 4;
}

message FFHBQueryDoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  sendId  = 4;
    optional  string  shareUrl  = 5;
    optional  uint32  surplusNum  = 6;
    optional  string  clearTips  = 7;
    optional  string  clearActionTips  = 8;
}

message FFHBRequestReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  totalNum  = 2;
    optional  uint32  totalAmount  = 3;
    optional  int32  hbType  = 4;
    optional  uint32  perValue  = 5;
    optional  double  latitude  = 6;
    optional  double  longitude  = 7;
}

message FFHBRequestResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  sendId  = 4;
    optional  string  reqkey  = 5;
    optional  string  idSign  = 6;
    optional  InterceptWin  interceptWin  = 7;
}

message FPFreshRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  randomkey  = 2;
    optional  bytes  spamBuff  = 3;
}

message FPFreshResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  spamBuff  = 2;
}

message FPGetRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  randomkey  = 2;
    optional  bytes  spamBuff  = 3;
}

message FPGetResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  spamBuff  = 2;
}

message FPInitRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  randomkey  = 2;
    optional  bytes  spamBuff  = 3;
}

message FPInitResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  spamBuff  = 2;
}

message FaceBookAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opType  = 2;
    optional  string  accessToken  = 3;
    optional  string  randomEncryKey  = 4;
}

message FaceBookAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  fbuserId  = 2;
    optional  string  fbuserName  = 3;
}

message FaceIdentifyPrePageReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  jsonStr  = 3;
    optional  uint32  source  = 4;
    optional  uint32  checkAliveType  = 5;
}

message FaceIdentifyPrePageResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  KeyValueItem  itemList  = 2;
    optional  PromptButton  prompt  = 3;
    optional  string  bizNickName  = 4;
    optional  string  headerPromptWording  = 5;
    optional  string  feedbackUrl  = 6;
    optional  string  complainUrl  = 7;
    optional  float  lightThreshold  = 8;
    optional  uint32  checkAliveType  = 9;
    optional  string  businessTips  = 10;
    optional  string  bizHeadUrl  = 11;
}

message FaceIdentifyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint64  bioid  = 3;
    optional  string  jsonStr  = 4;
    optional  string  cdnAesKey  = 5;
    optional  string  pictureCdnId  = 6;
    optional  uint32  source  = 7;
    optional  uint32  operateCode  = 8;
    optional  uint32  checkAliveType  = 9;
    optional  uint32  light  = 10;
    optional  uint32  uploadVideo  = 11;
}

message FaceIdentifyResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  identifyId  = 2;
    optional  bool  canRetry  = 3;
}

message FaceVideoBindBioIdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  bioid  = 2;
    optional  string  videoCdnId  = 3;
    optional  string  appid  = 4;
    optional  string  cdnAesKey  = 5;
}

message FaceVideoBindBioIdResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FacingCreateChatRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    optional  string  passWord  = 3;
    required  float  longitude  = 4;
    required  float  latitude  = 5;
    required  int32  precision  = 6;
    optional  string  macAddr  = 7;
    optional  string  cellId  = 8;
    optional  int32  gpssource  = 9;
    optional  string  ticket  = 10;
}

message FacingCreateChatRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ticket  = 2;
    required  uint32  memberCount  = 3;
    repeated  FacingMember  memberList  = 4;
    optional  string  chatRoomName  = 5;
}

message FacingMember {
    optional  string  userName  = 1;
    optional  string  encodeUserName  = 2;
    optional  string  nickName  = 3;
    optional  string  smallImgUrl  = 4;
    required  uint32  status  = 5;
}

message FaultControlInfo {
    optional  NewDocumentItem  banner  = 1;
    optional  int32  confirmButtonDisable  = 2;
    optional  int32  autoShowCardPanel  = 3;
}

message FavBackGroundResourceInfo {
    optional  string  displayName  = 1;
    optional  string  fontColor  = 2;
    optional  float  fontAlpha  = 3;
    optional  string  logoColor  = 4;
    optional  float  logoAlpha  = 5;
    optional  string  backgroundColor  = 6;
    optional  float  backgroundAlpha  = 7;
    optional  int32  colorType  = 8;
    optional  int32  reportId  = 9;
}

message FavCDNItem {
    optional  string  dataId  = 1;
    optional  string  fullMd5  = 2;
    optional  string  head256Md5  = 3;
    required  uint32  fullSize  = 4;
    optional  string  cdnurl  = 5;
    optional  string  aeskey  = 6;
    required  int32  encryVer  = 7;
    optional  string  videoId  = 8;
    required  int32  status  = 9;
    required  int32  dataStatus  = 10;
}

message FavFontResourceInfo {
    optional  string  displayName  = 1;
    optional  string  familyName  = 2;
    optional  string  url  = 3;
    optional  string  md5  = 4;
    optional  int32  reportId  = 5;
}

message FavIDAndObject {
    optional  uint32  favId  = 1;
    optional  string  object  = 2;
}

message FavObject {
    required  uint32  favId  = 1;
    required  int32  status  = 2;
    optional  string  object  = 3;
    required  uint32  flag  = 4;
    required  uint32  updateTime  = 5;
    required  uint32  updateSeq  = 6;
}

message FavOfficialItemReq {
    optional  string  itemBuff  = 1;
}

message FavOfficialItemResp {
    optional  BaseResponse  baseResponse  = 1;
}

message FavPhotoInfo {
    optional  string  md5  = 1;
    optional  string  aesKey  = 2;
    optional  string  fileId  = 3;
}

message FavResendObject {
    optional  uint32  favId  = 1;
    repeated  FileIdAndStatus  fileIdAndStatusList  = 2;
}

message FavSecurityRequest {
    optional  int32  opType  = 1;
    optional  string  text  = 2;
    repeated  FavPhotoInfo  photoMd5List  = 3;
    optional  FavPhotoInfo  bigPhotoMd5  = 4;
}

message FavSecurityResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  int32  securityResult  = 2;
}

message FavSyncRequest {
    required  uint32  selector  = 1;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
}

message FavSyncResponse {
    required  int32  ret  = 1;
    required  CmdList  cmdList  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
    required  uint32  continueFlag  = 4;
}

message FavorComposeInfo {
    optional  string  favorComposeId  = 1;
    repeated  FavorInfo  favorInfoList  = 2;
    optional  uint64  showFavorAmount  = 3;
    optional  uint64  showPayAmount  = 4;
    optional  string  totalFavorAmount  = 5;
    optional  string  favorDesc  = 6;
    optional  uint64  composeSortFlag  = 7;
    optional  string  extendStr  = 8;
}

message FavorInfo {
    optional  uint64  favType  = 1;
    optional  uint64  favSubType  = 2;
    optional  uint64  favProperty  = 3;
    optional  string  favorTypeDesc  = 4;
    optional  uint64  favId  = 5;
    optional  string  favName  = 6;
    optional  string  favDesc  = 7;
    optional  string  favorUseManual  = 8;
    optional  string  favorRemarks  = 9;
    optional  string  favPrice  = 10;
    optional  string  realFavFee  = 11;
    optional  uint32  favScopeType  = 12;
    optional  string  businessReceiptNo  = 13;
    optional  uint32  unavailable  = 14;
    optional  string  extendStr  = 15;
}

message FeedBackEntrance {
    required  string  title  = 1;
    required  string  webUrl  = 2;
}

message Feeds {
    optional  FeedsInfo  feedsInfo  = 1;
    optional  bool  showNearest  = 2;
    optional  uint32  hotPlayType  = 3;
}

message FeedsInfo {
    required  string  title  = 1;
    required  AppItem  appItem  = 2;
    repeated  FriendFeedItem  friendFeedList  = 3;
    optional  string  noticeId  = 4;
}

message FestivalHongBaoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  cgiCmd  = 2;
    optional  uint32  outPutType  = 3;
    required  SKBuiltinBuffer_t  reqText  = 4;
    optional  bytes  sendKey  = 5;
    optional  uint64  reqTime  = 6;
    optional  uint32  subscribe  = 7;
}

message FestivalHongBaoRes {
    required  BaseResponse  baseResponse  = 1;
    optional  SKBuiltinBuffer_t  retText  = 2;
    required  int32  platRet  = 3;
    optional  string  platMsg  = 4;
    required  int32  cgiCmdid  = 5;
    optional  int32  errorType  = 6;
    optional  string  errorMsg  = 7;
}

message FetchDataRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  FetchDataRequest_FetchItem  fetchItem  = 2;
}

message FetchDataRequest_FetchItem {
    optional  string  username  = 1;
    optional  uint32  fetchType  = 2;
    optional  FetchDataRequest_FetchItem_LaunchParam  preFetchParam  = 3;
    optional  string  token  = 4;
    optional  string  appid  = 5;
}

message FetchDataRequest_FetchItem_LaunchParam {
    optional  string  path  = 1;
    optional  string  query  = 2;
    optional  uint32  scene  = 3;
}

message FetchDataResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FetchDataResponse_DataItem  dataItem  = 2;
}

message FetchDataResponse_DataItem {
    optional  string  username  = 1;
    optional  string  data  = 2;
    optional  int32  errcode  = 3;
}

message FieldAreaInfo {
    repeated  TableCellViewData  fieldInfo  = 1;
}

message FileIdAndStatus {
    optional  string  dataId  = 1;
    optional  uint32  isThumb  = 2;
    optional  uint32  status  = 3;
}

message FileIndex {
    required  string  rid  = 1;
    required  uint64  relativeOffset  = 2;
    required  uint32  size  = 3;
    required  string  mimeType  = 4;
}

message FillFinderContactOption {
    optional  uint32  clientVersion  = 1;
    optional  uint32  deviceTypeId  = 2;
    optional  uint32  userVer  = 3;
    optional  bool  forceCalcRepostCount  = 4;
    optional  bool  isTeenagerMode  = 5;
    optional  uint32  teenagerSetting  = 6;
    optional  bool  hideLiveFlag  = 7;
}

message FinancialInfo {
    optional  string  title  = 1;
    optional  string  exitWording  = 2;
    repeated  FinancialInfoItem  infoList  = 3;
    optional  string  desc  = 4;
}

message FinancialInfoItem {
    optional  string  logoUrl  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
}

message FinderAcceptLiveMicRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  finderUsername  = 5;
    optional  uint64  applyLiveId  = 6;
    optional  uint64  applyObjectId  = 7;
    optional  string  applyUsername  = 8;
    optional  string  clientMsgId  = 9;
    optional  string  liveMicId  = 10;
    optional  string  applyMicSdkUserId  = 11;
    optional  uint32  businessType  = 12;
    optional  uint32  scene  = 13;
    optional  string  objectNonceId  = 14;
    optional  string  applyObjectNonceId  = 15;
}

message FinderAcceptLiveMicResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderAdLiveNoticeRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  noticeId  = 2;
    optional  string  finderUsername  = 3;
}

message FinderAdLiveNoticeResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 2;
    optional  uint32  refreshInterval  = 3;
}

message FinderAdUserPageRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  uint64  maxId  = 3;
    optional  string  firstPageMd5  = 4;
    optional  string  finderUsername  = 5;
    optional  uint32  needFansCount  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
    optional  bytes  lastBuffer  = 8;
    optional  uint32  enterType  = 9;
    optional  FinderClientStatus  status  = 10;
    optional  uint64  firstObjectId  = 11;
    optional  string  encryptedObjectid  = 12;
}

message FinderAdUserPageResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  string  firstPageMd5  = 3;
    optional  FinderUserInfo  finderUserInfo  = 4;
    optional  FinderContact  contact  = 5;
    optional  uint32  feedsCount  = 6;
    optional  uint32  continueFlag  = 7;
    optional  FinderNicknameVerifyInfo  verifyInfo  = 8;
    optional  uint32  fansCount  = 9;
    optional  bytes  lastBuffer  = 10;
    optional  uint32  friendFollowCount  = 11;
    repeated  string  userTags  = 12;
    optional  uint32  originalEntranceFlag  = 13;
    optional  OriginalEntranceInfo  entranceInfo  = 14;
    optional  FinderPreloadInfo  preloadInfo  = 15;
    repeated  FinderObject  liveObjects  = 16;
    optional  uint32  privateLock  = 17;
    optional  string  relatedStreamWording  = 18;
}

message FinderApplyLiveMicRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  clientMsgId  = 5;
    optional  string  finderUsername  = 6;
    optional  string  invitedUsername  = 7;
    optional  uint32  scene  = 8;
    optional  uint32  businessType  = 9;
}

message FinderApplyLiveMicResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  liveMicId  = 2;
}

message FinderApplyOriginalRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  finderUsername  = 2;
    optional  uint32  optype  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderApplyOriginalResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderContact  selfContact  = 2;
    optional  OriginalEntranceInfo  entranceInfo  = 5;
}

message FinderAttachment {
    optional  uint32  type  = 1;
    optional  FinderVideoAttachment  video  = 2;
}

message FinderAttachmentList {
    repeated  FinderAttachment  attachments  = 1;
}

message FinderAudienceReserveLiveRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  anchorFinderUsername  = 2;
    optional  string  noticeId  = 3;
    optional  uint32  optype  = 4;
}

message FinderAudienceReserveLiveResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderAuthInfo {
    optional  string  realName  = 1;
    optional  uint32  authIconType  = 2;
    optional  string  authProfession  = 3;
    optional  FinderContact  authGuarantor  = 4;
    optional  string  detailLink  = 5;
    optional  string  appName  = 6;
    optional  string  authIconUrl  = 7;
    optional  uint32  customerType  = 8;
    optional  uint32  authVerifyIdentity  = 9;
}

message FinderBanLiveCommentRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  audienceUsername  = 5;
    optional  uint32  scene  = 6;
    optional  bool  enable  = 7;
    optional  string  objectNonceId  = 8;
}

message FinderBanLiveCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderBaseRequest {
    optional  uint32  userver  = 1;
    optional  uint32  scene  = 2;
    optional  bytes  extSpamInfo  = 3;
    optional  uint32  exptFlag  = 4;
    optional  ClientContextInfo  ctxInfo  = 5;
    optional  uint64  requestId  = 6;
}

message FinderBatchGetLiveInfoReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  uint64  objectIds  = 3;
    optional  float  longitude  = 4;
    optional  float  latitude  = 5;
}

message FinderBatchGetLiveInfoResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  uint32  refreshInterval  = 3;
}

message FinderBatchGetObjectAsyncLoadInfoRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  FinderObjectUidUnit  objectUidList  = 3;
}

message FinderBatchGetObjectAsyncLoadInfoResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObjectAsyncLoadInfo  objectAsyncInfoMap  = 2;
    repeated  FinderContactAsyncLoadInfo  contactAsyncInfoMap  = 3;
}

message FinderCategoryInfo {
    optional  string  categoryName  = 1;
}

message FinderCategoryRecommend {
    repeated  FinderCategoryInfo  categoryInfo  = 1;
}

message FinderCheckExpireInfo {
    optional  uint32  checkExpireValid  = 1;
    optional  uint32  checkExpireIntervalSec  = 2;
    optional  uint32  checkExpireMaxCount  = 3;
}

message FinderClientStatus {
    optional  int32  netType  = 1;
    optional  string  netName  = 2;
    optional  uint32  bandwidthKbps  = 3;
    repeated  FinderDownloadInfo  lastVideosDownloadInfo  = 4;
    optional  string  deviceModel  = 5;
    optional  string  deviceBrand  = 6;
    optional  string  osName  = 7;
    optional  string  osVersion  = 8;
    repeated  string  supportedCodingFormat  = 9;
}

message FinderCloseLiveMicRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  finderUsername  = 5;
    optional  string  clientMsgId  = 6;
    optional  string  liveMicId  = 7;
    optional  string  micSdkUserId  = 8;
    optional  uint32  businessType  = 9;
    optional  uint32  scene  = 10;
    optional  string  objectNonceId  = 11;
}

message FinderCloseLiveMicResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderCloseLiveReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  finderUsername  = 3;
    optional  uint64  objectId  = 4;
    optional  string  objectNonceId  = 5;
    optional  uint32  scene  = 6;
}

message FinderCloseLiveResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  liveDurationSeconds  = 2;
    optional  uint32  liveAudiencesNum  = 3;
    optional  uint32  liveBeLikedNum  = 4;
    optional  uint32  liveNewFansNum  = 5;
}

message FinderCmdItem {
    optional  uint32  cmdId  = 1;
    optional  bytes  cmdBuf  = 2;
}

message FinderCmdRet {
    optional  uint32  cmdId  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bytes  retBuf  = 4;
}

message FinderCollectUnreadRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  FinderUnreadItem  unreadItems  = 3;
}

message FinderCollectUnreadResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderCommentInfo {
    optional  string  username  = 1;
    optional  string  nickname  = 2;
    optional  string  content  = 3;
    optional  uint64  commentId  = 4;
    optional  uint64  replyCommentId  = 5;
    optional  uint32  deleteFlag  = 6;
    optional  string  headUrl  = 7;
    repeated  FinderCommentInfo  levelTwoComment  = 8;
    optional  uint64  createtime  = 9;
    optional  string  replyNickname  = 10;
    optional  string  displayidDiscarded  = 11;
    optional  uint32  likeFlag  = 12;
    optional  uint32  likeCount  = 13;
    optional  uint64  displayid  = 14;
    optional  uint32  expandCommentCount  = 15;
    optional  bytes  lastBuffer  = 16;
    optional  uint32  continueFlag  = 17;
    optional  uint32  displayFlag  = 18;
    optional  uint32  blacklistFlag  = 19;
    optional  string  replyContent  = 20;
    optional  string  replyUsername  = 21;
    optional  string  clientId  = 22;
    optional  uint32  upContinueFlag  = 23;
    optional  uint32  replyBlacklistFlag  = 24;
    optional  uint32  extFlag  = 25;
    optional  uint32  unreadFlag  = 26;
    optional  FinderContactMsgInfo  msgInfo  = 27;
}

message FinderCommentRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  uint64  objectid  = 3;
    optional  string  content  = 4;
    optional  uint64  commentId  = 5;
    optional  uint64  replyCommentId  = 6;
    optional  string  replyUsername  = 7;
    optional  uint32  optype  = 8;
    optional  string  clientid  = 9;
    optional  uint64  rootCommentId  = 10;
    optional  uint32  scene  = 11;
    optional  string  objectNonceId  = 12;
    optional  FinderBaseRequest  finderBasereq  = 13;
    optional  string  sessionBuffer  = 14;
    optional  uint32  commentScene  = 15;
}

message FinderCommentResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  commentId  = 2;
    optional  string  clientid  = 3;
    optional  FinderObject  object  = 4;
    repeated  FinderCommentInfo  exposedComment  = 5;
}

message FinderConsumePrefetchReportRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint32  displayTabType  = 2;
    optional  bytes  streamLastBuffer  = 3;
}

message FinderConsumePrefetchReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FinderContact {
    optional  string  username  = 1;
    optional  string  nickname  = 2;
    optional  string  headUrl  = 3;
    optional  uint64  seq  = 4;
    optional  string  signature  = 5;
    optional  uint32  followFlag  = 6;
    optional  uint32  followTime  = 7;
    optional  FinderAuthInfo  authInfo  = 8;
    optional  string  coverImgUrl  = 9;
    optional  uint32  spamStatus  = 10;
    optional  uint32  extFlag  = 11;
    optional  FinderContactExtInfo  extInfo  = 12;
    optional  uint32  originalFlag  = 13;
    optional  FinderOriginalInfo  originalInfo  = 14;
    optional  uint32  liveStatus  = 15;
    optional  FinderContactMsgInfo  msgInfo  = 16;
    optional  uint32  originalEntranceFlag  = 17;
    optional  string  liveCoverImgUrl  = 18;
    optional  uint32  foreignUserFlag  = 19;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 20;
    optional  string  loggingoutWording  = 21;
    optional  FinderContactLiveInfo  liveInfo  = 22;
    optional  uint32  friendFollowCount  = 23;
}

message FinderContactAsyncLoadInfo {
    optional  string  finderUsername  = 1;
    optional  FinderLiveNoticeInfo  noticeInfo  = 2;
}

message FinderContactCommentInfo {
    optional  uint64  objectId  = 1;
    optional  uint64  commentId  = 2;
    optional  string  commentUsername  = 3;
}

message FinderContactExtInfo {
    optional  string  country  = 1;
    optional  string  province  = 2;
    optional  string  city  = 3;
    optional  int32  sex  = 4;
    optional  uint32  birthYear  = 5;
    optional  uint32  birthMonth  = 6;
    optional  uint32  birthDay  = 7;
}

message FinderContactFansInfo {
    optional  string  fansId  = 1;
}

message FinderContactLiveInfo {
    optional  uint64  anchorStatusFlag  = 1;
    optional  uint32  switchFlag  = 2;
}

message FinderContactMsgInfo {
    optional  string  msgUsername  = 1;
    optional  string  sessionId  = 2;
}

message FinderContactRecommend {
    repeated  FinderContactRecommendItem  items  = 1;
    optional  uint32  showPosition  = 2;
}

message FinderContactRecommendItem {
    optional  FinderContact  contact  = 1;
    optional  string  recommendReason  = 2;
}

message FinderContactTagOptionReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  wxUsername  = 3;
    optional  uint32  optionType  = 4;
    optional  uint64  objectId  = 5;
}

message FinderContactTagOptionResp {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderCreateGameLivePrepareRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderMedia  coverImg  = 4;
    optional  string  description  = 5;
    optional  FinderLocation  location  = 6;
}

message FinderCreateGameLivePrepareResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  gameLivePrepareBuff  = 2;
}

message FinderCreateLiveNoticeRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 4;
    optional  uint32  optype  = 5;
}

message FinderCreateLiveNoticeResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  noticeUrl  = 2;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 3;
}

message FinderCreateLivePrepareRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  string  micFinderUsername  = 4;
    optional  uint64  micObjectId  = 5;
    optional  uint64  micLiveId  = 6;
    optional  string  micObjectNonceId  = 7;
}

message FinderCreateLivePrepareResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveMicInfo  liveMicInfo  = 2;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 3;
    optional  uint32  userFlag  = 4;
    optional  uint32  liveGlobalFlag  = 5;
    optional  FinderRecoverLiveInfo  recoverLiveInfo  = 6;
    optional  FinderObject  recoverLiveObject  = 7;
    repeated  FinderLiveTagInfo  fullTagInfo  = 8;
    optional  FinderLiveTagInfo  lastTagInfo  = 9;
}

message FinderCreateLiveReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderObjectDesc  objectDesc  = 4;
    optional  string  clientId  = 5;
    optional  string  applyUsername  = 6;
    optional  uint32  businessType  = 7;
    optional  uint32  scene  = 8;
    optional  bytes  ticket  = 9;
    repeated  FinderTopicSearchInfo  topicInfoList  = 10;
    optional  FinderLiveTagInfo  tagInfo  = 11;
}

message FinderCreateLiveResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderObject  liveObject  = 2;
    optional  string  realnameUrl  = 3;
    optional  FinderLiveErrorPage  errorPage  = 4;
}

message FinderCreateUserRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  nickname  = 2;
    optional  bytes  headImg  = 3;
    optional  string  headImgUrl  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
    optional  string  signature  = 6;
    optional  FinderContactExtInfo  extInfo  = 7;
    optional  uint32  notShowLocationSwitch  = 8;
    optional  uint32  notShowSexSwitch  = 9;
    optional  FinderContactExtInfo  registerInfo  = 10;
    optional  uint32  showFinderInWx  = 11;
}

message FinderCreateUserResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  FinderContact  contact  = 2;
    optional  FinderNicknameVerifyInfo  verifyInfo  = 3;
    optional  FinderContactExtInfo  extInfo  = 4;
}

message FinderDelFeedRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  id  = 2;
    optional  string  posterUsername  = 3;
    optional  string  objectNonceId  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderDelFeedResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FinderDownloadInfo {
    optional  uint64  feedId  = 1;
    optional  uint32  pageIndex  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  preloadBytes  = 4;
    optional  uint32  downloadedBytes  = 5;
    optional  uint32  fileBytes  = 6;
    optional  uint32  duration  = 7;
    optional  uint32  totalPlayTimeMs  = 8;
    optional  uint32  totalWaitTimeMs  = 9;
    optional  uint32  downloadSpeedKbps  = 10;
    repeated  FinderWaitDetail  waitDetails  = 11;
    optional  uint32  stopplayTimestamp  = 12;
    optional  uint32  playPosition  = 13;
    optional  uint32  firstLoadTimeMs  = 14;
    optional  string  codingFormat  = 15;
    optional  uint64  preloadStrategyId  = 16;
    optional  uint32  rttMs  = 17;
    optional  uint32  networkId  = 18;
    optional  string  svrIp  = 19;
    optional  uint32  svrPort  = 20;
    optional  string  fileFormat  = 21;
    optional  uint64  megaVideoId  = 22;
}

message FinderEventInfo {
    optional  uint64  eventTopicId  = 1;
    optional  FinderContact  contact  = 2;
    optional  string  eventName  = 3;
    optional  string  description  = 4;
    optional  uint32  participantCount  = 5;
    optional  string  coverImgUrl  = 6;
    optional  uint64  fromObjectId  = 7;
    optional  uint32  feedCount  = 8;
    optional  uint32  maxTopCount  = 9;
}

message FinderEventUserPageCtx {
    optional  uint64  lastRecordId  = 1;
}

message FinderEventUserPageRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  posterUsername  = 3;
    optional  bytes  lastBuffer  = 4;
}

message FinderEventUserPageResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderEventInfo  eventList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
}

message FinderExtStatsReportRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  finderusername  = 2;
    optional  uint32  actionType  = 3;
    repeated  ExtStats  extStats  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderExtStatsReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FinderExtendedReading {
    optional  string  link  = 1;
    optional  string  title  = 2;
    optional  uint32  type  = 3;
}

message FinderFansContact {
    optional  FinderContact  contact  = 1;
    optional  uint32  flag  = 2;
    optional  string  fansid  = 3;
    optional  bool  isSelf  = 4;
    optional  uint32  displayFlag  = 5;
    optional  string  username  = 6;
}

message FinderFansCount {
    optional  uint32  fansCount  = 1;
    optional  uint32  fansAddCount  = 2;
}

message FinderFavInfo {
    optional  string  nickName  = 1;
    optional  string  headImgUrl  = 2;
    optional  string  favId  = 3;
}

message FinderFavReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  objectId  = 3;
    optional  uint32  optype  = 4;
    optional  string  objectNonceId  = 5;
    optional  uint64  favId  = 6;
    optional  string  finderUsername  = 7;
    optional  string  sessionBuffer  = 8;
}

message FinderFavResp {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderFeedbackRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  id  = 2;
    optional  uint32  feedbackType  = 3;
    optional  uint32  subType  = 4;
    optional  string  objectNonceId  = 5;
    optional  FinderBaseRequest  finderBasereq  = 6;
    optional  string  sessionBuffer  = 7;
}

message FinderFeedbackResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  finderUsername  = 2;
}

message FinderFileDumpRequest {
    optional  string  posterUsername  = 1;
    optional  string  clientId  = 2;
    optional  string  url  = 3;
    optional  string  fromApp  = 4;
    optional  string  paramJson  = 5;
    optional  BaseRequest  baserequest  = 6;
}

message FinderFileDumpResponse {
    optional  string  url  = 1;
    optional  string  thumbUrl  = 2;
    optional  uint32  waitType  = 3;
    required  BaseResponse  baseResponse  = 4;
}

message FinderFoldedLayout {
    optional  uint32  layoutType  = 1;
    repeated  FinderObject  objects  = 2;
    optional  string  username  = 3;
    optional  uint32  totalCount  = 4;
}

message FinderFollowCount {
    optional  uint32  followCount  = 1;
}

message FinderFollowRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  posterUsername  = 2;
    optional  uint32  optype  = 3;
    optional  uint64  refObjectid  = 4;
    optional  string  finderUsername  = 5;
    optional  string  refObjectNonceId  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
    optional  string  sessionBuffer  = 8;
    optional  uint32  enterType  = 9;
}

message FinderFollowResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderContact  contact  = 2;
}

message FinderFollowTopicRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint32  optype  = 3;
    optional  uint64  topicId  = 4;
    optional  string  topicNonceId  = 5;
}

message FinderFollowTopicResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderFollowVerifyRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  followId  = 2;
    optional  uint32  optype  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderFollowVerifyResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FinderFollower {
    repeated  FinderContact  followers  = 1;
}

message FinderFromAppInfo {
    optional  string  appid  = 1;
    optional  string  icon  = 2;
    optional  string  title  = 3;
    optional  string  link  = 4;
    optional  uint64  uiStyle  = 5;
}

message FinderFunctionSpamObject {
    optional  FinderFunctionSpamObject_FunctionSpamObject  entrance  = 1;
    optional  FinderFunctionSpamObject_FunctionSpamObject  comment  = 2;
    optional  FinderFunctionSpamObject_FunctionSpamObject  share  = 3;
    optional  FinderFunctionSpamObject_FunctionSpamObject  search  = 4;
    optional  FinderFunctionSpamObject_FunctionSpamObject  post  = 5;
    optional  FinderFunctionSpamObject_FunctionSpamObject  like  = 6;
    optional  FinderFunctionSpamObject_FunctionSpamObject  personalInfo  = 7;
}

message FinderFunctionSpamObject_FunctionSpamObject {
    optional  uint32  action  = 1;
    optional  string  tip  = 2;
}

message FinderFusionRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  FinderFusionRequest_InnerCgiReqCtx  innerReqCtx  = 3;
    optional  string  innerCgiReqJson  = 4;
}

message FinderFusionRequest_InnerCgiReqCtx {
    optional  uint32  cmdId  = 1;
    optional  string  cgiName  = 2;
}

message FinderFusionResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  innerCgiRespJson  = 2;
}

message FinderGameLivePrepareBuffer {
    optional  string  ticketKey  = 1;
}

message FinderGetBlackListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  finderUsername  = 2;
    optional  bytes  lastBuff  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderGetBlackListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderFansContact  contactList  = 2;
    optional  uint32  continueFlag  = 3;
    optional  bytes  lastBuff  = 4;
}

message FinderGetBlockPosterListBuff {
    optional  uint64  sortId  = 1;
}

message FinderGetBlockPosterListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  bytes  lastBuffer  = 2;
    optional  FinderBaseRequest  finderBasereq  = 3;
}

message FinderGetBlockPosterListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  contactList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  blockCount  = 5;
}

message FinderGetCoLikeReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    repeated  uint64  objectId  = 4;
}

message FinderGetCoLikeResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  CoLikeInfo  colike  = 2;
}

message FinderGetCommentCtx {
    optional  uint64  lastCommentId  = 1;
    optional  uint64  lastDisplayId  = 2;
    optional  uint64  lastOrderId  = 3;
    optional  int32  fetchToppingFlag  = 4;
    optional  uint64  upLastCommentId  = 5;
    optional  uint64  upLastDisplayId  = 6;
    optional  uint64  upLastOrderId  = 7;
    optional  int32  upFetchToppingFlag  = 8;
    repeated  uint64  fetchedCommentIds  = 9;
}

message FinderGetCommentDetailRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  objectid  = 2;
    optional  uint64  maxCommentId  = 3;
    optional  uint32  needObject  = 4;
    optional  bytes  lastBuffer  = 5;
    optional  uint64  rootCommentId  = 6;
    optional  string  finderUsername  = 7;
    optional  uint64  refCommentId  = 8;
    optional  uint32  scene  = 9;
    optional  uint32  direction  = 10;
    optional  string  encryptedObjectid  = 11;
    optional  string  objectNonceId  = 12;
    optional  FinderBaseRequest  finderBasereq  = 13;
    optional  uint32  identityScene  = 14;
    optional  uint32  pullScene  = 15;
    optional  bytes  likeBuffer  = 16;
    optional  uint32  platformScene  = 17;
    optional  uint32  needSelection  = 18;
}

message FinderGetCommentDetailResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderCommentInfo  commentInfo  = 2;
    optional  FinderObject  object  = 3;
    optional  bytes  lastBuffer  = 4;
    optional  uint32  commentCount  = 5;
    optional  uint32  upContinueFlag  = 6;
    optional  uint32  downContinueFlag  = 7;
    optional  uint32  nextCheckObjectStatus  = 8;
    optional  uint32  secondaryShowFlag  = 9;
    repeated  FinderCommentInfo  barrageCommentInfo  = 10;
}

message FinderGetContactListReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  string  finderUsernameList  = 3;
    optional  uint32  contactType  = 4;
    optional  string  finderUsername  = 5;
    repeated  FinderContactMsgInfo  msgContactList  = 6;
    repeated  FinderContactFansInfo  fansContactList  = 7;
    repeated  FinderContactCommentInfo  commentContactList  = 8;
}

message FinderGetContactListResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  contactList  = 2;
}

message FinderGetExternalInfoResponse {
    optional  int32  retcode  = 1;
    optional  FinderObject  object  = 2;
    repeated  FinderCommentInfo  commentInfo  = 3;
}

message FinderGetExternalLinkRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  finderUsername  = 2;
    optional  uint64  objectid  = 3;
    optional  string  objectNonceId  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderGetExternalLinkResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  link  = 2;
}

message FinderGetFansBuff {
    optional  uint64  lastFansId  = 1;
    optional  uint64  clientLastFetchMaxId  = 2;
}

message FinderGetFansListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  finderUsername  = 2;
    optional  uint64  lastFansId  = 3;
    optional  bytes  lastBuff  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
    optional  uint64  onlyDuringLiveId  = 6;
    optional  uint32  scene  = 7;
}

message FinderGetFansListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  contactList  = 2;
    optional  uint32  continueFlag  = 3;
    optional  uint64  lastFansId  = 4;
    optional  bytes  lastBuff  = 5;
    repeated  FinderFansContact  fansContactList  = 6;
}

message FinderGetFavListCtx {
    repeated  uint64  recievedIds  = 1;
    optional  uint32  lastCreatetime  = 2;
}

message FinderGetFavListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  bytes  lastBuffer  = 4;
    optional  uint32  tabType  = 5;
    optional  FinderClientStatus  status  = 6;
}

message FinderGetFavListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  totalCount  = 5;
    optional  uint32  megavideoTotalCount  = 6;
    optional  uint32  finderTotalCount  = 7;
    optional  FinderPreloadInfo  preloadInfo  = 8;
}

message FinderGetFeedFavListCtx {
    optional  uint64  lastCreatetime  = 1;
}

message FinderGetFeedFavListReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint32  scene  = 4;
    optional  bytes  lastBuffer  = 5;
    optional  uint64  objectId  = 6;
}

message FinderGetFeedFavListResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderFavInfo  favList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  totalCount  = 5;
}

message FinderGetFeedLikedListCtx {
    optional  uint64  lastLikeId  = 1;
}

message FinderGetFeedLikedListReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint32  scene  = 4;
    optional  bytes  lastBuffer  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  bytes  likeBuffer  = 8;
}

message FinderGetFeedLikedListResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderLikeInfo  likeList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  totalCount  = 5;
}

message FinderGetFoldedListCtx {
    repeated  uint64  recievedIds  = 1;
    optional  uint64  lastSortId  = 2;
}

message FinderGetFoldedListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  string  friendUsername  = 4;
    optional  uint64  objectId  = 5;
    optional  string  objectNonceId  = 6;
}

message FinderGetFoldedListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
}

message FinderGetFollowListBuff {
    optional  uint64  sortId  = 1;
}

message FinderGetFollowListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  bytes  lastBuffer  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderGetFollowListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  contactList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  followCount  = 5;
}

message FinderGetFollowTopicListBuff {
    optional  uint64  sortId  = 1;
    optional  uint64  lastDisplayId  = 2;
}

message FinderGetFollowTopicListRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  bytes  lastBuffer  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderGetFollowTopicListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderTopicInfo  topics  = 2;
    optional  uint32  topicCount  = 3;
    optional  bytes  lastBuffer  = 4;
    optional  uint32  continueFlag  = 5;
}

message FinderGetHistoryRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  finderUsername  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
    optional  uint32  displayTabType  = 5;
    optional  FinderClientStatus  status  = 6;
}

message FinderGetHistoryResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  FinderPreloadInfo  preloadInfo  = 5;
}

message FinderGetLatestLiveObjectRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  anchorFinderUsername  = 3;
}

message FinderGetLatestLiveObjectResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderObject  object  = 2;
}

message FinderGetLikedListCtx {
    repeated  uint64  recievedIds  = 1;
    optional  uint32  lastCreatetime  = 2;
}

message FinderGetLikedListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  lastDisplayid  = 2;
    optional  string  finderUsername  = 3;
    optional  bytes  lastBuffer  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
    optional  string  targetUsername  = 6;
    optional  uint32  tabType  = 7;
    optional  FinderClientStatus  status  = 8;
}

message FinderGetLikedListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  totalCount  = 5;
    optional  string  noMoreWording  = 6;
    optional  uint32  megavideoTotalCount  = 7;
    optional  uint32  finderTotalCount  = 8;
    optional  FinderPreloadInfo  preloadInfo  = 9;
}

message FinderGetLiveContactListReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
}

message FinderGetLiveContactListResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderObject  liveObjects  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
}

message FinderGetLiveInfoReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  finderUsername  = 3;
}

message FinderGetLiveInfoResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveInfo  liveInfo  = 2;
    optional  uint32  liveNewFansNum  = 3;
    optional  uint32  refreshInterval  = 4;
}

message FinderGetLiveMicCandidateListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  bytes  lastBuffer  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderGetLiveMicCandidateListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  followList  = 2;
    optional  uint32  followCount  = 3;
    repeated  FinderContact  recentConnectList  = 4;
    optional  uint32  recentConnectCount  = 5;
    optional  bytes  lastBuffer  = 6;
    optional  uint32  continueFlag  = 7;
}

message FinderGetLiveMsgReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  uint64  liveId  = 4;
    optional  string  finderUsername  = 5;
    optional  uint32  scene  = 6;
    optional  uint64  objectId  = 7;
    optional  bool  offline  = 8;
    optional  string  objectNonceId  = 9;
    optional  FinderLiveClientStatus  status  = 10;
}

message FinderGetLiveMsgResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  onlineContacts  = 2;
    repeated  FinderLiveMsg  msgList  = 3;
    optional  FinderLiveInfo  liveInfo  = 4;
    optional  bytes  liveCookies  = 5;
    optional  uint32  curOnlineCount  = 6;
    optional  uint32  liveInfoEnableFlag  = 7;
    optional  uint32  liveCloseFlag  = 8;
    optional  FinderLiveMicInfo  liveMicInfo  = 9;
    optional  uint32  liveMicInfoEnableFlag  = 10;
    optional  uint32  pkCloseFlag  = 11;
    optional  uint32  liveExtFlag  = 12;
    optional  FinderLivePreloadInfo  livePreloadInfo  = 13;
    optional  uint32  curParticipantCount  = 14;
    repeated  FinderLiveAppMsg  appMsgList  = 15;
    repeated  FinderLiveTemplateInfo  templateInfoList  = 16;
}

message FinderGetLiveNoticeRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  noticeId  = 2;
    optional  uint32  scene  = 3;
    optional  string  finderUsername  = 4;
}

message FinderGetLiveNoticeResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  objectNonceId  = 5;
}

message FinderGetLiveOnlineMemberReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  finderUsername  = 5;
    optional  string  objectNonceId  = 6;
}

message FinderGetLiveOnlineMemberResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderLiveContact  liveContacts  = 2;
    optional  uint64  liveId  = 3;
    repeated  FinderLiveContact  offlineContacts  = 4;
    optional  uint64  rewardTotalAmountInHeat  = 5;
    optional  uint32  onlineMemberCount  = 6;
    optional  uint32  offlineMemberCount  = 7;
}

message FinderGetLiveRelatedListRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint64  objectId  = 4;
    optional  string  objectNonceId  = 5;
    optional  float  longitude  = 6;
    optional  float  latitude  = 7;
    optional  uint32  scene  = 8;
    optional  FinderClientStatus  status  = 9;
    optional  FinderLiveClientStatus  liveStatus  = 10;
}

message FinderGetLiveRelatedListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  FinderLivePreloadInfo  livePreloadInfo  = 5;
}

message FinderGetLiveRewardGainsBuff {
    optional  uint64  sortId  = 1;
}

message FinderGetLiveRewardGainsRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  string  finderUsername  = 4;
    optional  uint64  objectId  = 5;
    optional  string  objectNonceId  = 6;
    optional  bytes  lastBuffer  = 7;
}

message FinderGetLiveRewardGainsResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  totalNum  = 2;
    optional  float  totalValue  = 3;
    optional  bytes  lastBuffer  = 4;
    optional  uint32  continueFlag  = 5;
    repeated  FinderLiveRewardGainsInfo  infoList  = 6;
    optional  uint64  rewardTotalAmountInWecoin  = 7;
}

message FinderGetLiveRewardGiftListBuff {
    optional  uint64  sortId  = 1;
}

message FinderGetLiveRewardGiftListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  objectNonceId  = 5;
    optional  string  username  = 6;
    optional  bytes  lastBuffer  = 7;
}

message FinderGetLiveRewardGiftListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderLiveGift  giftList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  comboBatchSize  = 4;
    optional  uint32  comboBatchTimeoutMs  = 5;
}

message FinderGetMentionBuff {
    optional  uint64  mentionCommentId  = 1;
    optional  uint64  mentionLikeId  = 2;
    optional  uint64  mentionNotificationId  = 3;
}

message FinderGetMentionListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint32  mentionType  = 2;
    optional  bytes  lastBuff  = 3;
    optional  string  finderUsername  = 4;
    optional  uint32  scene  = 5;
    optional  FinderBaseRequest  finderBasereq  = 6;
    optional  uint32  requestScene  = 7;
    optional  uint32  fetchScene  = 8;
}

message FinderGetMentionListResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderMentionList  list  = 2;
    optional  bytes  lastBuff  = 3;
}

message FinderGetMentionNormalBuff {
    optional  uint64  lastMentionId  = 1;
    optional  uint64  lastMentionViewId  = 2;
    optional  uint64  lastDisplayId  = 3;
    optional  uint64  lastLikeMentionId  = 4;
    optional  uint64  lastCommentMentionId  = 5;
    optional  uint64  lastFollowMentionId  = 6;
}

message FinderGetMentionSystemBuff {
    optional  uint64  lastNotificationId  = 1;
}

message FinderGetMentionedListCtx {
    optional  uint64  lastSeq  = 1;
    optional  uint32  feedFlag  = 2;
}

message FinderGetMentionedListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  lastDisplayid  = 2;
    optional  string  finderUsername  = 3;
    optional  bytes  lastBuffer  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderGetMentionedListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
}

message FinderGetMsgSessionIdRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint32  myAccountType  = 2;
    optional  string  toUsername  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
    optional  string  toFansId  = 5;
    optional  uint64  toObjectId  = 6;
    optional  uint64  toCommentId  = 7;
    optional  string  toLotteryId  = 8;
    optional  uint32  sourceType  = 9;
}

message FinderGetMsgSessionIdResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  sessionId  = 2;
    optional  uint32  enableAction  = 3;
    optional  string  toUsername  = 4;
    optional  FinderMsgSessionInfo  sessionInfo  = 5;
}

message FinderGetMsgSessionRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  FinderGetMsgSessionRequest_FinderMsgGetSessionReqItem  reqList  = 3;
}

message FinderGetMsgSessionRequest_FinderMsgGetSessionReqItem {
    optional  uint32  myAccountType  = 1;
    optional  string  toUsername  = 2;
    optional  string  sessionId  = 3;
}

message FinderGetMsgSessionResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderMsgSessionInfo  sessionProfileList  = 2;
}

message FinderGetNearbyListCtx {
    repeated  uint64  recievedFeedIds  = 1;
    repeated  string  recievedSectionIds  = 2;
}

message FinderGetNearbyListRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  float  longitude  = 4;
    optional  float  latitude  = 5;
    optional  FinderClientStatus  status  = 6;
}

message FinderGetNearbyListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderNearbySection  sections  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  streamFlag  = 5;
}

message FinderGetRelatedEntranceInfo {
    optional  string  posTriggerConfig  = 1;
    optional  Stats  stats  = 2;
}

message FinderGetRelatedListCtx {
    optional  uint64  lastId  = 1;
    repeated  uint64  recievedIds  = 2;
    optional  uint32  pageNum  = 3;
    optional  uint64  sessionId  = 4;
    optional  uint32  src  = 5;
    optional  uint64  topicId  = 6;
    repeated  uint32  recType  = 7;
    optional  uint32  recSys  = 8;
    optional  bytes  ccardInfo  = 9;
}

message FinderGetRelatedListReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint64  objectId  = 4;
    optional  uint32  displayTabType  = 5;
    optional  float  longitude  = 6;
    optional  float  latitude  = 7;
    optional  string  objectNonceId  = 8;
    optional  string  firstObjectReason  = 9;
    optional  uint32  scene  = 10;
    optional  string  source  = 11;
    optional  FinderSectionInfo  sectionInfo  = 12;
    optional  FinderCategoryInfo  catetoryFilter  = 13;
    optional  bytes  streamLastBuffer  = 14;
    optional  FinderClientStatus  status  = 15;
    optional  string  fromUsername  = 16;
    optional  string  toUsername  = 17;
    optional  FinderGetRelatedEntranceInfo  relatedEntranceInfo  = 18;
    optional  string  fromSessionId  = 19;
    optional  bytes  objectSessionInfo  = 20;
    optional  FinderGetRelatedListReq_SwitchColumnInfo  switchColumnInfo  = 21;
    optional  FinderGetRelatedListReq_GetColumnFeedInfo  getColumnFeedInfo  = 22;
    repeated  Stats  stats  = 23;
    optional  FinderGetRelatedListReq_GetRelatedColumnTopicInfo  getRelatedColumnTopicInfo  = 24;
    optional  FinderLiveClientStatus  liveStatus  = 25;
}

message FinderGetRelatedListReq_GetColumnFeedInfo {
    optional  uint64  id  = 1;
}

message FinderGetRelatedListReq_GetRelatedColumnTopicInfo {
    optional  uint64  id  = 1;
}

message FinderGetRelatedListReq_SwitchColumnInfo {
    optional  uint64  id  = 1;
}

message FinderGetRelatedListResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  bytes  streamLastBuffer  = 5;
    optional  FinderPreloadInfo  preloadInfo  = 6;
    optional  string  relatedStreamWording  = 7;
    repeated  FinderStreamCard  card  = 8;
    repeated  FinderStreamTxtCard  txtCard  = 9;
    optional  FinderLivePreloadInfo  livePreloadInfo  = 10;
    optional  FinderStreamLayoutInfo  layoutInfo  = 11;
}

message FinderGetTagContactReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint32  scene  = 3;
}

message FinderGetTagContactResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderTagContact  contacts  = 2;
}

message FinderGetTopicListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  topicType  = 4;
    optional  string  topic  = 5;
    optional  float  longitude  = 6;
    optional  float  latitude  = 7;
    optional  uint64  fromObjectId  = 8;
    optional  uint32  displayTabType  = 9;
    optional  TopicFilter  topicFilter  = 10;
    optional  FinderSectionInfo  sectionInfo  = 11;
    optional  uint32  fromType  = 12;
    optional  FinderClientStatus  status  = 13;
    optional  uint64  topicId  = 14;
    optional  bytes  topicBuffer  = 15;
    optional  string  encryptedTopicid  = 16;
    optional  uint32  innerTabType  = 17;
}

message FinderGetTopicListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint64  totalCount  = 5;
    optional  FinderTopicInfo  topic  = 6;
    optional  uint32  recommendSimilarFlag  = 7;
    optional  RelatedTopic  relatedTopic  = 8;
    optional  PoiTopicSubTitle  subTitle  = 9;
    optional  FinderPreloadInfo  preloadInfo  = 10;
}

message FinderGetUserRequest {
    optional  BaseRequest  baserequest  = 1;
    repeated  string  username  = 2;
    optional  FinderBaseRequest  finderBasereq  = 3;
    repeated  string  nickname  = 4;
}

message FinderGetUserResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  contactList  = 2;
}

message FinderHalfRect {
    optional  float  left  = 1;
    optional  float  top  = 2;
    optional  float  right  = 3;
    optional  float  bottom  = 4;
}

message FinderHlsMediaSpec {
    optional  string  fileFormat  = 1;
    optional  uint32  firstLoadBytes  = 2;
    optional  uint32  bitRate  = 3;
    optional  string  codingFormat  = 4;
}

message FinderHlsMediaSpecList {
    repeated  FinderHlsMediaSpec  hlsList  = 1;
}

message FinderHotTabTitle {
    optional  string  titleName  = 1;
}

message FinderInitRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  SKBuiltinBuffer_t  keybuf  = 2;
    optional  FinderBaseRequest  finderBasereq  = 3;
}

message FinderInitResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderContact  myacct  = 2;
    optional  SKBuiltinBuffer_t  keybuf  = 3;
    repeated  FinderCmdItem  cmdlist  = 4;
    optional  uint32  continueFlag  = 5;
    optional  uint32  userver  = 6;
    repeated  FinderTabInfo  tabInfos  = 7;
}

message FinderJoinLiveReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  bytes  liveCookies  = 4;
    optional  uint64  objectId  = 5;
    optional  string  finderUsername  = 6;
    optional  uint32  scene  = 7;
    optional  string  livePkId  = 8;
    optional  string  objectNonceId  = 9;
    optional  string  sessionBuffer  = 10;
}

message FinderJoinLiveResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  liveCookies  = 2;
    optional  LiveSdkInfo  liveSdkInfo  = 3;
    optional  FinderLiveInfo  liveInfo  = 4;
    optional  FinderLiveMicInfo  liveMicInfo  = 5;
    optional  FinderLiveUserInfo  userInfo  = 6;
    optional  FinderLiveShopWindowProductItem  promotingProduct  = 7;
    optional  FinderLiveContact  selfContact  = 8;
    optional  FinderJoinLiveTips  tips  = 9;
    repeated  FinderLiveTemplateInfo  templateInfoList  = 10;
}

message FinderJoinLiveTips {
    optional  string  lawTips  = 1;
}

message FinderLbsLiveStreamRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  float  longitude  = 4;
    optional  float  latitude  = 5;
    optional  FinderClientStatus  status  = 6;
    optional  FinderLiveClientStatus  liveStatus  = 7;
    optional  uint32  pullType  = 8;
    optional  FinderSwitch  finderSwitch  = 9;
}

message FinderLbsLiveStreamResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  FinderLivePreloadInfo  livePreloadInfo  = 5;
}

message FinderLikeInfo {
    optional  string  nickName  = 1;
    optional  string  headImgUrl  = 2;
    optional  uint64  likeId  = 3;
    optional  uint32  likeFlag  = 4;
    optional  uint32  refuseFlag  = 5;
    optional  string  wxUsername  = 6;
    optional  uint64  likeTime  = 7;
    optional  uint32  unreadFlag  = 8;
}

message FinderLikeLiveReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  count  = 4;
    optional  bytes  liveCookies  = 5;
    optional  uint64  objectId  = 6;
    optional  uint64  seq  = 7;
    optional  uint32  liveMsgType  = 8;
    optional  string  clientMsgId  = 9;
    optional  uint32  scene  = 10;
    optional  uint32  optype  = 11;
    optional  string  objectNonceId  = 12;
}

message FinderLikeLiveResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  statusFlag  = 2;
}

message FinderLikeRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  objectid  = 2;
    optional  uint64  commentid  = 3;
    optional  uint32  optype  = 4;
    optional  uint64  likeid  = 5;
    optional  uint32  curLikeCount  = 6;
    optional  string  finderUsername  = 7;
    optional  uint32  scene  = 8;
    optional  string  objectNonceId  = 9;
    optional  FinderBaseRequest  finderBasereq  = 10;
    optional  string  sessionBuffer  = 11;
    optional  string  likeUsername  = 12;
    optional  uint32  isPrivate  = 13;
    optional  uint32  visibilityMode  = 14;
    repeated  uint32  visibilityLabelIdList  = 15;
}

message FinderLikeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  likeid  = 2;
}

message FinderLikedListCtx {
    repeated  FinderLikedListCtxLikeInfo  likeInfo  = 1;
    optional  uint32  msgEventFlag  = 2;
    optional  uint32  ver  = 3;
    optional  uint32  tabType  = 4;
}

message FinderLikedListCtxLikeInfo {
    optional  string  username  = 1;
    optional  uint64  likeTime  = 2;
    optional  uint32  unreadFlag  = 3;
}

message FinderLiveAcceptMicWithAudienceRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  FinderLiveAppMsg  msg  = 4;
    optional  uint64  liveId  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  uint32  scene  = 8;
    optional  string  finderUsername  = 9;
}

message FinderLiveAcceptMicWithAudienceResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  realnameUrl  = 2;
    optional  uint64  serverMsgId  = 3;
    optional  string  sessionId  = 4;
}

message FinderLiveAppMsg {
    optional  FinderLiveContact  toUserContact  = 1;
    optional  uint32  msgType  = 2;
    optional  string  clientMsgId  = 3;
    optional  uint64  quotedMsgSeq  = 4;
    optional  bytes  payload  = 5;
    optional  FinderLiveAppMsgOption  option  = 6;
    repeated  FinderLiveContact  recipientContactList  = 7;
    optional  string  sessionId  = 51;
    optional  uint64  seq  = 101;
    optional  FinderLiveContact  fromUserContact  = 102;
    optional  string  localClientMsgId  = 103;
}

message FinderLiveAppMsgAcceptMicInfo {
    optional  string  micSdkUserId  = 1;
    optional  int32  micType  = 51;
    optional  LiveSdkInfo  liveSdkInfo  = 101;
    optional  FinderLiveContact  micContact  = 102;
    optional  uint64  expiredTime  = 103;
    optional  uint64  seq  = 104;
}

message FinderLiveAppMsgAlertInfo {
    optional  FinderLiveMsgBoxInfo  msgBox  = 1;
}

message FinderLiveAppMsgApplyMicInfo {
    optional  int32  micType  = 1;
    optional  uint32  confirmTtl  = 102;
    optional  string  micSdkUserId  = 103;
}

message FinderLiveAppMsgCloseMicInfo {
    optional  string  micSdkUserId  = 1;
    optional  int32  scene  = 2;
}

message FinderLiveAppMsgHighlightCheerUserInfo {
}

message FinderLiveAppMsgLiveRewardInfo {
    optional  string  rewardProductId  = 1;
    optional  uint32  rewardProductCount  = 2;
    optional  uint32  rewardAmountInWecoin  = 3;
    optional  FinderLiveGift  rewardGift  = 4;
    optional  string  content  = 5;
    optional  uint32  comboProductCount  = 6;
    optional  string  comboId  = 7;
}

message FinderLiveAppMsgLotteryDrawInfo {
    optional  string  lotteryId  = 1;
    optional  uint32  remainTime  = 2;
    optional  uint32  lotteryStatus  = 3;
    optional  uint32  uin  = 4;
}

message FinderLiveAppMsgOption {
    optional  FinderLiveAppMsgOption_VersionControlInfo  versionControlInfo  = 1;
}

message FinderLiveAppMsgOption_VersionControlInfo {
    optional  bool  compatibleVisible  = 1;
    optional  string  compatibleText  = 2;
    optional  string  compatibleUrl  = 3;
}

message FinderLiveAppMsgReplyCommentInfo {
    optional  string  content  = 1;
}

message FinderLiveAppMsgTickleInfo {
    optional  string  toUserPatSuffix  = 1;
}

message FinderLiveAppMsgToastInfo {
    optional  FinderLiveMsgBoxInfo  msgBox  = 1;
}

message FinderLiveApplyMicWithAudienceRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  FinderLiveAppMsg  msg  = 4;
    optional  uint64  liveId  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  uint32  scene  = 8;
    optional  string  finderUsername  = 9;
}

message FinderLiveApplyMicWithAudienceResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  realnameUrl  = 2;
    optional  uint64  serverMsgId  = 3;
    optional  string  sessionId  = 4;
}

message FinderLiveCdnTransInfo {
    optional  CdnTransInfo  cdnTransInfo  = 1;
    optional  uint32  bitRate  = 2;
    optional  string  codingFormat  = 3;
}

message FinderLiveClientStatus {
    optional  int32  netType  = 1;
    optional  string  netName  = 2;
    optional  uint32  bandwidthKbps  = 3;
    optional  string  deviceModel  = 4;
    optional  string  deviceBrand  = 5;
    optional  string  osName  = 6;
    optional  string  osVersion  = 7;
    optional  FinderLiveQoSInfo  currentLiveQosInfo  = 8;
    repeated  FinderLiveQoSInfo  lastLiveQosInfo  = 9;
}

message FinderLiveCloseMicWithAudienceRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  FinderLiveAppMsg  msg  = 4;
    optional  uint64  liveId  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  uint32  scene  = 8;
    optional  string  finderUsername  = 9;
}

message FinderLiveCloseMicWithAudienceResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  realnameUrl  = 2;
    optional  uint64  serverMsgId  = 3;
    optional  string  sessionId  = 4;
}

message FinderLiveContact {
    optional  FinderContact  contact  = 1;
    optional  uint32  enableComment  = 2;
    optional  uint32  disableComment  = 3;
    optional  uint32  rewardAmountInHeat  = 4;
    optional  uint32  liveContactFlag  = 5;
}

message FinderLiveCreateLotteryRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  uint64  objectNonceId  = 5;
    optional  uint32  lotteryDuration  = 6;
    optional  string  lotteryDescription  = 7;
    optional  FinderLiveLotteryAttendMethod  method  = 8;
    optional  uint32  lotteryWinnerCnt  = 9;
    optional  uint32  opType  = 10;
    optional  string  nonceId  = 11;
}

message FinderLiveCreateLotteryResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveLotteryInfo  lotteryInfo  = 2;
    optional  FinderLiveErrorPage  errorPage  = 3;
}

message FinderLiveDesc {
    optional  string  liveCoverUrl  = 1;
    optional  string  liveFrameUrl  = 2;
}

message FinderLiveErrorPage {
    optional  uint32  type  = 1;
    optional  string  wording  = 2;
    optional  string  title  = 3;
    optional  string  jumpUrl  = 4;
    optional  string  urlWording  = 5;
}

message FinderLiveExtInfo {
    optional  bytes  anchorStatusBuffer  = 1;
}

message FinderLiveGetAuthorizationRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  bytes  deviceId  = 4;
    optional  string  ticket  = 5;
    optional  string  appId  = 6;
    optional  uint32  scene  = 7;
}

message FinderLiveGetAuthorizationResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderLiveGetContactRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  username  = 5;
    optional  uint32  scene  = 6;
    optional  string  objectNonceId  = 7;
}

message FinderLiveGetContactResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveContact  contact  = 2;
}

message FinderLiveGetLotteryHistoryCtx {
    optional  uint64  maxId  = 1;
}

message FinderLiveGetLotteryHistoryRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint32  scene  = 4;
    optional  uint64  liveId  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  bytes  lastBuffer  = 8;
}

message FinderLiveGetLotteryHistoryResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLotteryLiveRecordList  liveList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint64  liveId  = 5;
}

message FinderLiveGetLotteryRecordCtx {
    optional  uint32  pagenum  = 1;
}

message FinderLiveGetLotteryRecordRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint64  liveId  = 4;
    optional  uint64  objectId  = 5;
    optional  uint64  objectNonceId  = 6;
    optional  string  lotteryId  = 7;
    optional  bytes  lastBuffer  = 8;
    optional  string  nonceId  = 9;
}

message FinderLiveGetLotteryRecordResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveLotteryInfo  lotteryInfo  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  FinderLiveLotteryWinnerInfo  winnerInfo  = 5;
    optional  uint64  liveId  = 6;
    optional  uint32  personalmsgCloseSwitch  = 7;
}

message FinderLiveGetShopProductDetailRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  objectId  = 3;
    optional  uint64  liveId  = 4;
    optional  string  objectNonceId  = 5;
    optional  uint64  productId  = 6;
    optional  string  shopRequestId  = 7;
}

message FinderLiveGetShopProductDetailResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderLiveShopWindowProductItem  productItem  = 2;
    optional  string  shopRequestId  = 3;
}

message FinderLiveGetShopWindowProductCtxInfo {
    optional  uint64  pageOffset  = 1;
}

message FinderLiveGetShopWindowProductRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  bytes  lastBuff  = 5;
    optional  string  finderUsername  = 6;
    optional  uint32  scene  = 7;
    optional  string  objectNonceId  = 8;
    optional  string  shopRequestId  = 9;
}

message FinderLiveGetShopWindowProductResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  totalCount  = 2;
    repeated  FinderLiveShopWindowProductItem  productList  = 3;
    optional  bytes  lastBuff  = 4;
    optional  uint32  continueFlag  = 5;
    optional  string  shopAppid  = 6;
    optional  string  orderPageUrl  = 7;
    optional  string  shopAddProductUrl  = 8;
    optional  uint32  orderCnt  = 9;
    optional  string  shopAddProductAppid  = 10;
    optional  uint64  liveId  = 11;
    optional  string  orderPageAppid  = 12;
    optional  string  defaultBuyPageAppid  = 13;
    optional  string  defaultBuyPagePath  = 14;
    optional  string  shopExtraData  = 15;
    optional  string  shopWindowId  = 16;
    optional  string  prerenderPagePath  = 17;
    optional  string  shopAppUsername  = 18;
    optional  string  shopAddProductAppusername  = 19;
    optional  string  shopRequestId  = 20;
}

message FinderLiveGetUserGameConfigRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
}

message FinderLiveGetUserGameConfigResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderLiveGetUserGameConfigResponse_GameUserInfo  gameUserInfoList  = 2;
}

message FinderLiveGetUserGameConfigResponse_GameAppInfo {
    optional  string  appId  = 1;
    optional  string  appName  = 2;
    optional  string  iconUrl  = 3;
    optional  string  downloadUrl  = 4;
    optional  string  packageName  = 5;
    optional  uint64  packageSize  = 6;
    optional  string  packageMd5  = 7;
    optional  uint32  versionCode  = 8;
    optional  uint32  appStatus  = 9;
    optional  string  defaultLiveCoverUrl  = 10;
}

message FinderLiveGetUserGameConfigResponse_GameUserInfo {
    optional  FinderLiveGetUserGameConfigResponse_UserStat  userStat  = 1;
    optional  FinderLiveGetUserGameConfigResponse_GameAppInfo  appInfo  = 2;
    optional  string  errorMsg  = 3;
}

message FinderLiveGetUserGameConfigResponse_UserStat {
    optional  uint32  anchorWxUin  = 1;
    optional  uint32  playingStatus  = 2;
    optional  uint32  liveStatus  = 3;
}

message FinderLiveGift {
    optional  string  rewardProductId  = 1;
    optional  uint32  businessType  = 2;
    optional  string  thumbnailFileUrl  = 3;
    optional  string  previewPagUrl  = 4;
    optional  string  animationPagUrl  = 5;
    optional  string  thumbnailFileMd5  = 6;
    optional  string  previewPagMd5  = 7;
    optional  string  animationPagMd5  = 8;
    optional  string  name  = 9;
    optional  float  price  = 10;
    optional  uint32  giftType  = 11;
}

message FinderLiveInfo {
    optional  uint64  liveId  = 1;
    optional  uint32  onlineCnt  = 2;
    optional  uint32  liveStatus  = 3;
    optional  string  streamUrl  = 4;
    optional  uint32  startTime  = 5;
    optional  uint32  likeCnt  = 6;
    optional  uint32  endTime  = 7;
    optional  FinderLiveExtInfo  liveExtInfo  = 8;
    optional  FinderLiveMediaSpec  liveSpec  = 9;
    optional  FinderLiveSdkChannelInfo  liveSdkChannelInfo  = 10;
    optional  uint32  participantCount  = 11;
    optional  uint64  rewardTotalAmountInWecoin  = 12;
    optional  uint32  sourceType  = 13;
    optional  uint32  extFlag  = 14;
    optional  uint64  rewardTotalAmountInHeat  = 15;
}

message FinderLiveLotteryAttendMethod {
    optional  uint32  lotteryAttendType  = 1;
    optional  string  attendWording  = 2;
}

message FinderLiveLotteryContact {
    optional  string  username  = 1;
    optional  string  nickname  = 2;
    optional  string  headImgUrl  = 3;
}

message FinderLiveLotteryInfo {
    optional  string  id  = 1;
    optional  uint32  beginTime  = 2;
    optional  uint32  endTime  = 3;
    optional  uint32  remainTime  = 4;
    optional  string  description  = 5;
    optional  FinderLiveLotteryAttendMethod  method  = 6;
    optional  uint32  winnerCnt  = 7;
    optional  uint32  participateCount  = 8;
    optional  uint32  lotteryStatus  = 9;
    optional  uint32  extFlag  = 10;
    optional  uint32  realWinnerCnt  = 11;
}

message FinderLiveLotteryWinnerInfo {
    repeated  FinderLiveLotteryContact  winnerList  = 1;
}

message FinderLiveMediaSpec {
    repeated  FinderLiveCdnTransInfo  cdnTransInfo  = 1;
    optional  LiveSdkVideoParams  anchorVideoParams  = 2;
    optional  uint32  audienceCdnQualityCfg  = 3;
    optional  string  audienceCdnUrl  = 4;
}

message FinderLiveMicAudienceInfo {
    optional  FinderLiveContact  micContact  = 1;
    optional  int32  micType  = 2;
    optional  string  micSdkUserId  = 3;
    optional  string  liveMicId  = 4;
    optional  uint64  micSeq  = 5;
}

message FinderLiveMicInfo {
    optional  string  liveMicId  = 1;
    optional  uint32  micType  = 2;
    optional  FinderLiveContact  applyContact  = 3;
    optional  FinderLiveContact  acceptLiveContact  = 4;
    optional  uint32  status  = 5;
    optional  FinderLiveRoomData  micLiveRoomData  = 6;
    repeated  FinderLiveMicAudienceInfo  micAudienceList  = 7;
}

message FinderLiveModShopWindowProductRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint64  liveId  = 4;
    optional  uint64  objectId  = 5;
    optional  uint64  productId  = 6;
    optional  uint32  scene  = 7;
    optional  string  objectNonceId  = 8;
}

message FinderLiveModShopWindowProductResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint64  productId  = 2;
}

message FinderLiveMsg {
    optional  string  nickname  = 1;
    optional  string  headUrl  = 2;
    optional  string  content  = 3;
    optional  uint32  type  = 4;
    optional  string  username  = 5;
    optional  uint64  seq  = 6;
    optional  string  clientMsgId  = 7;
    optional  uint32  likeCnt  = 8;
    optional  FinderLiveContact  finderLiveContact  = 9;
    optional  string  localClientMsgId  = 10;
    optional  bytes  extInfo  = 11;
}

message FinderLiveMsgBoxInfo {
    optional  int32  type  = 1;
    optional  string  iconName  = 2;
    optional  string  title  = 3;
    optional  string  content  = 4;
    optional  string  buttonTitle  = 5;
}

message FinderLiveMsgStat {
    optional  uint32  likeCount  = 1;
}

message FinderLiveNoticeInfo {
    optional  uint32  startTime  = 1;
    optional  uint32  status  = 2;
    optional  string  coverImgUrl  = 3;
    optional  string  introduction  = 4;
    optional  string  noticeId  = 5;
    optional  uint32  reservationCount  = 6;
    optional  uint32  noticeFlag  = 7;
}

message FinderLivePreloadInfo {
    optional  uint64  preloadStrategyId  = 1;
    optional  uint32  maxBitRate  = 2;
}

message FinderLivePromoteProductRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint64  liveId  = 4;
    optional  uint64  objectId  = 5;
    optional  uint64  productId  = 6;
    optional  uint32  scene  = 7;
    optional  string  objectNonceId  = 8;
}

message FinderLivePromoteProductResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint64  productId  = 2;
}

message FinderLiveQoSInfo {
    optional  uint64  liveId  = 1;
    optional  uint32  width  = 2;
    optional  uint32  height  = 3;
    optional  uint32  videoFps  = 4;
    optional  uint32  videoGop  = 5;
    optional  uint32  videoBitrate  = 6;
    optional  uint32  audioBitrate  = 7;
    optional  uint32  netSpeed  = 8;
    optional  uint32  videoCache  = 9;
    optional  uint32  audioCache  = 10;
    optional  uint32  videoSumCacheSize  = 11;
    optional  uint32  audioVideoPlayInterval  = 12;
    optional  uint32  audioVideoRecvInterval  = 13;
    optional  uint32  audioCacheThreshold  = 14;
    optional  uint32  netJitter  = 15;
    optional  uint32  qualityLevel  = 16;
    optional  uint32  totalPlayTimeMs  = 17;
    optional  uint32  totalWaitTimeMs  = 18;
    repeated  FinderLiveWaitDetail  waitDetails  = 19;
    optional  uint32  liveStartPlayTimeSec  = 20;
    optional  uint32  firstFrameTimeMs  = 21;
    optional  uint32  connectMs  = 22;
    optional  uint32  rttMs  = 23;
    optional  uint32  networkId  = 24;
    optional  string  cdnSvrIp  = 25;
    optional  uint32  cdnSvrPort  = 26;
    optional  float  cpuUsageProcess  = 27;
    optional  float  cpuUsageDevice  = 28;
    optional  float  trtcUpLoss  = 29;
    optional  float  trtcDownLoss  = 30;
}

message FinderLiveRefreshMicWithAudienceRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  uint64  liveId  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  uint32  scene  = 8;
    optional  string  finderUsername  = 9;
    optional  string  micSdkUserId  = 10;
}

message FinderLiveRefreshMicWithAudienceResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  LiveSdkInfo  liveSdkInfo  = 2;
}

message FinderLiveRewardGainsInfo {
    optional  FinderLiveContact  contact  = 1;
    optional  uint64  rewardTime  = 2;
    optional  uint32  rewardTotalAmountInWecoin  = 3;
}

message FinderLiveRewardMsgExtInfo {
    optional  string  rewardProductId  = 1;
    optional  uint32  rewardProductCount  = 2;
    optional  uint32  rewardAmountInWecoin  = 3;
}

message FinderLiveRewardRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  uint64  objectId  = 4;
    optional  uint64  liveId  = 5;
    optional  string  rewardProductId  = 6;
    optional  uint32  rewardProductCount  = 7;
    optional  uint32  rewardAmountInWecoin  = 8;
    optional  string  requestId  = 9;
    optional  string  comboId  = 10;
}

message FinderLiveRewardResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  billNo  = 2;
    optional  bytes  respBuff  = 3;
    optional  FinderLiveErrorPage  errorPage  = 4;
}

message FinderLiveRoomData {
    optional  uint32  onlineMemberCount  = 1;
    optional  uint32  likeCount  = 2;
    optional  uint64  updateTime  = 3;
}

message FinderLiveSdkChannelInfo {
    optional  uint32  audienceMode  = 1;
}

message FinderLiveShopWindowExtraData {
    optional  string  nickname  = 1;
    optional  string  headimgUrl  = 2;
}

message FinderLiveShopWindowProductExtInfo {
}

message FinderLiveShopWindowProductItem {
    optional  uint64  productId  = 1;
    optional  FinderLiveShopWindowProductItem_ProductPage  productPage  = 2;
    optional  string  title  = 3;
    optional  string  imgUrl  = 4;
    optional  uint32  stock  = 5;
    optional  uint32  minPrice  = 6;
    optional  uint32  maxPrice  = 7;
    optional  uint32  promoting  = 8;
    optional  string  extBuff  = 9;
    optional  string  platformName  = 10;
    optional  uint32  status  = 11;
    optional  FinderLiveShopWindowProductItem_ProductPage  userPurchasePage  = 12;
    optional  uint32  platformId  = 13;
    optional  string  extraData  = 14;
    optional  string  appUsername  = 15;
    optional  string  shopExtraData  = 16;
}

message FinderLiveShopWindowProductItem_ProductPage {
    optional  string  appId  = 1;
    optional  string  path  = 2;
}

message FinderLiveStreamCtx {
    optional  uint64  lastId  = 1;
    repeated  uint64  recievedIds  = 2;
    optional  uint32  pageNum  = 3;
    optional  uint64  sessionId  = 4;
    optional  uint32  continueFlag  = 5;
}

message FinderLiveStreamRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  displayTabType  = 4;
    optional  float  longitude  = 5;
    optional  float  latitude  = 6;
    optional  FinderClientStatus  status  = 7;
    optional  FinderLiveClientStatus  liveStatus  = 8;
}

message FinderLiveStreamResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  FinderLivePreloadInfo  livePreloadInfo  = 5;
}

message FinderLiveTagInfo {
    optional  uint32  tagId  = 1;
    optional  string  tagName  = 2;
    repeated  FinderLiveTagInfo  subTagList  = 3;
    optional  FinderLiveTagInfo  chosenSubTag  = 4;
}

message FinderLiveTemplateInfo {
    optional  uint32  infoType  = 1;
    optional  bytes  infoBuffer  = 2;
    optional  string  versionWording  = 3;
    optional  uint32  seq  = 4;
}

message FinderLiveTopCommentRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  objectId  = 3;
    optional  uint64  liveId  = 4;
    optional  uint64  seq  = 5;
    optional  uint32  optype  = 6;
    optional  bytes  liveCookies  = 7;
    optional  string  clientMsgId  = 8;
    optional  uint64  objectNonceId  = 9;
    optional  string  finderUsername  = 10;
    optional  string  nonceId  = 11;
}

message FinderLiveTopCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderLiveUserInfo {
    optional  uint32  enableComment  = 1;
}

message FinderLiveVerifyReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
}

message FinderLiveVerifyResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  bool  isVerified  = 2;
    optional  string  realnameUrl  = 3;
    optional  bytes  ticket  = 4;
}

message FinderLiveWaitDetail {
    optional  uint32  type  = 1;
    optional  uint32  percent  = 2;
    optional  uint32  waitMs  = 3;
    optional  uint32  bitrate  = 4;
}

message FinderLocation {
    optional  float  longitude  = 1;
    optional  float  latitude  = 2;
    optional  string  city  = 3;
    optional  string  poiName  = 4;
    optional  string  poiAddress  = 5;
    optional  string  poiClassifyId  = 6;
    optional  uint32  poiClassifyType  = 7;
    optional  string  province  = 8;
    optional  string  region  = 9;
    optional  string  country  = 10;
}

message FinderLongVideoDesc {
    optional  uint64  objectId  = 1;
    optional  string  objectNonceId  = 2;
    optional  string  description  = 3;
}

message FinderLotteryLiveRecordList {
    repeated  FinderLotteryLiveRecordList_FinderLiveLotteryRecord  lotteryRecordList  = 1;
}

message FinderLotteryLiveRecordList_FinderLiveLotteryRecord {
    optional  uint32  liveStartTime  = 1;
    repeated  FinderLiveLotteryInfo  lotteryInfo  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  objectNonceId  = 5;
    optional  int32  retCode  = 6;
    optional  uint32  continueFlag  = 7;
    optional  bytes  lastBuffer  = 8;
}

message FinderManualCloseLiveReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  finderUsername  = 3;
    optional  uint64  objectId  = 4;
    optional  string  objectNonceId  = 5;
}

message FinderManualCloseLiveResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  liveDurationSeconds  = 2;
    optional  uint32  liveAudiencesNum  = 3;
    optional  uint32  liveBeLikedNum  = 4;
    optional  uint32  liveNewFansNum  = 5;
}

message FinderMarkReadRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  MarkReadStat  readStats  = 3;
}

message FinderMarkReadResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderMedia {
    optional  string  url  = 1;
    optional  string  thumbUrl  = 2;
    optional  uint32  mediaType  = 3;
    optional  uint32  videoPlayLen  = 4;
    optional  float  width  = 5;
    optional  float  height  = 6;
    optional  string  md5Sum  = 7;
    optional  uint32  fileSize  = 8;
    optional  int32  bitrate  = 9;
    repeated  FinderMediaSpec  spec  = 10;
    optional  string  coverUrl  = 11;
    optional  string  decodeKey  = 12;
    optional  string  urlToken  = 13;
    optional  string  thumbUrlToken  = 14;
    optional  string  coverUrlToken  = 15;
    optional  FinderMediaCodecInfo  codecInfo  = 16;
    optional  FinderLiveMediaSpec  liveSpec  = 17;
    optional  FinderHlsMediaSpecList  hlsSpec  = 18;
    optional  uint32  hotFlag  = 19;
    optional  FinderHalfRect  halfRect  = 20;
    optional  string  fullThumbUrl  = 21;
    optional  string  fullThumbUrlToken  = 22;
    optional  string  fullUrl  = 23;
    optional  float  fullWidth  = 24;
    optional  float  fullHeight  = 25;
    optional  string  fullMd5Sum  = 26;
    optional  uint32  fullFileSize  = 27;
    optional  int32  fullBitrate  = 28;
}

message FinderMediaCodecInfo {
    optional  float  videoScore  = 1;
    optional  float  videoCoverScore  = 2;
    optional  float  videoAudioScore  = 3;
    optional  float  thumbScore  = 4;
    optional  float  hdimgScore  = 5;
    optional  bool  hasStickers  = 6;
}

message FinderMediaExtra {
    optional  string  text  = 1;
}

message FinderMediaSpec {
    optional  string  fileFormat  = 1;
    optional  uint32  firstLoadBytes  = 2;
    optional  uint32  bitRate  = 3;
    optional  string  codingFormat  = 4;
}

message FinderMediaSpecList {
    repeated  FinderMediaSpec  specList  = 1;
}

message FinderMegaVideo {
    optional  MegaVideo  video  = 1;
    optional  FinderContact  contact  = 2;
}

message FinderMention {
    optional  string  headUrl  = 1;
    optional  string  nickname  = 2;
    optional  uint32  mentionType  = 3;
    optional  string  mentionContent  = 4;
    optional  uint32  createtime  = 5;
    optional  string  thumbUrl  = 6;
    optional  uint64  mentionId  = 7;
    optional  uint64  refObjectId  = 8;
    optional  uint64  refCommentId  = 9;
    optional  uint32  flag  = 10;
    optional  uint32  extflag  = 11;
    optional  string  refContent  = 12;
    optional  FinderNotification  notification  = 13;
    optional  uint32  mediaType  = 14;
    optional  string  description  = 15;
    optional  string  replyNickname  = 16;
    optional  string  replyUsername  = 17;
    optional  string  refObjectNonceId  = 18;
    optional  string  username  = 19;
    optional  FinderMentionContact  contact  = 20;
    optional  FinderMentionContact  replyContact  = 21;
    optional  FinderMentionAggregated  aggregated  = 22;
    repeated  FinderContact  aggregatedContactList  = 23;
    optional  uint32  aggregatedCount  = 24;
    optional  uint32  followExpireTime  = 25;
    optional  string  clientMsgId  = 26;
    optional  uint64  followId  = 27;
    optional  uint32  refObjectType  = 28;
    optional  uint64  refVideoObjectId  = 29;
    optional  string  refVideoObjectNonceId  = 30;
}

message FinderMentionAggregated {
    optional  string  nicknameList  = 1;
    optional  uint64  nicknameCount  = 2;
    repeated  string  headUrlList  = 3;
}

message FinderMentionContact {
    optional  FinderContact  contact  = 1;
    optional  bool  isSelf  = 2;
}

message FinderMentionCount {
    optional  uint32  count  = 1;
    optional  uint32  mentionLikeCount  = 2;
    optional  uint32  mentionCommentCount  = 3;
    optional  uint32  mentionNotificationCount  = 4;
    optional  uint32  followCount  = 5;
    optional  uint32  fansCount  = 7;
    optional  uint32  fansAddCount  = 8;
    optional  uint32  normalCount  = 9;
    optional  uint32  systemCount  = 10;
    optional  uint32  newFollowCount  = 11;
    optional  string  latestNotificationBriefing  = 12;
    optional  uint64  latestNotificationTime  = 13;
}

message FinderMentionList {
    repeated  FinderMention  mentions  = 1;
}

message FinderMentionedMusic {
    optional  string  docId  = 1;
    optional  FinderMusicInfo  musicInfo  = 2;
}

message FinderMentionedUser {
    optional  string  username  = 1;
    optional  uint32  source  = 2;
    optional  string  nickname  = 3;
}

message FinderMentionedUserReportInfo {
    optional  uint32  num  = 1;
    repeated  FinderMentionedUserReportInfo_ReportInfo  atContent  = 2;
}

message FinderMentionedUserReportInfo_ReportInfo {
    optional  uint32  index  = 1;
    optional  uint32  source  = 2;
    optional  string  username  = 3;
}

message FinderModBlackList {
    optional  uint32  optype  = 1;
    optional  uint64  refObjectid  = 2;
    optional  uint64  refCommentid  = 3;
    optional  string  username  = 4;
    optional  string  fansid  = 5;
    optional  string  refObjectNonceId  = 6;
    optional  uint32  scene  = 7;
}

message FinderModBlockPosterSetting {
    optional  string  finderUsername  = 1;
    optional  uint32  optype  = 2;
}

message FinderModEventRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  eventTopicId  = 3;
    optional  uint32  scene  = 4;
    optional  uint64  objectId  = 5;
    optional  string  finderUsername  = 6;
}

message FinderModEventResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderModFeedReproduction {
    optional  uint32  notReproduce  = 1;
}

message FinderModFeedSetting {
    optional  uint64  objectid  = 1;
    optional  uint32  scene  = 2;
    optional  uint32  optype  = 3;
    optional  string  objectNonceId  = 4;
}

message FinderModFriendRecommendSetting {
    optional  uint32  notRecommendToFriend  = 1;
}

message FinderModHotTabTitle {
    optional  string  titleName  = 1;
}

message FinderModMentionedRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint32  optype  = 2;
    optional  string  finderUsername  = 3;
    repeated  uint64  objectId  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderModMentionedResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FinderModMsgSessionMuteSetting {
    optional  uint32  optype  = 1;
    optional  string  sessionId  = 2;
}

message FinderModProfileStickySetting {
    optional  uint64  objectid  = 1;
    optional  uint32  optype  = 2;
    optional  string  objectNonceId  = 3;
}

message FinderModUserHeadImg {
    optional  bytes  headImg  = 1;
}

message FinderModUserHeadImgResp {
    optional  string  headImgUrl  = 1;
}

message FinderModUserInfo {
    optional  string  nickname  = 1;
    optional  string  signature  = 2;
    optional  string  coverImgUrl  = 3;
    optional  string  headImgUrl  = 4;
    optional  string  country  = 5;
    optional  string  province  = 6;
    optional  string  city  = 7;
    optional  int32  sex  = 8;
    optional  uint32  birthYear  = 9;
    optional  uint32  birthMonth  = 10;
    optional  uint32  birthDay  = 11;
    optional  uint32  notShowLocationSwitch  = 12;
    optional  uint32  notShowSexSwitch  = 13;
    optional  uint32  notShowBirthSwitch  = 14;
    optional  uint32  finderVideoSwitch  = 15;
    optional  uint32  privateSwitch  = 16;
    optional  uint32  mentionedSwitch  = 17;
    optional  FinderContactExtInfo  registerInfo  = 18;
    optional  uint32  showFinderInWxSwitch  = 19;
}

message FinderModUserInfoResp {
    optional  FinderNicknameVerifyInfo  verifyInfo  = 1;
}

message FinderMsgSessionInfo {
    optional  string  toUsername  = 1;
    optional  string  sessionId  = 2;
    optional  uint32  rejectMsg  = 3;
    optional  uint32  enableAction  = 4;
    optional  bytes  msgExtInfo  = 5;
}

message FinderMusicInfo {
    optional  string  docId  = 1;
    optional  string  albumThumbUrl  = 2;
    optional  string  name  = 3;
    optional  string  artist  = 4;
    optional  string  albumName  = 5;
    optional  string  mediaStreamingUrl  = 6;
}

message FinderMusicSearchInfo {
    optional  FinderMusicInfo  musicInfo  = 1;
    optional  string  highlightSongName  = 2;
    optional  string  highlightArtist  = 3;
    optional  string  highlightAlbumName  = 4;
}

message FinderMyAcct {
    repeated  FinderContact  myacct  = 1;
}

message FinderNearbySection {
    optional  FinderSectionInfo  sectionInfo  = 1;
    repeated  FinderObject  objects  = 2;
}

message FinderNicknameVerifyInfo {
    optional  string  verifyPrefix  = 1;
    optional  string  bannerWording  = 2;
    optional  string  verifyLink  = 3;
    optional  string  appname  = 4;
    optional  string  verifyNickname  = 5;
    optional  string  headImgUrl  = 6;
    optional  uint32  errScene  = 7;
    optional  string  bannerApplink  = 8;
    optional  string  bannerAppname  = 9;
}

message FinderNotInterestedConfig {
    repeated  NotInterestedConfig  config  = 1;
}

message FinderNoticationPromoteLikingExtInfo {
    optional  uint64  refObjectId  = 1;
    optional  uint64  refObjectNonceId  = 2;
}

message FinderNotification {
    optional  string  title  = 1;
    optional  string  content  = 2;
    optional  uint32  subType  = 3;
    optional  string  link  = 4;
    optional  string  miniappName  = 5;
    optional  bytes  extInfo  = 6;
}

message FinderOBjectTicket {
    optional  uint32  orgWxUin  = 1;
    optional  uint32  orgReleaseTime  = 2;
    optional  uint32  releaseScene  = 3;
    optional  uint32  curUin  = 4;
    optional  uint32  curReleaseUin  = 5;
    optional  uint64  nonce  = 6;
}

message FinderObject {
    optional  uint64  id  = 1;
    optional  string  nickname  = 2;
    optional  string  username  = 3;
    optional  FinderObjectDesc  objectDesc  = 4;
    optional  uint32  createtime  = 5;
    optional  uint32  likeFlag  = 6;
    repeated  FinderCommentInfo  likeList  = 7;
    repeated  FinderCommentInfo  commentList  = 8;
    optional  uint32  forwardCount  = 9;
    optional  FinderContact  contact  = 10;
    optional  string  eupdOob  = 11;
    repeated  string  recommenderList  = 12;
    optional  uint64  displayid  = 13;
    optional  uint32  likeCount  = 14;
    optional  uint32  commentCount  = 15;
    optional  string  recommendReason  = 16;
    optional  uint32  readCount  = 17;
    optional  uint32  deletetime  = 18;
    optional  uint32  commentClose  = 19;
    optional  uint64  refObjectFlag  = 20;
    optional  uint64  refObjectid  = 21;
    optional  FinderContact  refObjectContact  = 22;
    optional  uint32  recommendType  = 23;
    optional  uint32  friendLikeCount  = 24;
    optional  string  objectNonceId  = 25;
    optional  string  refObjectNonceId  = 26;
    optional  uint32  objectStatus  = 27;
    optional  string  sendShareFavWording  = 28;
    optional  uint32  originalFlag  = 29;
    optional  uint32  secondaryShowFlag  = 30;
    optional  string  tipsWording  = 31;
    optional  uint32  orgRecommendType  = 32;
    repeated  FinderContact  mentionedUserContact  = 33;
    optional  string  sessionBuffer  = 34;
    optional  uint32  warnFlag  = 35;
    optional  string  warnWording  = 36;
    optional  FinderLiveInfo  liveInfo  = 37;
    optional  uint32  favCount  = 38;
    optional  uint32  favFlag  = 39;
    optional  uint32  foldedFlag  = 40;
    optional  FinderFoldedLayout  foldedLayout  = 41;
    optional  uint32  recommendReasonType  = 42;
    optional  uint32  urlValidDuration  = 43;
    optional  uint32  forwardStyle  = 44;
    optional  string  posTriggerConfig  = 45;
    optional  uint32  privateFlag  = 46;
    optional  uint32  msgEventFlag  = 47;
    optional  string  msgId  = 48;
    optional  uint32  incFriendLikeCount  = 49;
    optional  string  debugMessage  = 50;
    optional  bytes  likeBuffer  = 51;
    optional  uint32  permissionFlag  = 52;
    optional  FinderVideo  longVideoNoneed  = 53;
    optional  uint32  stickyTime  = 54;
    optional  FinderObjectHotTopicList  hotTopics  = 55;
    optional  FinderAttachmentList  attachmentList  = 56;
    optional  uint32  objectType  = 57;
    optional  FinderSnsShareInfo  snsShareInfo  = 58;
    optional  FinderObjectWebInfo  webInfo  = 59;
    optional  uint32  followFeedCount  = 60;
}

message FinderObjectAsyncLoadInfo {
    optional  uint64  objectId  = 1;
}

message FinderObjectBGMInfo {
    optional  FinderMusicInfo  musicInfo  = 1;
    optional  string  groupId  = 2;
    optional  uint32  hasBgm  = 3;
}

message FinderObjectDesc {
    optional  string  description  = 1;
    repeated  FinderMedia  media  = 2;
    optional  uint32  mediaType  = 3;
    optional  FinderMediaExtra  extra  = 4;
    optional  FinderLocation  location  = 5;
    optional  FinderExtendedReading  extReading  = 6;
    optional  FinderTopic  topic  = 7;
    repeated  FinderMentionedUser  mentionedUser  = 8;
    optional  FinderLiveDesc  liveDesc  = 9;
    optional  FinderLocation  feedLocation  = 10;
    repeated  FinderMentionedMusic  mentionedMusics  = 11;
    optional  FinderLongVideoDesc  longVideoDesc  = 12;
    optional  FinderMusicInfo  imgFeedBgmInfo  = 13;
    optional  FinderObjectBGMInfo  followPostInfo  = 14;
    optional  FinderFromAppInfo  fromApp  = 15;
    optional  FinderTemplateInfo  tmplInfo  = 16;
    optional  FinderObjectEventDesc  event  = 17;
}

message FinderObjectEventDesc {
    optional  uint64  eventTopicId  = 1;
    optional  string  eventName  = 2;
    optional  string  eventCreatorNickname  = 3;
}

message FinderObjectExtInfo {
    optional  uint32  objectType  = 1;
    optional  string  wordingSingleLike  = 2;
    optional  string  wordingMultiLike  = 3;
    optional  string  wordingLikelistTitle  = 4;
    optional  string  wordingMentionLike  = 5;
    optional  string  wordingMentionFriendsLike  = 6;
    optional  string  wordingMentionLikeLikes  = 7;
    optional  string  iconFilledDarkUrl  = 8;
    optional  string  iconFilledLightUrl  = 9;
    optional  string  iconOutlinedDarkUrl  = 10;
    optional  string  iconOutlinedLightUrl  = 11;
    optional  string  wordingIcon  = 12;
    optional  string  iconFilledGroupUrl  = 13;
    optional  string  iconFilledLightUrlFullpage  = 14;
    optional  string  iconFilledDarkUrlFullpage  = 15;
}

message FinderObjectExtInfoList {
    repeated  FinderObjectExtInfo  objectExtInfoList  = 1;
}

message FinderObjectHotTopic {
    optional  uint64  topicId  = 1;
    optional  string  topicName  = 2;
    optional  uint32  topicType  = 3;
    optional  uint32  jumpFlag  = 4;
    optional  bytes  topicBuffer  = 5;
}

message FinderObjectHotTopicBuffer {
    optional  string  internalWording  = 1;
    optional  uint32  recommendSystem  = 2;
}

message FinderObjectHotTopicList {
    repeated  FinderObjectHotTopic  topics  = 1;
}

message FinderObjectList {
    repeated  FinderObject  objectList  = 1;
}

message FinderObjectUidUnit {
    optional  uint64  objectId  = 1;
    optional  string  objectNonceId  = 2;
}

message FinderObjectWebInfo {
    optional  string  url  = 1;
}

message FinderOplogRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    repeated  FinderCmdItem  cmdList  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
}

message FinderOplogResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderCmdRet  retList  = 2;
}

message FinderOriginalInfo {
    optional  uint32  restRepostCount  = 1;
    optional  uint32  restApplyOriginalCount  = 2;
    optional  uint32  restPunishDay  = 3;
    optional  uint32  punishYearFlag  = 4;
    optional  uint32  postNeedCheckFlag  = 5;
}

message FinderOriginalUserFeedsCtx {
    repeated  uint64  recievedIds  = 1;
    optional  uint64  lastObjectId  = 2;
}

message FinderOriginalUserFeedsRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  uint64  refObjectId  = 3;
    optional  string  finderUsername  = 4;
    optional  bytes  lastBuffer  = 5;
    optional  string  refObjectNonceId  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
}

message FinderOriginalUserFeedsResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  uint32  continueFlag  = 3;
    optional  bytes  lastBuffer  = 4;
}

message FinderPersonalMsgExtInfo {
    optional  uint32  sessionStatus  = 1;
    optional  uint32  action  = 2;
}

message FinderPoiRedirectRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  poi  = 3;
    optional  uint64  fromObjectId  = 4;
    optional  uint32  fromType  = 5;
    optional  float  longitude  = 6;
    optional  float  latitude  = 7;
}

message FinderPoiRedirectResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  redirectType  = 2;
    optional  string  profileUsername  = 3;
}

message FinderPoiStreamCtx {
    optional  uint64  lastId  = 1;
    repeated  uint64  recievedIds  = 2;
    optional  uint32  pageNum  = 3;
    optional  uint64  sessionId  = 4;
    optional  uint32  continueFlag  = 5;
}

message FinderPoiStreamRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  float  longitude  = 4;
    optional  float  latitude  = 5;
    optional  FinderClientStatus  status  = 6;
    optional  string  poi  = 7;
    optional  uint64  fromObjectId  = 8;
    optional  uint32  fromType  = 9;
}

message FinderPoiStreamResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
}

message FinderPostLiveAppMsgRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  FinderLiveAppMsg  msg  = 4;
    optional  uint64  liveId  = 5;
    optional  uint64  objectId  = 6;
    optional  string  objectNonceId  = 7;
    optional  uint32  scene  = 8;
    optional  string  finderUsername  = 9;
}

message FinderPostLiveAppMsgResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  realnameUrl  = 2;
    optional  uint64  serverMsgId  = 3;
    optional  string  sessionId  = 4;
}

message FinderPostLiveMsgReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  liveCookies  = 3;
    optional  FinderLiveMsg  msg  = 4;
    optional  uint64  liveId  = 5;
    optional  string  clientMsgId  = 6;
    optional  uint64  objectId  = 7;
    optional  string  objectNonceId  = 8;
}

message FinderPostLiveMsgResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  realnameUrl  = 2;
    optional  uint32  statusFlag  = 3;
}

message FinderPostRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  FinderObjectDesc  objectDesc  = 3;
    optional  string  clientid  = 4;
    optional  uint64  refObjectid  = 5;
    optional  string  refObjectNonceId  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
    optional  float  longitude  = 8;
    optional  float  latitude  = 9;
    optional  float  feedLongitude  = 10;
    optional  float  feedLatitude  = 11;
    optional  uint32  isCreatedInFinder  = 12;
    repeated  string  topics  = 13;
    optional  uint32  originalFlag  = 14;
    optional  uint64  likeid  = 15;
    repeated  string  musicDocId  = 16;
    optional  bytes  eupdOob  = 17;
    optional  string  groupId  = 18;
    optional  FinderVideoDesc  videoDescNoneed  = 19;
    optional  FinderAttachmentList  attachmentList  = 20;
    optional  string  groupBgmUrl  = 21;
    optional  uint32  groupPostType  = 22;
    optional  uint32  objectType  = 23;
    optional  uint64  eventTopicId  = 24;
    optional  uint32  waitType  = 25;
}

message FinderPostResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  FinderObject  object  = 2;
    optional  FinderContact  selfContact  = 3;
}

message FinderPreCreateEventRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  username  = 3;
    optional  string  eventName  = 4;
    optional  string  eventDescription  = 5;
    optional  string  eventCoverImgUrl  = 6;
}

message FinderPreCreateEventResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint64  eventTopicId  = 2;
}

message FinderPreFetch {
    optional  uint32  needPrefetch  = 1;
    optional  uint32  needShowReddot  = 2;
    optional  uint32  triggerScene  = 3;
}

message FinderPreloadGlobalInfo {
    optional  uint32  prevCount  = 1;
    optional  uint32  nextCount  = 2;
    optional  uint32  maxBitRate  = 3;
    optional  float  preloadFileSizePercent  = 4;
    optional  uint32  preloadFileMinBytes  = 5;
    optional  uint32  preloadMaxConcurrentCount  = 6;
    optional  uint32  preConcurrentCount  = 7;
    optional  uint32  playConcurrentCount  = 8;
    optional  float  startPreloadPercent  = 9;
    optional  uint32  startPreloadSecs  = 10;
    optional  uint32  megavideoMaxBitRate  = 11;
    optional  uint32  megavideoPrevCount  = 12;
    optional  uint32  megavideoNextCount  = 13;
}

message FinderPreloadInfo {
    optional  uint64  preloadStrategyId  = 1;
    optional  FinderPreloadGlobalInfo  globalInfo  = 2;
    repeated  FinderPreloadObjectInfo  objectInfo  = 3;
    repeated  MegaVideoFinderPreloadObjectInfo  megavideoInfo  = 4;
}

message FinderPreloadObjectInfo {
    optional  uint64  feedId  = 1;
    optional  float  interestFactor  = 2;
}

message FinderQRCodeRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  finderUsername  = 2;
    optional  FinderBaseRequest  finderBasereq  = 3;
}

message FinderQRCodeResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  qrcode  = 2;
    optional  string  qrcodeUrl  = 3;
}

message FinderReInitResp {
    repeated  FinderContact  myacct  = 1;
    optional  uint32  userver  = 2;
    optional  uint32  needReinit  = 3;
}

message FinderReadReportRequest {
    optional  BaseRequest  baserequest  = 1;
    repeated  uint64  ids  = 2;
    optional  uint32  scene  = 3;
    optional  string  finderUsername  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderReadReportResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  finderUsername  = 2;
}

message FinderRecognizeMusicLastBuff {
    optional  uint32  recognizeTimes  = 1;
}

message FinderRecognizeMusicRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  musicFeatureBuffer  = 3;
    optional  float  musicOriginalLen  = 4;
    optional  bytes  lastBuff  = 5;
}

message FinderRecognizeMusicResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderMusicInfo  musicInfo  = 2;
    optional  uint32  continueFlag  = 3;
    optional  bytes  lastBuff  = 4;
}

message FinderRecommendEventRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
}

message FinderRecommendEventResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderEventInfo  eventList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
}

message FinderRecommendNicknameRequest {
    optional  BaseRequest  baseRequest  = 1;
}

message FinderRecommendNicknameResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  nickName  = 2;
}

message FinderRecommendRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  objectid  = 2;
    optional  uint32  optype  = 3;
    optional  string  objectNonceId  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderRecommendResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderRecoverLiveInfo {
    optional  uint64  objectId  = 1;
    optional  uint64  liveId  = 2;
}

message FinderRedDot {
    optional  uint32  showReddot  = 1;
    optional  FinderRedDotCtrlInfo  ctrlInfo  = 2;
    repeated  FinderRedDotCtrlInfo  ctrlInfoList  = 3;
}

message FinderRedDotCtrlInfo {
    optional  uint32  priority  = 1;
    optional  uint32  type  = 2;
    optional  bytes  extInfo  = 3;
    repeated  FinderTipsShowInfo  showInfos  = 4;
    optional  string  tipsId  = 5;
    optional  uint32  expireTime  = 6;
}

message FinderRedDotExtInfo {
    optional  string  tabTipsRevokeId  = 1;
    optional  string  username  = 2;
    optional  uint32  deliveryTime  = 3;
    optional  uint64  objectId  = 4;
    optional  uint32  uinDelete  = 5;
    optional  uint32  updateTime  = 6;
    optional  uint64  finderUinDelete  = 7;
    optional  bytes  tabTipsByPassInfo  = 8;
    optional  string  objectNonceId  = 9;
    optional  uint32  displayTabType  = 10;
}

message FinderRefreshLiveMicRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  uint64  objectId  = 4;
    optional  string  finderUsername  = 5;
    optional  uint64  liveMicId  = 6;
    optional  string  objectNonceId  = 7;
}

message FinderRefreshLiveMicResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  LiveSdkInfo  liveSdkInfo  = 2;
}

message FinderRemoveFansSetting {
    optional  string  fansid  = 1;
}

message FinderRevokePathRedDot {
    repeated  FinderRevokePathRedDotCtrlInfo  revokeCtrlInfo  = 1;
}

message FinderRevokePathRedDotCtrlInfo {
    optional  string  path  = 1;
    optional  uint32  revokePathType  = 2;
    repeated  string  tipsIdList  = 3;
}

message FinderRevokeTabTips {
    repeated  FinderRevokeTabTipsInfo  revokeTabTipsInfo  = 1;
}

message FinderRevokeTabTipsInfo {
    optional  string  tabTipsRevokeId  = 1;
    repeated  FinderTabTipsInfo  tabTipsInfo  = 2;
}

message FinderSearchBuff {
    optional  uint32  lastAccountOffset  = 1;
    optional  uint64  lastAccountFinderUin  = 2;
    optional  uint32  lastObjectOffset  = 3;
    optional  uint64  lastObjectId  = 4;
    optional  uint32  lastAccountPageNum  = 5;
    optional  uint32  lastObjectPageNum  = 6;
}

message FinderSearchFansLastBuff {
    optional  uint32  pageNum  = 1;
    optional  uint32  continueFlag  = 2;
}

message FinderSearchFansRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuff  = 3;
    optional  string  query  = 4;
    optional  string  finderUsername  = 5;
}

message FinderSearchFansResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  continueFlag  = 2;
    optional  bytes  lastBuff  = 3;
    repeated  FinderFansContact  fansContactList  = 4;
}

message FinderSearchGetHotWordListRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
}

message FinderSearchGetHotWordListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderSearchHotWord  hotWord  = 2;
}

message FinderSearchHotWord {
    optional  string  hotwordText  = 1;
    optional  uint32  actionType  = 2;
    optional  string  link  = 3;
    optional  string  appid  = 4;
    optional  bytes  sessionBuffer  = 5;
}

message FinderSearchInfo {
    optional  FinderContact  contact  = 1;
    optional  string  highlightNickname  = 2;
    optional  string  highlightSignature  = 3;
    optional  uint32  fansCount  = 4;
    optional  uint32  friendFollowCount  = 5;
    optional  string  highlightProfession  = 6;
}

message FinderSearchRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  query  = 2;
    optional  uint32  offset  = 3;
    optional  bytes  lastBuff  = 4;
    optional  uint32  scene  = 5;
    optional  string  requestId  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
    optional  bytes  hotwordSessionBuffer  = 8;
}

message FinderSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderSearchInfo  infoList  = 2;
    optional  uint32  offset  = 3;
    optional  uint32  continueFlag  = 4;
    repeated  FinderObject  objectList  = 5;
    optional  bytes  lastBuff  = 6;
    optional  string  requsetId  = 7;
    repeated  FinderTopicSearchInfo  topicInfoList  = 8;
    optional  uint32  objectContinueFlag  = 9;
    optional  uint32  topicContinueFlag  = 10;
    repeated  FinderMusicSearchInfo  musicInfoList  = 11;
    optional  uint32  musicContinueFlag  = 12;
}

message FinderSearchSuggestRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  query  = 3;
    optional  uint32  offset  = 4;
}

message FinderSearchSuggestResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderSearchSuggestResponse_Suggestion  suggest  = 2;
}

message FinderSearchSuggestResponse_Suggestion {
    optional  string  suggest  = 1;
}

message FinderSectionInfo {
    optional  string  sectionTitle  = 1;
    optional  string  sectionId  = 2;
    optional  string  sectionDesc  = 3;
    optional  uint32  sectionType  = 4;
    optional  uint32  moreActionType  = 5;
    optional  string  sectionSubTitle  = 6;
    optional  string  iconUrlLight  = 7;
    optional  string  iconUrlDark  = 8;
    optional  uint32  iconType  = 9;
    optional  FinderGetTopicListResponse  topicResp  = 10;
    optional  FinderStreamResponse  streamResp  = 11;
    optional  FinderGetRelatedListResp  relatedResp  = 12;
    optional  uint32  recommendType  = 13;
}

message FinderSessionInfo {
    optional  string  sessionId  = 1;
    optional  uint32  recommendType  = 2;
    optional  uint32  recommendSystem  = 3;
    optional  string  recommendWording  = 4;
    optional  uint32  curLikeCount  = 5;
    optional  uint32  curCommentCount  = 6;
    optional  uint64  actionFeedId  = 7;
    optional  uint64  topicId  = 8;
    optional  string  topicText  = 9;
    optional  string  referText  = 10;
    optional  uint64  actionTimeMs  = 11;
    repeated  uint32  recallTypes  = 12;
    optional  uint32  deliveryScene  = 13;
    optional  uint64  relatedFeedId  = 14;
    optional  uint64  deliveryTime  = 15;
    optional  string  relatedFeedIdStr  = 16;
    optional  uint64  setConditionFlag  = 17;
    optional  string  msgId  = 18;
    optional  SessionFriendCommentInfo  friendCommentInfo  = 19;
    optional  string  rootFeedIdStr  = 20;
    optional  uint32  totalFriendLikeCount  = 21;
    optional  uint32  newFriendLikeCount  = 22;
    repeated  uint32  recallIndex  = 23;
    optional  string  tagId  = 24;
    optional  uint32  refreshCount  = 25;
    optional  uint64  hotTabCardSendTimeUs  = 26;
    optional  uint64  requestId  = 27;
    optional  uint32  mediaType  = 28;
    optional  uint32  vidLen  = 29;
    optional  uint64  createTime  = 30;
    optional  uint64  tabType  = 31;
    optional  uint64  relatedRootFeedId  = 32;
    repeated  FinderSessionRecallInfo  recallInfo  = 33;
    optional  float  rankScore  = 34;
    optional  bytes  secreteData  = 35;
    optional  uint32  favExposeCount  = 36;
    optional  uint64  tabSessionId  = 37;
    optional  string  friendLikedList  = 38;
    optional  uint32  finWatchExposeCount  = 39;
    optional  uint32  commentLikeExposeCount  = 40;
    optional  string  fromSessionId  = 41;
    optional  uint32  isRefreshedRelikeFeed  = 42;
    optional  uint32  deviceTypeId  = 43;
    optional  string  devicePlatform  = 44;
    optional  uint32  downloadSpeedKbps  = 45;
    optional  uint32  netType  = 46;
    optional  uint64  videoId  = 47;
    optional  bool  isChild  = 51;
    optional  uint32  parentMediaType  = 52;
    optional  uint64  parentId  = 53;
    optional  uint32  feedPos  = 54;
    optional  uint32  pullType  = 55;
    optional  uint32  reportColumnCardIdkey  = 56;
    optional  uint32  commentExposeCount  = 57;
    optional  string  clientReportBuff  = 58;
    optional  uint64  relatedSessionId  = 59;
    optional  uint32  isLiveFeed  = 60;
    optional  uint32  isLiveFinderuser  = 61;
    optional  uint32  isLongVideo  = 62;
    optional  uint32  ccardEf7D  = 63;
    optional  uint32  ccardIcp  = 64;
    optional  uint32  ccardIic  = 65;
    optional  uint32  ccardEi  = 66;
    optional  uint32  extFlag  = 67;
    optional  uint32  commentScene  = 68;
    optional  uint64  ccardEid  = 69;
    optional  uint64  objectId  = 70;
    optional  uint64  finderUin  = 71;
}

message FinderSessionRecallInfo {
    optional  uint32  recallType  = 1;
    optional  float  recallScore  = 2;
    optional  uint32  recallIndex  = 3;
    optional  string  reportInfo  = 4;
}

message FinderSessionSecreteInfo {
    optional  uint32  likeCount  = 1;
    optional  uint32  readCount  = 2;
    optional  uint32  hotReadCount  = 3;
    optional  uint32  commentCount  = 4;
}

message FinderSetAnchorStatusRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  uint64  liveId  = 3;
    optional  bytes  anchorStatusBuffer  = 4;
    optional  uint64  objectId  = 5;
    optional  string  finderUsername  = 6;
    optional  uint32  liveStatus  = 7;
    optional  string  objectNonceId  = 8;
}

message FinderSetAnchorStatusResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderSetCoLikeReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    repeated  CoLikeInfo  colike  = 4;
}

message FinderSetCoLikeResp {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderShakeContactCtx {
    optional  uint64  nextIndex  = 1;
    repeated  uint32  readUinList  = 2;
    optional  int64  clearTime  = 3;
}

message FinderShakeContactInfo {
    repeated  FinderShakeContactItem  shakeList  = 1;
}

message FinderShakeContactItem {
    optional  FinderContact  shakeContact  = 1;
    optional  uint32  shakeType  = 2;
    repeated  FinderObject  shakeObjects  = 3;
    optional  string  shakeReason  = 4;
    optional  FinderGetLikedListResponse  likeResp  = 5;
    optional  FinderStreamResponse  streamResp  = 6;
}

message FinderShakeContactRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  float  longitude  = 3;
    optional  float  latitude  = 4;
    optional  FinderClientStatus  status  = 5;
}

message FinderShakeContactResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderShakeContactInfo  shakeInfo  = 2;
}

message FinderShakeHumanContactInfo {
    optional  uint32  wxUin  = 1;
    repeated  FinderShakeHumanContactItem  targetList  = 2;
}

message FinderShakeHumanContactItem {
    optional  uint32  wxUin  = 1;
    optional  string  username  = 2;
    optional  float  score  = 3;
}

message FinderSingleCtx {
    optional  string  username  = 1;
    optional  uint32  nsingle  = 2;
}

message FinderSnsGetLiveObjectListCtx {
    optional  uint32  pageNum  = 1;
    repeated  uint64  cacheSnsShareId  = 2;
    repeated  uint32  cacheSnsShareIdShareCount  = 3;
    repeated  uint32  cacheSnsShareIdShareTime  = 4;
    optional  uint64  sessionId  = 5;
    optional  uint32  lastShareType  = 6;
    repeated  uint64  cacheFriendWatchingId  = 7;
    repeated  uint32  cacheFriendWatchingIdWatchCount  = 8;
    optional  uint32  cacheSnsShareIdSrc  = 9;
    optional  uint32  cacheFriendWatchingIdSrc  = 10;
    repeated  FinderSnsGetLiveObjectListCtx_UsernameList  cacheSnsShareIdShareFriend  = 11;
}

message FinderSnsGetLiveObjectListCtx_UsernameList {
    repeated  string  username  = 1;
}

message FinderSnsGetLiveObjectListDivider {
    optional  uint64  layoutId  = 1;
    optional  uint32  uiStyle  = 2;
}

message FinderSnsGetLiveObjectListLayoutInfo {
    repeated  uint64  layoutId  = 1;
}

message FinderSnsGetLiveObjectListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    repeated  Stats  stats  = 4;
}

message FinderSnsGetLiveObjectListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  liveObject  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  FinderSnsGetLiveObjectListLayoutInfo  layoutInfo  = 5;
    repeated  FinderSnsGetLiveObjectListDivider  divider  = 6;
    optional  bool  enableSetting  = 7;
}

message FinderSnsShareInfo {
    optional  uint32  type  = 1;
    optional  uint32  shareCount  = 2;
    optional  uint32  watchingCount  = 3;
    repeated  FinderContact  shareList  = 4;
}

message FinderSpamObject {
    repeated  FinderSpamObject_SpamObject  object  = 1;
}

message FinderSpamObject_SpamObject {
    optional  uint64  objectid  = 1;
}

message FinderStatsReportRequest {
    optional  BaseRequest  baserequest  = 1;
    repeated  Stats  stats  = 2;
    optional  string  finderUsername  = 3;
    optional  FinderBaseRequest  finderBasereq  = 4;
    optional  FinderClientStatus  status  = 5;
    optional  bytes  reqExtData  = 6;
    optional  int64  clientTimeMs  = 7;
    optional  MegaVideoClientStatus  videoStatus  = 8;
}

message FinderStatsReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message FinderStreamBaseCtx {
    optional  uint64  lastId  = 1;
    repeated  uint64  recievedIds  = 2;
    optional  uint32  pageNum  = 3;
    optional  uint64  sessionId  = 4;
    optional  uint32  continueFlag  = 5;
}

message FinderStreamCard {
    optional  uint64  layoutId  = 1;
    optional  string  titleWording  = 2;
    optional  string  linkWording  = 3;
    optional  uint32  linkAction  = 4;
    repeated  FinderObject  object  = 5;
    repeated  uint32  objectAction  = 6;
    optional  bytes  cardBuffer  = 7;
    optional  uint32  cardType  = 8;
    optional  bool  withoutLink  = 9;
    optional  uint32  getRelatedListScene  = 10;
    optional  bool  continueAtTheEnd  = 11;
    optional  string  endWording  = 12;
    optional  uint32  endAction  = 13;
    optional  string  subTitleWording  = 14;
    optional  uint64  id  = 15;
    optional  string  sessionBuffer  = 16;
    optional  FinderStreamTxtCard  innerStreamEndTxtCard  = 17;
    optional  FinderStreamCardActionInfo  linkActionInfo  = 18;
    repeated  FinderStreamCardActionInfo  objectActionInfo  = 19;
    optional  FinderStreamCardActionInfo  endActionInfo  = 20;
    optional  FinderStreamCardActionInfo  fetchContentActionInfo  = 21;
    optional  string  refreshWording  = 22;
    optional  FinderStreamCardActionInfo  refreshActionInfo  = 23;
    optional  FinderStreamCardActionInfo  continueAtTheEndActionInfo  = 24;
}

message FinderStreamCardActionInfo {
    optional  uint32  type  = 1;
    optional  FinderStreamRequest  streamReq  = 2;
    optional  FinderGetRelatedListReq  getRelatedListReq  = 3;
}

message FinderStreamCtx {
    optional  uint64  lastSortId  = 1;
    optional  uint32  curState  = 2;
    optional  float  longitude  = 3;
    optional  float  latitude  = 4;
    optional  uint32  pageNum  = 5;
    optional  uint32  isBDelivered  = 6;
    repeated  uint64  prefetchIds  = 7;
    optional  uint32  tabType  = 8;
    repeated  uint64  recievedIds  = 9;
    optional  uint64  maxId  = 10;
    repeated  FinderSingleCtx  singleCtxs  = 11;
    optional  uint32  recvIdCount  = 12;
    optional  uint64  sessionId  = 13;
    optional  uint32  useFeedbank  = 14;
    optional  uint32  objectOffset  = 15;
    repeated  SessionObjects  sessionObjects  = 16;
    optional  uint64  lastPullTopTime  = 17;
    optional  uint64  prevLastPullTopTime  = 18;
    optional  uint64  pendingPartialExposedObjectId  = 19;
    repeated  uint64  cacheResultObjectIds  = 20;
    repeated  uint64  deliveredIds  = 21;
    optional  bool  isRelikeMode  = 22;
    repeated  uint32  cacheVidPlayTimeMs  = 23;
    repeated  uint32  cacheLastMarkreadTime  = 24;
    repeated  uint32  cacheRecommendType  = 25;
    repeated  float  cacheRankScore  = 26;
    repeated  uint32  cacheRefreshCount  = 27;
    repeated  uint64  hotTabCardTimeMs  = 28;
    optional  int32  hotTabCardPos  = 29;
    optional  FinderStreamCtx_UserContact  shakeUserContact  = 30;
    optional  uint32  totalMainFeedsToSend  = 31;
    optional  uint32  recommendSystem  = 32;
    optional  uint64  prefetchCacheTime  = 33;
    optional  uint32  initPullType  = 34;
    optional  uint32  prefetchCacheTabType  = 35;
    repeated  bytes  cacheReportItem  = 36;
    repeated  bytes  cacheFriendLikeOrder  = 37;
    repeated  string  cacheRecommendWording  = 38;
    optional  bool  hasPendingColumnCard  = 39;
    optional  int32  columnCardPos  = 40;
    repeated  uint64  columnCardFeedId  = 41;
    optional  bytes  columnCardInfo  = 42;
    optional  bool  columnCardLastIsFoldedFeed  = 43;
    repeated  bytes  columnCardFeedReportItem  = 44;
    repeated  uint32  columnCardFeedRecType  = 45;
    optional  uint64  columnCardTopicIdForHotTab  = 46;
    optional  uint64  columnCardRequestId  = 47;
    optional  uint32  columnCardRecSys  = 48;
    optional  bool  isFriendLikeFeedFew  = 49;
    optional  uint32  friendTabInsertExtObjectEveryFeedCount  = 50;
    optional  bytes  customReportInfo  = 51;
}

message FinderStreamCtx_UserContact {
    optional  string  headImgUrl  = 1;
    optional  string  nickname  = 2;
}

message FinderStreamDivider {
    optional  uint32  insertBeforeIndex  = 1;
    optional  string  wording  = 2;
    optional  uint32  uiStyle  = 3;
    optional  uint64  layoutId  = 4;
}

message FinderStreamLayoutInfo {
    repeated  FinderStreamDivider  divider  = 1;
    repeated  FinderStreamCard  card  = 2;
    repeated  uint64  layoutId  = 3;
}

message FinderStreamPrefechTimeIntervalConf {
    optional  uint32  followReddotPrefetchOutterInterval  = 1;
    optional  uint32  friendReddotPrefetchOutterInterval  = 2;
    optional  uint32  hotReddotPrefetchOutterInterval  = 3;
    optional  uint32  nearbyReddotPrefetchOutterInterval  = 4;
    optional  uint32  followNoReddotPrefetchOutterInterval  = 5;
    optional  uint32  friendNoReddotPrefetchOutterInterval  = 6;
    optional  uint32  hotNoReddotPrefetchOutterInterval  = 7;
    optional  uint32  nearbyNoReddotPrefetchOutterInterval  = 8;
    optional  uint32  followReddotPrefetchInnerInterval  = 9;
    optional  uint32  friendReddotPrefetchInnerInterval  = 10;
    optional  uint32  hotReddotPrefetchInnerInterval  = 11;
    optional  uint32  nearbyReddotPrefetchInnerInterval  = 12;
    optional  uint32  followNoReddotPrefetchInnerInterval  = 13;
    optional  uint32  friendNoReddotPrefetchInnerInterval  = 14;
    optional  uint32  hotNoReddotPrefetchInnerInterval  = 15;
    optional  uint32  nearbyNoReddotPrefetchInnerInterval  = 16;
    optional  bool  tabInnerHotPrefetchSwitch  = 17;
}

message FinderStreamRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  bytes  lastBuffer  = 3;
    optional  string  finderUsername  = 4;
    optional  uint32  pullType  = 5;
    optional  FinderBaseRequest  finderBasereq  = 6;
    optional  float  longitude  = 7;
    optional  float  latitude  = 8;
    optional  string  sessionId  = 9;
    optional  FinderClientStatus  status  = 10;
    repeated  MarkReadStat  readStats  = 11;
    optional  uint32  prefetchConsumedFlag  = 12;
    optional  uint32  displayTabType  = 13;
    optional  uint64  tabTipsObjectId  = 14;
    optional  string  tabTipsObjectNonceId  = 15;
    repeated  Stats  stats  = 16;
    optional  uint64  partialExposedObjectId  = 17;
    repeated  FinderUnreadItem  markUnreadObjectList  = 18;
    optional  bytes  cardBuffer  = 19;
    optional  uint32  specialRequestScene  = 20;
    optional  string  tabTipsUsername  = 21;
    optional  bytes  tabTipsByPassInfo  = 22;
    optional  FinderLiveClientStatus  liveStatus  = 23;
    optional  string  tabTipsPath  = 24;
    optional  uint32  requestSource  = 25;
}

message FinderStreamResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  string  historyHeadWording  = 4;
    optional  string  historyEndWording  = 5;
    optional  uint32  retFlag  = 6;
    optional  uint32  needClear  = 7;
    optional  uint32  gethistoryNow  = 8;
    optional  uint32  prefetchLastFeedCount  = 9;
    optional  FinderPreloadInfo  preloadInfo  = 10;
    optional  FinderContactRecommend  finderContactRecommend  = 11;
    optional  uint32  forceChangePrefetchResult  = 12;
    repeated  FinderObject  liveObjects  = 13;
    optional  FinderTopicRecommend  finderTopicRecommends  = 14;
    optional  FinderCategoryRecommend  finderCategoryRecommends  = 15;
    optional  string  curLocation  = 16;
    optional  FinderSectionInfo  sectionInfo  = 17;
    optional  FinderStreamPrefechTimeIntervalConf  intervalConf  = 18;
    optional  FinderStreamLayoutInfo  layoutInfo  = 19;
    optional  string  oob  = 20;
    optional  FinderLivePreloadInfo  livePreloadInfo  = 21;
    optional  bytes  debugMessage  = 22;
}

message FinderStreamTxtCard {
    optional  uint64  layoutId  = 1;
    optional  uint32  style  = 2;
    optional  string  titleWording  = 3;
    repeated  string  linkWording  = 4;
    repeated  FinderStreamCardActionInfo  linkActionInfo  = 5;
    repeated  string  linkReportId  = 6;
}

message FinderStreamUnreadRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    repeated  FinderUnreadItem  unreadItems  = 3;
}

message FinderStreamUnreadResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message FinderSuggestion {
    optional  string  suggest  = 1;
    optional  uint32  type  = 2;
    optional  uint64  hot  = 3;
    optional  string  highlightSuggest  = 4;
}

message FinderSwitch {
    optional  uint32  debugId  = 1;
}

message FinderSyncRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint32  selector  = 2;
    optional  SKBuiltinBuffer_t  keyBuf  = 3;
    repeated  FinderContact  contacts  = 4;
    repeated  FinderContact  self  = 5;
    optional  string  finderUsername  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
    optional  uint32  scene  = 8;
    repeated  FinderRedDotCtrlInfo  ctrlInfoList  = 9;
    optional  string  entranceTipsId  = 10;
}

message FinderSyncResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  CmdList  cmdListDiscarded  = 2;
    optional  uint32  continueFlag  = 3;
    optional  SKBuiltinBuffer_t  keyBuf  = 4;
    repeated  FinderContact  contacts  = 5;
    repeated  FinderContact  self  = 6;
    repeated  FinderCmdItem  cmdList  = 7;
    optional  uint32  roundRobinInterval  = 8;
    optional  FinderCheckExpireInfo  checkExpireInfo  = 9;
}

message FinderTabInfo {
    optional  uint32  displayTabType  = 1;
    optional  string  tabName  = 2;
}

message FinderTabTips {
    repeated  FinderTabTipsInfo  tabTipsInfo  = 1;
}

message FinderTabTipsByPassInfo {
    optional  uint32  tabTipsObjectIdType  = 1;
    optional  uint64  topicId  = 2;
    optional  uint32  position  = 3;
    optional  string  wording  = 4;
    optional  bytes  byPassCustomInfo  = 5;
    optional  bytes  innerExpInfo  = 6;
}

message FinderTabTipsInfo {
    optional  FinderRedDotCtrlInfo  ctrlInfo  = 1;
    optional  uint64  objectId  = 2;
    optional  string  objectNonceId  = 3;
    optional  uint32  displayTabType  = 4;
}

message FinderTagContact {
    optional  FinderContact  contact  = 1;
    optional  uint32  contactFlag  = 2;
}

message FinderTemplateData {
    optional  string  name  = 1;
    optional  FinderContact  contact  = 2;
}

message FinderTemplateInfo {
    optional  string  templateId  = 1;
    optional  uint32  templateType  = 2;
    optional  bytes  extInfo  = 3;
}

message FinderTextToSpeechReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  finderUsername  = 3;
    optional  string  inputText  = 4;
}

message FinderTextToSpeechResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  outputSpeech  = 2;
    optional  uint64  lenOfTime  = 3;
}

message FinderTimelineRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  string  maxId  = 3;
    optional  string  firstPageMd5  = 4;
    optional  FinderBaseRequest  finderBasereq  = 5;
}

message FinderTimelineResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  string  firstPageMd5  = 3;
    repeated  FinderObject  algoRecommendObject  = 4;
    optional  uint64  algoRecommendDisplayid  = 5;
}

message FinderTipsReportExtInfo {
    optional  uint32  showType  = 1;
    optional  string  wordingKey  = 2;
    optional  uint32  friendCount  = 3;
    optional  string  columnTopicId  = 4;
    optional  uint32  style  = 5;
    optional  string  scene  = 6;
    optional  uint64  reddotFlag  = 7;
    optional  uint32  type  = 8;
    optional  string  remark  = 9;
    optional  string  topicId  = 10;
}

message FinderTipsShowEntranceExtInfo {
    optional  uint64  objectId  = 1;
    optional  string  objectNonceId  = 2;
    optional  uint32  displayTabType  = 3;
    optional  string  username  = 4;
    repeated  string  multiUsernames  = 5;
    optional  string  reportExtInfo  = 6;
    optional  bytes  tabTipsByPassInfo  = 7;
}

message FinderTipsShowInfo {
    optional  uint32  showType  = 1;
    optional  uint32  count  = 2;
    optional  string  title  = 3;
    optional  string  iconUrl  = 4;
    optional  uint32  clearType  = 5;
    optional  string  path  = 6;
    optional  string  parent  = 7;
    optional  uint32  showExtInfoType  = 8;
    optional  bytes  showExtInfo  = 9;
    repeated  string  multiIconUrls  = 10;
    optional  ClientStatsInfo  clientStatsInfo  = 11;
}

message FinderTipsShowTabExtInfo {
    optional  uint32  jumpPriority  = 1;
}

message FinderTopic {
    optional  string  finderTopicInfo  = 1;
}

message FinderTopicBgmInfo {
    optional  FinderContact  contact  = 1;
    optional  FinderMusicInfo  musicInfo  = 2;
    optional  string  audioTrackUrl  = 3;
    optional  string  groupId  = 4;
}

message FinderTopicInfo {
    optional  string  topic  = 1;
    optional  uint64  topicId  = 2;
    optional  uint32  feedCount  = 3;
    optional  string  topicNonceId  = 4;
    optional  uint32  topicType  = 5;
    optional  uint32  followFlag  = 6;
    optional  string  coverUrl  = 7;
    optional  uint32  friendFollowCount  = 8;
    optional  uint32  displayId  = 9;
    optional  uint32  canFollow  = 10;
    optional  FinderMusicInfo  musicInfo  = 11;
    optional  uint32  onlineViewed  = 12;
    optional  FinderTopicBgmInfo  followFeedInfo  = 13;
    optional  uint32  feedFollowPermissionFlag  = 14;
    optional  FinderTemplateInfo  tmplInfo  = 15;
    optional  uint32  disabledFlag  = 16;
    optional  FinderEventInfo  event  = 17;
}

message FinderTopicListCtx {
    repeated  uint64  recievedIds  = 1;
    optional  uint64  lastId  = 2;
    optional  uint32  pageNum  = 3;
    optional  uint32  recommendState  = 4;
    optional  uint32  recommendSimilarFlag  = 5;
    optional  uint64  firstFeedId  = 6;
}

message FinderTopicRecommend {
    repeated  FinderTopicInfo  topicList  = 1;
}

message FinderTopicSearchInfo {
    optional  FinderTopicInfo  topicInfo  = 1;
    optional  string  highlightTopic  = 2;
}

message FinderTopicSuggestRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  query  = 2;
    optional  FinderBaseRequest  finderBasereq  = 3;
    optional  uint32  scene  = 4;
}

message FinderTopicSuggestResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderSuggestion  suggestions  = 2;
}

message FinderUnreadItem {
    optional  uint64  objectId  = 1;
    optional  string  objectNonceId  = 2;
    optional  uint32  displayTabType  = 3;
    optional  string  sessionBuffer  = 4;
}

message FinderUploadHeadImgRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  uint32  totalLen  = 2;
    optional  uint32  startPos  = 3;
    optional  bytes  data  = 4;
    optional  string  imgMd5  = 5;
    optional  uint32  scene  = 6;
}

message FinderUploadHeadImgResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  totalLen  = 2;
    optional  uint32  startPos  = 3;
    optional  string  imgUrl  = 4;
    optional  bool  completed  = 5;
}

message FinderUserInfo {
    optional  string  coverImgUrl  = 1;
    optional  uint32  authIconType  = 2;
    optional  string  authProfession  = 3;
    optional  FinderAuthInfo  authInfo  = 4;
}

message FinderUserPagePreviewRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  wxUsername  = 3;
}

message FinderUserPagePreviewResponse {
    optional  BaseResponse  baseresponse  = 1;
    optional  FinderContact  contact  = 2;
    optional  uint32  forbiddenFlag  = 3;
    repeated  FinderObject  object  = 4;
    optional  uint32  nextDuration  = 5;
    optional  uint32  showRecentLikedListEntrance  = 6;
}

message FinderUserPageRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  uint64  maxId  = 3;
    optional  string  firstPageMd5  = 4;
    optional  string  finderUsername  = 5;
    optional  uint32  needFansCount  = 6;
    optional  FinderBaseRequest  finderBasereq  = 7;
    optional  bytes  lastBuffer  = 8;
    optional  uint32  enterType  = 9;
    optional  FinderClientStatus  status  = 10;
    optional  uint64  topicId  = 11;
    optional  uint32  tabType  = 12;
}

message FinderUserPageResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderObject  object  = 2;
    optional  string  firstPageMd5  = 3;
    optional  FinderUserInfo  finderUserInfo  = 4;
    optional  FinderContact  contact  = 5;
    optional  uint32  feedsCount  = 6;
    optional  uint32  continueFlag  = 7;
    optional  FinderNicknameVerifyInfo  verifyInfo  = 8;
    optional  uint32  fansCount  = 9;
    optional  bytes  lastBuffer  = 10;
    optional  uint32  friendFollowCount  = 11;
    repeated  string  userTags  = 12;
    optional  uint32  originalEntranceFlag  = 13;
    optional  OriginalEntranceInfo  entranceInfo  = 14;
    optional  FinderPreloadInfo  preloadInfo  = 15;
    repeated  FinderObject  liveObjects  = 16;
    optional  uint32  privateLock  = 17;
    optional  FinderWxAppInfo  wxaShopInfo  = 18;
    optional  FinderLiveNoticeInfo  liveNoticeInfo  = 19;
    repeated  FinderTopicInfo  usualTopics  = 20;
    optional  uint32  liveDurationHours  = 21;
    optional  uint32  logoutLock  = 22;
    optional  string  acctDetailEntrance  = 23;
    optional  string  loggingoutWording  = 24;
}

message FinderUserPrepareRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
    optional  FinderBaseRequest  finderBasereq  = 3;
    optional  float  longitude  = 4;
    optional  float  latitude  = 5;
}

message FinderUserPrepareResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  actionType  = 2;
    optional  FinderNicknameVerifyInfo  verifyInfo  = 3;
    optional  FinderContact  selfContact  = 4;
    optional  uint32  userFlag  = 5;
    optional  string  nicknameModifyWording  = 6;
    optional  string  noPostPrivilegeTitle  = 7;
    optional  string  noPostPrivilegeDesc  = 8;
    optional  uint32  signatureMinLength  = 9;
    optional  uint32  signatureMaxLength  = 10;
    optional  uint32  nicknameMinLength  = 11;
    optional  uint32  nicknameMaxLength  = 12;
    optional  DataCenterConfig  datacenterConf  = 13;
    optional  uint32  likedTotalCount  = 14;
    optional  uint32  favTotalCount  = 15;
    optional  string  realnameUrl  = 16;
    optional  FinderWxAppInfo  wxaShopBindUrl  = 17;
    optional  FinderWxAppInfo  wxaShopInfo  = 18;
    optional  uint32  liveGlobalFlag  = 19;
    optional  AcctTransferConfig  acctTransferConf  = 20;
    optional  PostActionSheetList  actionList  = 21;
    optional  uint32  livePrivilegesFlag  = 22;
    optional  string  creatorCentorUrl  = 23;
    optional  uint32  foreignUserFlag  = 24;
    optional  string  acctDetailUrl  = 25;
    optional  AccountExtraSettingConfig  acctExtSettingConfig  = 26;
}

message FinderUserpageCtx {
    optional  uint64  lastId  = 1;
    optional  uint32  pageNum  = 2;
    optional  uint32  lastStickyTime  = 3;
    repeated  uint64  sentObjectId  = 4;
}

message FinderUtilsReq {
    optional  BaseRequest  baserequest  = 1;
    optional  FinderBaseRequest  finderBasereq  = 2;
    optional  string  username  = 3;
    optional  uint32  type  = 4;
    optional  string  url  = 5;
    optional  uint32  musicSid  = 6;
}

message FinderUtilsResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  FinderUtilsResp_FinderUtilsArticleItem  article  = 2;
    optional  FinderUtilsResp_FinderUtilsMiniAppItem  miniapp  = 3;
    optional  FinderMusicInfo  musicInfo  = 4;
}

message FinderUtilsResp_FinderUtilsArticleItem {
    optional  string  title  = 1;
}

message FinderUtilsResp_FinderUtilsMiniAppItem {
    optional  string  title  = 1;
}

message FinderVideo {
    optional  uint64  id  = 1;
    optional  uint32  createTime  = 2;
    optional  FinderVideoDesc  desc  = 3;
    optional  uint32  forwardCount  = 4;
    optional  uint32  likeCount  = 5;
    optional  uint32  commentCount  = 6;
    optional  uint32  favCount  = 7;
    optional  uint32  friendLikeCount  = 8;
    optional  uint32  spamFlag  = 9;
    optional  string  objectNonceId  = 10;
    optional  uint64  firstBindId  = 11;
    optional  bool  isTest  = 12;
}

message FinderVideoAttachment {
    optional  uint64  id  = 1;
    optional  MegaVideo  video  = 2;
    optional  string  videoNonceId  = 3;
}

message FinderVideoBulletCommentInfo {
    optional  uint64  id  = 1;
    optional  string  content  = 2;
    optional  uint64  videoTimestamp  = 3;
    optional  uint32  createTime  = 4;
    optional  uint32  extFlag  = 5;
}

message FinderVideoDesc {
    optional  string  description  = 1;
    repeated  FinderVideoMedia  media  = 2;
    optional  uint32  mediaType  = 3;
}

message FinderVideoExtendedReading {
    optional  string  link  = 1;
    optional  string  title  = 2;
}

message FinderVideoLocation {
    optional  float  longitude  = 1;
    optional  float  latitude  = 2;
    optional  string  city  = 3;
    optional  string  poiName  = 4;
    optional  string  poiAddress  = 5;
    optional  string  poiClassifyId  = 6;
    optional  uint32  poiClassifyType  = 7;
    optional  string  province  = 8;
    optional  string  region  = 9;
    optional  string  country  = 10;
}

message FinderVideoMedia {
    optional  string  url  = 1;
    optional  string  thumbUrl  = 2;
    optional  uint32  mediaType  = 3;
    optional  uint32  videoPlayLen  = 4;
    optional  float  width  = 5;
    optional  float  height  = 6;
    optional  string  md5Sum  = 7;
    optional  uint32  fileSize  = 8;
    optional  int32  bitrate  = 9;
    optional  string  decodeKey  = 10;
}

message FinderVideoMediaSpec {
    optional  string  fileFormat  = 1;
    optional  uint32  firstLoadBytes  = 2;
    optional  uint32  bitRate  = 3;
    optional  string  codingFormat  = 4;
}

message FinderVideoMentionedUser {
    optional  string  username  = 1;
    optional  uint32  source  = 2;
}

message FinderVideoTopic {
    optional  string  finderTopicInfo  = 1;
}

message FinderWaitDetail {
    optional  uint32  type  = 1;
    optional  uint32  percent  = 2;
    optional  uint32  waitMs  = 3;
}

message FinderWxAppInfo {
    optional  string  appId  = 1;
    optional  string  appUrl  = 2;
}

message FinderWxMentionCount {
    optional  uint32  count  = 1;
    optional  uint32  mentionLikeCount  = 2;
    optional  uint32  mentionCommentCount  = 3;
    optional  uint32  mentionNotificationCount  = 4;
    optional  string  headImgUrl  = 5;
    optional  FinderRedDotCtrlInfo  ctrlInfo  = 6;
    optional  uint32  friendObjectlikeLikeCount  = 7;
    optional  uint32  friendObjectrecommendLikeCount  = 8;
    optional  uint32  followAcceptedCount  = 9;
    optional  uint32  updateTime  = 10;
}

message FlowDataRechargePreinQueryRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  payFuncId  = 2;
    optional  string  mobile  = 3;
    optional  string  productName  = 4;
    optional  string  payAppId  = 5;
    optional  string  remarks  = 6;
    optional  string  ticket  = 7;
}

message FlowDataRechargePreinQueryResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  outerErrCode  = 2;
    optional  string  outerErrMsg  = 3;
    optional  string  outerRemarks  = 4;
    optional  int32  wxErrCode  = 5;
    optional  string  wxErrMsg  = 6;
}

message Follow {
    optional  uint32  index  = 1;
    optional  string  username  = 2;
    optional  uint32  step  = 3;
}

message FollowCardBDMchInfo {
    optional  uint32  isFollowedCardbdMch  = 1;
    optional  string  followTips  = 2;
    optional  string  followLogo  = 3;
    optional  string  followTipsColor  = 5;
    optional  uint64  followTipsSize  = 6;
    optional  string  followParam  = 7;
    optional  uint32  isShowPopUp  = 8;
    optional  PopUpWindowInfo  popUpWindowInfo  = 9;
    optional  string  followLogoAfter  = 10;
    optional  string  followTipsColorAfter  = 11;
    optional  string  followTipsAfter  = 12;
}

message FollowCardBDMchRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  followParam  = 3;
    optional  uint32  posStateBefore  = 4;
    optional  uint32  posStateAfter  = 5;
}

message FollowCardBDMchResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message ForcePushItem {
    optional  string  forcePushId  = 1;
    optional  uint32  createTime  = 2;
    optional  uint32  expiredTime  = 3;
    optional  string  desc  = 4;
    optional  string  userIcon  = 5;
    optional  string  userName  = 6;
    optional  string  extinfo  = 7;
}

message ForeignHbCurrencyTips {
    optional  string  title  = 1;
    repeated  DocumentItem  contents  = 2;
}

message ForeignHbDetailRecord {
    optional  uint64  receiveAmount  = 1;
    optional  string  receiveTime  = 2;
    optional  string  receiveId  = 3;
    optional  uint32  state  = 4;
    optional  string  gameTips  = 5;
    optional  string  userName  = 6;
    optional  string  receiveAmountDesc  = 7;
}

message ForeignHbDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  nativeUrl  = 2;
    optional  uint32  limit  = 3;
    optional  uint32  offset  = 4;
    optional  string  sendId  = 5;
    optional  uint32  msgType  = 6;
}

message ForeignHbDetailResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  recNum  = 4;
    optional  uint32  totalNum  = 5;
    optional  uint64  totalAmount  = 6;
    optional  string  sendId  = 7;
    optional  uint64  amount  = 8;
    optional  string  wishing  = 9;
    optional  uint32  isSender  = 10;
    optional  string  receiveId  = 11;
    repeated  ForeignHbOperationsInfo  operationHeader  = 12;
    optional  uint32  hbType  = 13;
    optional  uint32  isContinue  = 14;
    optional  uint32  hbStatus  = 15;
    optional  uint32  receiveStatus  = 16;
    optional  string  statusMess  = 17;
    optional  string  headTitle  = 18;
    optional  uint32  hbKind  = 19;
    optional  uint64  recAmount  = 20;
    repeated  ForeignHbDetailRecord  record  = 21;
    optional  ForeignHbOperationsInfo  operationTail  = 22;
    optional  uint32  jumpChange  = 23;
    optional  string  changeWording  = 24;
    optional  string  sendUserName  = 25;
    optional  string  changeUrl  = 26;
    optional  uint32  jumpChangeType  = 27;
    optional  string  changeIconUrl  = 28;
    optional  uint32  enableAnswerByExpression  = 29;
    optional  uint32  enableAnswerBySelfie  = 30;
    optional  string  amountDesc  = 31;
    optional  string  amountDescIcon  = 32;
    optional  ForeignHbCurrencyTips  currencyTips  = 33;
}

message ForeignHbOpenReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  nativeUrl  = 2;
    optional  string  sendId  = 3;
    optional  string  sessionUserName  = 4;
    optional  string  province  = 5;
    optional  string  city  = 6;
    optional  string  timingIdentifier  = 7;
    optional  uint32  msgType  = 8;
    optional  uint32  inWay  = 9;
}

message ForeignHbOpenResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  sendId  = 4;
    optional  uint64  amount  = 5;
    optional  uint32  recNum  = 6;
    optional  uint64  recAmount  = 7;
    optional  uint32  totalNum  = 8;
    optional  uint64  totalAmount  = 9;
    optional  uint32  hbType  = 10;
    optional  uint32  isSender  = 11;
    optional  uint32  isContinue  = 12;
    optional  uint32  receiveStatus  = 13;
    optional  uint32  hbStatus  = 14;
    optional  string  statusMess  = 15;
    optional  string  wishing  = 16;
    optional  string  receiveId  = 17;
    optional  string  headTitle  = 18;
    repeated  ForeignHbOperationsInfo  operationHeader  = 19;
    repeated  ForeignHbDetailRecord  record  = 20;
    optional  uint32  jumpChange  = 21;
    optional  string  changeWording  = 22;
    optional  string  sendUserName  = 23;
    optional  string  changeUrl  = 24;
    optional  RealNameInfo  realNameInfo  = 25;
    optional  string  systemMsgContext  = 26;
    optional  string  sessionUserName  = 27;
    optional  uint32  jumpChangeType  = 28;
    optional  string  changeIconUrl  = 29;
    optional  JumpRemind  jumpRemind  = 30;
    optional  uint32  enableAnswerByExpression  = 31;
    optional  uint32  enableAnswerBySelfie  = 32;
    optional  InterceptWin  interceptWin  = 33;
    optional  string  amountDesc  = 34;
    optional  string  amountDescIcon  = 35;
    optional  ForeignHbCurrencyTips  currencyTips  = 36;
    optional  ForeignHbOperationsInfo  operationTail  = 37;
}

message ForeignHbOperationsInfo {
    optional  string  name  = 1;
    optional  int32  type  = 2;
    optional  string  content  = 3;
    optional  uint32  enable  = 4;
    optional  string  iconUrl  = 5;
    optional  uint32  ossKey  = 6;
    optional  uint32  focus  = 7;
}

message ForeignHbReceiveReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  nativeUrl  = 2;
    optional  string  sendId  = 3;
    optional  string  province  = 4;
    optional  string  city  = 5;
    optional  uint32  msgType  = 6;
    optional  uint32  inWay  = 7;
}

message ForeignHbReceiveResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  sendId  = 4;
    optional  string  wishing  = 5;
    optional  uint32  isSender  = 6;
    optional  uint32  receiveStatus  = 7;
    optional  uint32  hbStatus  = 8;
    optional  string  statusMess  = 9;
    optional  uint32  hbType  = 10;
    optional  string  sendUserName  = 11;
    optional  string  timingIdentifier  = 12;
    optional  bool  jumpH5  = 13;
}

message FreeWifiReport {
    optional  string  id  = 1;
    optional  uint32  protocolNumber  = 2;
    optional  string  logContent  = 3;
    optional  uint64  createTimeMillis  = 4;
    optional  int32  errcode  = 5;
}

message FreeWifiReportRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  FreeWifiReport  freeWifiReport  = 2;
}

message FreeWifiReportResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FreeWifiReport  freeWifiReport  = 2;
}

message FriendFeedItem {
    optional  string  userName  = 1;
    optional  string  iconUrl  = 2;
    required  string  title  = 3;
    required  string  detail  = 4;
}

message FriendPlayItem {
    required  string  userName  = 1;
    required  string  detail  = 2;
}

message FrontPageInfo {
    optional  string  appid  = 1;
    optional  string  nickName  = 2;
    optional  string  userName  = 3;
    optional  string  headImgUrl  = 4;
    optional  string  welcomeMsg  = 5;
    optional  string  privacyDescriUrl  = 6;
    optional  string  timestamp  = 7;
    optional  string  sign  = 8;
    optional  string  subTitle  = 9;
    optional  uint32  hasMobile  = 10;
}

message FullBizChat {
    optional  BizChat  chat  = 1;
    repeated  BizChatMember  member  = 2;
    optional  string  brandUserName  = 3;
}

message FunctionDetail {
    optional  WalletFunction  function  = 1;
    optional  WalletActivity  activity  = 2;
    optional  WalletEntrance  entrance  = 3;
    optional  bool  needGetLatestInfo  = 4;
    optional  bool  downloadRestrict  = 5;
    optional  string  disclaimer  = 6;
    optional  string  subtitle  = 7;
}

message FunctionGroup {
    optional  WalletGroupInfo  groupInfo  = 1;
    repeated  FunctionDetail  functionList  = 2;
}

message FunctionSwitch {
    required  uint32  functionId  = 1;
    required  uint32  switchValue  = 2;
}

message GameAppInfo {
    optional  WxaInfo  base  = 1;
    optional  GameDetailInfo  detail  = 2;
}

message GameCenterSearchGameResultItem {
    required  string  appId  = 1;
    required  string  name  = 2;
    required  string  remark  = 3;
    required  string  iconUrl  = 4;
    optional  string  brief  = 5;
    required  GameDownloadInfo  downloadInfo  = 6;
    optional  uint32  actionType  = 7;
    optional  string  targetUrl  = 8;
}

message GameCenterSearchRecommendRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  keyword  = 2;
    repeated  string  installedApps  = 3;
    optional  string  lang  = 4;
    optional  string  country  = 5;
}

message GameCenterSearchRecommendResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  title  = 2;
    repeated  string  recommendKey  = 3;
    required  string  jsonData  = 4;
    repeated  string  appId  = 5;
    repeated  string  description  = 6;
    repeated  GameCenterSearchRecommendResultItem  resultItemList  = 7;
}

message GameCenterSearchRecommendResultItem {
    required  string  appId  = 1;
    required  string  recommendKey  = 2;
    optional  string  description  = 3;
    optional  uint32  actionType  = 4;
    optional  string  targetUrl  = 5;
}

message GameCenterSearchRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  keywords  = 2;
    repeated  string  installedApps  = 3;
    optional  string  lang  = 4;
    optional  string  country  = 5;
}

message GameCenterSearchResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GameCenterSearchResultGroup  resultGroups  = 2;
    required  string  jsonData  = 3;
}

message GameCenterSearchResultGroup {
    optional  string  title  = 1;
    required  uint32  type  = 2;
    repeated  GameCenterSearchGameResultItem  gameItems  = 3;
    repeated  GameCenterSearchWebResultItem  webItems  = 4;
    optional  string  moreContentTitle  = 5;
    optional  string  moreContentUrl  = 6;
    repeated  GameCenterSearchSimilarGameResultItem  similarGameItems  = 7;
}

message GameCenterSearchSimilarGameResultItem {
    required  GameCenterSearchGameResultItem  gameItem  = 1;
    repeated  string  playInformation  = 2;
}

message GameCenterSearchWebResultItem {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  thumbUrl  = 3;
    optional  string  targetUrl  = 4;
    optional  uint32  articleType  = 5;
    optional  uint32  articleId  = 6;
    optional  string  appId  = 7;
    optional  uint32  createTime  = 8;
    optional  string  appName  = 9;
}

message GameCenterTabSettingControl {
    required  GameCenterTabSettingControl_TabConfiguration  tab  = 1;
    repeated  GameCenterTabSettingControl_TabStyleSetting  tabStyleList  = 2;
}

message GameCenterTabSettingControl_TabConfiguration {
    repeated  GameCenterTabSettingControl_TabSetting  tabList  = 1;
    optional  GameCenterTabSettingControl_TabDefaultConfiguration  defaultTab  = 2;
    optional  string  backgroundColor  = 3;
    optional  string  darkModeBackgroundColor  = 4;
}

message GameCenterTabSettingControl_TabDefaultConfiguration {
    optional  string  key  = 1;
}

message GameCenterTabSettingControl_TabJumpWeappInfo {
    required  string  appId  = 1;
    optional  string  path  = 2;
}

message GameCenterTabSettingControl_TabReport {
    optional  uint32  areaId  = 1;
    optional  uint32  positionId  = 2;
    optional  string  externInfo  = 3;
}

message GameCenterTabSettingControl_TabSetting {
    required  string  key  = 1;
    optional  string  title  = 2;
    optional  string  iconUrl  = 3;
    optional  string  selectedIconUrl  = 4;
    optional  uint32  type  = 5;
    optional  string  jumpUrl  = 6;
    optional  GameCenterTabSettingControl_TabJumpWeappInfo  jumpWeapp  = 7;
    optional  GameCenterTabSettingControl_TabReport  report  = 8;
    optional  string  darkModeIconUrl  = 9;
    optional  string  darkModeSelectedIconUrl  = 10;
    optional  string  titleColor  = 11;
    optional  string  selectedTitleColor  = 12;
    optional  string  darkModeTitleColor  = 13;
    optional  string  darkModeSelectedTitleColor  = 14;
    optional  bool  disablePreloadWebview  = 15;
    optional  uint32  preloadWebviewDelayTime  = 16;
}

message GameCenterTabSettingControl_TabStyleSetting {
    optional  int64  startTime  = 1;
    optional  int64  endTime  = 2;
    required  GameCenterTabSettingControl_TabConfiguration  tab  = 3;
}

message GameCommunityControl {
    repeated  GameCommunityControl_AlbumInfo  albumInfoList  = 1;
}

message GameCommunityControl_AlbumInfo {
    optional  string  appId  = 1;
    optional  string  gameName  = 2;
    optional  string  albumName  = 3;
    optional  string  defaultTitle  = 4;
}

message GameCreateChatRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  appId  = 2;
    required  string  groupId  = 3;
    optional  bytes  chatRoomName  = 4;
    optional  bytes  userName  = 5;
}

message GameCreateChatRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  createChatRoomUrl  = 2;
    optional  int32  errCode  = 3;
}

message GameDetailInfo {
    optional  string  albumPicUrl  = 1;
    optional  string  briefIntro  = 2;
}

message GameDetailSettingControl {
    required  uint32  jumpType  = 1;
    optional  string  jumpUrl  = 2;
}

message GameDownloadInfo {
    optional  string  itunesUrl  = 1;
}

message GameIndex4FeedsBlock {
    optional  uint32  tplId  = 1;
    optional  uint32  positionId  = 2;
    optional  string  externInfo  = 3;
    optional  string  appId  = 4;
    optional  GameIndex4FeedsBlock_ImageTextTemplate  imageText  = 5;
    optional  GameIndex4FeedsBlock_VideoTemplate  video  = 6;
    optional  GameIndex4FeedsBlock_LiveTemplate  live  = 7;
    optional  GameIndex4FeedsBlock_MatchTemplate  match  = 8;
    optional  GameIndex4FeedsBlock_GameTemplate  game  = 9;
    optional  GameIndex4FeedsBlock_NoPlayGameTemplate  noPlayGame  = 10;
    optional  GameIndex4FeedsBlock_GameListTemplate  gameList  = 11;
    optional  GameIndex4FeedsBlock_CreateTopicTemplate  createTopic  = 12;
    optional  GameIndex4FeedsBlock_MoreGameTemplate  moreGame  = 13;
    optional  GameIndex4FeedsBlock_RecommendGameTemplate  recommendGame  = 14;
    optional  GameIndex4FeedsBlock_Corner  leftCorner  = 15;
    optional  GameIndex4FeedsBlock_Corner  rightCorner  = 16;
    optional  string  jumpUrl  = 17;
}

message GameIndex4FeedsBlock_Corner {
    optional  string  headImgUrl  = 1;
    optional  string  name  = 2;
    optional  string  desc  = 3;
    optional  string  jumpUrl  = 4;
    optional  uint32  cornerType  = 5;
}

message GameIndex4FeedsBlock_CreateTopicTemplate {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  subDesc  = 3;
}

message GameIndex4FeedsBlock_GameListTemplate {
    repeated  GameIndex4FeedsBlock_GameListTemplate_Game  gameList  = 1;
    optional  string  title  = 2;
    optional  string  moreDesc  = 3;
    optional  string  moreJumpUrl  = 4;
}

message GameIndex4FeedsBlock_GameListTemplate_Game {
    optional  AppItem  appItem  = 1;
    repeated  string  friendIconList  = 2;
    optional  string  friendDesc  = 3;
    optional  string  desc  = 4;
}

message GameIndex4FeedsBlock_GameTemplate {
    optional  string  title  = 1;
    optional  string  iconUrl  = 2;
    repeated  string  gameTagList  = 3;
    optional  string  recommendReason  = 4;
    optional  string  picUrl  = 5;
    optional  string  picJumpUrl  = 6;
    optional  string  videoUrl  = 8;
    optional  string  appId  = 9;
    optional  AppItem  appItem  = 10;
}

message GameIndex4FeedsBlock_ImageTextTemplate {
    optional  string  title  = 1;
    optional  string  content  = 2;
    repeated  string  picUrlList  = 3;
}

message GameIndex4FeedsBlock_LiveTemplate {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  picUrl  = 3;
    optional  string  liveDesc  = 4;
}

message GameIndex4FeedsBlock_MatchTemplate {
    optional  string  title  = 1;
    optional  string  picUrl  = 2;
    optional  string  desc  = 3;
}

message GameIndex4FeedsBlock_MoreGameTemplate {
    optional  string  desc  = 1;
    optional  string  jumpUrl  = 2;
}

message GameIndex4FeedsBlock_NoPlayGameTemplate {
    optional  string  title  = 1;
    optional  string  appId  = 2;
    optional  string  picUrl  = 3;
    optional  string  desc  = 4;
    optional  string  videoUrl  = 5;
    optional  AppItem  appItem  = 6;
    repeated  GameIndex4FeedsBlock_NoPlayGameTemplate_Friends  friendList  = 7;
    optional  string  friendDesc  = 8;
}

message GameIndex4FeedsBlock_NoPlayGameTemplate_Friends {
    optional  string  headImgUrl  = 1;
    optional  string  name  = 2;
}

message GameIndex4FeedsBlock_RecommendGameTemplate {
    optional  string  title  = 1;
    repeated  GameIndex4FeedsBlock_RecommendGameTemplate_GameItem  gameList  = 2;
    optional  string  moreDesc  = 3;
    optional  string  moreJumpUrl  = 4;
}

message GameIndex4FeedsBlock_RecommendGameTemplate_GameItem {
    optional  string  icon  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  jumpUrl  = 4;
    optional  string  appId  = 5;
}

message GameIndex4FeedsBlock_VideoTemplate {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  timeDesc  = 3;
    optional  string  picUrl  = 4;
}

message GameIndexGameBlock {
    required  AppItem  appItem  = 1;
    optional  GameIndexGameBlockEntrance  entrance  = 2;
    optional  GameIndexGameBlockContent  content  = 3;
    optional  string  desc  = 4;
}

message GameIndexGameBlockContent {
    repeated  GameIndexGameBlockContent_BlockContentItem  itemList  = 1;
}

message GameIndexGameBlockContent_ActRecomTpl {
    required  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  picUrl  = 3;
    optional  string  jumpUrl  = 4;
}

message GameIndexGameBlockContent_BlockContentItem {
    optional  string  moduleTitle  = 1;
    optional  uint32  positionId  = 2;
    optional  GameIndexGameBlockContent_ActRecomTpl  actRecom  = 3;
    optional  GameIndexGameBlockContent_SingleLineContentTpl  singleLineContent  = 4;
    optional  uint32  tplId  = 5;
    optional  string  externInfo  = 6;
}

message GameIndexGameBlockContent_SingleLineContentTpl {
    optional  string  title  = 1;
    optional  string  jumpUrl  = 2;
    optional  string  picUrl  = 3;
    optional  uint32  picType  = 4;
}

message GameIndexGameBlockEntrance {
    repeated  GameIndexGameBlockEntrance_BlockEntranceItem  itemList  = 1;
}

message GameIndexGameBlockEntrance_BlockEntranceItem {
    required  string  iconUrl  = 1;
    required  string  title  = 2;
    optional  string  desc  = 3;
    required  string  jumpUrl  = 4;
    optional  uint32  positionId  = 5;
    optional  string  externInfo  = 6;
}

message GameIndexGameRecomBlock {
    optional  string  moduleTitle  = 1;
    repeated  GameIndexGameRecomBlock_RecomBlockItem  itemList  = 2;
    optional  string  moreDesc  = 3;
    optional  string  moreUrl  = 4;
    optional  string  externInfo  = 5;
}

message GameIndexGameRecomBlock_RecomBlockItem {
    required  string  appName  = 1;
    optional  string  picUrl  = 2;
    optional  string  title  = 3;
    optional  string  desc  = 4;
    optional  string  externInfo  = 5;
    optional  string  jumpUrl  = 6;
    optional  string  appId  = 7;
}

message GameIndexMoreGameEntr {
    required  string  desc  = 1;
    optional  string  jumpUrl  = 2;
}

message GameIndexMyGame {
    repeated  GameIndexMyGame_Game  gameList  = 1;
    optional  GameIndexMyGame_More  moreGame  = 2;
}

message GameIndexMyGameRelated {
    optional  string  moduleTitle  = 1;
    optional  string  moduleSubTitle  = 2;
    optional  uint32  positionId  = 3;
    optional  string  externInfo  = 4;
    optional  uint32  tplId  = 5;
    optional  GameIndexMyGameRelated_IndexMyGameTextTpl  tplText  = 6;
    optional  GameIndexMyGameRelated_IndexMyGamePicTpl  tplPic  = 7;
    optional  uint32  bizType  = 8;
    optional  GameIndexMyGameRelated_IndexMyGameVideoCenterTpl  tplVideoCenter  = 9;
    optional  GameIndexMyGameRelated_VideoRecomTpl  tplVideoRecom  = 10;
}

message GameIndexMyGameRelated_IndexMyGamePicTpl {
    required  string  picUrl  = 1;
    optional  string  jumpUrl  = 2;
}

message GameIndexMyGameRelated_IndexMyGameTextTpl {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  picUrl  = 3;
    optional  uint32  picStyle  = 4;
    optional  string  jumpUrl  = 6;
    optional  string  coverPicUrl  = 7;
    optional  bool  isEnlarge  = 8;
}

message GameIndexMyGameRelated_IndexMyGameVideoCenterTpl {
    repeated  GameIndexMyGameRelated_IndexMyGameVideoCenterTpl_IndexMyGameVideoItem  itemList  = 1;
}

message GameIndexMyGameRelated_IndexMyGameVideoCenterTpl_IndexMyGameVideoItem {
    optional  string  tagName  = 1;
    optional  string  tagColor  = 2;
    optional  string  title  = 3;
    optional  string  desc  = 4;
    optional  string  detailDesc  = 5;
    optional  string  jumpUrl  = 6;
    optional  string  picUrl  = 7;
    optional  string  externInfo  = 8;
}

message GameIndexMyGameRelated_VideoRecomTpl {
    required  string  title  = 1;
    optional  string  detailDesc  = 2;
    optional  string  anchorIcon  = 3;
    optional  string  anchorName  = 4;
    optional  string  picUrl  = 5;
    optional  string  tagName  = 6;
    optional  uint32  styleType  = 7;
    optional  string  jumpUrl  = 8;
    optional  string  subDesc  = 9;
    optional  string  uid  = 10;
    optional  string  appid  = 11;
    optional  string  coverPicUrl  = 12;
    optional  string  anchorDesc  = 13;
}

message GameIndexMyGame_Game {
    required  AppItem  appItem  = 1;
    repeated  GameIndexMyGameRelated  relatedList  = 2;
    optional  string  desc  = 3;
}

message GameIndexMyGame_More {
    required  string  desc  = 1;
    optional  string  jumpUrl  = 2;
}

message GameIndexNav {
    optional  GameIndexNav_IndexNavItem  myProfile  = 1;
    optional  GameIndexNav_IndexNavItem  myMessage  = 2;
    optional  GameIndexNav_IndexNavItem  myActivities  = 3;
    optional  GameIndexNav_SearchModule  search  = 4;
}

message GameIndexNav_IndexNavItem {
    optional  string  title  = 1;
    optional  string  iconUrl  = 2;
    optional  string  jumpUrl  = 3;
    optional  string  badgeIconUrl  = 4;
}

message GameIndexNav_SearchModule {
    optional  string  placeHolder  = 1;
    optional  string  iconUrl  = 2;
    optional  string  jumpUrl  = 3;
}

message GameIndexSettingControl {
    required  uint32  jumpType  = 1;
    optional  string  jumpUrl  = 2;
    optional  uint32  defaultJumpType  = 3;
    optional  string  defaultJumpUrl  = 4;
}

message GameIndexTabNavItem {
    required  string  title  = 1;
    required  string  navKey  = 2;
    optional  string  jumpUrl  = 3;
    optional  bool  isEntryPage  = 4;
    optional  bool  isNativePage  = 5;
    optional  string  iconNormalUrl  = 6;
    optional  string  iconSelectedUrl  = 7;
    optional  uint32  uiarea  = 8;
    optional  uint32  positionId  = 9;
    optional  string  externInfo  = 10;
}

message GameIndexWxagInfo {
    optional  string  hightlightedTitle  = 1;
    optional  string  title  = 2;
    repeated  GameIndexWxagInfo_PlayedGame  playedGameList  = 3;
    optional  WxaInfo  portal  = 4;
    optional  string  externInfo  = 5;
}

message GameIndexWxagInfo_PlayedGame {
    required  GameAppInfo  appInfo  = 1;
}

message GameJoinChatRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  appId  = 2;
    required  string  groupId  = 3;
    optional  bytes  userName  = 4;
}

message GameJoinChatRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  joinChatRoomUrl  = 2;
    optional  int32  errCode  = 3;
}

message GameKVReportReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  deviceModel  = 2;
    optional  string  deviceBrand  = 3;
    optional  string  osName  = 4;
    optional  string  osVersion  = 5;
    optional  string  languageVer  = 6;
    required  uint32  logId  = 7;
    optional  string  logExt  = 8;
}

message GameKVReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message GameLifeJumpInfo {
    required  uint32  jumpType  = 1;
    optional  string  jumpUrl  = 2;
}

message GameLifeMsgExtInfo {
    optional  uint64  disabledStaticPanelIdFlag  = 1;
    optional  uint64  disabledAppPanelIdFlag  = 2;
    optional  MsgReport  msgReport  = 3;
}

message GameLifeSettingControl {
    optional  GameLifeSettingControl_EntranceControl  entrance  = 1;
    optional  GameLifeSettingControl_HistoryChatControl  historyChat  = 2;
    optional  GameLifeSettingControl_ProfileControl  profile  = 3;
    optional  bool  disableApi  = 4;
    optional  GameLifeSettingControl_GiftControl  gift  = 5;
    optional  GameLifeSettingControl_AttachBarControl  attachBar  = 6;
    optional  GameLifeSettingControl_EmotionBoardControl  emotionBoard  = 7;
}

message GameLifeSettingControl_AppPanel {
    optional  uint32  panelType  = 1;
    optional  string  enterId  = 2;
    optional  bool  showRedDot  = 3;
    optional  uint32  jumpType  = 4;
    optional  GameLifeSettingControl_JumpWeappInfo  jumpWeapp  = 5;
    optional  string  jumpUrl  = 6;
    repeated  GameLifeSettingControl_EnterWord  enterWordList  = 7;
    optional  string  iconUrl  = 8;
    optional  string  darkModeIconUrl  = 9;
    repeated  GameLifeSettingControl_DisableWord  disableWordList  = 10;
    optional  uint32  halfScreenHeight  = 11;
}

message GameLifeSettingControl_AttachBarControl {
    repeated  GameLifeSettingControl_AppPanel  appPanelList  = 1;
    repeated  GameLifeSettingControl_StaticPanel  staticPanelList  = 2;
}

message GameLifeSettingControl_DisableWord {
    optional  string  language  = 1;
    optional  string  wording  = 2;
}

message GameLifeSettingControl_EmotionBoardControl {
    optional  bool  enabled  = 1;
}

message GameLifeSettingControl_EnterWord {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  language  = 3;
}

message GameLifeSettingControl_EntranceControl {
    optional  GameLifeSettingControl_WordingControl  wordingSetting  = 1;
    optional  bool  disableWording  = 2;
    optional  bool  disableIcon  = 4;
}

message GameLifeSettingControl_GiftControl {
    optional  GameLifeSettingControl_GiftEntranceControl  entrance  = 1;
}

message GameLifeSettingControl_GiftEntranceControl {
    optional  uint32  type  = 1;
    optional  string  jumpUrl  = 2;
    optional  GameLifeSettingControl_JumpWeappInfo  jumpWeapp  = 3;
}

message GameLifeSettingControl_HistoryChatControl {
    optional  string  entranceUrl  = 1;
}

message GameLifeSettingControl_JumpWeappInfo {
    required  string  appId  = 1;
    optional  string  path  = 2;
    optional  uint32  openType  = 3;
}

message GameLifeSettingControl_ProfileControl {
    optional  string  entranceUrl  = 1;
}

message GameLifeSettingControl_StaticPanel {
    optional  uint32  panelType  = 1;
    repeated  GameLifeSettingControl_DisableWord  disableWordList  = 2;
}

message GameLifeSettingControl_WordingControl {
    optional  uint32  type  = 1;
    optional  string  templateWording  = 2;
}

message GameListItem {
    required  AppItem  appItem  = 1;
    optional  string  noticeId  = 2;
    repeated  GameListSummaryFeedItem  feedItemList  = 3;
    optional  string  externInfo  = 4;
}

message GameListSummaryFeedItem {
    repeated  string  userNameList  = 1;
    required  string  detail  = 2;
    repeated  string  nickNameList  = 3;
}

message GameManagementEntrance {
    optional  string  jumpUrl  = 1;
}

message GameMsgBlockRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  blockCmd  = 3;
    optional  uint32  blockFlag  = 4;
}

message GameMsgBlockResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  blockFlag  = 2;
}

message GameRecommend {
    optional  string  moduleTitle  = 1;
    repeated  GameRecommend_RecoItem  recommendList  = 2;
}

message GameRecommend_RecoItem {
    optional  AppItem  appItem  = 1;
    optional  string  recommendDesc  = 2;
    optional  string  iconUrl  = 3;
    optional  string  title  = 4;
    optional  string  jumpUrl  = 5;
}

message GameReportRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  timeStamp  = 3;
    optional  uint32  opType  = 4;
    optional  uint32  opStatus  = 5;
    optional  string  openId  = 6;
    optional  string  customJson  = 7;
}

message GameReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message GenBizIapPrepayRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timeStamp  = 4;
    optional  string  package  = 5;
    optional  string  paySign  = 6;
    optional  string  signType  = 7;
    optional  string  stepInUrl  = 8;
}

message GenBizIapPrepayResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  productId  = 2;
    optional  string  extInfo  = 4;
}

message GenMallPrepayRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
    optional  string  contactAppUsername  = 9;
    optional  int32  channel  = 10;
    optional  string  extInfo  = 11;
    optional  int32  scene  = 12;
}

message GenMallPrepayResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  prepayId  = 2;
    optional  string  appSource  = 3;
    optional  int32  errCode  = 4;
    optional  string  errMsg  = 5;
}

message GenPrepayRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
    optional  string  contactAppUsername  = 9;
    optional  int32  channel  = 10;
    optional  string  extInfo  = 11;
    optional  ActionLocation  actionLocation  = 12;
    optional  int32  scene  = 15;
    optional  int32  wxAppScene  = 16;
    optional  string  payCookies  = 17;
}

message GenPrepayResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  prepayId  = 2;
    optional  string  appSource  = 3;
    optional  int32  errCode  = 4;
    optional  string  errMsg  = 5;
    optional  WalletMixSpGenprepayResp  walletMixSpGenprepayResp  = 6;
}

message GeneralControlBitSet {
    required  uint32  bitValue  = 1;
}

message GeneralJumpInfoControl {
    repeated  GeneralJumpInfoControl_Item  itemList  = 1;
}

message GeneralJumpInfoControl_Item {
    optional  uint32  businessType  = 1;
    optional  uint32  jumpType  = 2;
    optional  string  jumpUrl  = 3;
}

message GeneralSetRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  setType  = 2;
    optional  string  setValue  = 3;
    optional  uint32  ticketCount  = 4;
    repeated  GeneralSetTicket  tickets  = 5;
}

message GeneralSetResponse {
    required  BaseResponse  baseResponse  = 1;
}

message GeneralSetTicket {
    optional  uint32  type  = 1;
    optional  string  ticket  = 2;
}

message GeneralShareResponse {
    required  BaseResponse  baseResponse  = 1;
}

message GetA8KeyLiteDomainInfo {
    optional  string  domain  = 1;
    optional  uint32  controlBits  = 2;
    optional  uint32  expire  = 3;
    optional  uint64  lastModifyTime  = 99;
}

message GetA8KeyLitePrefetchDomainInfo {
    optional  string  domain  = 1;
    repeated  string  resDomains  = 2;
    repeated  GetA8KeyLitePrefetchResInfo  resInfos  = 3;
}

message GetA8KeyLitePrefetchResInfo {
    optional  string  path  = 1;
    optional  string  manifestUrl  = 2;
    optional  string  referDomain  = 3;
    optional  uint32  opType  = 4;
    optional  bytes  hashId  = 5;
}

message GetA8KeyLiteReqInfo {
    optional  uint32  requestId  = 1;
    optional  string  reqUrl  = 2;
    optional  string  appId  = 3;
    optional  string  appTitle  = 4;
    optional  string  appDesc  = 5;
    optional  bytes  digest  = 6;
    optional  string  referUrl  = 7;
    optional  uint32  controlBits  = 8;
    optional  uint32  scene  = 9;
}

message GetA8KeyLiteRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  batchCount  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  reason  = 4;
    optional  uint32  fontScale  = 5;
    optional  string  netType  = 6;
    optional  string  outerUrl  = 7;
    optional  uint32  subScene  = 8;
    repeated  GetA8KeyLiteReqInfo  reqInfo  = 9;
    repeated  bytes  prefetchDomainInfos  = 10;
}

message GetA8KeyLiteRespInfo {
    optional  uint32  requestId  = 1;
    optional  string  respUrl  = 2;
    optional  string  shareUrl  = 3;
    optional  uint32  actionCode  = 4;
    optional  string  title  = 5;
    optional  string  content  = 6;
    optional  string  userName  = 7;
    optional  string  antiSpamTicket  = 8;
    optional  string  wording  = 10;
    optional  string  headImg  = 11;
    optional  string  menuWording  = 12;
    optional  uint32  authBits  = 13;
    optional  uint32  antiSpamBits  = 14;
    optional  uint32  domainLevelInterval  = 15;
    repeated  HttpHeader  httpHeader  = 17;
}

message GetA8KeyLiteResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  batchCount  = 2;
    repeated  int32  ret  = 3;
    repeated  GetA8KeyLiteRespInfo  respInfo  = 4;
    repeated  GetA8KeyLiteDomainInfo  domainInfos  = 5;
    repeated  bytes  prefetchDomainInfos  = 7;
}

message GetA8KeyReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    optional  SKBuiltinBuffer_t  a2Key  = 3;
    optional  SKBuiltinString_t  appId  = 4;
    optional  SKBuiltinString_t  scope  = 5;
    optional  SKBuiltinString_t  state  = 6;
    optional  SKBuiltinString_t  reqUrl  = 7;
    optional  string  friendUserName  = 8;
    optional  uint32  friendQq  = 9;
    optional  uint32  scene  = 10;
    optional  string  userName  = 11;
    optional  string  bundleId  = 12;
    optional  SKBuiltinBuffer_t  a2KeyNew  = 13;
    optional  uint32  reason  = 14;
    optional  uint32  fontScale  = 15;
    optional  uint32  flag  = 16;
    optional  string  netType  = 17;
    optional  uint32  codeType  = 18;
    optional  uint32  codeVersion  = 19;
    optional  uint32  requestId  = 20;
    optional  string  functionId  = 21;
    optional  uint32  walletRegion  = 22;
    optional  SKBuiltinBuffer_t  cookie  = 23;
    optional  string  outerUrl  = 24;
    optional  uint32  subScene  = 25;
}

message GetA8KeyResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  fullUrl  = 2;
    optional  string  a8Key  = 3;
    optional  uint32  actionCode  = 4;
    optional  string  title  = 5;
    optional  string  content  = 6;
    optional  JSAPIPermissionBitSet  jsapipermission  = 7;
    optional  GeneralControlBitSet  generalControlBitSet  = 8;
    optional  string  userName  = 9;
    optional  string  shareUrl  = 15;
    optional  uint32  scopeCount  = 16;
    repeated  BizScopeInfo  scopeList  = 17;
    optional  string  antispamTicket  = 18;
    optional  string  ssid  = 20;
    optional  string  mid  = 21;
    optional  DeepLinkBitSet  deepLinkBitSet  = 22;
    optional  SKBuiltinBuffer_t  jsapicontrolBytes  = 23;
    optional  uint32  httpHeaderCount  = 24;
    repeated  HttpHeader  httpHeader  = 25;
    optional  string  wording  = 26;
    optional  string  headImg  = 27;
    optional  SKBuiltinBuffer_t  cookie  = 28;
    optional  string  menuWording  = 29;
    optional  SKBuiltinBuffer_t  verifyPrefetchInfo  = 30;
    optional  SKBuiltinBuffer_t  webComponentInfo  = 31;
}

message GetA8KeyRespVerifyPrefetchInfo {
    optional  string  redirectUrl  = 1;
    optional  uint64  version  = 2;
}

message GetABTestRequest {
    required  uint32  lastTimestamp  = 1;
    repeated  ExpItem  clientexplist  = 2;
    optional  uint32  clientTimestamp  = 3;
    optional  uint32  flag  = 4;
}

message GetABTestResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  bytes  experimentList  = 2;
    required  uint32  internalTime  = 3;
    required  uint32  timestamp  = 4;
    repeated  uint32  expiredexpid  = 5;
}

message GetAdCanvasInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  pageId  = 2;
}

message GetAdCanvasInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  adcanvasXml  = 2;
}

message GetAddressRequest {
    required  BaseRequest  baseRequest  = 1;
    required  double  longitude  = 2;
    required  double  latitude  = 3;
}

message GetAddressResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  retJson  = 2;
}

message GetAllFunctionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  tpaCountry  = 2;
}

message GetAllFunctionResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FunctionGroup  groupList  = 2;
    optional  string  emptyHint  = 3;
}

message GetAllPhoneData {
    optional  WXAPhoneInfo  wxPhone  = 1;
    repeated  WXAPhoneInfo  customPhoneList  = 2;
}

message GetAppConfigItem {
    optional  string  appId  = 1;
    optional  uint32  type  = 2;
    optional  uint32  configVersion  = 3;
    optional  uint32  newXmlCommand  = 4;
}

message GetAppConfigRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  GetAppConfigItem  getAppConfigList  = 2;
}

message GetAppConfigResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  AppConfig  appConfigList  = 2;
}

message GetAppInfoListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  count  = 2;
    repeated  SKBuiltinString_t  appIdList  = 3;
}

message GetAppInfoListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  count  = 2;
    repeated  BizAppInfo  appInfoList  = 3;
}

message GetAppInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  OpenAppInfo  appInfo  = 2;
    optional  uint32  noUse  = 3;
    optional  string  devInfo  = 4;
    optional  string  appType  = 5;
}

message GetAppPersonalInfoListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  SKBuiltinString_t  appIdList  = 3;
    optional  uint32  scene  = 4;
}

message GetAppPersonalInfoListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  AppPersonalInfo  appPersonalInfoList  = 3;
}

message GetAppSettingRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  appCount  = 2;
    repeated  AppSettingReq  appSettingReqList  = 3;
}

message GetAppSettingResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  appCount  = 2;
    repeated  AppSetting  settingList  = 3;
}

message GetAppTicketRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  signature  = 3;
}

message GetAppTicketResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ticket  = 2;
}

message GetAssociateChatRoomManageInfoReq {
    optional  string  roomName  = 1;
    optional  string  ticket  = 2;
    optional  int32  scene  = 3;
}

message GetAssociateChatRoomManageInfoResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  intro  = 2;
    repeated  string  noticeList  = 3;
    optional  string  bindTpUsername  = 4;
    optional  string  title  = 5;
}

message GetAuthAppListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  type  = 2;
    optional  string  lang  = 3;
}

message GetAuthAppListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  appCount  = 2;
    repeated  AuthAppBaseInfo  authAppList  = 3;
}

message GetAvailableCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  shopId  = 3;
    optional  string  signType  = 4;
    optional  string  cardSign  = 5;
    optional  uint32  timeStamp  = 6;
    optional  string  nonceStr  = 7;
    optional  string  cardTpId  = 8;
    optional  string  cardType  = 9;
    optional  bytes  buff  = 10;
    optional  uint32  onlyInvoice  = 11;
}

message GetAvailableCardResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  uint32  isEnd  = 3;
    optional  bytes  buff  = 4;
}

message GetBackPageFor33Request {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  shopId  = 3;
    optional  string  authUrl  = 4;
    optional  string  extend  = 5;
    optional  string  timestamp  = 6;
    optional  string  sign  = 7;
    optional  ApInfo  apInfo  = 8;
    optional  string  sessionKey  = 9;
    optional  uint32  hasMobile  = 10;
}

message GetBackPageFor33Response {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  actionCode  = 2;
    optional  uint32  relativeExpiredSeconds  = 3;
    optional  string  showUrl  = 4;
    optional  ShowWordsInfo  showWords  = 5;
    optional  BackPageInfo  backPageInfo  = 6;
    optional  uint32  hasMobile  = 7;
}

message GetBalanceMenuRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  BaseEvent  baseEvent  = 2;
}

message GetBalanceMenuResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  ActionSheetViewData  actionsheet  = 2;
}

message GetBanPayMobileInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqKey  = 2;
}

message GetBanPayMobileInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    repeated  BalanceMobileInfo  array  = 4;
    optional  CreInfo  creInfo  = 5;
}

message GetBankCardInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fileid  = 2;
    optional  string  aeskey  = 3;
}

message GetBankCardInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  encryptBankCardId1  = 4;
    optional  string  encryptBankCardId2  = 5;
}

message GetBankInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bankCardEncNo  = 2;
}

message GetBankInfoRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  BankcardElem  bankElem  = 4;
}

message GetBankListReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetBankListRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    repeated  BankcardElem  bcList  = 4;
    repeated  BankcardElem  topBcList  = 5;
}

message GetBankResourceReq {
    repeated  string  banktypelist  = 1;
    optional  ActionLocation  actionLocation  = 2;
    optional  string  jsapiReqkey  = 3;
}

message GetBankResourceRsp {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  bankresourcelist  = 2;
    optional  int32  retcode  = 3;
    optional  string  retmsg  = 4;
    optional  string  bankDetailUrl  = 5;
}

message GetBeaconsInGroupRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  IBeaconInfo  beacons  = 2;
    optional  string  appid  = 3;
}

message GetBeaconsInGroupResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    repeated  IBeaconInfoGroup  beaconGroups  = 4;
}

message GetBeaconsPushMessageReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  IBeaconInfo  beacons  = 2;
    optional  IBeaconLocationInfo  locationInfo  = 4;
    optional  uint64  shopid  = 5;
}

message GetBeaconsPushMessageResp {
    required  BaseResponse  baseResponse  = 1;
    optional  IBeaconPageInfo  pageInfo  = 2;
    optional  string  mpLogo  = 3;
    optional  IBeaconInfo  beaconInfo  = 4;
    optional  int32  result  = 5;
}

message GetBioConfigRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  type  = 2;
    optional  uint32  scene  = 3;
    optional  string  userTicket  = 4;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 5;
    optional  uint32  checkLiveFlag  = 6;
    optional  string  appid  = 7;
    optional  string  jsonStr  = 8;
    optional  bytes  liveSelectData  = 9;
}

message GetBioConfigResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  bioId  = 2;
    optional  bytes  cfgbuffer  = 3;
    optional  NetworkSectResp  netWork  = 4;
    optional  CdnInfo  cdnInfo  = 5;
    optional  bytes  liveSelectData  = 6;
    optional  float  faceRatio  = 7;
}

message GetBizChatInfoListReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  BizChatInfoReq  reqItem  = 2;
}

message GetBizChatInfoListResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    repeated  FullBizChat  fullChatItem  = 3;
}

message GetBizChatMyUserInfoReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
}

message GetBizChatMyUserInfoResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  BizChatUser  user  = 3;
}

message GetBizChatUserInfoListReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  BrandBizChatUserReq  brandItem  = 2;
}

message GetBizChatUserInfoListResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    repeated  BizChatUser  user  = 3;
}

message GetBizEnterpriseAttrReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  uint32  brandType  = 3;
    optional  uint32  lang  = 4;
}

message GetBizEnterpriseAttrResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    required  BizEnterpriseAttr  attr  = 3;
}

message GetBizIapDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  serialId  = 3;
}

message GetBizIapDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  detailBuff  = 2;
}

message GetBizIapPayResultRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  serialId  = 2;
}

message GetBizIapPayResultResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  detailBuff  = 2;
}

message GetBizJsApiRedirectUrlReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  corpId  = 2;
    required  string  groupId  = 3;
    required  string  timeStamp  = 4;
    required  string  nonceStr  = 5;
    required  string  signature  = 6;
    required  string  fromUrl  = 7;
    optional  string  postData  = 8;
}

message GetBizJsApiRedirectUrlResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  string  redirectUrl  = 3;
}

message GetBizJsApiResultReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  corpId  = 2;
    required  uint32  cmd  = 3;
    required  string  data  = 4;
}

message GetBizJsApiResultResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  string  result  = 3;
}

message GetBlackListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  username  = 2;
}

message GetBlackListResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  BlackListInfo  blackListInfo  = 2;
    optional  bool  canAssociateWxgameAccount  = 3;
}

message GetBoundHardDevicesRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  version  = 2;
}

message GetBoundHardDevicesResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  ModHardDevice  deviceList  = 5;
    required  uint32  version  = 6;
    required  uint32  continueFlag  = 7;
}

message GetCDNDnsRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientIp  = 2;
    optional  uint32  scene  = 3;
}

message GetCDNDnsResponse {
    required  BaseResponse  baseResponse  = 1;
    required  CDNDnsInfo  dnsInfo  = 2;
    optional  CDNDnsInfo  snsDnsInfo  = 3;
    optional  CDNDnsInfo  appDnsInfo  = 4;
    optional  SKBuiltinBuffer_t  cdndnsRuleBuf  = 5;
    optional  SKBuiltinBuffer_t  fakeCdndnsRuleBuf  = 6;
    optional  CDNDnsInfo  fakeDnsInfo  = 7;
    required  int32  getCdnDnsIntervalMs  = 8;
    optional  CDNClientConfig  defaultConfig  = 9;
    optional  CDNClientConfig  disasterConfig  = 10;
    optional  int32  nextIpv6  = 11;
}

message GetCardConfigInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetCardConfigInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message GetCardCountRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetCardCountResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  count  = 2;
    optional  uint32  hasCardItem  = 3;
    optional  uint32  hasShareCard  = 4;
}

message GetCardEntranceStyleRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetCardEntranceStyleResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bool  cardHomePageIsNewVersion  = 4;
    optional  uint32  newVersionStyle  = 5;
    optional  uint32  isTradeAreaVersion  = 6;
    optional  CardMiniAppInfo  tradeAreaVersionMiniAppInfo  = 7;
    optional  bool  isCardHomePageV2  = 8;
}

message GetCardGiftInfoReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint32  bizUin  = 2;
    optional  string  orderId  = 3;
}

message GetCardGiftInfoResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  toUserName  = 2;
    optional  string  fromUserName  = 3;
    optional  string  fromUserHeadImgUrl  = 4;
    optional  string  content  = 5;
    optional  string  contentPicUrl  = 6;
    optional  string  contentVideoUrl  = 7;
    optional  string  contentVideoThumbPicUrl  = 8;
    optional  string  picAesKey  = 9;
    optional  string  videoAesKey  = 10;
    optional  string  thumbPicAesKey  = 11;
    optional  string  cardBackgroundPicUrl  = 12;
    optional  string  cardLogoUrl  = 13;
    optional  string  cardTitle  = 14;
    optional  string  cardPrice  = 15;
    optional  string  footerWording  = 16;
    optional  bool  needJump  = 17;
    optional  uint32  picDataLength  = 18;
    optional  uint32  videoDataLength  = 19;
    optional  uint32  thumbDataLength  = 20;
    optional  string  color  = 21;
    optional  string  descriptionTitle  = 22;
    optional  string  descriptionIconUrl  = 23;
    optional  uint32  descriptionLayoutMode  = 24;
    optional  string  giftingMediaTitle  = 25;
    optional  string  descriptionTitleColor  = 26;
    optional  string  cardTitleColor  = 27;
    optional  string  cardPriceTitleColor  = 28;
    optional  string  userCardId  = 29;
    optional  string  operationTitle  = 30;
    optional  string  operationUrl  = 31;
    optional  string  cardTpId  = 32;
    optional  string  cardCode  = 33;
    repeated  AcceptedCardItem  acceptedCardList  = 34;
    repeated  AccepterItem  accepterList  = 35;
    optional  string  accepterListTitle  = 36;
    optional  uint32  outOfCard  = 37;
    optional  string  operationWxaUsername  = 38;
    optional  string  operationWxaPath  = 39;
    optional  string  operationWxaTitle  = 40;
    optional  string  underButtonTitle  = 41;
    optional  string  underButtonUrl  = 42;
    optional  string  centerButtonTitle  = 43;
    optional  uint32  centerButtonJumpType  = 44;
    optional  string  centerButtonJumpUrl  = 45;
    optional  string  centerButtonJumpWxaName  = 46;
    optional  string  centerButtonJumpWxaPath  = 47;
    optional  string  centerButtonJumpWxaConfirmpageTitle  = 48;
}

message GetCardItemInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  cardId  = 2;
    required  uint32  fromScene  = 3;
    optional  string  fromUsername  = 4;
    optional  string  cardExt  = 5;
    optional  string  jsCheckinfoUrl  = 6;
    optional  string  jsCheckinfoSessionUsername  = 7;
    optional  uint32  statisticScene  = 8;
    optional  string  consumedboxCardId  = 9;
    optional  StatisticInfo  statisticInfo  = 10;
}

message GetCardItemInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message GetCardListFromAppRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  CardListItem  cardList  = 2;
    optional  uint32  fromScene  = 3;
    optional  string  bundleId  = 4;
    optional  string  packageName  = 5;
    optional  string  sign  = 6;
    optional  string  jsCheckinfoUrl  = 7;
    optional  string  jsCheckinfoSessionUsername  = 8;
    optional  string  consumedboxCardId  = 9;
    optional  uint32  statisticScene  = 10;
}

message GetCardListFromAppResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message GetCardPkgMchInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardPackMerchantId  = 2;
    optional  double  latitude  = 3;
    optional  double  longitude  = 4;
    optional  uint64  lastReceiveTime  = 5;
    optional  uint32  sortRule  = 6;
    optional  uint32  scene  = 7;
}

message GetCardPkgMchInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  CardHomePageElement  cardPkgMchInfo  = 4;
    optional  uint32  isRefreshHomepage  = 5;
}

message GetCardSerialRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  cardId  = 2;
}

message GetCardSerialResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  codes  = 2;
    optional  uint32  requestTime  = 3;
    optional  uint32  requestCount  = 4;
    optional  uint32  refreshInterval  = 5;
}

message GetCardsHomePageLayoutRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  double  latitude  = 2;
    optional  double  longitude  = 3;
    optional  string  buff  = 4;
    optional  string  redBuff  = 5;
}

message GetCardsHomePageLayoutResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  string  buff  = 3;
}

message GetCardsLayoutRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  double  latitude  = 2;
    optional  double  longitude  = 3;
    optional  uint32  scene  = 4;
    optional  string  layoutBuff  = 5;
}

message GetCardsLayoutResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  string  layoutBuff  = 3;
    optional  CardsHomePageList  cardsHomePageList  = 4;
    optional  uint32  homePageCardNum  = 5;
    optional  SecEntranceCardList  secEntranceCardList  = 6;
}

message GetCertRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  randomEncryKey  = 2;
    required  uint32  currentCertVersion  = 3;
}

message GetCertResponse {
    required  BaseResponse  baseResponse  = 1;
    required  RSACert  certValue  = 2;
    required  uint32  certVersion  = 3;
}

message GetChatRoomInfoDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
}

message GetChatRoomInfoDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  announcement  = 2;
    optional  uint32  chatRoomInfoVersion  = 3;
    optional  string  announcementEditor  = 4;
    optional  uint32  announcementPublishTime  = 5;
    optional  uint32  chatRoomStatus  = 6;
    optional  uint64  chatRoomBusinessType  = 7;
    optional  RoomTools  roomTools  = 8;
    optional  string  associateOpenImroomName  = 9;
}

message GetChatRoomMsgRequest {
    required  SKBuiltinString_t  chatroomId  = 1;
    required  uint32  msgSeq  = 2;
    required  uint32  needCount  = 3;
    required  uint32  upDownFlag  = 4;
    optional  uint32  clearFlag  = 5;
    optional  uint32  filterSeq  = 6;
    optional  uint32  webSeqBlockFlag  = 7;
}

message GetChatRoomMsgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  continueFlag  = 2;
    repeated  AddMsg  addMsgList  = 3;
}

message GetChatRoomUpgradeStatusReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
}

message GetChatRoomUpgradeStatusResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  status  = 2;
    required  uint32  mobileQuota  = 3;
    required  uint32  cardQuota  = 4;
    required  uint32  donateQuota  = 5;
    required  uint32  maxCount  = 6;
    optional  string  resultMsg  = 7;
    optional  uint32  totalQuota  = 8;
}

message GetChatSessionDataRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  sessionIdList  = 2;
}

message GetChatSessionDataResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  SessionInfo  sessionInfoList  = 2;
}

message GetChatSessionIdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  string  toUsername  = 3;
}

message GetChatSessionIdResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  sessionId  = 2;
    optional  GameLifeMsgExtInfo  msgExtInfo  = 3;
}

message GetChatUserInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  usernameList  = 2;
}

message GetChatUserInfoResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  ChatUserInfo  chatUserInfoList  = 2;
}

message GetChatroomMemberDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatroomUserName  = 2;
    required  uint32  clientVersion  = 3;
}

message GetChatroomMemberDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  chatroomUserName  = 2;
    required  uint32  serverVersion  = 3;
    required  ChatRoomMemberData  newChatroomData  = 4;
}

message GetCliKVStrategyReq {
    required  uint32  generalVersion  = 1;
    required  uint32  specialVersion  = 2;
    required  uint32  whiteOrBlackUinVersion  = 3;
    optional  bytes  randomEncryKey  = 4;
    optional  uint32  kvgeneralVersion  = 5;
    optional  uint32  kvspecialVersion  = 6;
    optional  uint32  kvwhiteOrBlackUinVersion  = 7;
    optional  HeavyUserReqInfo  heavyUserInfo  = 8;
}

message GetCliKVStrategyResp {
    required  int32  ret  = 1;
    required  uint32  generalVersion  = 2;
    required  uint32  specialVersion  = 3;
    required  uint32  whiteOrBlackUinVersion  = 4;
    repeated  StrategyInterval  generalStrategies  = 5;
    repeated  StrategyInterval  specialStrategies  = 6;
    repeated  StrategyInterval  whiteOrBlackUinStrategies  = 7;
    optional  uint32  maxValidDataTime  = 8;
    optional  uint32  banReportTime  = 9;
    optional  uint32  askSvrStrategyInterval  = 10;
    optional  uint32  kvgeneralVersion  = 11;
    optional  uint32  kvspecialVersion  = 12;
    optional  uint32  kvwhiteOrBlackUinVersion  = 13;
    repeated  StrategyInterval  kvgeneralStrategies  = 14;
    repeated  StrategyInterval  kvspecialStrategies  = 15;
    repeated  StrategyInterval  kvwhiteOrBlackUinStrategies  = 16;
    optional  HeavyUserRespInfo  heavyUserInfo  = 17;
}

message GetCloudIMSessionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  privateData  = 3;
}

message GetCloudIMSessionResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  sessionKey  = 2;
    optional  string  openid  = 3;
    optional  uint32  lifespan  = 4;
}

message GetColikeBlockListRequest {
    optional  int32  type  = 1;
    optional  uint32  offset  = 2;
    optional  uint64  version  = 3;
}

message GetColikeBlockListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  GetColikeBlockListResponse_Item  items  = 2;
    optional  bool  continueFlag  = 3;
    optional  uint32  total  = 4;
    optional  uint32  updateFlag  = 5;
    optional  uint64  version  = 6;
    optional  uint32  offset  = 7;
}

message GetColikeBlockListResponse_Item {
    optional  string  username  = 1;
}

message GetCommentResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message GetConnectInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
}

message GetConnectInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  id  = 2;
    required  SKBuiltinBuffer_t  key  = 3;
    optional  string  hello  = 4;
    optional  string  ok  = 5;
    required  uint32  type  = 6;
    required  uint32  addrCount  = 7;
    repeated  ConnectInfoAddr  addrList  = 8;
    optional  string  resource  = 9;
    optional  string  pcname  = 10;
    optional  string  pcacctName  = 11;
    optional  uint32  encryFlag  = 12;
    optional  uint32  scene  = 13;
    optional  uint64  dataSize  = 14;
    optional  string  wifiName  = 15;
}

message GetContactLabelListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetContactLabelListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  labelCount  = 2;
    repeated  LabelPair  labelPairList  = 3;
}

message GetContactRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  userCount  = 2;
    repeated  SKBuiltinString_t  userNameList  = 3;
    optional  uint32  antispamTicketCount  = 4;
    repeated  SKBuiltinString_t  antispamTicket  = 5;
    optional  uint32  fromChatRoomCount  = 6;
    repeated  SKBuiltinString_t  fromChatRoom  = 7;
    optional  uint32  getContactScene  = 8;
    optional  SKBuiltinString_t  chatRoomAccessVerifyTicket  = 9;
}

message GetContactResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  contactCount  = 2;
    repeated  ModContact  contactList  = 3;
    repeated  int32  ret  = 4[packed=true];
    repeated  VerifyUserValidTicket  verifyUserValidTicketList  = 5;
    repeated  SendMsgTicket  sendMsgTicketList  = 6;
}

message GetCouponAndGiftHistoryRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  pageNum  = 2;
    optional  uint64  pageSize  = 3;
    optional  uint32  scene  = 4;
}

message GetCouponAndGiftHistoryResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bool  isAll  = 4;
    optional  uint64  nextPageNum  = 5;
    optional  string  title  = 6;
    repeated  CardHomePageFAQItem  getMoreList  = 7;
    optional  CouponAndGiftList  itemsList  = 8;
}

message GetCouponAndGiftListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  pageNum  = 2;
    optional  uint64  pageSize  = 3;
    optional  uint32  scene  = 4;
}

message GetCouponAndGiftListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bool  isAll  = 4;
    optional  uint64  nextPageNum  = 5;
    optional  string  title  = 6;
    repeated  CardHomePageFAQItem  getMoreList  = 7;
    optional  CouponAndGiftList  giftItemsList  = 8;
    optional  CouponAndGiftList  couponItemsList  = 9;
}

message GetCouponHomePageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  reqNum  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
    optional  uint32  scene  = 6;
    optional  uint32  sortRule  = 7;
}

message GetCouponHomePageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  nextOffset  = 4;
    optional  uint32  isAll  = 5;
    optional  CardHomePageStoreList  cardHomePageStoreList  = 6;
    optional  CardMiniAppInfo  historyMiniAppInfo  = 7;
    optional  string  historyEntranceNameWording  = 8;
    optional  uint32  isChangeSortRule  = 9;
    optional  uint32  changeSortRule  = 10;
    optional  CardSortInfoList  cardSortInfoList  = 11;
}

message GetCreateTokenSignReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  takeMessage  = 2;
    optional  uint64  creditLine  = 3;
    optional  PayGenActionLocation  location  = 4;
}

message GetCreateTokenSignResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  TokeMess  tokeMess  = 4;
    optional  MakeSureButton  toRemind  = 5;
}

message GetCurLocationRequest {
    required  double  longitude  = 1;
    required  double  latitude  = 2;
}

message GetCurLocationResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  country  = 2;
    optional  string  province  = 3;
    optional  string  city  = 4;
}

message GetDesignerEmojiListRequest {
    required  uint32  opCode  = 1;
    optional  uint32  designerUin  = 2;
    optional  SKBuiltinBuffer_t  pageBuf  = 3;
    optional  uint32  tagId  = 4;
    optional  string  keyWord  = 5;
    optional  uint32  setId  = 6;
    optional  uint64  searchId  = 7;
}

message GetDesignerEmojiListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  EmojiInfo  emoji  = 2;
    optional  SKBuiltinBuffer_t  pageBuf  = 3;
    repeated  EmojiTag  tag  = 4;
}

message GetDesignerSimpleInfoRequest {
    required  string  designerId  = 1;
}

message GetDesignerSimpleInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  PersonalDesigner  designer  = 2;
}

message GetDisasterInfoRequest {
    required  uint32  noticeid  = 1;
}

message GetDisasterInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  content  = 2;
}

message GetDownloadUrlReqItem {
    optional  RequestPackageInfo  reqPackageInfo  = 1;
    optional  LocalPackageInfo  localPackageInfo  = 2;
    optional  uint32  supportedEncryptVersion  = 3;
    optional  uint32  appVersion  = 4;
    optional  bool  needLatestVersion  = 5;
    optional  bool  needZstd  = 6;
    optional  uint32  devUin  = 7;
}

message GetDownloadUrlRespItem {
    optional  int32  errcode  = 1;
    optional  string  url  = 2;
    optional  string  md5  = 3;
    optional  uint32  lifespan  = 4;
    optional  uint32  appVersion  = 5;
    optional  bool  isPatch  = 6;
    optional  bool  isZstd  = 7;
    optional  string  customVersion  = 8;
    optional  RequestPackageInfo  reqPackageInfo  = 20;
    optional  string  newCustomVersion  = 21;
}

message GetDynamicCardCodeReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  cardIdList  = 2;
    optional  int32  scene  = 3;
}

message GetDynamicCardCodeResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  QrCodeItem  qrCodeItemList  = 2;
}

message GetEUInfoRequest {
}

message GetEUInfoResp {
    optional  string  retcode  = 1;
    optional  string  retmsg  = 2;
    optional  string  euProtocolUrl  = 3;
    optional  uint32  isAgreeEuProtocol  = 4;
    optional  string  wxpayProtocolUrl  = 5;
}

message GetEmotionActivityRequest {
    required  string  activityId  = 1;
    optional  string  md5  = 2;
}

message GetEmotionActivityResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  EmotionActivity  activity  = 2;
}

message GetEmotionDescRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
}

message GetEmotionDescResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  EmotionDesc  list  = 3;
    required  uint32  clickFlag  = 4;
    optional  string  buttonDesc  = 5;
    optional  uint32  downLoadFlag  = 6;
}

message GetEmotionDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    optional  uint32  scene  = 3;
    optional  int32  version  = 4;
}

message GetEmotionDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    required  EmotionDetail  emotionDetail  = 2;
}

message GetEmotionDonorListRequest {
    required  string  productId  = 1;
    required  SKBuiltinBuffer_t  reqBuf  = 2;
}

message GetEmotionDonorListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  donorNum  = 2;
    repeated  EmotionDonor  donors  = 3;
    optional  SKBuiltinBuffer_t  respBuf  = 4;
}

message GetEmotionListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  reqBuf  = 2;
    required  uint32  reqType  = 3;
    optional  uint32  scene  = 4;
    optional  uint32  category  = 5;
}

message GetEmotionListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  reqBuf  = 2;
    required  uint32  emotionCount  = 3;
    repeated  EmotionSummary  emotionList  = 4;
    optional  EmotionBanner  banner  = 5;
    optional  uint32  newBannerCount  = 6;
    repeated  EmotionBanner  newBannerList  = 7;
    optional  uint32  cellCount  = 8;
    repeated  EmotionCell  cellList  = 9;
    optional  uint32  bannerSetCount  = 10;
    repeated  EmotionBannerSet  bannerSetList  = 11;
    optional  uint32  topHotNum  = 12;
    optional  uint32  recentHotNum  = 13;
    optional  uint32  cellSetCount  = 14;
    repeated  EmotionBannerSet  cellSetList  = 15;
    optional  string  emotionExptConfig  = 16;
}

message GetEmotionRewardRequest {
    required  string  productId  = 1;
    required  uint32  opCode  = 2;
}

message GetEmotionRewardResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  EmotionPrice  price  = 2;
    optional  uint32  donorNum  = 3;
    repeated  EmotionDonor  donors  = 4;
    optional  EmotionReward  reward  = 5;
}

message GetEmotionWordListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetEmotionWordListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetEmotionWordListResponse_PersonalWord  personalWords  = 2;
    optional  uint32  personalWordsType  = 3;
    optional  uint64  personalWordsVersion  = 4;
}

message GetEmotionWordListResponse_PersonalWord {
    optional  string  word  = 1;
}

message GetEventSampleConfRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  configVersion  = 2;
    optional  string  extra  = 3;
    optional  bytes  versionBuffer  = 4;
}

message GetEventSampleConfResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  compresslen  = 3;
    optional  bytes  eventsampleconf  = 4;
    optional  bytes  versionBuffer  = 5;
}

message GetExposeLinkRequest {
    required  uint32  scene  = 1;
    optional  string  exposeUserName  = 2;
    optional  string  exposeDetail  = 3;
    optional  string  snsId  = 4;
    optional  uint32  typeId  = 5;
}

message GetExposeLinkResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  url  = 2;
}

message GetExpressionAdReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  keyword  = 2;
    optional  string  appid  = 3;
    optional  string  traceId  = 4;
}

message GetExpressionAdResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  msg  = 3;
    optional  int32  adType  = 4;
    optional  string  appid  = 5;
    optional  string  bigTitle  = 6;
    optional  string  smallTitle  = 7;
    optional  string  creativeUrl  = 8;
    optional  string  greetingContent  = 9;
    optional  JumpInfo  jumpInfo  = 10;
    optional  bytes  couponInfo  = 11;
    optional  uint32  aid  = 12;
    optional  string  traceId  = 13;
    optional  string  jumpTextContent  = 14;
    optional  int32  greetingImageStyle  = 15;
    optional  string  redPackageSkinGainUrl  = 17;
    optional  int32  creativeType  = 18;
}

message GetExpressionReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  keyword  = 2;
    optional  string  appid  = 3;
}

message GetExpressionResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  msg  = 3;
    optional  string  traceId  = 4;
    optional  int32  isPlayExpression  = 5;
    optional  uint32  interval  = 6;
}

message GetExptAppConfigRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  lastGetSvrSecond  = 2;
    required  uint32  scene  = 3;
    required  ExptAppDeviceType  exptAppDeviceType  = 4;
    repeated  ExptAppItem  localExptList  = 5;
    optional  uint32  isIncrement  = 6;
    optional  string  globalSequence  = 7;
}

message GetExptAppConfigResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  currSvrSecond  = 2;
    optional  uint32  intervalSecond  = 3;
    required  uint32  flag  = 4;
    repeated  uint32  deleteExptList  = 5;
    repeated  ExptAppItem  replaceExptList  = 6;
    optional  uint32  needLocalExpt  = 7;
    optional  string  globalSequence  = 8;
}

message GetExptRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  lastGetSvrSecond  = 2;
    required  uint32  scene  = 3;
    repeated  ExptItem  localExptList  = 4;
}

message GetExptResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  currSvrSecond  = 2;
    optional  uint32  intervalSecond  = 3;
    repeated  uint32  deleteExptList  = 4;
    repeated  ExptItem  replaceExptList  = 5;
    required  uint32  exptFlag  = 6;
    repeated  AppIdItem  items  = 7;
}

message GetFaceCheckActionReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
    optional  string  package  = 3;
    optional  string  packageSign  = 4;
}

message GetFaceCheckActionResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  personId  = 4;
    optional  string  actionData  = 5;
    optional  float  reductionRatio  = 6;
    optional  string  takeMessage  = 7;
    optional  string  actionHint  = 8;
}

message GetFaceCheckResultReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  personId  = 2;
    optional  string  actionData  = 3;
    optional  float  reductionRatio  = 4;
    optional  string  videoFileid  = 5;
    optional  string  aesKey  = 6;
    optional  uint32  scene  = 7;
    optional  string  takeMessage  = 8;
    optional  string  package  = 9;
    optional  PayGenActionLocation  location  = 10;
    optional  bytes  hash  = 11;
    optional  bool  needSignContract  = 12;
}

message GetFaceCheckResultResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  authToken  = 4;
    optional  uint32  retry  = 5;
    optional  string  serialId  = 6;
}

message GetFaceContractStatusReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
    optional  string  package  = 3;
    optional  string  packageSign  = 4;
}

message GetFaceContractStatusResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  contractStatus  = 4;
    optional  string  contractHint  = 5;
    optional  string  contractUrl  = 6;
}

message GetFavBizChatListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  brandUserName  = 2;
}

message GetFavBizChatListResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    repeated  string  bizchatIdItem  = 3;
}

message GetFavInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetFavInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  usedSize  = 2;
    required  uint64  totalSize  = 3;
    required  uint32  mxFavFileSize  = 4;
    required  uint32  mxAutoUploadSize  = 5;
    required  uint32  mxAutoDownloadSize  = 6;
}

message GetFavStaticResourceInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  version  = 2;
}

message GetFavStaticResourceInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FavFontResourceInfo  fontInfoList  = 2;
    repeated  FavBackGroundResourceInfo  backGroundInfoList  = 3;
    optional  uint32  version  = 4;
}

message GetForcePushRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetForcePushResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ForcePushItem  forcePushItemList  = 2;
}

message GetFuncMsgReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  functionMsgId  = 2;
    optional  string  customBuff  = 3;
    optional  string  openId  = 4;
    optional  BusinessInfo  businessInfo  = 5;
}

message GetFuncMsgResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  opCode  = 2;
    required  uint64  version  = 3;
    optional  AddMsg  addMsg  = 4;
    optional  string  customBuff  = 5;
    optional  uint32  actionTime  = 6;
    optional  BusinessInfo  businessInfo  = 7;
}

message GetGDRPAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  scene  = 3;
}

message GetGDRPAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  businessResp  = 2;
    optional  uint32  state  = 3;
}

message GetGameCanvasInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  shareType  = 3;
    optional  string  userInfo  = 4;
}

message GetGameCanvasInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  retJson  = 2;
}

message GetGameCenterGlobalSettingRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  lang  = 2;
    optional  string  country  = 3;
    optional  uint32  releaseChannel  = 4;
    optional  AndroidDeviceInfo  androidDeviceInfo  = 5;
    optional  IosDeviceInfo  iosDeviceInfo  = 6;
    optional  uint32  scene  = 7;
}

message GetGameCenterGlobalSettingResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  showEntrance  = 2;
    optional  GameIndexSettingControl  gameIndexSetting  = 3;
    optional  string  appStoreGoodsId  = 4;
    optional  AppStoreControl  appStoreControl  = 5;
    optional  GameDetailSettingControl  gameDetailSetting  = 6;
    optional  AppStorePreloadControl  appStorePreload  = 7;
    optional  StatusBarStyleControl  statusBarStyle  = 8;
    optional  WeappGameStatGlobalControl  weappGameStatControl  = 9;
    optional  UrlPreloadControl  urlPreload  = 10;
    optional  CommJsLibControl  commJsLib  = 11;
    optional  WepkgControl  wepkgControl  = 12;
    optional  WebViewControl  webView  = 14;
    optional  A8KeyControl  a8Key  = 16;
    optional  AutoRunTaskSettingControl  autoRunTaskSetting  = 17;
    optional  GameCenterTabSettingControl  gameCenterTabSetting  = 18;
    optional  GameLifeSettingControl  gameLifeSetting  = 19;
    optional  GeneralJumpInfoControl  generalJumpInfo  = 20;
    optional  GameCommunityControl  gameCommunityInfo  = 21;
}

message GetGameDetailRequest_V2 {
    required  BaseRequest  baseRequest  = 1;
    required  string  lang  = 2;
    required  string  appId  = 3;
    required  bool  isInstalled  = 4;
    optional  string  country  = 5;
    optional  bool  isNeedConfirmActive  = 6;
    optional  bool  needNewRank  = 7;
}

message GetGameDetailResponse_V2 {
    required  BaseResponse  baseResponse  = 1;
    required  AppItem  appItem  = 2;
    required  string  backGroundUrl  = 3;
    repeated  FriendFeedItem  friendFeedList  = 4;
    optional  Introduction  introduction  = 5;
    optional  GuideInfo  guideInfo  = 7;
    optional  GiftInfo  giftInfo  = 8;
    optional  Rank  rank  = 9;
    repeated  FriendPlayItem  friendPlayList  = 10;
    optional  Share  share  = 11;
    optional  GroupInfo  groupinfo  = 12;
    optional  GiftEntrance  giftentrance  = 13;
}

message GetGameDyeReportInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appStoreUrl  = 2;
    optional  string  extraJsonData  = 3;
    optional  string  wxagAppid  = 4;
}

message GetGameDyeReportInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  needReport  = 2;
    optional  CRGameChannelReportInfo  reportInfo  = 3;
}

message GetGameIndex2Response {
    required  BaseResponse  baseResponse  = 1;
    optional  GameIndexNav  nav  = 2;
    optional  GameManagementEntrance  gameManagement  = 3;
    optional  string  appStoreGoodsId  = 4;
    optional  BestSellingGameListModule  bestSellingGameList  = 5;
    optional  GetGameIndex2Response_Recommendation  gameRecommendation  = 6;
    optional  TypeNavModule  typeNav  = 7;
    optional  GameIndexMyGame  myGame  = 8;
    optional  Installed  installed  = 9;
    optional  IndexTheme  theme  = 10;
    optional  LibraryEntranceInfo  libraryEntrance  = 11;
    optional  DownloadGuidance  googlePlayTips  = 12;
    optional  FeedBackEntrance  feedBackEntrance  = 13;
    optional  string  gameDetailUrl  = 14;
    optional  uint32  gameDetailJumpType  = 15;
    optional  bool  isForeigner  = 16;
    optional  AppStoreControl  appStoreControl  = 17;
}

message GetGameIndex2Response_Recommendation {
    optional  GetGameIndex2Response_Recommendation_Banner  topBanner  = 1;
    optional  GetGameIndex2Response_Recommendation_RecomItem  leftItem  = 2;
    optional  GetGameIndex2Response_Recommendation_RecomItem  rightItem  = 3;
}

message GetGameIndex2Response_Recommendation_Banner {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  picUrl  = 3;
    optional  string  jumpUrl  = 4;
    optional  string  externInfo  = 5;
    optional  string  subTitle  = 6;
    repeated  GetGameIndex2Response_Recommendation_Banner_Friend  friendList  = 7;
}

message GetGameIndex2Response_Recommendation_Banner_Friend {
    optional  string  headImgUrl  = 1;
    optional  string  nickName  = 3;
}

message GetGameIndex2Response_Recommendation_RecomItem {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  iconUrl  = 3;
    optional  string  jumpUrl  = 4;
    optional  string  externInfo  = 5;
    optional  string  badgeUrl  = 6;
}

message GetGameIndex4FeedsListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  pageInfo  = 2;
}

message GetGameIndex4FeedsListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GameIndex4FeedsBlock  feedsList  = 2;
    optional  bytes  nextPageInfo  = 3;
    optional  bool  hasNext  = 4;
    optional  string  moduleTitle  = 5;
}

message GetGameIndex4Request {
    required  BaseRequest  baseRequest  = 1;
    required  string  lang  = 2;
    repeated  string  installedAppList  = 3;
    optional  string  country  = 4;
    optional  EntranceRedDot  entranceRedDot  = 5;
    optional  uint32  unReadMsgCount  = 6;
    optional  bool  fromEntrance  = 7;
    optional  uint32  releaseChannel  = 8;
}

message GetGameIndex4Response {
    required  BaseResponse  baseResponse  = 1;
    optional  GameIndexGameBlock  gameBlock  = 3;
    optional  GameIndexGameRecomBlock  gameRecom  = 4;
    optional  GameIndexMoreGameEntr  moreGame  = 5;
    optional  HomePageTheme  theme  = 6;
    optional  TypeNavModule  typeNav  = 8;
    optional  GameIndexWxagInfo  wxagInfo  = 9;
}

message GetGameIndex4TabNavRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetGameIndex4TabNavResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GameIndexTabNavItem  itemList  = 2;
}

message GetGameIndexForeignRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  lang  = 2;
    repeated  string  installedAppList  = 3;
    optional  string  country  = 4;
    optional  EntranceRedDot  entranceRedDot  = 5;
    optional  uint32  unReadMsgCount  = 6;
    optional  bool  fromEntrance  = 7;
    optional  uint32  releaseChannel  = 8;
}

message GetGameIndexForeignResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  GameIndexNav  nav  = 2;
    optional  GameManagementEntrance  gameManagement  = 3;
    optional  BestSellingGameListModule  bestSellingGameList  = 4;
    optional  Installed  installed  = 5;
    optional  LibraryEntranceInfo  libraryEntrance  = 6;
}

message GetGameIndexResponse_V2 {
    required  BaseResponse  baseResponse  = 1;
    optional  string  searchPlaceHolder  = 2;
    required  Profile  profile  = 3;
    optional  IndexGift  indexGift  = 4;
    optional  Installed  installed  = 5;
    optional  Feeds  feeds  = 6;
    optional  Hot  hot  = 7;
    optional  string  appstoreGoodsId  = 8;
    required  LibraryEntrance  libraryEntrance  = 9;
    repeated  string  activeAppIdList  = 10;
    repeated  string  keyAppIdList  = 11;
    optional  AppStoreControl  appStoreControl  = 12;
    optional  FeedBackEntrance  feedBackEntrance  = 13;
}

message GetGameIndexResponse_V3 {
    required  BaseResponse  baseResponse  = 1;
    optional  string  searchPlaceHolder  = 2;
    optional  string  classifyUrl  = 3;
    optional  IndexGift  msgCenter  = 4;
    optional  IndexGift  indexGift  = 5;
    optional  Installed  installed  = 6;
    optional  RecentPlayInfo  recentPlayInfo  = 7;
    optional  TopRecommendBanner  topRecommendBanner  = 8;
    optional  GameRecommend  todayGameRecommend  = 9;
    optional  NewHot  hot  = 10;
    optional  LibraryEntrance  libraryEntrance  = 11;
    optional  FeedBackEntrance  feedBackEntrance  = 12;
    optional  string  appstoreGoodsId  = 13;
    optional  AppStoreControl  appStoreControl  = 14;
    optional  IndexTheme  theme  = 15;
    optional  GameManagementEntrance  gameManagement  = 16;
    optional  string  gameDetailUrl  = 17;
    optional  uint32  gameDetailJumpType  = 18;
    optional  IndexGift  myProfile  = 19;
    optional  DownloadGuidance  googlePlayTips  = 20;
}

message GetGameMenuReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
}

message GetGameMenuResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetGameMenuResp_MenuItem  menuList  = 2;
}

message GetGameMenuResp_MenuItem {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  uint32  type  = 3;
    optional  string  h5Url  = 4;
    optional  string  username  = 5;
    optional  string  path  = 6;
    optional  uint32  versionType  = 7;
}

message GetHDHeadImgRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  uint32  imgWidth  = 3;
    required  uint32  imgHeight  = 4;
    optional  string  imgFormat  = 5;
    required  uint32  totalLen  = 6;
    required  uint32  startPos  = 7;
    required  uint32  headImgType  = 8;
}

message GetHDHeadImgResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  userName  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    required  SKBuiltinBuffer_t  data  = 5;
}

message GetHardDeviceHelpUrlReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  devicetype  = 2;
    required  string  categoryId  = 3;
    optional  string  requestsource  = 4;
}

message GetHardDeviceHelpUrlResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  helpurl  = 2;
}

message GetHardDeviceOperTicketFilter {
    optional  string  bizName  = 1;
}

message GetHardDeviceOperTicketInfo {
    required  uint32  oper  = 1;
    required  uint32  sence  = 2;
    required  HardDevice  device  = 3;
}

message GetHardDeviceOperTicketReq {
    repeated  GetHardDeviceOperTicketInfo  info  = 1;
    optional  GetHardDeviceOperTicketFilter  filter  = 2;
}

message GetHardDeviceOperTicketResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetHardDeviceOperTicketResult  result  = 2;
}

message GetHardDeviceOperTicketResult {
    required  int32  ret  = 1;
    optional  HardDevice  device  = 2;
    optional  string  ticket  = 3;
    optional  uint32  oper  = 4;
}

message GetHbRefundConfigReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetHbRefundConfigResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  entranceName  = 4;
    optional  string  entranceTitle  = 5;
    optional  bool  reddot  = 6;
    optional  string  refundLingqianTitle  = 7;
    optional  string  refundLingqianDesc  = 8;
    optional  string  refundOriginTitle  = 9;
    optional  string  refundOriginDesc  = 10;
    optional  string  topTip  = 11;
    optional  string  refundTimeTitle  = 12;
    repeated  HbRefundTime  refundTime  = 13;
}

message GetHoneyPayCardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardNo  = 2;
    optional  PayGenActionLocation  location  = 3;
}

message GetHoneyPayCardResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  HPRealNameInfo  realNameInfo  = 4;
    optional  C2CMsgNode  c2Cmsg  = 8;
    optional  MakeSureButton  toRemind  = 9;
    optional  HPCardOperItem  operItem  = 10;
    optional  HoneyUserDetail  detail  = 11;
}

message GetImUnreadMsgCountResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  displayMsg  = 2;
    optional  string  qqscheme  = 3;
    optional  string  downloadUrl  = 4;
}

message GetIncomeBalanceRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetIncomeBalanceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int64  balance  = 2;
}

message GetIncomePageInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetIncomePageInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int64  incomeBalance  = 2;
    optional  string  incomeBillUrl  = 3;
    optional  string  qaUrl  = 4;
    optional  CoinBanner  banner  = 5;
    optional  RealNameAuthInfo  authInfo  = 6;
    optional  string  encashLimitWording  = 7;
    optional  bool  encashButtonValid  = 8;
}

message GetInitDataReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetInitDataResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  openid  = 2;
    optional  string  openKey  = 3;
    optional  string  offerid  = 4;
    optional  string  sessionId  = 5;
    optional  string  sessionType  = 6;
    optional  string  pf  = 7;
    optional  int32  errCode  = 8;
    optional  string  errMsg  = 9;
    optional  string  usableProductId  = 10;
    optional  uint32  environment  = 11;
}

message GetInviteFriendsMsgReq {
    required  uint32  inviteFlags  = 1;
}

message GetInviteFriendsMsgResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  msgTitle  = 2;
    optional  string  msgContent  = 3;
    optional  string  inviteUrl  = 4;
}

message GetIosExtensionKeyRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  extensionSessionType  = 2;
    optional  bytes  extensionDeviceId  = 3;
}

message GetIosExtensionKeyResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  key  = 2;
    optional  ExtSession  extensionSession  = 3;
}

message GetKefuSessionInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  subAppid  = 3;
}

message GetKefuSessionInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  blockQrPrefix  = 2;
}

message GetLandpageSmartPhoneReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  aid  = 2;
    optional  uint32  compId  = 3;
    optional  string  traceId  = 4;
    optional  string  uxinfo  = 5;
    optional  uint32  sid  = 6;
}

message GetLandpageSmartPhoneResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  fullNumber  = 2;
    optional  string  dialId  = 3;
}

message GetLastestExpressInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    optional  string  lockId  = 3;
    required  Address  address  = 4;
}

message GetLastestExpressInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  Express  expressList  = 2;
    optional  uint32  expressCount  = 3;
    optional  int32  retCode  = 4;
    optional  string  retMsg  = 5;
}

message GetLatestPayProductInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  payFuncId  = 2;
    optional  string  payProductId  = 3;
    optional  string  payAppId  = 4;
    optional  string  remarks  = 5;
    optional  string  ticket  = 6;
}

message GetLatestPayProductInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  product  = 2;
    required  int32  outerErrCode  = 3;
    optional  string  outerErrMsg  = 4;
    optional  string  outerRemarks  = 5;
    optional  int32  wxErrCode  = 6;
    optional  string  wxErrMsg  = 7;
    optional  string  productList  = 8;
}

message GetLbsLifeListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opcode  = 2;
    required  uint32  scene  = 3;
    optional  SKBuiltinBuffer_t  buff  = 4;
    required  LbsLocation  loc  = 5;
    optional  string  keyword  = 6;
    optional  uint32  entryTime  = 7;
    optional  uint32  isAutoQuery  = 8;
}

message GetLbsLifeListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  buff  = 2;
    required  uint32  iconCount  = 3;
    repeated  SKBuiltinString_t  iconList  = 4;
    required  uint32  lifeCount  = 5;
    repeated  LbsLife  lifeList  = 6;
    required  uint32  continueFlag  = 7;
    optional  string  logoUrl  = 8;
    optional  string  searchId  = 9;
    optional  int32  autoQueryInterval  = 10;
}

message GetLensInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  lensId  = 2;
}

message GetLensInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  LensInfo  lens  = 2;
}

message GetLensListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  reqType  = 2;
    optional  bytes  pageBuff  = 3;
    optional  bytes  ctx  = 4;
}

message GetLensListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  pageBuff  = 2;
    repeated  LensInfo  lensList  = 3;
}

message GetLibGameListRequest_V2 {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  offSet  = 2;
    required  uint32  limit  = 3;
    required  string  lang  = 4;
    repeated  string  installedAppList  = 5;
    optional  string  country  = 6;
    optional  uint32  sortId  = 7;
    optional  bool  needBaseInfo  = 8;
}

message GetLibGameListResponse_V2 {
    required  BaseResponse  baseResponse  = 1;
    optional  LibGameBaseInfo  libGameBaseInfo  = 2;
    repeated  AllGameItem  allGameList  = 3;
    optional  bool  remaining  = 4;
    optional  uint32  nextOffSet  = 5;
}

message GetLiveInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
}

message GetLiveInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  LiveInfo  liveInfo  = 2;
}

message GetLiveMessageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  liveCookies  = 2;
    optional  uint64  liveId  = 3;
    optional  string  roomId  = 4;
    optional  bool  offline  = 5;
}

message GetLiveMessageResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  LiveMessage  messages  = 2;
    optional  bytes  liveCookies  = 3;
    optional  uint32  onlineCnt  = 4;
    repeated  string  onlineHeadimgList  = 5;
    optional  uint32  likeCnt  = 6;
    optional  bool  needUpdate  = 7;
    optional  LiveExtInfo  extInfo  = 8;
}

message GetLiveMicAudienceInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
}

message GetLiveMicAudienceInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetLiveMicAudienceInfoResponse_LiveMicAudience  liveMicAudienceList  = 2;
}

message GetLiveMicAudienceInfoResponse_LiveMicAudience {
    optional  string  identityId  = 1;
    optional  string  nickname  = 2;
    optional  string  headImgUrl  = 3;
    optional  string  sdkUserId  = 4;
    optional  string  liveMicId  = 5;
}

message GetLiveOnlineByRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
}

message GetLiveOnlineByRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  identityIdList  = 2;
}

message GetLiveOnlineMemberByIdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    repeated  string  identityIdList  = 3;
}

message GetLiveOnlineMemberByIdResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetLiveOnlineMemberByIdResponse_OnlineMemberInfo  onlineInfoList  = 2;
}

message GetLiveOnlineMemberByIdResponse_OnlineMemberInfo {
    optional  string  identityId  = 1;
    optional  bool  online  = 2;
}

message GetLiveOnlineStateByRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
}

message GetLiveOnlineStateByRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  LiveUserOnlineState  userOnlineStateList  = 2;
}

message GetLiveTypeRes {
    optional  int32  errorcode  = 1;
    optional  string  errormsg  = 2;
    optional  int32  type  = 3;
    optional  string  data  = 4;
    optional  string  colorData  = 5;
    optional  string  actionData  = 6;
    optional  string  version  = 7;
}

message GetLoginQRCodeRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  randomEncryKey  = 2;
    optional  uint32  opcode  = 3;
    optional  string  deviceName  = 4;
    optional  string  userName  = 5;
    optional  uint32  extDevLoginType  = 6;
    optional  string  hardwareExtra  = 7;
    optional  string  softType  = 8;
    optional  SKBuiltinBuffer_t  msgContextPubKey  = 9;
}

message GetLoginQRCodeResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  qrcode  = 2;
    optional  string  uuid  = 3;
    required  uint32  checkTime  = 4;
    required  SKBuiltinBuffer_t  notifyKey  = 5;
    optional  uint32  expiredTime  = 6;
    optional  string  blueToothBroadCastUuid  = 7;
    optional  SKBuiltinBuffer_t  blueToothBroadCastContent  = 8;
}

message GetLotteryRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  getLotteryParams  = 2;
}

message GetLotteryResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  ExposureInfo  exposureInfo  = 4;
    optional  string  alertWording  = 5;
}

message GetMCreditLineTokenSignReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardNo  = 2;
    optional  uint64  creditLine  = 3;
}

message GetMCreditLineTokenSignResp {
    required  BaseResponse  baseResponse  = 1;
    optional  TokeMess  tokeMess  = 2;
    optional  uint32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message GetMFriendRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  opType  = 2;
    optional  string  md5  = 3;
    optional  int32  updateMobileListSize  = 4;
    repeated  Mobile  updateMobileList  = 5;
    optional  int32  updateEmailListSize  = 6;
    repeated  MEmail  updateEmailList  = 7;
    optional  uint32  scene  = 8;
}

message GetMFriendResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  count  = 2;
    repeated  MFriend  friendList  = 3;
    optional  string  md5  = 4;
}

message GetMemberCardHistoryRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  pageNum  = 2;
    optional  uint64  pageSize  = 3;
}

message GetMemberCardHistoryResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bool  isAll  = 4;
    optional  uint64  nextPageNum  = 5;
    optional  string  title  = 6;
    repeated  CardHomePageFAQItem  getMoreList  = 7;
    repeated  CardElementCouponList  items  = 8;
}

message GetMemberCardHomePageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  reqNum  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
    optional  uint32  sortRule  = 6;
}

message GetMemberCardHomePageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  nextOffset  = 4;
    optional  uint32  isAll  = 5;
    repeated  CardElementCouponList  cardElementCouponList  = 6;
    optional  CardSortInfoList  cardSortInfoList  = 7;
    optional  uint32  isChangeSortRule  = 8;
    optional  uint32  changeSortRule  = 9;
    optional  CardMiniAppInfo  historyMiniAppInfo  = 10;
    optional  string  historyEntranceNameWording  = 11;
    optional  CardMiniAppInfo  phoneMembercardMiniAppInfo  = 12;
    optional  string  phoneMembercardEntranceNameWording  = 13;
    optional  string  bubbleEntranceNameWording  = 14;
    repeated  CardHomePageFAQItem  getMoreList  = 15;
}

message GetMidasSdkInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetMidasSdkInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  MidasSdkInfo  sdkInfo  = 2;
}

message GetMktCardHomePageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  reqNum  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
    optional  uint32  scene  = 6;
    optional  uint32  sortRule  = 7;
}

message GetMktCardHomePageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  nextOffset  = 4;
    optional  uint32  isAll  = 5;
    optional  CardHomePageStoreList  cardHomePageStoreList  = 6;
    optional  CardHomePageUnderList  cardHomePageUnderList  = 7;
    optional  CardHomePageFAQItem  cardHomePageFaqItem  = 8;
    optional  string  ticketEnterWording  = 10;
    optional  uint32  isChangeSortRule  = 11;
    optional  uint32  changeSortRule  = 12;
    optional  CardSortInfoList  cardSortInfoList  = 13;
    optional  CardHomePageTopCellList  cardHomePageTopCellList  = 14;
}

message GetMktCardHomePageV2Request {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  reqNum  = 3;
}

message GetMktCardHomePageV2Response {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  CardHomePageTopCellGroup  cardHomePageTopCellGroup  = 4;
    optional  uint32  nextOffset  = 5;
    optional  uint32  isAll  = 6;
    optional  CardHomePageRecentlyUsedList  cardHomePageRecentlyUsedList  = 7;
    optional  CardHomePageFAQItem  cardHomePageFaqItem  = 8;
    optional  string  recentlyUsedWording  = 9;
}

message GetMktInvalidTicketHomePageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  reqNum  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
}

message GetMktInvalidTicketHomePageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  nextOffset  = 4;
    optional  uint32  isAll  = 5;
    optional  PageTicketList  pageInvalidTicketList  = 6;
    optional  uint32  isShowClearBtn  = 7;
}

message GetMktTicketHomePageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  reqNum  = 3;
    optional  double  latitude  = 4;
    optional  double  longitude  = 5;
}

message GetMktTicketHomePageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  nextOffset  = 4;
    optional  uint32  isAll  = 5;
    optional  PageTicketJumpList  pageTicketJumpList  = 6;
    optional  PageTicketList  pageTicketList  = 7;
    optional  PageTicketList  pageLicenseList  = 8;
    optional  PageUnderList  pageUnderList  = 9;
}

message GetMoreGameListRequest_V2 {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  offSet  = 2;
    required  uint32  limit  = 3;
    required  string  lang  = 4;
    required  uint32  gameType  = 5;
    optional  uint32  classifyId  = 6;
    optional  string  country  = 7;
}

message GetMoreGameListResponse_V2 {
    required  BaseResponse  baseResponse  = 1;
    repeated  AppItem  appList  = 2;
    optional  bool  remaining  = 3;
    optional  uint32  nextOffSet  = 4;
}

message GetMsgImgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  msgId  = 2;
    required  SKBuiltinString_t  fromUserName  = 3;
    required  SKBuiltinString_t  toUserName  = 4;
    required  uint32  totalLen  = 5;
    required  uint32  startPos  = 6;
    required  uint32  dataLen  = 7;
    optional  uint32  compressType  = 8;
    optional  uint64  newMsgId  = 9;
}

message GetMsgImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  msgId  = 2;
    required  SKBuiltinString_t  fromUserName  = 3;
    required  SKBuiltinString_t  toUserName  = 4;
    required  uint32  totalLen  = 5;
    required  uint32  startPos  = 6;
    required  uint32  dataLen  = 7;
    required  SKBuiltinBuffer_t  data  = 8;
    optional  uint64  newMsgId  = 9;
}

message GetNICAddrSvrInfo {
    optional  string  nicDeviceId  = 1;
    optional  VoipAddr  punchSvr  = 2;
}

message GetNICAddrSvrSet {
    optional  int32  getNicAddrSvrCnt  = 1;
    repeated  GetNICAddrSvrInfo  getNicAddrSvrs  = 2;
}

message GetNotifyAndChannelFeedsReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetNotifyAndChannelFeedsResp {
    required  BaseResponse  baseResponse  = 1;
    optional  TimelineNotifyInfo  timelineNotifyInfo  = 2;
    optional  string  channelFeeds  = 3;
    optional  bool  isEntryOpen  = 4;
}

message GetOfficialCanvasInfoReq {
    optional  string  canvasId  = 1;
    optional  string  extBuffer  = 2;
    optional  double  longitude  = 3;
    optional  double  latitude  = 4;
}

message GetOfficialCanvasInfoResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  canvasXml  = 2;
}

message GetOfflinePayInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  double  longtitude  = 2;
    required  double  latitude  = 3;
    optional  ActionLocation  actionLocation  = 4;
}

message GetOfflinePayInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  retText  = 4;
    optional  string  openRetText  = 5;
}

message GetOldAcctFriendRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  uint32  cliSeq  = 3;
    optional  string  sessionId  = 4;
}

message GetOldAcctFriendResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  OldAcctFriend  friends  = 2;
    optional  bool  continueFlag  = 3;
}

message GetOnlineInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  language  = 2;
}

message GetOnlineInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  onlineCount  = 2;
    repeated  OnlineInfo  onlineList  = 3;
    optional  string  summaryXml  = 4;
    optional  uint32  flag  = 5;
    optional  uint32  iconType  = 6;
}

message GetOpenIMChatRoomContactReq {
    optional  string  roomName  = 1;
}

message GetOpenIMChatRoomContactResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  OpenIMChatRoomContact  contact  = 2;
}

message GetOpenIMChatRoomMemberDetailReq {
    optional  string  roomName  = 1;
    optional  uint32  clientMemberVersion  = 2;
}

message GetOpenIMChatRoomMemberDetailResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  svrMemberVersion  = 2;
    optional  OpenIMChatRoomMemberData  memberData  = 3;
}

message GetOpenIMChatRoomQRCodeReq {
    optional  string  roomName  = 1;
}

message GetOpenIMChatRoomQRCodeResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  qrcode  = 2;
    optional  string  footerWording  = 3;
}

message GetOpenIMContactReq {
    required  string  tpUsername  = 1;
    optional  string  roomname  = 2;
    optional  string  ticket  = 3;
}

message GetOpenIMContactResp {
    required  int32  ret  = 1;
    optional  OpenIMContact  contact  = 2;
}

message GetOpenIMResourceReq {
    optional  string  language  = 1;
    optional  string  appId  = 2;
    repeated  string  wordingId  = 3;
}

message GetOpenIMResourceResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  AppIdResource  appidResource  = 2;
    optional  AcctTypeResource  acctTypeResource  = 3;
    repeated  WordingIdResource  wordingIdResource  = 4;
}

message GetOpenIMStatusReq {
    optional  BaseRequest  baseRequest  = 1;
}

message GetOpenIMStatusResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  OpenIMStatusColumn  statusDesc  = 2;
}

message GetOpenUrlReq {
    optional  uint32  scene  = 1;
    optional  AcceptFriReqInWxWork  acceptFriReqInWxwork  = 2;
}

message GetOpenUrlResp {
    optional  BaseResponse  baseResp  = 1;
    optional  string  openUrl  = 2;
}

message GetPOIListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  scene  = 2;
    required  uint32  opCode  = 3;
    optional  string  keyword  = 4;
    required  SKBuiltinBuffer_t  buff  = 5;
    required  double  longitude  = 6;
    required  double  latitude  = 7;
    optional  double  originalLongitude  = 8;
    optional  double  originalLatitude  = 9;
    optional  uint32  isAutoQuery  = 10;
}

message GetPOIListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  listCount  = 2;
    repeated  POIItem  poilist  = 3;
    required  uint32  opCode  = 4;
    required  uint32  isEnd  = 5;
    required  SKBuiltinBuffer_t  buff  = 6;
    optional  string  url  = 7;
    optional  string  logoUrl  = 8;
    optional  string  text  = 9;
    optional  string  openId  = 10;
    optional  int32  autoQueryInterval  = 11;
    optional  string  searchId  = 12;
}

message GetPackageListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  count  = 2;
    repeated  Package  list  = 3;
    optional  uint32  type  = 4;
    optional  uint32  flag  = 5;
}

message GetPackageListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  Package  list  = 3;
    required  uint32  continueFlag  = 4;
    required  uint32  svrCount  = 5;
    optional  uint32  type  = 6;
}

message GetPackageReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  priceLevel  = 3;
    optional  string  busiId  = 4;
    optional  uint32  busiType  = 5;
    optional  string  desc  = 6;
    optional  string  currencyType  = 7;
    optional  string  sign  = 8;
    optional  string  attach  = 9;
    optional  uint32  wxaVersionType  = 10;
    optional  string  productType  = 11;
    optional  uint32  env  = 12;
    optional  string  extInfo  = 13;
}

message GetPackageResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  orderId  = 2;
    optional  string  openKey  = 3;
    optional  string  offerid  = 4;
    optional  string  urlParams  = 5;
    optional  int32  fee  = 6;
    optional  int32  errCode  = 7;
    optional  string  errMsg  = 8;
    optional  string  productId  = 9;
    optional  int32  appusernameVersion  = 10;
}

message GetPayFunctionListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  telephonyNetIso  = 2;
    optional  uint32  ticketCount  = 3;
    repeated  SKBuiltinString_t  ticketList  = 4;
    optional  string  extInfo  = 5;
    optional  uint32  lastFuncListExist  = 6;
}

message GetPayFunctionListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  payFunctionList  = 2;
    optional  uint32  notShowTutorial  = 3;
    optional  uint32  cacheTime  = 4;
    optional  uint32  isShowSetting  = 5;
}

message GetPayFunctionProductListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  payFuncId  = 2;
}

message GetPayFunctionProductListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  productList  = 2;
    optional  string  outerLinkList  = 3;
}

message GetPayFunctionSwitchListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  tpaCountry  = 2;
    optional  uint32  funcType  = 3;
    optional  uint32  displayAllFlag  = 4;
    optional  uint32  gridType  = 5;
}

message GetPayFunctionSwitchListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  PayFunctionCell  functionList  = 2;
    optional  string  funcTypeName  = 3;
    optional  string  funcTypeDesc  = 4;
}

message GetPayMenuRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetPayMenuResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  title  = 2;
    repeated  PayMenuSector  sectors  = 3;
}

message GetPayUserDutyReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  ActionLocation  actionLocation  = 2;
}

message GetPayUserDutyResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  dutyInfo  = 4;
    optional  bool  needAgreeDuty  = 5;
}

message GetPcFrontPageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  shopId  = 3;
    optional  string  ticket  = 4;
}

message GetPcFrontPageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  FrontPageInfo  frontPageInfo  = 2;
}

message GetPersonalDesignerRequest {
    required  uint32  designerUin  = 1;
    required  SKBuiltinBuffer_t  reqBuf  = 2;
    optional  uint32  scene  = 3;
}

message GetPersonalDesignerResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  bannerUrl  = 2;
    required  string  name  = 3;
    required  string  desc  = 4;
    required  string  headUrl  = 5;
    required  string  bizName  = 6;
    repeated  EmotionSummary  emotionList  = 7;
    required  SKBuiltinBuffer_t  reqBuf  = 8;
    repeated  EmojiInfo  emojiList  = 9;
}

message GetPlayUrlReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  vid  = 2;
    optional  string  appmsgUrl  = 3;
    optional  string  previousPlayurl  = 4;
}

message GetPlayUrlResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  playurl  = 2;
    optional  uint32  block  = 3;
    optional  string  errorWording  = 4;
}

message GetPluginSwitchReq {
    optional  BaseRequest  baseRequest  = 1;
}

message GetPluginSwitchResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  PluginSwitchInfoList  switchList  = 2;
}

message GetPoiCityRequest {
    required  BaseRequest  baseRequest  = 1;
    required  LbsLocation  loc  = 2;
    required  uint32  scene  = 3;
    optional  string  srcCity  = 4;
    optional  string  locality  = 5;
    optional  string  sublocality  = 6;
    optional  string  administrativeAreaLevel3  = 7;
    optional  string  administrativeAreaLevel2  = 8;
    optional  string  administrativeAreaLevel1  = 9;
}

message GetPoiCityResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  city  = 5;
}

message GetPortalApInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  apKey  = 2;
    optional  string  apSsid  = 3;
    optional  string  apBssid  = 4;
    optional  string  mobileMac  = 5;
    optional  string  ticket  = 6;
    optional  string  sessionKey  = 7;
}

message GetPortalApInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  authUrl  = 2;
    optional  string  extend  = 3;
}

message GetProductDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  pid  = 2;
    optional  uint32  version  = 3;
    optional  string  scanCode  = 4;
}

message GetProductDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  productInfo  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
    optional  string  recommendInfo  = 5;
}

message GetProductDiscountRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  lockId  = 2;
    optional  string  url  = 3;
}

message GetProductDiscountResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  discountDetail  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message GetProfileInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  username  = 2;
}

message GetProfileInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  GetProfileInfoResponse_ServicePreInfo  servicePreInfo  = 2;
    optional  GetProfileInfoResponse_WxaEvaluateBasicInfo  evaluateBasicInfo  = 3;
    optional  GetProfileInfoResponse_WxaLikeList  friendLikeList  = 4;
    optional  GetProfileInfoResponse_WxaRelateBrandList  relateBrandList  = 7;
    optional  GetProfileInfoResponse_WxaRelateWeAppList  relateWeappList  = 8;
    optional  string  officicalUrl  = 9;
    optional  string  guarantUrl  = 10;
}

message GetProfileInfoResponse_MediaInfo {
    optional  int32  type  = 1;
    optional  string  preImgUrl  = 2;
    optional  string  realUrl  = 3;
}

message GetProfileInfoResponse_ServicePreInfo {
    repeated  GetProfileInfoResponse_MediaInfo  mediaList  = 1;
}

message GetProfileInfoResponse_WxaEvaluateBasicInfo {
    optional  double  averageScore  = 1;
    optional  uint64  totalScoreCnt  = 2;
}

message GetProfileInfoResponse_WxaLikeInfo {
    optional  uint32  createTime  = 1;
    optional  string  headimg  = 2;
    optional  string  nickname  = 3;
    optional  bool  selfLike  = 4;
}

message GetProfileInfoResponse_WxaLikeList {
    repeated  GetProfileInfoResponse_WxaLikeInfo  likeList  = 1;
    optional  uint32  totalLikeCnt  = 2;
}

message GetProfileInfoResponse_WxaRelateBrandInfo {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  username  = 4;
}

message GetProfileInfoResponse_WxaRelateBrandList {
    optional  string  brandRegisterTitle  = 1;
    repeated  GetProfileInfoResponse_WxaRelateBrandInfo  brandInfoList  = 2;
}

message GetProfileInfoResponse_WxaRelateWeAppInfo {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  username  = 4;
}

message GetProfileInfoResponse_WxaRelateWeAppList {
    optional  string  weappRegisterTitle  = 1;
    repeated  GetProfileInfoResponse_WxaRelateWeAppInfo  weappInfoList  = 2;
}

message GetProfileRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
}

message GetProfileResponse {
    required  BaseResponse  baseResponse  = 1;
    required  ModUserInfo  userInfo  = 2;
    required  UserInfoExt  userInfoExt  = 3;
}

message GetQQGroupRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opType  = 2;
    required  uint32  groupId  = 3;
}

message GetQQGroupResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  opType  = 2;
    required  QQGroupList  qqgroup  = 3;
    required  QQFriendList  qqfriend  = 4;
}

message GetQQMusicLyricRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  songId  = 2;
    required  SKBuiltinBuffer_t  url  = 3;
    optional  uint32  isOutsideGfw  = 4;
    optional  uint32  shakeMusicGlobalSwitch  = 5;
}

message GetQQMusicLyricResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  songLyric  = 2;
    optional  SKBuiltinBuffer_t  songAlbum  = 3;
    optional  SKBuiltinBuffer_t  songAlbumUrl  = 4;
}

message GetQRCodeRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinString_t  userName  = 2;
    required  uint32  style  = 3;
    optional  uint32  opCode  = 4;
}

message GetQRCodeResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  qrcode  = 2;
    required  uint32  style  = 5;
    optional  string  footerWording  = 6;
    optional  string  revokeQrcodeId  = 7;
    optional  string  revokeQrcodeWording  = 8;
}

message GetQRConnectCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  bundleid  = 3;
    optional  string  scope  = 4;
    optional  string  state  = 5;
    optional  string  universalLink  = 6;
    optional  string  opensdkVersion  = 7;
    optional  string  sdkToken  = 8;
    optional  string  opensdkBundleid  = 9;
    optional  uint32  sdkTokenChk  = 10;
}

message GetQRConnectCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  uuid  = 2;
    optional  string  appid  = 3;
    optional  string  appname  = 4;
    optional  string  appdesc  = 5;
    optional  string  appiconUrl  = 6;
    optional  bytes  qrcodeData  = 7;
    optional  uint32  lpTimeout  = 8;
    optional  uint32  lpInterval  = 9;
}

message GetQywxQRCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  poi  = 2;
    optional  string  qrExtInfo  = 3;
    optional  string  backup  = 4;
    optional  string  uxinfo  = 5;
    optional  string  componentId  = 6;
    optional  string  snsAid  = 7;
}

message GetQywxQRCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  url  = 2;
    optional  string  backup  = 3;
    optional  string  componentId  = 4;
    optional  string  snsAid  = 5;
}

message GetRandomAvatarReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
}

message GetRandomAvatarResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  nickname  = 2;
    optional  string  avatarurl  = 3;
    optional  string  fileid  = 4;
}

message GetReadingModeInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  url  = 2;
    required  string  userAgent  = 3;
    required  uint32  width  = 4;
    required  uint32  height  = 5;
}

message GetReadingModeInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  url  = 2;
}

message GetRealnameWordingReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  ActionLocation  actionLocation  = 2;
    optional  string  jsapiReqkey  = 3;
    optional  string  sessionId  = 4;
}

message GetRealnameWordingRsp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  bindCardTitle  = 4;
    optional  string  bindCardSubTitle  = 5;
    optional  string  bindIdTitle  = 6;
    optional  string  bindIdSubTitle  = 7;
    optional  string  extralWording  = 8;
    optional  bool  questionAnswerSwitch  = 9;
    optional  string  questionAnswerUrl  = 10;
    optional  int32  cacheTime  = 11;
    optional  bool  isShowBindCard  = 12;
    optional  bool  isShowBindId  = 13;
    optional  bool  isShowBindCardVerify  = 14;
    optional  string  bindCardVerifyTitle  = 15;
    optional  string  bindCardVerifySubtitle  = 16;
    optional  string  bindCardVerifyAlertViewRightButtonText  = 17;
    optional  string  bindCardVerifyAlertViewContent  = 18;
    optional  bool  isShowBindCardVerifyAlertView  = 19;
    repeated  string  headerTitles  = 20;
    optional  bool  needAgreeDuty  = 21;
    optional  JumpRemind  jumpRemindInfo  = 22;
    optional  bool  isShowCapitalSecurity  = 23;
    optional  string  iconUrl  = 24;
    optional  string  capitalSecurityWording  = 25;
    optional  bool  isnewrouter  = 26;
    optional  bool  isShowBindcardPage  = 27;
    repeated  RealNameNewWordingSection  session  = 28;
    optional  string  realnameWordTitle  = 29;
    optional  string  realnameWordDesc  = 30;
    optional  bool  isVerifySmsWithoutBandCard  = 31;
    optional  SpecialFindPwdInfo  specialFindPwdInfo  = 32;
}

message GetReceiptAssisMenuRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  timestamp  = 2;
}

message GetReceiptAssisMenuResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  menu  = 2;
}

message GetReceiptAssisPluginRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  timestamp  = 2;
}

message GetReceiptAssisPluginResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  TablePageData  pluginPage  = 2;
}

message GetReceiptAssisStatusRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetReceiptAssisStatusResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  isShowItem  = 2;
    optional  int32  isSubscribe  = 3;
}

message GetRecommendAppListResponse {
    required  uint32  total  = 1;
    required  BaseResponse  baseResponse  = 2;
    required  uint32  count  = 3;
    repeated  OpenAppInfo  appList  = 4;
}

message GetRecommendWxaRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  pageNum  = 2;
    optional  uint32  filterType  = 3;
    optional  GetRecommendWxaRequest_CategaryOption  cateOption  = 4;
    optional  uint64  sessionId  = 5;
    optional  GetRecommendWxaRequest_ClientInfo  clientInfo  = 6;
}

message GetRecommendWxaRequest_CategaryOption {
    optional  uint32  cateId  = 1;
}

message GetRecommendWxaRequest_ClientInfo {
    optional  string  netType  = 1;
    optional  double  longitude  = 2;
    optional  double  latitude  = 3;
}

message GetRecommendWxaResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  remainCount  = 2;
    repeated  RecommendWxa  recommendList  = 3;
    optional  uint64  sessionId  = 4;
}

message GetRecommendedMusicRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  musicNum  = 2;
    required  float  latitude  = 3;
    required  float  longitude  = 4;
    repeated  bytes  imageData  = 5;
    optional  uint64  requestId  = 6;
    optional  int32  bussId  = 7;
    optional  uint64  videoDuration  = 8;
}

message GetRecommendedMusicResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  requestId  = 2;
    repeated  RecommendedMusicInfo  musicList  = 3;
}

message GetRedPacketPreviewRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
}

message GetRedPacketPreviewResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  RedPacketPreviewMessage  msg  = 2;
}

message GetRedPacketStoryRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  packetId  = 2;
}

message GetRedPacketStoryResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  RedPacketStoryInfo  info  = 2;
}

message GetRemindRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetRemindResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  Remind  remind  = 2;
}

message GetRemoteDebugTicketRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetRemoteDebugTicketResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  loginTicket  = 2;
}

message GetReportStrategyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  deviceModel  = 2;
    optional  string  deviceBrand  = 3;
    optional  string  osName  = 4;
    optional  string  osVersion  = 5;
    optional  string  languageVer  = 6;
    optional  int32  logid  = 7;
}

message GetReportStrategyResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  cnt  = 2;
    repeated  StrategyItem  list  = 3;
}

message GetSafetyInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetSafetyInfoRespsonse {
    required  BaseResponse  baseResponse  = 1;
    optional  SafetyInfo  info  = 2;
}

message GetSearchResultRequest {
    optional  uint32  scene  = 1;
    optional  string  requestKey  = 2;
    optional  uint32  h5Version  = 3;
}

message GetSearchResultResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  json  = 2;
}

message GetSearchShareRequest {
    optional  uint32  scene  = 1;
    optional  string  sessionId  = 2;
    optional  string  requestId  = 3;
    optional  string  searchId  = 4;
    optional  uint32  h5Version  = 5;
    optional  string  query  = 6;
    optional  string  content  = 7;
}

message GetSearchShareResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  GetSearchShareResponse_SearchShareContext  context  = 2;
    optional  SearchBrandFeedsShare  brandFeed  = 3;
    optional  SearchBrandContactShare  brandProfile  = 4;
    optional  SearchWeappFeedsShare  weappFeed  = 5;
    optional  SearchWeappShare  weappProfile  = 6;
    optional  SearchFinderAccountShare  finderProfile  = 7;
    optional  SearchFinderFeedsShare  finderFeed  = 8;
    optional  SearchEmoticonShare  emoticon  = 9;
}

message GetSearchShareResponse_SearchShareContext {
    optional  string  sessionId  = 1;
    optional  string  searchId  = 2;
    optional  string  requestId  = 3;
    optional  uint32  businessType  = 4;
    optional  uint32  subType  = 5;
    optional  string  docId  = 6;
    optional  bytes  extendInfo  = 7;
}

message GetSearchShowOutWxaAppRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  reason  = 2;
}

message GetSearchShowOutWxaAppResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ShowOutItem  wxaAppList  = 2;
    optional  string  wording  = 3;
    optional  uint32  strategyId  = 4;
    optional  uint32  minRequestInterval  = 5;
}

message GetServiceNotifyOptionsRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  requestType  = 2;
    optional  uint32  begin  = 3;
    optional  uint32  limit  = 4;
}

message GetServiceNotifyOptionsResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  globalSwitch  = 2;
    repeated  ServiceNotifyItem  wxaOptions  = 3;
    optional  bool  customSessionGlobalSwitch  = 4;
    repeated  ServiceNotifyItem  customSessionWxaOptions  = 5;
    repeated  ServiceNotifyItem  bizOptions  = 6;
    optional  uint32  wxaOptionsTotal  = 7;
    optional  uint32  bizOptionsTotal  = 8;
}

message GetShakeMusicUrlRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  songUrl  = 2;
}

message GetShakeMusicUrlResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  songUrl  = 2;
}

message GetShareCardConsumedInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardId  = 2;
    optional  uint32  scene  = 3;
    optional  string  cardTpId  = 4;
    optional  string  code  = 5;
}

message GetShareCardConsumedInfoRsp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message GetShareCardListRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  cardIds  = 2;
}

message GetShareCardListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message GetShareCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardId  = 2;
}

message GetShareCardResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
}

message GetShareCardsLayoutResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonRet  = 2;
    optional  string  buff  = 3;
    optional  bool  end  = 4;
}

message GetShowSourceReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  lastpagedata  = 2;
}

message GetShowSourceResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    repeated  HbEnvelopSource  sourcelist  = 4;
    optional  string  pagedata  = 5;
    optional  uint32  hasmore  = 6;
    optional  string  illegalMsg  = 7;
    repeated  string  illegalMaterialIds  = 8;
    optional  uint32  candelete  = 9;
    optional  uint64  lastOptainTime  = 10;
}

message GetSnsAdCouponCardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  stockid  = 3;
    optional  string  uxinfo  = 4;
    optional  string  compid  = 5;
}

message GetSnsAdCouponCardResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  ret  = 2;
    optional  string  msg  = 3;
}

message GetSnsAdMetricReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  actionType  = 2;
    optional  string  actionString  = 3;
    optional  string  aid  = 4;
    optional  string  snsAdId  = 5;
    optional  string  uxinfo  = 6;
}

message GetSnsAdMetricResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  actionType  = 2;
    optional  string  snsAdId  = 3;
    optional  string  extSnsInfo  = 4;
}

message GetSnsTimelineBriefListRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint64  minFeedId  = 2;
    optional  uint32  needCnt  = 3;
}

message GetSnsTimelineBriefListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  SnsTimelineBrief  briefList  = 2;
}

message GetSportDeviceListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetSportDeviceListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  UserSportDevice  deviceList  = 2;
    optional  string  dataSourceFaqUrl  = 3;
    optional  string  watchDataSourceFaqUrl  = 4;
}

message GetStepListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  beginTime  = 2;
    optional  uint32  endTime  = 3;
}

message GetStepListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  StepItem  steps  = 2;
}

message GetSubBusinessInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  username  = 2;
    optional  string  businessId  = 3;
}

message GetSubBusinessInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  subBusinessUsername  = 2;
}

message GetSuggestAliasResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  SKBuiltinString_t  list  = 3;
    optional  string  verifySignature  = 4;
    optional  SKBuiltinBuffer_t  verifyBuff  = 5;
    optional  int32  userNameRet  = 6;
}

message GetSuggestionAppListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  appType  = 2;
    required  uint32  offSet  = 3;
    required  uint32  limit  = 4;
    optional  string  lang  = 5;
    optional  uint32  installedAppCount  = 6;
    repeated  SKBuiltinString_t  installedAppList  = 7;
}

message GetSuggestionAppListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  rcCount  = 2;
    repeated  RcAppList  rcList  = 3;
    optional  uint32  isInternalDownload  = 4;
    optional  uint32  adCount  = 5;
    repeated  AdAppList  adList  = 6;
    optional  uint32  giftCount  = 7;
    repeated  GiftList  giftList  = 8;
    optional  GiftEntranceItem  giftEntranceItem  = 9;
}

message GetTVInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  tvid  = 2;
    required  uint32  scene  = 3;
}

message GetTVInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  type  = 2;
    optional  string  descriptionXml  = 3;
    optional  string  tvid  = 4;
}

message GetTalkRoomMemberReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  uint32  scene  = 4;
}

message GetTalkRoomMemberResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  micSeq  = 2;
    required  int32  memberNum  = 3;
    repeated  TalkRoomMember  memberList  = 4;
}

message GetTestCodeDownloadInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  moduleName  = 3;
    optional  string  moduleMd5  = 4;
    optional  int32  codeType  = 5;
    optional  uint32  devKey  = 6;
    optional  uint32  packageType  = 7;
}

message GetTestCodeDownloadInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  downloadUrl  = 2;
    optional  string  errorMsg  = 3;
    optional  int32  errorCode  = 4;
}

message GetTransTextRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  msgCount  = 2;
    repeated  TranslateOrgMsg  msgList  = 3;
}

message GetTransTextResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  msgCount  = 2;
    repeated  TranslatedMsg  msgList  = 3;
    optional  string  toLang  = 4;
}

message GetTrustedFriendsReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetTrustedFriendsResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  TrustedFriendContactInfo  contacts  = 2;
    optional  uint32  trustedFriendMaxCnt  = 3;
}

message GetTwistAdCardIdReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uxInfo  = 2;
    optional  uint32  scene  = 3;
    optional  string  snsId  = 4;
    optional  string  canvasId  = 5;
    optional  string  extInfo  = 6;
}

message GetTwistAdCardIdResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  cardId  = 2;
    optional  string  snsId  = 3;
}

message GetUpListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  appId  = 2;
}

message GetUpListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  UpItem  upList  = 2;
}

message GetUpdatableMsgInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  GetUpdatableMsgInfoRequest_ShareKeyInfo  shareKeyList  = 2;
}

message GetUpdatableMsgInfoRequest_ShareKeyInfo {
    optional  string  appid  = 1;
    optional  string  shareKey  = 2;
}

message GetUpdatableMsgInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetUpdatableMsgInfoResponse_UpdatableMsgInfo  updatableMsgList  = 2;
}

message GetUpdatableMsgInfoResponse_UpdatableMsgInfo {
    optional  string  shareKey  = 1;
    optional  int32  retcode  = 2;
    optional  string  content  = 3;
    optional  string  contentColor  = 4;
    optional  int32  updatePeroid  = 5;
    optional  int32  state  = 6;
}

message GetUpdateInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  updateType  = 2;
    optional  uint32  channel  = 3;
}

message GetUpdateInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  packVersion  = 2;
    optional  string  packMd5  = 3;
    required  uint32  packSize  = 4;
    optional  string  packDescription  = 5;
    optional  uint32  urlCount  = 6;
    repeated  SKBuiltinString_t  downLoadUrl  = 7;
    optional  string  patchInfo  = 8;
}

message GetUrlInfoReqItem {
    optional  string  url  = 1;
    optional  uint32  urlType  = 2;
}

message GetUrlInfoRespItem {
    optional  int32  ret  = 1;
    optional  string  respUrl  = 2;
    optional  uint32  actionCode  = 3;
    optional  uint32  urlType  = 4;
    optional  string  title  = 5;
    optional  string  userName  = 6;
    optional  string  avatarUrl  = 7;
    optional  string  extraInfo  = 8;
}

message GetUserAuthListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  nextPageData  = 2;
}

message GetUserAuthListResp {
    required  BaseResponse  baseResponse  = 1;
    optional  UserMgrBaseResponse  usermgrBaseresp  = 2;
    repeated  AuthApp  authApp  = 3;
    optional  bytes  nextPageData  = 4;
    optional  uint32  nextPageFlag  = 5;
}

message GetUserAutoFillInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  bool  getAllInfo  = 3;
    repeated  string  userInfoList  = 4;
    optional  uint32  source  = 5;
    optional  uint32  clientVersion  = 6;
}

message GetUserAutoFillInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  userInfoJson  = 2;
    optional  uint32  authStatus  = 3;
    optional  string  authInfo  = 4;
    repeated  string  authGroupList  = 5;
}

message GetUserHistoryPageRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  username  = 2;
}

message GetUserHistoryPageResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  DailySportRecord  dailySportList  = 2;
}

message GetUserRankDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  username  = 2;
    required  string  appusername  = 3;
}

message GetUserRankDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  coverurl  = 2;
    required  string  motto  = 3;
    required  rankDesc  rankdesc  = 4;
    repeated  rankItem  ranklist  = 5;
    repeated  rankDetail  rankdetaillist  = 6;
    optional  string  source  = 7;
    repeated  string  affecteduserlist  = 8;
    optional  string  shareurl  = 9;
    optional  string  sharetitle  = 10;
    repeated  StepItem  steps  = 14;
    repeated  Follow  follows  = 15;
    optional  bool  isFollower  = 16;
    repeated  GetUserRankDetailResponse_Button  buttons  = 17;
    required  bool  isLikedCover  = 18;
    optional  uint32  myranknum  = 19;
    optional  string  reporturl  = 20;
    repeated  SportRecord  sportrecord  = 21;
    optional  uint32  likecount  = 22;
    repeated  likeUserDetail  likeList  = 23;
    optional  bool  isLike  = 24;
}

message GetUserRankDetailResponse_Button {
    optional  string  url  = 1;
    optional  string  title  = 2;
    optional  string  icon  = 3;
}

message GetUserRankLikeCountRequest {
    required  BaseRequest  baseRequest  = 1;
    required  bool  latestrank  = 2;
    optional  string  rankid  = 3;
    required  string  appusername  = 4;
    optional  string  championname  = 5;
}

message GetUserRankLikeCountResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  likeItem  friendlikelist  = 2;
    repeated  likeUserDetail  likeuserlist  = 3;
    repeated  string  affecteduserlist  = 4;
    required  string  championcoverurl  = 5;
    required  string  championmotto  = 6;
    required  string  rankid  = 7;
    optional  string  jumpchampionurl  = 8;
    optional  string  shareurl  = 9;
    optional  bool  iscacheexist  = 10;
    optional  string  sharetitle  = 11;
    repeated  Follow  follows  = 12;
    required  bool  isLikedCover  = 13;
    optional  string  donationUrl  = 14;
    optional  bool  hascoverurl  = 15;
    optional  uint32  ranklistShowtype  = 16;
    optional  string  myCoverUrl  = 17;
}

message GetUserVideoListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  offset  = 2;
    optional  uint32  limit  = 3;
    optional  string  checkHasNewTicket  = 4;
}

message GetUserVideoListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  errMsg  = 3;
    optional  string  jsonData  = 4;
    optional  bool  hasNext  = 5;
    optional  uint64  nextOffset  = 6;
    repeated  GetUserVideoListResponse_VideoAlbumItem  videoList  = 7;
    optional  string  checkHasNewTicket  = 8;
    optional  uint32  totalCount  = 9;
    optional  uint32  newCount  = 10;
}

message GetUserVideoListResponse_VideoAlbumItem {
    optional  string  videoId  = 1;
    optional  uint64  createTime  = 2;
    optional  GetUserVideoListResponse_VideoAlbumItem_GameInfo  game  = 3;
    optional  GetUserVideoListResponse_VideoAlbumItem_VideoInfo  video  = 4;
    repeated  GetUserVideoListResponse_VideoAlbumItem_TagInfo  tagList  = 5;
    optional  GetUserVideoListResponse_VideoAlbumItem_ExternInfo  externInfo  = 6;
}

message GetUserVideoListResponse_VideoAlbumItem_ExternInfo {
    optional  string  desc  = 1;
    optional  string  transInfo  = 2;
}

message GetUserVideoListResponse_VideoAlbumItem_GameInfo {
    optional  string  gameAppid  = 1;
    optional  string  gameName  = 2;
    optional  uint32  appType  = 3;
}

message GetUserVideoListResponse_VideoAlbumItem_TagInfo {
    optional  string  tagName  = 1;
    optional  string  imageUrl  = 2;
    optional  uint32  width  = 3;
}

message GetUserVideoListResponse_VideoAlbumItem_VideoInfo {
    optional  string  playUrl  = 1;
    optional  string  picUrl  = 2;
    optional  uint32  height  = 3;
    optional  uint32  width  = 4;
    optional  string  title  = 5;
    optional  uint32  duration  = 6;
}

message GetUserattrByOpenidRequest {
    optional  string  openid  = 1;
}

message GetUserattrByOpenidResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  username  = 2;
}

message GetVUserInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  version  = 2;
}

message GetVUserInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  version  = 2;
    required  uint32  vuserCount  = 3;
    repeated  VUserResponseItem  vuserList  = 4;
}

message GetVerifyTicketRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 3;
}

message GetVerifyTicketResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  userTicket  = 2;
    optional  NetworkSectResp  netWork  = 5;
}

message GetVideoInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  source  = 2;
    optional  string  vid  = 3;
}

message GetVideoInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ckey  = 2;
    optional  string  videoCgiUrl  = 3;
    optional  string  videoFileUrl  = 4;
}

message GetVoicePrintResourceRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  resScence  = 2;
    optional  string  verifyTicket  = 3;
}

message GetVoicePrintResourceResponse {
    required  BaseResponse  baseResponse  = 1;
    required  ResourceCtx  resourceData  = 2;
}

message GetVoicePrintResourceRsaRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  resScence  = 2;
    optional  string  verifyTicket  = 3;
    required  SKBuiltinBuffer_t  randomEncryKey  = 4;
}

message GetVoicePrintResourceRsaResponse {
    required  BaseResponse  baseResponse  = 1;
    required  ResourceCtx  resourceData  = 2;
}

message GetVoiceTransResRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  voiceId  = 2;
}

message GetVoiceTransResResponse {
    required  BaseResponse  baseResponse  = 1;
    required  VoiceTransRes  transRes  = 2;
    required  QueryResCtx  queryCtx  = 3;
}

message GetVoiceprintTicketRsaRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  uint32  getScence  = 3;
    required  SKBuiltinBuffer_t  randomEncryKey  = 4;
}

message GetVoiceprintTicketRsaResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  voiceprintTicket  = 2;
    optional  BuiltinIPList  builtinIplist  = 3;
    optional  HostList  newHostList  = 4;
    optional  NetworkControl  networkControl  = 5;
}

message GetWCOCallInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWCOCallInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  packageCount  = 2;
    repeated  WCOPackageInfo  packageList  = 3;
}

message GetWCOGiftCardListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWCOGiftCardListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  cardCount  = 2;
    repeated  WCOGiftCard  cardList  = 3;
}

message GetWCOPackageProductListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWCOPackageProductListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  packageCount  = 2;
    repeated  WCOPackageProduct  packageList  = 3;
}

message GetWCOProductListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  callCountry  = 2;
    optional  string  currency  = 3;
}

message GetWCOProductListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  cellCount  = 2;
    repeated  WCOCell  cellList  = 3;
    optional  string  lastProductId  = 4;
    optional  string  callCountry  = 5;
    required  int32  isAllowChangeCurrency  = 6;
    optional  string  currentCurrency  = 7;
    optional  string  alertTitle  = 8;
    optional  string  alertDesc  = 9;
}

message GetWXUserNameReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uxinfo  = 2;
    optional  string  wxGroupInfo  = 3;
}

message GetWXUserNameResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  username  = 2;
    optional  string  aliasname  = 3;
}

message GetWeChatOutCouponsRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
    optional  uint32  rechargeWordingVersion  = 3;
    optional  uint32  accountActivityWordingVersion  = 4;
}

message GetWeChatOutCouponsResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  coupons  = 2;
    optional  string  wording  = 3;
    optional  string  title  = 4;
    optional  string  desc  = 5;
    optional  string  imgPath  = 6;
    optional  string  urlPath  = 7;
    optional  string  balance  = 8;
    optional  string  pvwording  = 9;
    optional  string  smsDesc  = 10;
    optional  WCOSharedList  sharedList  = 11;
    optional  string  couponPrice  = 12;
    optional  string  outUrlPath  = 13;
    optional  string  currencySymbol  = 14;
    optional  string  webPayListUrl  = 15;
    optional  string  packageMsg  = 16;
    optional  uint32  packageCount  = 17;
    repeated  WCOPackageInfo  packageList  = 18;
}

message GetWeRunFollowerListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWeRunFollowerListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  string  recentLikeUsers  = 2;
    repeated  GetWeRunFollowerListResponse_FollowerItem  followers  = 3;
}

message GetWeRunFollowerListResponse_FollowerItem {
    optional  string  username  = 1;
    optional  bool  isFollowed  = 2;
}

message GetWeRunUserStateRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWeRunUserStateResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  hasStep  = 2;
}

message GetWeappBoxReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  queryJson  = 2;
}

message GetWeappBoxResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  data  = 2;
}

message GetWeappListByLocationReq {
    required  BaseRequest  baseRequest  = 1;
    optional  double  longitude  = 2;
    optional  double  latitude  = 3;
}

message GetWeappListByLocationResp {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaBusinessBaseResponse  businessResp  = 2;
    repeated  GetWeappListByLocationResp_BusinessWeappInfo  weappList  = 3;
}

message GetWeappListByLocationResp_BusinessWeappInfo {
    optional  string  username  = 1;
    optional  string  appid  = 2;
    optional  string  headimg  = 3;
    optional  string  nickname  = 4;
    optional  uint32  versionType  = 5;
    optional  string  pageUrl  = 6;
    optional  uint32  version  = 7;
}

message GetWecoinBalanceRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWecoinBalanceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int64  balance  = 2;
}

message GetWecoinPageInfoRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWecoinPageInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int64  wecoinBalance  = 2;
    optional  int64  incomeBalance  = 3;
    optional  string  wecoinBillUrl  = 4;
    optional  string  incomeBillUrl  = 5;
    optional  bool  showIncome  = 6;
    optional  string  qaUrl  = 7;
    optional  CoinBanner  banner  = 8;
}

message GetWecoinPriceListRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWecoinPriceListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WecoinPriceInfo  priceInfos  = 2;
    optional  string  agreementUrl  = 3;
    optional  int32  agreementStatus  = 4;
    optional  uint32  agreementVersion  = 5;
}

message GetWidgetAppVersionInfoReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetWidgetAppVersionInfoResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  GetWidgetAppVersionInfoResp_AppInfo  items  = 2;
}

message GetWidgetAppVersionInfoResp_AppInfo {
    optional  string  appid  = 1;
    optional  uint32  appVersion  = 2;
    optional  string  searchwidgetversionmd5  = 3;
    optional  string  downloadurl  = 4;
}

message GetWidgetInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  developerUin  = 3;
    repeated  WidgetInfo  widgetList  = 4;
}

message GetWidgetInfoResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  WidgetInfo  widgetList  = 2;
}

message GetWxaAppCDNDownloadUrlRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  type  = 2;
    optional  string  appid  = 3;
    optional  uint32  appVersion  = 4;
    optional  string  versionMd5  = 5;
    optional  uint32  packageType  = 6;
    optional  uint32  oldAppVersion  = 7;
    optional  string  moduleName  = 8;
    optional  bool  gzCompress  = 9;
    optional  PackagePreprocess  packagePreprocess  = 10;
}

message GetWxaAppCDNDownloadUrlResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  url  = 3;
    optional  uint32  lifespan  = 4;
    optional  string  patchUrl  = 5;
    optional  string  zstdUrl  = 8;
}

message GetWxaAppNearbyRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  double  locationX  = 2;
    optional  double  locationY  = 3;
    optional  string  nearbyListId  = 4;
    optional  bool  needSetNearbyState  = 5;
}

message GetWxaAppNearbyResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    optional  string  detailNearbyAppLink  = 3;
    optional  uint32  linkLifespan  = 4;
    optional  uint32  appCount  = 5;
    optional  string  nearbyListId  = 6;
    repeated  GetWxaAppNearbyResponse_NearbyWxaAppInfo  appList  = 7;
    optional  uint32  openThreshold  = 8;
    optional  uint32  displayStrategyId  = 11;
    optional  string  wording  = 12;
    optional  string  wordingColor  = 13;
    optional  string  noticeWording  = 14;
    optional  string  noticeBgColor  = 15;
    optional  uint32  disappearOneClick  = 16;
    optional  uint32  openWxa  = 17;
    optional  GetWxaAppNearbyResponse_NearbyWxaAppInfo  nearbyEntry  = 18;
}

message GetWxaAppNearbyResponse_NearbyWxaAppInfo {
    optional  string  username  = 1;
    optional  string  brandIconUrl  = 2;
    optional  string  storeName  = 3;
    optional  string  path  = 4;
    optional  uint32  appVersion  = 5;
    optional  uint32  type  = 6;
}

message GetWxaBindBizInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  pageBuffer  = 3;
}

message GetWxaBindBizInfoResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  GetWxaBindBizInfoResp_BindBizInfo  bindList  = 2;
    optional  string  pageBuffer  = 3;
    optional  bool  isLastPage  = 4;
}

message GetWxaBindBizInfoResp_BindBizInfo {
    optional  string  username  = 1;
    optional  string  iconUrl  = 2;
    optional  string  nickname  = 3;
}

message GetWxaDesktopEntranceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  double  locationX  = 2;
    optional  double  locationY  = 3;
}

message GetWxaDesktopEntranceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    repeated  GetWxaDesktopEntranceResponse_EntranceInfo  entranceInfo  = 3;
}

message GetWxaDesktopEntranceResponse_EntranceInfo {
    optional  uint32  entranceId  = 1;
    optional  uint32  showEntrance  = 2;
    optional  uint32  showType  = 3;
    optional  string  wording  = 4;
    optional  string  iconUrl  = 5;
    optional  string  iconUrl2  = 6;
}

message GetWxaGameConfigRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  WxaGameBaseInfo  wxaGameInfo  = 3;
    optional  WxaGameClientPublicLibInfo  publicLib  = 6;
    optional  GetWxaGameConfigRequest_WxaGameEnvContext  envContext  = 7;
}

message GetWxaGameConfigRequest_WxaGameEnvContext {
    optional  bool  isMute  = 1;
}

message GetWxaGameConfigResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaGameSampleConfig  perfSampleConfig  = 2;
    optional  WxaGameServerSampleConfig  serverSampleConfig  = 3;
    optional  GetWxaGameConfigResponse_WxagGameOriginalReviewConfig  originalReviewConfig  = 5;
}

message GetWxaGameConfigResponse_WxagGameOriginalReviewConfig {
    optional  string  questionId  = 1;
    optional  string  questionDesc  = 2;
    repeated  GetWxaGameConfigResponse_WxagGameOriginalReviewConfig_OptionItem  optionList  = 3;
    optional  string  thanksWording  = 4;
    optional  uint32  minPlayingSeconds  = 5;
    optional  string  title  = 6;
}

message GetWxaGameConfigResponse_WxagGameOriginalReviewConfig_OptionItem {
    optional  uint32  optionId  = 1;
    optional  string  iconUrl  = 2;
    optional  string  optionDesc  = 3;
}

message GetWxaGameRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWxaGameResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    repeated  GetWxaGameResponse_WxaGameInfo  wxagameList  = 3;
    optional  GetWxaGameResponse_WxaGameInfo  gameEntry  = 4;
    optional  string  linkWxagame  = 5;
    optional  uint32  actionCode  = 6;
    optional  string  wxagameNewWording  = 7;
    optional  string  wxagameEntryWording  = 8;
    optional  string  entryWordingColor  = 9;
    optional  string  newWordingBgColor  = 10;
    optional  uint32  disappearOneClick  = 11;
}

message GetWxaGameResponse_WxaGameInfo {
    optional  string  username  = 1;
    optional  string  brandIconUrl  = 2;
    optional  uint32  appVersion  = 3;
    optional  string  path  = 4;
}

message GetWxaMsgConfigRequest {
    required  BaseRequest  baseRequest  = 1;
}

message GetWxaMsgConfigResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    repeated  WxaMsgConfigItem  wxaMsgConfigList  = 3;
}

message GetWxaOrderInfoReq {
    required  BaseRequest  baseRequest  = 1;
}

message GetWxaOrderInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  showRedSpots  = 2;
}

message GetWxaUsageRecordRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  reason  = 2;
    optional  uint32  condition  = 3;
    optional  uint32  maxUpdatetime  = 4;
    optional  uint32  historyCount  = 5;
}

message GetWxaUsageRecordResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    repeated  WxaAppItem  starList  = 3;
    repeated  WxaAppItem  historyList  = 4;
    optional  uint32  status  = 5;
}

message GiftCardItemRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  cardId  = 2;
    required  string  toUsername  = 3;
    optional  uint32  staticScene  = 4;
}

message GiftCardItemResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  cardExt  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message GiftCenter {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  uint32  type  = 3;
    optional  string  jumpUrl  = 4;
    optional  string  imgUrl  = 5;
    repeated  GiftCenter_SignGift  signGiftList  = 6;
    optional  uint32  positionId  = 7;
    optional  string  externInfo  = 8;
}

message GiftCenter_SignGift {
    optional  string  iconUrl  = 1;
    optional  uint32  state  = 2;
    optional  uint32  width  = 3;
    optional  uint32  height  = 4;
}

message GiftEntrance {
    optional  string  summary  = 1;
    optional  string  desc  = 2;
    repeated  Icons  icons  = 3;
    optional  string  url  = 4;
    optional  string  title  = 5;
}

message GiftEntranceItem {
    optional  string  cellTitle  = 1;
    optional  string  enranceWording  = 2;
    optional  string  allGiftUrl  = 3;
}

message GiftInfo {
    required  string  title  = 1;
    repeated  GiftItem  giftList  = 2;
    optional  string  moreTitle  = 3;
    optional  string  moreUrl  = 4;
}

message GiftItem {
    required  string  logoUrl  = 1;
    required  string  title  = 2;
    required  string  detail  = 3;
    required  string  webUrl  = 4;
}

message GiftList {
    optional  string  giftId  = 1;
    optional  string  iconUrl  = 2;
    optional  string  title  = 3;
    optional  string  desc  = 4;
    optional  string  giftUrl  = 5;
}

message GmailInfo {
    optional  string  gmailAcct  = 1;
    required  uint32  gmailSwitch  = 2;
    required  uint32  gmailErrCode  = 3;
}

message GmailList {
    required  uint32  count  = 1;
    repeated  GmailInfo  list  = 2;
}

message GmailOperResponse {
    required  uint32  retCode  = 1;
}

message GoodsObject {
    optional  float  relativeMinx  = 1;
    optional  float  relativeMiny  = 2;
    optional  float  relativeMaxx  = 3;
    optional  float  relativeMaxy  = 4;
    optional  float  score  = 5;
    optional  uint32  minx  = 11;
    optional  uint32  miny  = 12;
    optional  uint32  maxx  = 13;
    optional  uint32  maxy  = 14;
    optional  float  centerX  = 21;
    optional  float  centerY  = 22;
    optional  float  objW  = 23;
    optional  float  objH  = 24;
}

message GrantBigChatRoomResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  quota  = 2;
}

message GroupInfo {
    optional  string  title  = 1;
    optional  string  iconurl  = 2;
    optional  string  intro  = 3;
    optional  string  desc  = 4;
    optional  string  moreurl  = 5;
}

message GroupItem {
    optional  string  groupKey  = 1;
    optional  uint32  groupId  = 2;
    optional  string  invoiceUrl  = 3;
}

message GroupRecommendBizResp {
    required  BaseResponse  baseResponse  = 1;
    required  RecommendGroups  groupList  = 2;
}

message GroupViewData {
    optional  TextViewData  title  = 1;
    repeated  SingleLineTextViewData  item  = 2;
    optional  string  viewId  = 3;
}

message GuideCellItem {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  icon  = 3;
    optional  string  url  = 4;
}

message GuideInfo {
    required  string  title  = 1;
    repeated  GuideItem  guideList  = 2;
    optional  string  moreTitle  = 3;
    optional  string  moreUrl  = 4;
}

message GuideItem {
    optional  string  logoUrl  = 1;
    required  string  title  = 2;
    optional  string  detail  = 3;
    optional  string  webUrl  = 4;
    optional  string  tagName  = 5;
}

message HBBusinessCallbackReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  sendId  = 2;
    optional  string  transId  = 3;
    optional  string  idSign  = 4;
    optional  uint32  unionSource  = 5;
}

message HBBusinessCallbackResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message HBReceiveUser {
    optional  uint64  receiveAmount  = 1;
    optional  uint64  receiveTime  = 2;
    optional  string  nickname  = 3;
    optional  string  headimg  = 4;
    optional  uint32  isFriend  = 5;
    optional  string  username  = 6;
    optional  string  gameTips  = 7;
}

message HPCardOperItem {
    optional  string  operTitle  = 1;
    optional  string  operDesc  = 2;
    optional  string  url  = 3;
    optional  string  icon  = 4;
}

message HPRealNameInfo {
    optional  uint32  guideFlag  = 1;
    optional  string  guideWording  = 2;
    optional  string  leftButtonWording  = 3;
    optional  string  rightButtonWording  = 4;
    optional  string  uploadCreditUrl  = 5;
}

message HVAppInfo {
    optional  string  appId  = 1;
    optional  string  launchUrl  = 2;
    optional  string  appName  = 3;
    optional  string  appIcon  = 4;
    optional  LabelInfo  labelInfo  = 5;
    optional  string  jumpUrl  = 6;
}

message HVGameGetMenuRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  appId  = 2;
    required  string  lang  = 3;
    optional  string  country  = 4;
}

message HVGameGetMenuResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  HVGameGetMenuResponse_Menu  menuItemList  = 2;
}

message HVGameGetMenuResponse_Menu {
    required  uint32  itemId  = 1;
    required  string  title  = 2;
    required  string  thumbUrl  = 3;
    required  uint32  actionType  = 4;
    optional  string  targetUrl  = 5;
    required  uint32  placeId  = 6;
}

message HWFrameBuffer {
    required  bytes  rawBuf  = 1;
    required  int32  samplesCount  = 2;
    repeated  HWTimeInfo  timeInfo  = 3;
    repeated  int32  sampleSize  = 4;
}

message HWParamBuffer {
    required  uint32  headerLen  = 1;
    required  bytes  spsbuf  = 2;
    required  bytes  ppsbuf  = 3;
    optional  bytes  vpsbuf  = 4;
}

message HWTimeInfo {
    required  int64  durTimeValue  = 1;
    required  int32  durTimeScale  = 2;
    required  int64  presentTimeValue  = 3;
    required  int32  presentTimeScale  = 4;
    required  int64  decodeTimeValue  = 5;
    required  int32  decodeTimeScale  = 6;
}

message HalfPage {
    optional  TitleInfo  titleInfo  = 1;
    optional  string  wording  = 2;
    optional  QRButtonInfo  leftButton  = 3;
    optional  QRButtonInfo  rightButton  = 4;
}

message HardDevice {
    optional  string  deviceType  = 1;
    optional  string  deviceId  = 2;
}

message HardDeviceAttr {
    optional  string  brandName  = 1;
    optional  string  authKey  = 2;
    optional  string  mac  = 3;
    optional  string  connProto  = 4;
    optional  uint32  connStrategy  = 5;
    optional  uint32  closeStrategy  = 6;
    optional  int32  manuMacPos  = 7;
    optional  int32  serMacPos  = 8;
    optional  string  hardDeviceAttrDesc  = 9;
    optional  string  alias  = 10;
    optional  string  iconUrl  = 11;
    optional  string  jumpUrl  = 12;
    optional  string  deviceTitle  = 13;
    optional  string  deviceDesc  = 14;
    optional  string  category  = 15;
    optional  uint32  deviceTypeMainDevice  = 16;
    optional  uint32  isEnterMyDevice  = 17;
    optional  int64  bleSimpleProtocol  = 18;
    optional  string  ability  = 19;
    optional  string  abilityInf  = 20;
    optional  string  serialNumber  = 21;
    optional  string  subDeviceList  = 22;
}

message HardDeviceAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    required  HardDevice  hardDevice  = 2;
    required  uint32  authVer  = 3;
    required  SKBuiltinBuffer_t  authBuffer  = 4;
}

message HardDeviceAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  sessionKey  = 2;
    required  SKBuiltinBuffer_t  sessionBuffer  = 3;
    required  SKBuiltinBuffer_t  keyBuffer  = 4;
    required  uint32  cacheTimeout  = 5;
    required  uint32  blockTimeout  = 6;
    required  uint32  cryptMethod  = 7;
}

message HardDeviceMsg {
    required  uint64  sessionId  = 1;
    required  uint32  createTime  = 2;
    required  SKBuiltinBuffer_t  buffer  = 3;
    optional  uint32  type  = 4;
}

message HardDeviceStatusSubRequest {
    optional  bytes  deviceType  = 1;
    optional  bytes  deviceId  = 2;
    optional  uint32  opType  = 3;
}

message HardDeviceStatusSubResponse {
    required  BaseResponse  baseResponse  = 1;
}

message HbBuffer {
    optional  uint64  amount  = 1;
    optional  bytes  sendId  = 2;
}

message HbEnvelopSource {
    optional  string  corpName  = 1;
    optional  uint32  subType  = 2;
    optional  string  materialId  = 3;
    optional  HbEnvelopSourceLocal  sourceObject  = 4;
    optional  string  overtimeLabel  = 5;
    optional  uint32  isExpired  = 6;
    optional  uint32  isSelected  = 7;
    optional  uint64  obtainTime  = 8;
    optional  uint32  materialFlag  = 9;
    optional  uint32  userFlag  = 10;
    optional  string  leaveText  = 11;
    optional  string  tempText  = 12;
    optional  uint32  detailLinkType  = 13;
    optional  string  detailLinkAppname  = 14;
    optional  string  detailLinkUrl  = 15;
    optional  string  detailLinkTitle  = 16;
    optional  string  exchangeTitle  = 17;
    optional  string  exchangeUrl  = 18;
    optional  uint32  hasSource  = 19;
    optional  uint64  lastOptainTime  = 20;
    optional  uint32  disable  = 21;
    optional  string  disableText  = 22;
}

message HbEnvelopSourceLocal {
    optional  string  corpLogo  = 1;
    optional  string  bubbleImage  = 2;
    optional  string  coverImage  = 3;
    optional  string  detailImage  = 4;
    optional  string  bubbleImageMd5  = 5;
    optional  string  coverImageMd5  = 6;
    optional  string  detailImageMd5  = 7;
    optional  string  corpLogoMd5  = 8;
}

message HbRefundTime {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  iconurl  = 3;
    optional  string  iconmd5  = 4;
}

message HeartBeatRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  timeStamp  = 2;
    optional  SKBuiltinBuffer_t  keyBuf  = 3;
    optional  SKBuiltinBuffer_t  blueToothBroadCastContent  = 4;
    optional  uint32  scene  = 5;
}

message HeartBeatResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  nextTime  = 2;
    optional  uint32  selector  = 3;
    optional  SKBuiltinBuffer_t  blueToothBroadCastContent  = 4;
}

message HeavyUserReqInfo {
    required  uint32  monitorIdMapVersion  = 1;
}

message HeavyUserRespInfo {
    required  uint32  monitorIdMapVersion  = 1;
    repeated  MonitorIdMapStrategyInterval  monitorIdMapStrategys  = 2;
    required  int32  respType  = 3;
}

message HistoryInJoinRoomMsgOplog {
    required  uint64  newMsgId  = 1;
    required  uint64  historyId  = 2;
    required  string  roomName  = 3;
    optional  uint32  oper  = 4;
    optional  string  userName  = 5;
    optional  string  clientMsgId  = 6;
}

message HistoryInfo {
    optional  string  fileId  = 1;
    optional  string  aeskey  = 2;
    optional  string  fileMd5  = 3;
    optional  uint32  fileLength  = 4;
    optional  uint32  msgCount  = 5;
}

message HitInfo {
    optional  string  word  = 1;
}

message HomePageTheme {
    optional  HomePageTheme_TopBanner  topBannerItem  = 1;
    optional  HomePageTheme_NavBar  navBarItem  = 2;
    optional  HomePageTheme_Footer  footerItem  = 3;
}

message HomePageTheme_Footer {
    optional  string  backgroundUrl  = 1;
}

message HomePageTheme_NavBar {
    optional  HomePageTheme_NavBar_Navigator  myProfile  = 1;
    optional  HomePageTheme_NavBar_Navigator  myMessage  = 2;
    optional  HomePageTheme_NavBar_Navigator  myActivities  = 3;
    optional  HomePageTheme_NavBar_Navigator  typesNav  = 4;
    optional  string  backgroundUrl  = 5;
    optional  HomePageTheme_NavBar_Navigator  search  = 6;
}

message HomePageTheme_NavBar_Navigator {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  string  jumpUrl  = 3;
}

message HomePageTheme_TopBanner {
    optional  string  picUrl  = 1;
    optional  string  jumpUrl  = 2;
    optional  uint32  id  = 3;
    optional  string  externInfo  = 4;
}

message HoneyPayListReq {
    required  BaseRequest  baseRequest  = 1;
}

message HoneyPayListResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    repeated  HoneyPayListResp_HoneyPayRecord  honeyRecords  = 4;
    optional  HoneyPayListResp_Pertermit  pertermit  = 5;
    optional  RightCorner  rightCorner  = 6;
    optional  bool  isShowOpenCardButton  = 7;
    optional  HoneyPayListResp_Banner  noticeBanner  = 8;
}

message HoneyPayListResp_Banner {
    optional  string  title  = 1;
    optional  string  url  = 2;
}

message HoneyPayListResp_HoneyPayRecord {
    optional  string  userUsername  = 1;
    optional  uint64  creditLine  = 2;
    optional  uint32  rcvd  = 3;
    optional  uint64  remainCreditLine  = 4;
    optional  uint64  detailEntrance  = 5;
    optional  string  cardNo  = 6;
    optional  string  cardTypeName  = 7;
    optional  uint32  cardType  = 8;
    optional  string  icon  = 9;
}

message HoneyPayListResp_Pertermit {
    optional  string  helpWord  = 1;
    optional  string  helpUrl  = 2;
}

message HoneyPayerDetail {
    optional  string  cardNo  = 1;
    optional  string  userUsername  = 2;
    optional  uint64  creditLine  = 3;
    optional  int32  state  = 4;
    optional  string  attentionMessage  = 5;
    optional  uint32  notifyFlag  = 6;
    optional  PayWay  payWay  = 7;
    optional  uint32  createTime  = 8;
    optional  uint32  expireTime  = 9;
    optional  uint32  unbindTime  = 10;
    optional  uint32  unbindFlag  = 11;
    optional  string  cardStateTitle  = 12;
    optional  string  cardTypeName  = 13;
    optional  bool  isOpenUnifiedPay  = 14;
}

message HoneyUserDetail {
    optional  string  cardNo  = 1;
    optional  string  payerUsername  = 2;
    optional  uint64  remainCreditLine  = 3;
    optional  int32  state  = 4;
    optional  uint32  createTime  = 5;
    optional  uint32  expireTime  = 6;
    optional  uint32  unbindTime  = 7;
    optional  uint32  unbindFlag  = 8;
    optional  string  cardStateTitle  = 9;
    optional  string  cardTypeName  = 10;
    optional  string  wishing  = 11;
    optional  string  iconUrl  = 12;
    optional  string  explain  = 13;
    optional  string  attentionMessage  = 14;
    optional  uint32  cardType  = 15;
}

message HongBaoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  cgiCmd  = 2;
    optional  uint32  outPutType  = 3;
    required  SKBuiltinBuffer_t  reqText  = 4;
}

message HongBaoRes {
    required  BaseResponse  baseResponse  = 1;
    optional  SKBuiltinBuffer_t  retText  = 2;
    required  int32  platRet  = 3;
    optional  string  platMsg  = 4;
    required  int32  cgiCmdid  = 5;
    optional  int32  errorType  = 6;
    optional  string  errorMsg  = 7;
}

message Host {
    optional  string  origin  = 1;
    optional  string  substitute  = 2;
    optional  int32  priority  = 3;
}

message HostList {
    required  uint32  count  = 1;
    repeated  Host  list  = 2;
}

message Hot {
    required  string  title  = 1;
    repeated  HotItem  hotList  = 2;
}

message HotItem {
    required  AppItem  appItem  = 1;
    repeated  SummaryFeedItem  summaryFeedList  = 2;
    optional  string  noticeId  = 3;
}

message HttpHeader {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message HwDeviceMsg {
    required  int32  type  = 1;
    optional  HwDeviceMsg_HwMusic  musicMsg  = 2;
    optional  HwDeviceMsg_HwLocation  locationMsg  = 3;
    optional  HwDeviceMsg_HwImage  imageMsg  = 4;
    optional  HwDeviceMsg_HwAppFile  fileMsg  = 5;
    optional  HwDeviceMsg_HwUrl  urlMsg  = 6;
    optional  HwDeviceMsg_HwVideo  videoMsg  = 7;
}

message HwDeviceMsg_HwAppFile {
    optional  string  type  = 1;
    optional  string  name  = 2;
    optional  uint32  size  = 3;
    optional  string  md5  = 4;
    optional  string  fileid  = 5;
    optional  string  aeskey  = 6;
    optional  string  url  = 7;
}

message HwDeviceMsg_HwImage {
    optional  string  type  = 1;
    optional  string  name  = 2;
    optional  uint32  size  = 3;
    optional  string  md5  = 4;
    optional  string  fileid  = 5;
    optional  string  aeskey  = 6;
    optional  string  url  = 7;
    optional  string  tlEncrytKey  = 8;
}

message HwDeviceMsg_HwLocation {
    optional  float  x  = 1;
    optional  float  y  = 2;
    optional  float  scale  = 3;
    optional  string  label  = 4;
    optional  string  poiname  = 5;
}

message HwDeviceMsg_HwMusic {
    optional  string  title  = 1;
    optional  string  des  = 2;
    optional  int32  type  = 3;
    optional  string  url  = 4;
    optional  string  lowurl  = 5;
    optional  string  dataurl  = 6;
    optional  string  lowdataurl  = 7;
    optional  string  appname  = 8;
    optional  string  cdnthumburl  = 9;
    optional  uint32  cdnthumblength  = 10;
    optional  string  cdnthumbaeskey  = 11;
}

message HwDeviceMsg_HwUrl {
    optional  string  url  = 1;
    optional  string  title  = 2;
    optional  string  des  = 3;
    optional  string  appname  = 4;
}

message HwDeviceMsg_HwVideo {
    optional  string  type  = 1;
    optional  uint32  size  = 2;
    optional  string  md5  = 3;
    optional  string  url  = 4;
    optional  string  name  = 5;
}

message IBeaconBoardcastRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUsername  = 2;
    optional  string  content  = 3;
}

message IBeaconBoardcastResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  IBeaconNotification  notification  = 2;
}

message IBeaconInfo {
    optional  string  uuid  = 1;
    optional  int32  major  = 2;
    optional  int32  minor  = 3;
    optional  double  distance  = 4;
}

message IBeaconInfoGroup {
    optional  string  uuid  = 1;
    optional  int32  major  = 2;
    repeated  IBeaconMinors  minors  = 3;
}

message IBeaconLocationInfo {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
}

message IBeaconMinors {
    optional  int32  minorBegin  = 1;
    optional  int32  minorEnd  = 2;
}

message IBeaconNotification {
    required  int32  result  = 1;
    optional  string  tips  = 2;
    optional  string  message  = 3;
}

message IBeaconPageInfo {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  picurl  = 3;
    optional  string  jumpurl  = 4;
}

message IMBehavior {
    required  int32  opType  = 1;
    optional  IMBehaviorChattingOP  chattingOp  = 2;
    optional  IMBehaviorMsgOP  msgOp  = 3;
}

message IMBehaviorChattingOP {
    optional  int32  changeUnread  = 1;
    optional  int32  changeTop  = 2;
    optional  int32  changeNotifyStatus  = 3;
    optional  int32  changeSaveAddress  = 4;
    optional  int32  expose  = 5;
}

message IMBehaviorMsgOP {
    required  int32  msgType  = 1;
    optional  int32  msgOpType  = 2;
    optional  int32  appMsgInnerType  = 3;
    optional  int32  count  = 4;
}

message IOSSelectData {
    optional  string  systemName  = 1;
    optional  string  model  = 2;
    optional  string  sysVersion  = 3;
    optional  string  deviceInfo  = 4;
    optional  float  lux  = 5;
}

message IapCancelPayReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  orderId  = 2;
    optional  string  openKey  = 3;
    optional  string  offerid  = 4;
    optional  string  urlParams  = 5;
    optional  int32  fee  = 6;
    optional  string  productId  = 7;
}

message IapCancelPayResp {
    required  BaseResponse  baseResponse  = 1;
}

message Icons {
    optional  string  icon  = 1;
    optional  string  desc  = 2;
}

message IdKeyDataItem {
    required  uint32  logid  = 1;
    required  uint32  value  = 2;
    optional  uint32  count  = 3;
}

message IdKeyDataPkg {
    required  uint32  uin  = 1;
    required  uint32  cliver  = 2;
    repeated  IdKeyDataItem  dataitems  = 3;
    optional  uint32  nettype  = 4;
}

message IdKeyGetStrategyResp {
    required  int32  ret  = 1;
    required  uint32  genstgver  = 2;
    required  uint32  clistgver  = 3;
    optional  StrategyTable  genstgtable  = 4;
    optional  StrategyTable  clistgtable  = 5;
    optional  uint32  datavalidtime  = 6;
    optional  uint32  pollingtime  = 7;
}

message IlinkAuthBuffer {
    optional  string  ilinkAuthCode  = 1;
    optional  string  ilinkAppid  = 2;
}

message IlinkAuthParams {
    optional  bytes  lkid  = 1;
}

message ImageViewData {
    optional  string  url  = 1;
    optional  string  viewId  = 2;
    optional  float  width  = 3;
    optional  float  height  = 4;
}

message ImgPair {
    required  SKBuiltinBuffer_t  imgBuf  = 1;
    required  SKBuiltinString_t  username  = 2;
}

message IncomeEncashCtx {
    optional  string  billNo  = 1;
    optional  uint64  amount  = 2;
}

message IndexGift {
    optional  string  giftUrl  = 1;
    optional  string  giftName  = 2;
    optional  string  iconUrl  = 3;
    optional  string  badgeIconUrl  = 4;
}

message IndexTheme {
    optional  IndexTheme_TopBannerTheme  topBanner  = 1;
    optional  IndexTheme_NavBarTheme  navBar  = 2;
    optional  IndexTheme_FooterTheme  footer  = 3;
}

message IndexTheme_FooterTheme {
    optional  string  backgroundUrl  = 1;
}

message IndexTheme_NavBarTheme {
    optional  IndexTheme_NavBarTheme_NavigatorTheme  myProfile  = 1;
    optional  IndexTheme_NavBarTheme_NavigatorTheme  myMessage  = 2;
    optional  IndexTheme_NavBarTheme_NavigatorTheme  myActivities  = 3;
    optional  IndexTheme_NavBarTheme_NavigatorTheme  typesNav  = 4;
    optional  string  backgroundUrl  = 5;
    optional  IndexTheme_NavBarTheme_NavigatorTheme  search  = 6;
}

message IndexTheme_NavBarTheme_NavigatorTheme {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
}

message IndexTheme_TopBannerTheme {
    optional  string  picUrl  = 1;
    optional  string  jumpUrl  = 2;
    optional  uint32  id  = 3;
    optional  string  externInfo  = 4;
}

message InitBuffer {
    required  uint32  maxSyncKey  = 1;
}

message InitContactReq {
    required  string  username  = 1;
    optional  uint32  currentWxcontactSeq  = 2;
    optional  uint32  currentChatRoomContactSeq  = 3;
}

message InitContactResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  currentWxcontactSeq  = 2;
    optional  uint32  currentChatRoomContactSeq  = 3;
    optional  uint32  continueFlag  = 4;
    repeated  string  contactUsernameList  = 5;
}

message InitRegRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 2;
}

message InitRegResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  abtest  = 2;
}

message InitiateBizChatReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  corpId  = 2;
    required  string  bizchatName  = 3;
    repeated  string  userIdItem  = 4;
}

message InitiateBizChatResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  string  brandUserName  = 3;
    optional  uint32  bizchatType  = 4;
    optional  FullBizChat  groupChat  = 5;
    optional  BizChatUser  singleChat  = 6;
    optional  string  qychatType  = 7;
    optional  string  qychatId  = 8;
}

message InputMobileItem {
    optional  string  descTitle  = 1;
    optional  string  inputMobileDesc  = 2;
    optional  DescItem  exceptionDesc  = 3;
    optional  DescItem  newcardLinkDesc  = 4;
    optional  string  leftButtonDesc  = 5;
    optional  string  rightButtonDesc  = 6;
}

message Installed {
    required  string  title  = 1;
    repeated  InstalledItem  installedList  = 2;
    optional  InstalledMore  more  = 3;
}

message InstalledItem {
    required  AppItem  appItem  = 1;
    required  string  rank  = 2;
}

message InstalledMore {
    required  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  string  webUrl  = 3;
}

message InterceptPopUp {
    optional  string  wording  = 1;
    optional  PopUpJumpInfo  leftButton  = 2;
    optional  PopUpJumpInfo  rightButton  = 3;
    optional  uint32  popUpType  = 4;
}

message InterceptWin {
    optional  string  wording  = 1;
    optional  JumpItem  leftButton  = 2;
    optional  JumpItem  rightButton  = 3;
    optional  uint32  winType  = 4;
}

message Introduction {
    required  string  title  = 1;
    repeated  MediaItem  mediaList  = 2;
    required  string  detail  = 3;
}

message InvalidLogItem {
    required  uint32  logId  = 1;
    optional  uint32  intervalTime  = 2;
}

message InviteChatRoomMemberRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  memberCount  = 2;
    repeated  MemberReq  memberList  = 3;
    required  SKBuiltinString_t  chatRoomName  = 4;
    optional  uint32  inviteScene  = 5;
    optional  string  accessApprovalTicket  = 6;
    optional  HistoryInfo  history  = 7;
}

message InviteChatRoomMemberResponse {
    required  BaseResponse  baseResponse  = 1;
}

message InviteFriendOpen {
    optional  string  userName  = 1;
    required  uint32  friendType  = 2;
}

message InviteOpenIMChatRoomMemberReq {
    optional  string  roomName  = 1;
    repeated  OpenIMChatRoomMemberInReq  memberList  = 2;
}

message InviteOpenIMChatRoomMemberResp {
    optional  BaseResponse  baseResponse  = 1;
}

message InviteThirdNotifyData {
    optional  uint64  roomid  = 1;
    optional  uint64  roomkey  = 2;
    optional  string  wxGroupid  = 3;
    optional  string  callerOpenid  = 4;
    optional  string  calleeOpenid  = 5;
    repeated  string  calleeOpenids  = 6;
    optional  uint32  memberid  = 7;
    optional  int32  roomType  = 8;
}

message IosDeviceInfo {
    optional  string  modelPlatform  = 1;
}

message IphoneRegRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  token  = 2;
    optional  string  sound  = 3;
    optional  uint32  status  = 4;
    optional  string  voipSound  = 5;
    optional  uint32  tokenCert  = 6;
    optional  uint32  tokenEnv  = 7;
    optional  uint32  tokenScene  = 8;
}

message IphoneRegResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ItemListViewData {
    optional  TextViewData  title  = 1;
    repeated  TextViewData  items  = 2;
    optional  string  viewId  = 3;
}

message ItemSectionViewData {
    optional  TextViewData  topTitle  = 1;
    repeated  TableCellViewData  cells  = 2;
    optional  TextViewData  bottomTitle  = 3;
    optional  string  viewId  = 4;
}

message ItemType {
    optional  int32  type  = 1;
    optional  int32  int32  = 2;
    optional  uint32  uint32  = 3;
    optional  int64  int64  = 4;
    optional  uint64  uint64  = 5;
    optional  double  dbtype  = 6;
    optional  string  str  = 7;
    optional  bytes  blob  = 8;
}

message JSAPIAuthInfo {
    optional  string  jsapiName  = 1;
    optional  uint32  authStatus  = 2;
    optional  string  authDesc  = 3;
}

message JSAPIAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  appid  = 3;
    optional  string  jsapiName  = 4;
    optional  string  timestamp  = 5;
    optional  string  noncestr  = 6;
    optional  string  signature  = 7;
    optional  string  signatureMethod  = 8;
    optional  bytes  jsapiArgs  = 9;
    optional  uint32  signatureFlag  = 10;
    optional  string  scope  = 11;
}

message JSAPIAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    repeated  JSAPIAuthInfo  authInfo  = 3;
    optional  string  authTitle  = 4;
    repeated  JSScopeAuthInfo  scopeAuthInfo  = 5;
}

message JSAPIBaseResponse {
    optional  int32  errcode  = 1;
    optional  string  errmsg  = 2;
}

message JSAPICheckLaunchAppRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  launchappAppid  = 3;
    optional  uint32  scene  = 4;
    optional  string  url  = 5;
    optional  string  schemeUrl  = 6;
    optional  uint32  alertType  = 7;
    optional  uint32  sourceType  = 8;
    optional  uint32  operateDirectly  = 9;
    optional  string  installSchemeUrl  = 10;
    optional  string  packageName  = 11;
    optional  string  srcWebCompt  = 12;
}

message JSAPICheckLaunchAppResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  uint32  errcode  = 3;
    optional  int32  showType  = 4;
    optional  int32  jumpStoreFlag  = 5;
}

message JSAPIPermissionBitSet {
    required  uint32  bitValue  = 1;
    optional  uint32  bitValue2  = 2;
    optional  uint32  bitValue3  = 3;
    optional  uint32  bitValue4  = 4;
}

message JSAPIPreVerifyRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  appid  = 3;
    repeated  string  jsapiList  = 4;
    optional  string  timestamp  = 5;
    optional  string  noncestr  = 6;
    optional  string  signature  = 7;
    optional  string  signatureMethod  = 8;
    optional  uint32  scene  = 9;
    optional  string  sourceAppid  = 10;
    repeated  string  tagnameList  = 11;
    optional  uint32  entryScene  = 13;
}

message JSAPIPreVerifyResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    repeated  VerifyInfo  verifyInfoList  = 3;
    repeated  string  domainPathList  = 4;
    optional  string  appHeadimgUrl  = 5;
    repeated  JSAPIPreVerifyResponse_JSAPIWebCompt  authWebCompt  = 6;
}

message JSAPIPreVerifyResponse_JSAPIWebCompt {
    optional  string  name  = 1;
    optional  string  url  = 2;
    optional  string  md5  = 3;
    repeated  string  tags  = 4;
    optional  uint32  clientReportId  = 5;
    optional  uint32  frontendReportId  = 6;
    optional  string  configJson  = 7;
}

message JSAPIPreVerifyResponse_WebComponentInfo {
    repeated  JSAPIPreVerifyResponse_JSAPIWebCompt  authWebCompt  = 1;
}

message JSAPIRealtimeVerifyRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  appid  = 3;
    optional  string  jsapiName  = 4;
    optional  string  timestamp  = 5;
    optional  string  noncestr  = 6;
    optional  string  signature  = 7;
    optional  string  signatureMethod  = 8;
    optional  bytes  jsapiArgs  = 9;
}

message JSAPIRealtimeVerifyResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  VerifyInfo  verifyInfo  = 3;
}

message JSAPISetAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  appid  = 3;
    optional  string  jsapiName  = 4;
    optional  string  timestamp  = 5;
    optional  string  noncestr  = 6;
    optional  string  signature  = 7;
    optional  string  signatureMethod  = 8;
    optional  bytes  jsapiArgs  = 9;
    optional  uint32  signatureFlag  = 10;
    repeated  JSScopeAuthInfo  scopeAuthInfo  = 11;
}

message JSAPISetAuthResponse {
    required  BaseResponse  baseResponse  = 1;
}

message JSAuthorizeConfirmRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  string  scope  = 3;
    optional  uint32  opt  = 4;
    optional  uint32  versionType  = 5;
    optional  WxaExternalInfo  extInfo  = 6;
}

message JSAuthorizeConfirmResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    repeated  ScopeRiskInfo  riskInfoList  = 3;
}

message JSAuthorizeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  string  scope  = 3;
    optional  uint32  versionType  = 4;
    optional  WxaExternalInfo  extInfo  = 5;
    optional  string  jsapiName  = 6;
}

message JSAuthorizeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    repeated  ScopeInfo  scopeList  = 3;
    optional  string  appname  = 4;
    optional  string  appiconUrl  = 5;
    optional  string  cancelWording  = 6;
    optional  string  allowWording  = 7;
    optional  string  applyWording  = 8;
    optional  AlertPrivacyInfo  privacyInfo  = 9;
    repeated  ScopeRiskInfo  riskInfo  = 10;
}

message JSLoginConfirmRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  string  scope  = 3;
    optional  uint32  loginType  = 4;
    optional  string  state  = 6;
    optional  uint32  opt  = 7;
    optional  uint32  versionType  = 8;
    optional  WxaExternalInfo  extInfo  = 9;
}

message JSLoginConfirmResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  string  code  = 3;
    optional  string  openid  = 4;
    optional  string  sessionKey  = 5;
    optional  string  sessionTicket  = 6;
    optional  uint32  lifespan  = 7;
    optional  string  state  = 8;
    optional  string  signature  = 9;
}

message JSLoginRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  string  scope  = 3;
    optional  uint32  loginType  = 4;
    optional  string  url  = 5;
    optional  string  state  = 6;
    optional  uint32  versionType  = 7;
    optional  WxaExternalInfo  extInfo  = 8;
}

message JSLoginResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  string  code  = 3;
    repeated  ScopeInfo  scopeList  = 4;
    optional  string  appname  = 5;
    optional  string  appiconUrl  = 6;
    optional  string  openid  = 7;
    optional  string  sessionKey  = 8;
    optional  string  sessionTicket  = 9;
    optional  uint32  lifespan  = 10;
    optional  string  state  = 11;
    optional  string  signature  = 12;
}

message JSOAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  url  = 3;
    optional  string  scope  = 4;
    optional  string  signature  = 5;
    optional  string  signatureMethod  = 6;
    optional  string  timeStamp  = 7;
    optional  string  nonce  = 8;
}

message JSOAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  scopeCount  = 2;
    repeated  BizScopeInfo  scopeList  = 3;
    optional  string  oauthTitle  = 4;
}

message JSOperateWxDataRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  bytes  data  = 3;
    optional  string  grantScope  = 4;
    optional  uint32  opt  = 5;
    optional  uint32  versionType  = 6;
    optional  WxaExternalInfo  extInfo  = 7;
    optional  uint32  avatarId  = 8;
}

message JSOperateWxDataResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  bytes  data  = 3;
    optional  ScopeInfo  scope  = 4;
    optional  string  appname  = 5;
    optional  string  appiconUrl  = 6;
    optional  JSOperateWxDataResponse_DebugInfo  debugInfo  = 7;
    optional  bool  needHoldLongconn  = 8;
    optional  string  cancelWording  = 9;
    optional  string  allowWording  = 10;
    optional  string  applyWording  = 11;
    optional  UserAvatarInfo  avatarInfo  = 12;
    optional  AlertPrivacyInfo  privacyInfo  = 13;
}

message JSOperateWxDataResponse_DebugInfo {
    optional  string  data  = 1;
    optional  string  sessionKey  = 2;
}

message JSRefreshSessionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  versionType  = 3;
    optional  WxaExternalInfo  extInfo  = 4;
}

message JSRefreshSessionResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  uint32  sessionExpireIn  = 3;
}

message JSScopeAuthInfo {
    optional  string  scope  = 1;
    optional  uint32  scopeStatus  = 2;
    optional  string  scopeDesc  = 3;
    repeated  string  apiname  = 4;
}

message JSUserAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
    optional  string  scopeToGrant  = 3;
    optional  string  scopeDesc  = 4;
}

message JSUserSetAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  JSAPIBaseResponse  jsapiBaseresponse  = 2;
}

message JbmBitrateRsParam {
    required  int32  country  = 1;
    required  int32  setBitrateFlag  = 2;
    required  int32  bitrate  = 3;
    required  int32  frmNumFlag  = 4;
    required  int32  frmNum  = 5;
    required  int32  offsetDelay  = 6;
    required  int32  jitterForInit  = 7;
    required  double  exJitterFactorForAudioWifi1  = 8;
    required  double  cmJitterFactorForAudioWifi1  = 9;
    required  int32  exConstForAudioWifi1  = 10;
    required  int32  cmConstForAudioWifi1  = 11;
    required  double  exJitterFactorForAudioWifi2  = 12;
    required  double  cmJitterFactorForAudioWifi2  = 13;
    required  int32  exConstForAudioWifi2  = 14;
    required  int32  cmConstForAudioWifi2  = 15;
    required  double  exJitterFactorForAudioWifi3  = 16;
    required  double  cmJitterFactorForAudioWifi3  = 17;
    required  int32  exConstForAudioWifi3  = 18;
    required  int32  cmConstForAudioWifi3  = 19;
    required  double  exJitterFactorForAvwifi1  = 20;
    required  double  cmJitterFactorForAvwifi1  = 21;
    required  int32  exConstForAvwifi1  = 22;
    required  int32  cmConstForAvwifi1  = 23;
    required  double  exJitterFactorForAvwifi2  = 24;
    required  double  cmJitterFactorForAvwifi2  = 25;
    required  int32  exConstForAvwifi2  = 26;
    required  int32  cmConstForAvwifi2  = 27;
    required  double  exJitterFactorForAvwifi3  = 28;
    required  double  cmJitterFactorForAvwifi3  = 29;
    required  int32  exConstForAvwifi3  = 30;
    required  int32  cmConstForAvwifi3  = 31;
    required  double  exJitterFactorForAv3G1  = 32;
    required  double  cmJitterFactorForAv3G1  = 33;
    required  int32  exConstForAv3G1  = 34;
    required  int32  cmConstForAv3G1  = 35;
    required  double  exJitterFactorForAv3G2  = 36;
    required  double  cmJitterFactorForAv3G2  = 37;
    required  int32  exConstForAv3G2  = 38;
    required  int32  cmConstForAv3G2  = 39;
    required  double  exJitterFactorForAv3G3  = 40;
    required  double  cmJitterFactorForAv3G3  = 41;
    required  int32  exConstForAv3G3  = 42;
    required  int32  cmConstForAv3G3  = 43;
    required  double  exJitterFactorForAv2G  = 44;
    required  double  cmJitterFactorForAv2G  = 45;
    required  int32  exConstForAv2G  = 46;
    required  int32  cmConstForAv2G  = 47;
}

message JoinCloudIMRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  groupid  = 3;
    optional  string  signature  = 4;
    optional  uint32  timestamp  = 5;
    optional  string  noncestr  = 6;
    optional  string  privateData  = 7;
}

message JoinCloudIMRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  imroomid  = 2;
}

message JoinLiveRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  bytes  liveCookies  = 4;
}

message JoinLiveResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  liveCookies  = 2;
    optional  LiveSdkInfo  liveSdkInfo  = 3;
}

message JoinTrackRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatname  = 2;
    optional  uint32  scene  = 3;
}

message JoinTrackRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  trackRoomId  = 2;
    optional  string  retMsg  = 3;
}

message JsLogRequest {
    required  KVLogHead  logHead  = 1;
    repeated  KVLogItem  logList  = 2;
}

message JsLogResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  InvalidLogItem  invalidLogList  = 2;
}

message JumpEmotionDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  url  = 2;
}

message JumpEmotionDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  productId  = 2;
}

message JumpInfo {
    optional  int32  jumpType  = 1;
    optional  string  h5Url  = 2;
    optional  string  appUserName  = 3;
    optional  string  relativePagePath  = 4;
    optional  string  canvasXml  = 5;
    optional  string  expressionId  = 6;
}

message JumpItem {
    optional  string  wording  = 1;
    optional  uint32  action  = 2;
    optional  string  url  = 3;
    optional  string  username  = 4;
    optional  string  pagepath  = 5;
}

message JumpRemind {
    optional  uint32  jumpType  = 1;
    optional  bool  isPopUpWindows  = 2;
    optional  string  wording  = 3;
    optional  string  leftButtonWording  = 4;
    optional  string  rightButtonWording  = 5;
    optional  RedirectUrl  url  = 6;
    optional  string  title  = 7;
}

message KFGetBindListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  kfBrandUsername  = 2;
    optional  string  customerUsername  = 3;
}

message KFGetBindListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WorkerInfo  workerInfoList  = 2;
}

message KFGetDefaultListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  kfBrandUsername  = 2;
}

message KFGetDefaultListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WorkerInfo  workerInfoList  = 2;
}

message KFGetInfoListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  kfBrandUsername  = 2;
    repeated  string  kfOpenIdList  = 3;
    repeated  uint32  kfTypeList  = 4;
}

message KFGetInfoListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WorkerInfo  workerInfoList  = 2;
}

message KVCommReportItem {
    required  uint32  logId  = 1;
    optional  bytes  value  = 2;
    required  uint32  startTime  = 3;
    required  uint32  endTime  = 4;
    required  uint32  count  = 5;
    optional  uint32  refreshTime  = 6;
    optional  uint32  type  = 7;
}

message KVCommReportResp {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  kvresponBuffer  = 2;
}

message KVItem {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message KVLogHead {
    optional  string  deviceModel  = 1;
    optional  string  deviceBrand  = 2;
    optional  string  osName  = 3;
    optional  string  osVersion  = 4;
    optional  string  languageVer  = 5;
    optional  uint32  sendTime  = 6;
}

message KVLogItem {
    required  uint32  logId  = 1;
    optional  bytes  value  = 2;
    required  uint32  logTime  = 3;
    optional  uint32  count  = 4;
    optional  uint32  reportType  = 5;
}

message KVPair {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message KVReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message KVStatItem {
    required  uint32  key  = 1;
    optional  string  value  = 2;
}

message KVStatOpLog {
    required  uint32  count  = 1;
    repeated  KVStatItem  list  = 2;
}

message KVStatus {
    optional  string  value  = 1;
    optional  string  kid  = 2;
}

message KeyBoardSugSearchRequest {
    optional  string  query  = 1;
    optional  LbsLocationNew  location  = 2;
    optional  uint32  scene  = 3;
    optional  ChildMode  childMode  = 4;
    optional  uint32  h5Version  = 5;
    optional  string  requestId  = 6;
    optional  string  sessionId  = 7;
}

message KeyBoardSugSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  searchId  = 2;
    optional  SugResult  sugResult  = 3;
}

message KeyVal {
    required  uint32  key  = 1;
    required  uint32  val  = 2;
}

message KeyValueItem {
    optional  string  keyName  = 1;
    optional  string  value  = 2;
}

message KeyWordInfo {
    optional  string  name  = 1;
    optional  string  value  = 2;
}

message KickAudienceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  string  username  = 4;
}

message KickAudienceResponse {
    required  BaseResponse  baseResponse  = 1;
}

message KidsAcctInfo {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  headImgUrl  = 3;
    optional  string  deviceName  = 4;
    optional  uint32  isOnLine  = 5;
}

message KidsWatchLoginConfirmGetRequest {
    optional  string  loginUrl  = 1;
    optional  string  deviceName  = 2;
}

message KidsWatchLoginConfirmGetResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  KidsAcctInfo  kidsList  = 2;
    optional  uint32  enableRegButton  = 3;
    optional  uint32  reqSessionLimit  = 4;
}

message KvDataItem {
    required  uint32  logid  = 1;
    required  bytes  value  = 2;
    optional  uint32  starttime  = 3;
    optional  uint32  endtime  = 4;
    optional  uint32  count  = 5;
}

message KvDataPkg {
    required  uint32  uin  = 1;
    required  uint32  cliver  = 2;
    required  uint32  nettype  = 3;
    repeated  KvDataItem  dataitems  = 4;
    optional  string  devicemodel  = 5;
    optional  string  devicebrand  = 6;
    optional  string  osname  = 7;
    optional  string  osversion  = 8;
    optional  string  languagever  = 9;
    optional  uint32  datatype  = 10;
}

message KvGetStrategyResp {
    required  int32  ret  = 1;
    required  uint32  genstgver  = 2;
    required  uint32  clistgver  = 3;
    required  uint32  uinstgver  = 4;
    optional  StrategyTable  genstgtable  = 5;
    optional  StrategyTable  clistgtable  = 6;
    optional  StrategyTable  uinstgtable  = 7;
    optional  uint32  datavalidtime  = 8;
    optional  uint32  pollingtime  = 9;
}

message LBSLifeAction {
    required  uint32  type  = 1;
    optional  string  name  = 2;
    optional  string  desc  = 3;
    optional  string  link  = 4;
    required  uint32  bookingCount  = 5;
    repeated  LBSLifeActionBooking  bookingList  = 6;
    required  uint32  bargainCount  = 7;
    repeated  LBSLifeActionBargain  bargainList  = 8;
}

message LBSLifeActionBargain {
    optional  string  desc  = 1;
    optional  string  url  = 2;
    optional  string  iconUrl  = 3;
}

message LBSLifeActionBooking {
    required  uint32  type  = 1;
    optional  string  title  = 2;
    optional  string  url  = 3;
}

message LBSLifeActionList {
    required  uint32  type  = 1;
    required  LBSLifeAction  lifeAction  = 2;
}

message LBSLifeGetNearbyEntranceListResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  LBSNearbyEntrance  entranceList  = 2;
}

message LBSLifeGetNearbyRecommendPoiReq {
    required  BaseRequest  baseRequest  = 1;
    required  PoiLocation  location  = 2;
}

message LBSLifeGetNearbyRecommendPoiResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  RecommendPoiItem  poiList  = 2;
}

message LBSNearbyEntrance {
    optional  string  iconUrl  = 1;
    optional  string  name  = 2;
    optional  string  jumpUrl  = 3;
    required  string  entranceId  = 4;
}

message LQTDetailButton {
    optional  uint32  type  = 1;
    optional  string  url  = 2;
    optional  string  appUsername  = 3;
    optional  bool  isShowPopups  = 4;
}

message LabelInfo {
    required  string  name  = 1;
    required  string  color  = 2;
}

message LabelPair {
    optional  string  labelName  = 1;
    required  uint32  labelId  = 2;
}

message LabsAction {
    optional  uint32  expId  = 1;
    optional  string  labsAppId  = 2;
    optional  uint32  actionType  = 3;
}

message LabsActionList {
    repeated  LabsAction  list  = 1;
}

message LangDesc {
    optional  string  lang  = 1;
    optional  string  desc  = 2;
}

message LangWording {
    optional  string  lang  = 1;
    optional  uint32  count  = 2;
    repeated  WordingItem  items  = 3;
}

message LaunchAction {
    optional  uint32  actionCode  = 1;
    optional  string  openUrl  = 2;
    optional  bool  needHistoryList  = 3;
    optional  string  alertMsg  = 4;
    optional  string  alertTitle  = 5;
}

message LaunchBusinessWxaappRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  businessType  = 2;
    optional  string  query  = 3;
    optional  string  referrerAppid  = 4;
    optional  string  referrerUrl  = 5;
    optional  uint32  source  = 6;
}

message LaunchBusinessWxaappResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appid  = 2;
    optional  string  pathAndQuery  = 3;
}

message LaunchWxaAppRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  WxaAppBaseInfo  wxaAppInfo  = 3;
    optional  uint32  requestType  = 4;
    optional  WxaPluginInfo  pluginInfo  = 5;
    optional  WxaClientPublicLibInfo  publicLib  = 6;
    optional  WxaWebLaunchInfo  webLaunchInfo  = 7;
    optional  WxaJumpInfo  jumpInfo  = 8;
    optional  int32  performanceLevel  = 10;
    optional  string  instanceId  = 11;
    optional  string  wxaUserName  = 12;
    optional  bool  isParallelRequest  = 13;
    optional  bool  isSdkPrefetch  = 14;
    optional  WxaPushMsgInfo  wxaPushMsgInfo  = 15;
    optional  string  shortLink  = 17;
}

message LaunchWxaAppResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  LaunchAction  launch  = 2;
    optional  CheckJsApiInfo  checkJsApi  = 3;
    optional  WxaAppHostInfo  hostInfo  = 4;
    optional  PublicLibUpdateInfo  publicLibUpdate  = 5;
    optional  ActionSheetInfo  actionSheet  = 6;
    optional  OperationInfo  operation  = 7;
    optional  string  appid  = 8;
    optional  string  username  = 9;
}

message LaunchWxaWidgetRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  requestType  = 3;
    optional  WxaWidgetBaseInfo  wxaWidgetInfo  = 4;
}

message LaunchWxaWidgetResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WidgetLaunchAction  launch  = 2;
    optional  CheckJsApiInfo  checkJsApi  = 3;
    optional  WidgetVersionInfo  versionInfo  = 4;
    optional  WxaWidgetSetting  setting  = 5;
}

message LayOut {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  string  buff  = 3;
}

message LayerBtnInfo {
    optional  string  btnWords  = 1;
    optional  string  btnColor  = 2;
    optional  uint32  btnOpType  = 3;
    optional  string  getLotteryParams  = 4;
    optional  string  url  = 5;
    optional  MiniAppInfo  miniAppInfo  = 6;
}

message LayerInfo {
    optional  string  layerTitle  = 1;
    optional  string  layerLogo  = 2;
    optional  string  layerType  = 3;
    optional  string  layerName  = 4;
    optional  string  layerDescription  = 5;
    optional  uint32  isShowLayerBtn  = 6;
    optional  LayerBtnInfo  layerBtnInfo  = 7;
    optional  bytes  voiceUrl  = 8;
    optional  bytes  voiceData  = 9;
}

message LbsContactInfo {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  province  = 3;
    optional  string  city  = 4;
    optional  string  signature  = 5;
    optional  string  distance  = 6;
    required  int32  sex  = 7;
    required  uint32  imgStatus  = 8;
    optional  uint32  verifyFlag  = 9;
    optional  string  verifyInfo  = 10;
    optional  string  verifyContent  = 11;
    optional  string  alias  = 12;
    optional  string  weibo  = 13;
    optional  string  weiboNickname  = 14;
    optional  uint32  weiboFlag  = 15;
    optional  int32  headImgVersion  = 19;
    optional  SnsUserInfo  snsUserInfo  = 20;
    optional  string  country  = 21;
    optional  string  bigHeadImgUrl  = 22;
    optional  string  smallHeadImgUrl  = 23;
    optional  string  myBrandList  = 24;
    optional  CustomizedInfo  customizedInfo  = 25;
    optional  string  antispamTicket  = 26;
}

message LbsLife {
    optional  string  bid  = 1;
    optional  string  title  = 2;
    required  float  price  = 3;
    required  uint32  iconIdxCount  = 4;
    repeated  uint32  iconIdxList  = 5[packed=true];
    required  uint32  descCount  = 6;
    repeated  SKBuiltinString_t  descList  = 7;
    required  float  rate  = 8;
    optional  string  link  = 9;
    optional  uint32  type  = 10;
    optional  SKBuiltinBuffer_t  ctx  = 11;
    optional  string  poiUrl  = 12;
    optional  SKBuiltinBuffer_t  weAppInfo  = 13;
    optional  uint32  showType  = 14;
    optional  uint32  showFlag  = 15;
}

message LbsLifeDetail {
    required  LbsLife  life  = 1;
    required  uint32  cicount  = 2;
    repeated  SKBuiltinString_t  cilist  = 3;
    optional  string  thumbUrl  = 4;
    optional  string  photoLink  = 5;
    required  uint32  actionCount  = 6;
    repeated  LBSLifeActionList  actionList  = 7;
}

message LbsLocation {
    required  float  longitude  = 1;
    required  float  latitude  = 2;
    required  int32  precision  = 3;
    optional  string  macAddr  = 4;
    optional  string  cellId  = 5;
    optional  int32  gpssource  = 6;
}

message LbsLocationNew {
    required  float  longitude  = 1;
    required  float  latitude  = 2;
    required  int32  precision  = 3;
    optional  string  macAddr  = 4;
    optional  string  cellId  = 5;
    optional  int32  gpssource  = 6;
    optional  string  address  = 7;
}

message LbsRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    required  float  longitude  = 3;
    required  float  latitude  = 4;
    required  int32  precision  = 5;
    optional  string  macAddr  = 6;
    optional  string  cellId  = 7;
    optional  int32  gpssource  = 8;
    optional  SKBuiltinBuffer_t  clientCheckData  = 9;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 10;
}

message LbsResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  contactCount  = 2;
    repeated  LbsContactInfo  contactList  = 3;
    optional  uint32  state  = 4;
    optional  uint32  flushTime  = 5;
    optional  uint32  isShowRoom  = 6;
    optional  uint32  roomMemberCount  = 7;
}

message LbsRoomMember {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  bigHeadImgUrl  = 3;
    optional  string  smallHeadImgUrl  = 4;
    optional  string  antispamTicket  = 5;
}

message LbsRoomMemberRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  roomName  = 2;
}

message LbsRoomMemberResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  memberCount  = 2;
    repeated  LbsRoomMember  memberList  = 3;
}

message LbsRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    required  float  longitude  = 3;
    required  float  latitude  = 4;
    required  int32  precision  = 5;
    optional  string  macAddr  = 6;
    optional  string  cellId  = 7;
    optional  int32  gpssource  = 8;
    optional  string  roomName  = 9;
    optional  int32  exitScene  = 10;
    optional  int32  stayTime  = 11;
}

message LbsRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  roomName  = 2;
    optional  string  roomNickName  = 3;
}

message LctOperationFirstEntryInfo {
    optional  string  title  = 1;
    optional  string  content  = 2;
}

message LctOperationInfo {
    optional  uint32  showEntry  = 1;
    optional  NewDocumentItem  docItem  = 2;
    optional  LctOperationShowInfoWithProduct  showInfoWithProduct  = 3;
}

message LctOperationProductInfo {
    optional  string  name  = 1;
    optional  string  desc  = 2;
    optional  string  profit  = 3;
    optional  string  profitDesc  = 4;
    optional  UrlJumpInfo  url  = 5;
    optional  string  spid  = 6;
    optional  string  fundCode  = 7;
    optional  string  productCode  = 8;
    optional  string  unionId  = 9;
}

message LctOperationShowInfoWithProduct {
    optional  NewDocumentItem  titleItem  = 1;
    repeated  LctOperationProductInfo  productList  = 2;
    optional  LctOperationFirstEntryInfo  firstEntryInfo  = 3;
}

message LensCtx {
    optional  string  userName  = 1;
    optional  string  sessionId  = 2;
}

message LensIcon {
    optional  string  url  = 1;
    optional  string  aesKey  = 2;
    optional  string  md5  = 3;
}

message LensInfo {
    optional  string  lensId  = 1;
    optional  LensIcon  icon  = 2;
    optional  string  name  = 3;
    optional  PersonalDesigner  designer  = 4;
    optional  LensPackage  package  = 5;
}

message LensPackage {
    optional  string  fileId  = 1;
    optional  string  aesKey  = 2;
    optional  uint32  fileSize  = 3;
}

message LibGameBaseInfo {
    repeated  AdItem  adList  = 1;
    optional  NewApp  newApp  = 2;
    repeated  ClassifyItem  classifyList  = 3;
    optional  MoreGameInfo  moreGameInfo  = 4;
    repeated  SortItem  sortList  = 5;
}

message LibraryEntrance {
    required  bool  showLibraryEntrance  = 1;
    optional  string  libraryEntranceTitle  = 2;
    optional  string  webUrl  = 3;
}

message LibraryEntranceInfo {
    required  string  desc  = 1;
    optional  string  jumpUrl  = 2;
}

message LikeFriendRankRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  username  = 2;
    required  string  appusername  = 3;
    required  uint32  optype  = 4;
    required  string  rankid  = 5;
    repeated  string  usernames  = 6;
}

message LikeFriendRankResponse {
    required  BaseResponse  baseResponse  = 1;
}

message LikeLiveRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  uint64  count  = 4;
}

message LikeLiveResponse {
    required  BaseResponse  baseResponse  = 1;
}

message LinkedinContactItem {
    optional  string  linkedinName  = 1;
    optional  string  linkedinMemberId  = 2;
    optional  string  linkedinPublicUrl  = 3;
}

message ListMFriendMobileInfo {
    optional  string  value  = 1;
    optional  string  userName  = 2;
    required  uint32  status  = 3;
    optional  string  bigHeadImgUrl  = 4;
    optional  string  smallHeadImgUrl  = 5;
    optional  string  nickName  = 6;
    optional  string  antispamTicket  = 7;
}

message ListMFriendReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ticket  = 2;
    required  uint32  mobileCount  = 3;
    repeated  SKBuiltinString_t  mobileList  = 4;
    required  uint32  emailCount  = 5;
    repeated  SKBuiltinString_t  emailList  = 6;
}

message ListMFriendResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ticket  = 2;
    required  uint32  mobileCount  = 3;
    repeated  ListMFriendMobileInfo  mobileInfo  = 4;
    required  uint32  emailCount  = 5;
    repeated  ListMFriendMobileInfo  emailInfo  = 6;
}

message ListViewData {
    repeated  ViewData  item  = 1;
    optional  string  viewId  = 2;
}

message LiveAnchorStatus {
    optional  uint64  timeMs  = 1;
    optional  uint64  statusFlag  = 2;
}

message LiveExtInfo {
    optional  bytes  anchorStatusBuffer  = 1;
}

message LiveInfo {
    optional  uint64  liveId  = 1;
    optional  string  liveName  = 2;
    optional  uint32  createTime  = 3;
    optional  uint32  endTime  = 4;
    optional  uint32  status  = 5;
    optional  uint32  onlineCnt  = 6;
    optional  uint32  messageCnt  = 7;
    optional  uint32  likeCnt  = 8;
    optional  string  replayUrl  = 9;
    repeated  string  roomIdList  = 10;
    optional  bool  enableComment  = 11;
    optional  bool  enableApplyLiveMic  = 12;
    optional  bool  enableLiveReplay  = 13;
    optional  string  sdkUserId  = 14;
    optional  string  createSdkUserId  = 15;
    optional  string  anchorIdentityId  = 16;
    optional  string  defaultLiveName  = 17;
    optional  int32  liveMicType  = 18;
    optional  ChatRoomLiveExtInfo  chatroomliveExtInfo  = 19;
}

message LiveInfoList {
    repeated  LiveInfo  list  = 1;
}

message LiveMessage {
    optional  string  identityId  = 1;
    optional  string  headimgurl  = 2;
    optional  uint32  msgType  = 3;
    optional  string  content  = 4;
    optional  uint32  atime  = 5;
    optional  string  nickname  = 6;
}

message LiveSdkAudioParams {
    optional  uint32  audioQuality  = 1;
}

message LiveSdkChannelParams {
    optional  string  userDefineRecordId  = 1;
    optional  string  streamId  = 2;
    optional  uint32  audienceMode  = 3;
    optional  int32  micAbility  = 4;
    optional  uint64  qcAppid  = 5;
    optional  uint64  qcBizid  = 6;
    repeated  CdnTransInfo  cdnTransInfo  = 7;
    optional  int32  cdnQualityTag  = 8;
    repeated  string  cdnIps  = 9;
    optional  string  rtmpPushUrl  = 10;
    optional  uint32  cdnQualitySvrcfg  = 11;
    optional  uint32  cdnQualityH265Backcfg  = 12;
    optional  uint32  supportScreenRotate  = 13;
    optional  uint32  qosReportSwitch  = 14;
    optional  uint32  qosControlSwitch  = 15;
}

message LiveSdkInfo {
    optional  uint32  sdkAppid  = 1;
    optional  string  sdkUserId  = 2;
    optional  uint32  sdkLiveId  = 3;
    optional  uint32  sdkRoleId  = 4;
    optional  bytes  sdkUserSig  = 5;
    optional  bytes  sdkPrivateMapKey  = 6;
    optional  bytes  sdkParams  = 7;
    optional  string  sdkCreateUserId  = 8;
    optional  uint64  expireForSig  = 9;
    optional  uint64  expireForPmk  = 10;
    optional  uint64  liveId  = 11;
    optional  string  liveCdnUrl  = 12;
}

message LiveSdkParams {
    optional  LiveSdkVideoParams  videoParams  = 1;
    optional  LiveSdkAudioParams  audioParams  = 2;
    optional  LiveSdkChannelParams  channelParams  = 3;
}

message LiveSdkVideoParams {
    optional  uint32  encResEnum  = 1;
    optional  uint32  resModeEnum  = 2;
    optional  uint32  capFps  = 3;
    optional  uint32  encBr  = 4;
    optional  uint32  encAdjustRes  = 5;
    optional  uint32  qosPreferneceEnum  = 6;
    optional  uint32  qosControlModeEnum  = 7;
    optional  uint32  encResEnumScreenrecord  = 8;
    optional  uint32  capFpsScreenrecord  = 9;
    optional  uint32  encBrScreenrecord  = 10;
}

message LiveSelectData {
    optional  int32  platform  = 1;
    optional  int32  protocal  = 2;
    optional  AndroidSelectData  androidData  = 3;
    optional  IOSSelectData  iosData  = 4;
    optional  int32  changePointNum  = 5;
    optional  string  config  = 6;
    optional  string  clientVersion  = 7;
    repeated  SensorData  sensorData  = 8;
}

message LiveUserOnlineState {
    optional  string  identityId  = 1;
    optional  uint32  timeused  = 2;
}

message LiveVerifyRequest {
    required  BaseRequest  baseRequest  = 1;
}

message LiveVerifyResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  isVerified  = 2;
    optional  string  verifyUrl  = 3;
}

message LocalEmoji {
    repeated  string  emojis  = 1;
}

message LocalModuleInfo {
    optional  string  packageName  = 1;
    optional  uint32  packageVersion  = 2;
    optional  string  md5  = 3;
}

message LocalPackageInfo {
    optional  uint32  appVersion  = 1;
    optional  uint32  encryptVersion  = 2;
}

message LocationInfo {
    optional  double  latitude  = 1;
    optional  double  longitude  = 2;
    optional  string  ssid  = 3;
    optional  string  bssid  = 4;
    optional  string  cell  = 5;
    optional  string  ip  = 6;
}

message LogOutRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
}

message LogOutResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  noPwdLoginTicket  = 2;
}

message LogOutWebWxRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  opCode  = 2;
}

message LogOutWebWxResponse {
    required  BaseResponse  baseResponse  = 1;
}

message Log_IMOperation {
    optional  int32  importDs  = 1;
    optional  int32  ds  = 2;
    optional  uint64  uin  = 3;
    optional  int32  device  = 4;
    optional  int32  clientVersion  = 5;
    optional  int64  timeStamp  = 6;
    required  string  currChatName  = 7;
    repeated  IMBehavior  oplist  = 8;
}

message LoginDevice {
    optional  string  uuid  = 1;
    optional  string  devicename  = 2;
    optional  string  devicetype  = 3;
    optional  uint32  lasttime  = 4;
}

message LoginQRCodeNotify {
    optional  string  uuid  = 1;
    required  uint32  status  = 2;
    optional  string  userName  = 3;
    optional  string  pwd  = 4;
    optional  string  headImgUrl  = 5;
    optional  uint32  pushLoginUrlexpiredTime  = 6;
    optional  string  nickName  = 7;
    optional  uint32  expiredTime  = 8;
}

message LoginQRCodeNotifyPkg {
    required  SKBuiltinBuffer_t  notifyData  = 1;
    required  uint32  opcode  = 2;
}

message LqtBindQueryInfo {
    optional  string  defaultCardBindSerial  = 1;
    repeated  CgiBindQueryRecord  array  = 2;
    optional  bool  isHideBankCard  = 3;
    optional  BalanceInfo  balanceInfo  = 4;
    optional  string  lqFetchPreArriveTimeWording  = 5;
    optional  bool  isReqAgainAfterDeal  = 6;
    optional  uint32  lqMaxAmountPerRedeem  = 7;
    optional  string  balanceWording  = 8;
    optional  int32  funcAfterWording  = 9;
    optional  TipsItem  balanceSecondLineTips  = 10;
    optional  ComonPromptInfo  purchaseFromLqWording  = 11;
    optional  string  selectAccountTitle  = 12;
    optional  string  selectAccountPrompt  = 13;
}

message MEmail {
    optional  string  v  = 1;
}

message MFriend {
    optional  string  username  = 1;
    optional  string  nickname  = 2;
    optional  string  mobileMd5  = 3;
    optional  int32  sex  = 4;
    optional  string  province  = 5;
    optional  string  city  = 6;
    optional  string  signature  = 7;
    optional  uint32  personalCard  = 8;
    optional  string  alias  = 9;
    optional  FBFriend  fbinfo  = 10;
    optional  uint32  albumFlag  = 11;
    optional  uint32  albumStyle  = 12;
    optional  string  albumBgimgId  = 13;
    optional  SnsUserInfo  snsUserInfo  = 14;
    optional  string  country  = 15;
    optional  string  myBrandList  = 16;
    optional  CustomizedInfo  customizedInfo  = 17;
    optional  string  bigHeadImgUrl  = 20;
    optional  string  smallHeadImgUrl  = 21;
    optional  string  antispamTicket  = 22;
}

message MMBizCommApiGetServiceAppListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  limit  = 3;
    optional  string  lang  = 4;
    optional  string  tpaCountry  = 5;
}

message MMBizCommApiGetServiceAppListResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  MMBizCommApiServiceAppInfo  serviceAppinfo  = 2;
}

message MMBizCommApiServiceAppInfo {
    optional  string  appid  = 1;
    optional  string  appNameEn  = 20;
    optional  string  appNameTw  = 21;
    optional  string  appIconUrlPanel  = 22;
    optional  string  appIconUrlList  = 23;
    optional  string  appName  = 31;
    optional  uint32  appType  = 32;
    optional  uint32  appInfoFlag  = 33;
    optional  string  appForwardUrl  = 34;
    optional  uint32  appJumpType  = 35;
    optional  uint32  appShowFlag  = 36;
    optional  string  appShowLang  = 37;
    optional  string  appNameHk  = 41;
    optional  uint32  appUin  = 200;
    optional  uint32  appDisable  = 201;
    optional  uint32  groupId  = 202;
    optional  string  regCountryList  = 203;
    optional  string  appIconUrlPanelOld  = 204;
    optional  string  appIconUrlPanelNew  = 205;
    optional  string  prefixCondition  = 206;
}

message MMBizJsApiCdnInfo {
    optional  string  cdnUrl  = 1;
    optional  string  aesKey  = 2;
    optional  string  type  = 3;
    optional  uint32  fileSize  = 4;
    optional  string  fileType  = 5;
}

message MMBizJsApiDownloadCdnInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 10;
    optional  string  mediaId  = 20;
}

message MMBizJsApiDownloadCdnInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  MMBizJsApiCdnInfo  cdnInfo  = 10;
}

message MMBizJsApiDownloadMediaReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 10;
    optional  string  mediaId  = 20;
    optional  MMBizJsApiMediaConvertCondition  cond  = 30;
}

message MMBizJsApiDownloadMediaResp {
    required  BaseResponse  baseResponse  = 1;
    optional  MMBizJsApiMedia  media  = 10;
}

message MMBizJsApiGetUserOpenIdReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  busiId  = 3;
    optional  string  userName  = 4;
}

message MMBizJsApiGetUserOpenIdResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  opnid  = 2;
    optional  string  nickName  = 3;
    optional  string  headImgUrl  = 4;
    optional  string  sign  = 5;
    optional  uint32  friendRelation  = 6;
}

message MMBizJsApiMedia {
    optional  uint32  totalBytes  = 1;
    optional  uint32  currentBytesOffset  = 3;
    optional  bytes  buffer  = 20;
}

message MMBizJsApiMediaConvertCondition {
    optional  uint32  startOffset  = 1;
    optional  uint32  expectLength  = 2;
}

message MMBizJsApiUploadCdnInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 10;
    optional  MMBizJsApiCdnInfo  cdnInfo  = 20;
}

message MMBizJsApiUploadCdnInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  mediaId  = 10;
}

message MMBizJsApiUploadMediaReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 10;
    optional  string  mediaId  = 20;
    optional  MMBizJsApiMedia  media  = 21;
}

message MMBizJsApiUploadMediaResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  mediaId  = 10;
}

message MMBizRecvTmpMsgOption {
    optional  string  templateId  = 1;
    optional  string  title  = 2;
    optional  uint32  flag  = 3;
}

message MMBizRecvTmpMsgOptionGetAllRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUsername  = 2;
}

message MMBizRecvTmpMsgOptionGetAllResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  MMBizRecvTmpMsgOption  recvTmpMsgOpt  = 2;
}

message MMBizRecvTmpMsgOptionSetRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUsername  = 2;
    repeated  MMBizRecvTmpMsgOption  operation  = 3;
}

message MMBizRecvTmpMsgOptionSetResponse {
    required  BaseResponse  baseResponse  = 1;
}

message MMBizScanConfSyncReq {
    optional  uint32  type  = 1;
}

message MMBizScanConfSyncResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  type  = 2;
    optional  string  version  = 3;
    optional  string  confStr  = 4;
}

message MMBizWxaAppBaseInfo {
    optional  string  appid  = 1;
    optional  string  username  = 2;
    optional  uint32  versionType  = 3;
    optional  uint32  appVersion  = 4;
    optional  uint32  scene  = 5;
    optional  uint32  preScene  = 6;
    optional  uint32  backGround  = 7;
    optional  string  pagePath  = 8;
    optional  uint32  pubVersion  = 9;
}

message MMDBPerformanceSQLInTransaction {
    optional  string  sql  = 1;
    optional  uint32  count  = 2;
}

message MMPayCgiHeader {
    repeated  MMPayCgiHeaderItem  items  = 1;
    optional  uint32  itemsCrc  = 2;
}

message MMPayCgiHeaderItem {
    optional  string  itemKey  = 1;
    optional  bytes  itemValue  = 2;
}

message MakeSureButton {
    optional  string  wording  = 1;
    optional  string  leftButtonWording  = 2;
    optional  string  rightButtonWording  = 4;
}

message ManagePlanReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  type  = 2;
    optional  uint32  usrPlanId  = 3;
    optional  string  wxpEncPasswd  = 4;
}

message ManagePlanResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message ManualAuthAesReqData {
    required  BaseRequest  baseRequest  = 1;
    optional  BaseAuthReqInfo  baseReqInfo  = 2;
    optional  string  imei  = 3;
    optional  string  softType  = 4;
    required  uint32  builtinIpseq  = 5;
    optional  string  clientSeqId  = 6;
    optional  string  signature  = 7;
    optional  string  deviceName  = 8;
    optional  string  deviceType  = 9;
    optional  string  language  = 10;
    optional  string  timeZone  = 11;
    optional  int32  channel  = 13;
    optional  uint32  timeStamp  = 14;
    optional  string  deviceBrand  = 15;
    optional  string  deviceModel  = 16;
    optional  string  ostype  = 17;
    optional  string  realCountry  = 18;
    optional  string  bundleId  = 19;
    optional  string  adSource  = 20;
    optional  string  iphoneVer  = 21;
    required  uint32  inputType  = 22;
    optional  SKBuiltinBuffer_t  clientCheckData  = 23;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 24;
    optional  string  androidPackageName  = 25;
    optional  PubKeyInfo  pubKey  = 26;
}

message ManualAuthRequest {
    required  ManualAuthRsaReqData  rsaReqData  = 1;
    required  ManualAuthAesReqData  aesReqData  = 2;
}

message ManualAuthRsaReqData {
    required  SKBuiltinBuffer_t  randomEncryKey  = 1;
    required  ECDHKey  cliPubEcdhkey  = 2;
    optional  string  userName  = 3;
    optional  string  pwd  = 4;
    optional  string  pwd2  = 5;
}

message ManufacturerApInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  ManufacturerReqApInfo  reqApInfo  = 2;
    optional  uint32  manufacturerRequestScene  = 3;
    optional  string  manufacturerMobileInfo  = 4;
}

message ManufacturerApInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ManufacturerRespApInfo  respApInfo  = 2;
    optional  uint32  reqIntervalSeconds  = 3;
    optional  uint32  reqMaxApCount  = 4;
}

message ManufacturerReqApInfo {
    optional  string  ssid  = 1;
    optional  string  bssid  = 2;
    optional  int32  rssi  = 3;
}

message ManufacturerRespApInfo {
    optional  string  ssid  = 1;
    optional  string  bssid  = 2;
    optional  int32  rssi  = 3;
    optional  int32  isWechatWifi  = 4;
    optional  string  wechatShopName  = 5;
    optional  string  apKey  = 6;
    optional  uint32  protocolType  = 7;
}

message MarginStyle {
    optional  float  top  = 1;
    optional  float  bottom  = 2;
    optional  float  left  = 3;
    optional  float  right  = 4;
}

message MarkReadStat {
    optional  uint64  objectId  = 1;
    optional  uint32  scene  = 2;
    optional  uint32  subScene  = 3;
    optional  uint32  commScene  = 4;
    optional  string  sessionBuffer  = 5;
}

message MarkShareCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardId  = 2;
    optional  uint32  noticeShareUser  = 3;
    optional  uint32  isMark  = 4;
    optional  uint32  scene  = 5;
}

message MarkShareCardResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  markUser  = 2;
    optional  uint32  markSucc  = 3;
    optional  string  markCardId  = 4;
    optional  string  jsonRet  = 5;
}

message MassSendRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  toList  = 2;
    optional  string  toListMd5  = 3;
    optional  string  clientId  = 4;
    required  uint32  msgType  = 5;
    required  uint32  mediaTime  = 6;
    required  SKBuiltinBuffer_t  dataBuffer  = 7;
    required  uint32  dataStartPos  = 8;
    required  uint32  dataTotalLen  = 9;
    required  uint32  thumbTotalLen  = 10;
    required  uint32  thumbStartPos  = 11;
    required  SKBuiltinBuffer_t  thumbData  = 12;
    required  uint32  cameraType  = 13;
    required  uint32  videoSource  = 14;
    required  uint32  toListCount  = 15;
    required  uint32  isSendAgain  = 16;
    optional  uint32  compressType  = 17;
    optional  uint32  voiceFormat  = 18;
    optional  string  videoUrl  = 19;
    optional  string  thumbUrl  = 20;
    optional  uint32  thumbWidth  = 21;
    optional  uint32  thumbHeight  = 22;
    optional  string  thumbAeskey  = 23;
    optional  string  videoAeskey  = 24;
}

message MassSendResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  dataStartPos  = 2;
    required  uint32  thumbStartPos  = 3;
    required  uint32  maxSupport  = 4;
}

message MediaInfo {
    optional  uint32  source  = 1;
    optional  uint32  mediaType  = 2;
    optional  uint32  videoPlayLength  = 3;
    optional  string  sessionId  = 4;
    optional  uint32  startTime  = 5;
}

message MediaItem {
    required  uint32  mediaType  = 1;
    optional  string  thumbUrl  = 2;
    required  string  mediaUrl  = 3;
    optional  bool  videoH5Play  = 4;
}

message MedicareAndSocialSecurityCardTips {
    optional  string  pageUnderJumpElementWording  = 1;
    optional  string  pageUnderJumpElementIcon  = 2;
    optional  string  pageUnderJumpElementSkipWording  = 3;
    optional  int32  pageTicketJumpElementOpType  = 4;
    optional  string  pageUnderJumpElementUrl  = 5;
    optional  CardMiniAppInfo  pageUnderJumpElementMiniAppInfo  = 6;
    optional  string  pageUnderJumpElementNativeUrl  = 7;
}

message MegaVideo {
    optional  uint64  id  = 1;
    optional  uint32  createTime  = 2;
    optional  MegaVideoDesc  desc  = 3;
    optional  uint32  forwardCount  = 4;
    optional  uint32  likeCount  = 5;
    optional  uint32  commentCount  = 6;
    optional  uint32  favCount  = 7;
    optional  uint32  friendLikeCount  = 8;
    optional  uint32  spamFlag  = 9;
    optional  string  videoNonceId  = 10;
    optional  bool  isTest  = 11;
    optional  uint32  readCount  = 12;
    optional  string  sessionBuffer  = 13;
    optional  uint32  favFlag  = 14;
    optional  uint32  urlValidDuration  = 15;
    optional  uint32  privateFlag  = 16;
    optional  string  debugMessage  = 17;
    optional  uint32  permissionFlag  = 18;
    optional  MegaVideoFinderBusiness  finder  = 19;
    optional  uint32  status  = 20;
    optional  string  spamWording  = 21;
    optional  uint32  bulletCount  = 22;
    optional  uint32  likeFlag  = 23;
    optional  uint32  warnFlag  = 24;
    optional  string  warnWording  = 25;
}

message MegaVideoBaseRequest {
    optional  uint32  userver  = 1;
    optional  uint32  scene  = 2;
}

message MegaVideoBulletCommentInfo {
    optional  uint64  id  = 1;
    optional  string  content  = 2;
    optional  uint64  videoTimestamp  = 3;
    optional  uint32  createTime  = 4;
    optional  uint32  extFlag  = 5;
}

message MegaVideoBulletCommentRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  uint64  videoObjectId  = 3;
    optional  uint64  videoTimestamp  = 4;
    optional  string  content  = 5;
    optional  string  clientMsgId  = 6;
    optional  string  username  = 7;
    optional  uint32  optype  = 8;
    optional  uint64  deleteCommentId  = 9;
    optional  string  videoNonceId  = 10;
}

message MegaVideoBulletCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  MegaVideoBulletCommentInfo  comment  = 2;
}

message MegaVideoClientStatus {
    optional  int32  netType  = 1;
    optional  string  netName  = 2;
    optional  uint32  bandwidthKbps  = 3;
    repeated  MegaVideoDownloadInfo  lastVideosDownloadInfo  = 4;
    optional  string  deviceModel  = 5;
    optional  string  deviceBrand  = 6;
    optional  string  osName  = 7;
    optional  string  osVersion  = 8;
    repeated  string  supportedCodingFormat  = 9;
    repeated  MegaVideoFluencyInfo  finderFluencyInfo  = 10;
}

message MegaVideoDesc {
    optional  string  description  = 1;
    repeated  MegaVideoMedia  media  = 2;
    optional  uint32  mediaType  = 3;
    optional  string  mixedBuffer  = 4;
    optional  MegaVideoLocation  location  = 5;
    optional  MegaVideoExtendedReading  extReading  = 6;
    optional  MegaVideoLocation  feedLocation  = 7;
}

message MegaVideoDetailRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  uint64  videoId  = 3;
    optional  string  username  = 4;
    optional  string  videoNonceId  = 5;
    optional  string  encryptedVideoId  = 6;
    optional  uint32  scene  = 7;
}

message MegaVideoDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  MegaVideo  video  = 2;
    optional  FinderContact  contact  = 3;
}

message MegaVideoDownloadInfo {
    optional  uint64  feedId  = 1;
    optional  uint32  pageIndex  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  preloadBytes  = 4;
    optional  uint32  downloadedBytes  = 5;
    optional  uint32  fileBytes  = 6;
    optional  uint32  duration  = 7;
    optional  uint32  totalPlayTimeMs  = 8;
    optional  uint32  totalWaitTimeMs  = 9;
    optional  uint32  downloadSpeedKbps  = 10;
    repeated  MegaVideoWaitDetail  waitDetails  = 11;
    optional  uint32  stopplayTimestamp  = 12;
    optional  uint32  playPosition  = 13;
    optional  uint32  firstLoadTimeMs  = 14;
    optional  string  codingFormat  = 15;
    optional  uint64  preloadStrategyId  = 16;
    optional  uint32  rttMs  = 17;
    optional  uint32  networkId  = 18;
    optional  string  svrIp  = 19;
    optional  uint32  svrPort  = 20;
    optional  string  fileFormat  = 21;
}

message MegaVideoExtendedReading {
    optional  string  link  = 1;
    optional  string  title  = 2;
}

message MegaVideoFavReq {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  uint64  videoObjectId  = 3;
    optional  uint32  optype  = 4;
    optional  uint64  favId  = 5;
    optional  string  videoNonceId  = 6;
}

message MegaVideoFavResp {
    optional  BaseResponse  baseResponse  = 1;
}

message MegaVideoFinderBusiness {
    optional  uint64  objectId  = 1;
    optional  string  objectNonceId  = 2;
}

message MegaVideoFinderPreloadObjectInfo {
    optional  uint64  feedId  = 1;
    optional  float  interestFactor  = 2;
}

message MegaVideoFluencyInfo {
    optional  int32  scene  = 1;
    optional  int32  hot  = 2;
    optional  int32  pull  = 3;
    optional  int32  finish  = 4;
    optional  uint32  globalInitMs  = 5;
    optional  uint32  pullCgiMs  = 6;
    optional  uint32  showUiMs  = 7;
    optional  uint32  downloadBeginMs  = 8;
    optional  uint32  dataHandleMs  = 9;
}

message MegaVideoGetBulletCommentRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  uint64  videoObjectId  = 3;
    optional  uint64  videoTimestamp  = 4;
    optional  string  username  = 5;
    optional  bytes  lastBuffer  = 6;
    optional  string  videoNonceId  = 7;
}

message MegaVideoGetBulletCommentRequestContext {
}

message MegaVideoGetBulletCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  MegaVideoBulletCommentInfo  commentList  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint64  commentTimestampMin  = 4;
    optional  uint64  commentTimestampMax  = 5;
}

message MegaVideoGetFavListCtx {
    optional  uint64  lastId  = 1;
    optional  uint32  pageNum  = 2;
}

message MegaVideoGetFavListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
}

message MegaVideoGetFavListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderMegaVideo  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  megavideoTotalCount  = 5;
    optional  uint32  finderTotalCount  = 6;
    optional  uint32  totalCount  = 7;
}

message MegaVideoGetLikeListCtx {
    optional  uint64  lastId  = 1;
}

message MegaVideoGetLikeListRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
}

message MegaVideoGetLikeListResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderMegaVideo  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  uint32  megavideoTotalCount  = 5;
    optional  uint32  finderTotalCount  = 6;
    optional  uint32  totalCount  = 7;
}

message MegaVideoGetRelatedListCtx {
    repeated  uint64  recievedIds  = 1;
    optional  uint32  pageNum  = 2;
    optional  uint64  sessionId  = 3;
    optional  uint64  requestId  = 4;
}

message MegaVideoGetRelatedListReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint64  videoId  = 4;
    optional  float  longitude  = 6;
    optional  float  latitude  = 7;
    optional  string  videoNonceId  = 8;
    optional  uint32  scene  = 10;
    optional  string  fromUsername  = 13;
    optional  string  toUsername  = 14;
    optional  bytes  objectSessionInfo  = 15;
    optional  MegaVideoClientStatus  status  = 16;
}

message MegaVideoGetRelatedListResp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  FinderMegaVideo  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  MegaVideoPreloadInfo  preload  = 6;
}

message MegaVideoLikeRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  uint64  videoObjectId  = 3;
    optional  uint32  opType  = 4;
    optional  uint64  likeId  = 5;
    optional  string  videoNonceId  = 6;
}

message MegaVideoLikeResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message MegaVideoLocation {
    optional  float  longitude  = 1;
    optional  float  latitude  = 2;
    optional  string  city  = 3;
    optional  string  poiName  = 4;
    optional  string  poiAddress  = 5;
    optional  string  poiClassifyId  = 6;
    optional  uint32  poiClassifyType  = 7;
    optional  string  province  = 8;
    optional  string  region  = 9;
    optional  string  country  = 10;
}

message MegaVideoMedia {
    optional  string  url  = 1;
    optional  string  thumbUrl  = 2;
    optional  uint32  mediaType  = 3;
    optional  uint32  videoPlayLen  = 4;
    optional  float  width  = 5;
    optional  float  height  = 6;
    optional  string  md5Sum  = 7;
    optional  uint32  fileSize  = 8;
    optional  int32  bitrate  = 9;
    optional  string  decodeKey  = 10;
    optional  string  coverUrl  = 11;
    optional  uint64  videoPlayLenMs  = 12;
    optional  string  urlToken  = 13;
    optional  string  thumbUrlToken  = 14;
    optional  string  coverUrlToken  = 15;
    repeated  MegaVideoMediaSpec  spec  = 16;
    optional  FinderHlsMediaSpecList  hlsSpec  = 17;
    optional  FinderMediaSpecList  mediaSpec  = 18;
    optional  uint32  hotFlag  = 19;
    optional  FinderHalfRect  halfRect  = 20;
    optional  string  fullThumbUrl  = 21;
    optional  string  fullThumbUrlToken  = 22;
}

message MegaVideoMediaSpec {
    optional  string  fileFormat  = 1;
    optional  uint32  firstLoadBytes  = 2;
    optional  uint32  bitRate  = 3;
    optional  string  codingFormat  = 4;
}

message MegaVideoModObjectRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  MegaVideoBaseRequest  megaBasereq  = 2;
    optional  string  username  = 3;
    optional  uint64  videoObjectId  = 4;
    optional  uint32  bulletCommentSwitch  = 5;
}

message MegaVideoModObjectResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message MegaVideoPostRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  username  = 2;
    optional  string  clientid  = 3;
    optional  MegaVideoDesc  desc  = 4;
    optional  MegaVideoBaseRequest  megaBasereq  = 5;
}

message MegaVideoPostResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  MegaVideo  video  = 2;
}

message MegaVideoPreloadGlobalInfo {
    optional  uint32  prevCount  = 1;
    optional  uint32  nextCount  = 2;
    optional  uint32  maxBitRate  = 3;
    optional  float  preloadFileSizePercent  = 4;
    optional  uint32  preloadFileMinBytes  = 5;
    optional  uint32  preloadMaxConcurrentCount  = 6;
    optional  uint32  preConcurrentCount  = 7;
    optional  uint32  playConcurrentCount  = 8;
    optional  float  startPreloadPercent  = 9;
    optional  uint32  startPreloadSecs  = 10;
}

message MegaVideoPreloadInfo {
    optional  uint64  preloadStrategyId  = 1;
    optional  MegaVideoPreloadGlobalInfo  globalInfo  = 2;
    repeated  MegaVideoPreloadObjectInfo  objectInfo  = 3;
}

message MegaVideoPreloadObjectInfo {
    optional  uint64  feedId  = 1;
    optional  float  interestFactor  = 2;
}

message MegaVideoTopic {
    optional  string  topicInfo  = 1;
}

message MegaVideoUserPageRequest {
    optional  BaseRequest  baserequest  = 1;
    optional  string  posterUsername  = 2;
    optional  bytes  lastBuffer  = 4;
    optional  MegaVideoBaseRequest  megaBasereq  = 5;
    optional  MegaVideoClientStatus  status  = 6;
}

message MegaVideoUserPageResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  FinderMegaVideo  object  = 2;
    optional  bytes  lastBuffer  = 3;
    optional  uint32  continueFlag  = 4;
    optional  MegaVideoPreloadInfo  preload  = 5;
}

message MegaVideoWaitDetail {
    optional  uint32  type  = 1;
    optional  uint32  percent  = 2;
    optional  uint32  waitMs  = 3;
}

message MemberInfo {
    optional  string  openid  = 1;
    optional  uint32  memberid  = 2;
    optional  int32  userStatus  = 3;
    optional  uint32  reason  = 4;
}

message MemberReq {
    required  SKBuiltinString_t  memberName  = 1;
}

message MemberResp {
    required  SKBuiltinString_t  memberName  = 1;
    required  uint32  memberStatus  = 2;
    required  SKBuiltinString_t  nickName  = 3;
    required  SKBuiltinString_t  pyinitial  = 4;
    required  SKBuiltinString_t  quanPin  = 5;
    required  int32  sex  = 6;
    required  SKBuiltinString_t  remark  = 9;
    required  SKBuiltinString_t  remarkPyinitial  = 10;
    required  SKBuiltinString_t  remarkQuanPin  = 11;
    required  uint32  contactType  = 12;
    optional  string  province  = 13;
    optional  string  city  = 14;
    optional  string  signature  = 15;
    optional  uint32  personalCard  = 16;
    optional  uint32  verifyFlag  = 17;
    optional  string  verifyInfo  = 18;
    optional  string  country  = 19;
}

message MenuItem {
    required  uint32  type  = 1;
    required  string  wording  = 2;
    optional  string  url  = 3;
    optional  string  waappUsername  = 4;
    optional  string  waappPath  = 5;
    optional  string  subwording  = 6;
    optional  uint32  isShowRed  = 7;
}

message MicroMsgRequestNew {
    required  SKBuiltinString_t  toUserName  = 1;
    optional  string  content  = 2;
    required  uint32  type  = 3;
    required  uint32  createTime  = 4;
    required  uint32  clientMsgId  = 5;
    optional  string  msgSource  = 6;
    optional  uint32  ctrlBit  = 7;
    optional  SKBuiltinBuffer_t  encryptedContent  = 8;
    optional  string  sendMsgTicket  = 9;
}

message MicroMsgResponseNew {
    required  int32  ret  = 1;
    required  SKBuiltinString_t  toUserName  = 2;
    required  uint32  msgId  = 3;
    required  uint32  clientMsgId  = 4;
    required  uint32  createTime  = 5;
    required  uint32  serverTime  = 6;
    required  uint32  type  = 7;
    optional  uint64  newMsgId  = 8;
    optional  string  msgSource  = 9;
}

message MidasSdkInfo {
    optional  string  offerId  = 1;
    optional  string  openId  = 2;
    optional  string  openKey  = 3;
    optional  string  sessionId  = 4;
    optional  string  sessionType  = 5;
    optional  string  pf  = 6;
    optional  string  pfKey  = 7;
}

message MiniAppInfo {
    optional  string  activityTinyappUsername  = 1;
    optional  string  activityTinyappPath  = 2;
    optional  uint32  activityTinyappVersion  = 3;
}

message MiniAppsItem {
    optional  string  logoUrl  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  username  = 4;
    optional  string  path  = 5;
}

message MiniProgramClipboardInfo {
    optional  string  appid  = 1;
    optional  string  pagepath  = 2;
}

message MiniProgramInfo {
    optional  string  username  = 1;
    optional  string  pagePath  = 2;
}

message MktPaymentChannel {
    optional  string  bankCode  = 1;
    optional  uint32  selected  = 2;
    optional  string  bindSerial  = 3;
}

message Mobile {
    optional  string  v  = 1;
}

message ModBottleContact {
    optional  string  userName  = 1;
    required  uint32  type  = 2;
    required  uint32  sex  = 3;
    optional  string  city  = 4;
    optional  string  province  = 5;
    optional  string  signature  = 6;
    required  uint32  imgFlag  = 7;
    required  uint32  hdimgFlag  = 8;
    optional  string  country  = 9;
    optional  string  bigHeadImgUrl  = 10;
    optional  string  smallHeadImgUrl  = 11;
}

message ModBrandSetting {
    required  uint32  brandFlag  = 1;
    optional  string  userName  = 2;
}

message ModChatRoomAccessVerify {
    optional  string  chatRoomName  = 1;
    required  uint32  value  = 2;
}

message ModChatRoomMember {
    required  SKBuiltinString_t  userName  = 1;
    required  SKBuiltinString_t  nickName  = 2;
    required  SKBuiltinString_t  pyinitial  = 3;
    required  SKBuiltinString_t  quanPin  = 4;
    required  int32  sex  = 5;
    required  SKBuiltinBuffer_t  imgBuf  = 6;
    required  uint32  imgFlag  = 7;
    required  SKBuiltinString_t  remark  = 8;
    required  SKBuiltinString_t  remarkPyinitial  = 9;
    required  SKBuiltinString_t  remarkQuanPin  = 10;
    required  uint32  contactType  = 11;
    optional  string  province  = 12;
    optional  string  city  = 13;
    optional  string  signature  = 14;
    optional  uint32  personalCard  = 15;
    optional  uint32  verifyFlag  = 16;
    optional  string  verifyInfo  = 17;
    optional  string  weibo  = 18;
    optional  string  verifyContent  = 19;
    optional  string  weiboNickname  = 20;
    optional  uint32  weiboFlag  = 21;
    optional  int32  albumStyle  = 22;
    optional  int32  albumFlag  = 23;
    optional  string  albumBgimgId  = 24;
    optional  string  alias  = 25;
    optional  SnsUserInfo  snsUserInfo  = 26;
    optional  string  country  = 27;
    optional  string  bigHeadImgUrl  = 28;
    optional  string  smallHeadImgUrl  = 29;
    optional  string  myBrandList  = 30;
    optional  CustomizedInfo  customizedInfo  = 31;
}

message ModChatRoomMemberDisplayName {
    optional  string  chatRoomName  = 1;
    optional  string  userName  = 2;
    optional  string  displayName  = 3;
}

message ModChatRoomMemberFlag {
    optional  string  chatRoomName  = 1;
    optional  string  userName  = 2;
    required  uint32  flagSwitch  = 3;
    required  uint32  value  = 4;
}

message ModChatRoomNotify {
    required  SKBuiltinString_t  chatRoomName  = 1;
    required  uint32  status  = 2;
}

message ModChatRoomTopic {
    required  SKBuiltinString_t  chatRoomName  = 1;
    required  SKBuiltinString_t  chatRoomTopic  = 2;
}

message ModContact {
    required  SKBuiltinString_t  userName  = 1;
    required  SKBuiltinString_t  nickName  = 2;
    required  SKBuiltinString_t  pyinitial  = 3;
    required  SKBuiltinString_t  quanPin  = 4;
    required  int32  sex  = 5;
    required  SKBuiltinBuffer_t  imgBuf  = 6;
    required  uint32  bitMask  = 7;
    required  uint32  bitVal  = 8;
    required  uint32  imgFlag  = 9;
    optional  SKBuiltinString_t  remark  = 10;
    optional  SKBuiltinString_t  remarkPyinitial  = 11;
    optional  SKBuiltinString_t  remarkQuanPin  = 12;
    optional  uint32  contactType  = 13;
    optional  uint32  roomInfoCount  = 14;
    repeated  RoomInfo  roomInfoList  = 15;
    optional  SKBuiltinString_t  domainList  = 16;
    optional  uint32  chatRoomNotify  = 17;
    optional  uint32  addContactScene  = 18;
    optional  string  province  = 19;
    optional  string  city  = 20;
    optional  string  signature  = 21;
    optional  uint32  personalCard  = 22;
    optional  uint32  hasWeiXinHdHeadImg  = 23;
    optional  uint32  verifyFlag  = 24;
    optional  string  verifyInfo  = 25;
    optional  int32  level  = 26;
    optional  uint32  source  = 27;
    optional  string  weibo  = 28;
    optional  string  verifyContent  = 29;
    optional  string  alias  = 30;
    optional  string  chatRoomOwner  = 31;
    optional  string  weiboNickname  = 32;
    optional  uint32  weiboFlag  = 33;
    optional  int32  albumStyle  = 34;
    optional  int32  albumFlag  = 35;
    optional  string  albumBgimgId  = 36;
    optional  SnsUserInfo  snsUserInfo  = 37;
    optional  string  country  = 38;
    optional  string  bigHeadImgUrl  = 39;
    optional  string  smallHeadImgUrl  = 40;
    optional  string  myBrandList  = 41;
    optional  CustomizedInfo  customizedInfo  = 42;
    optional  string  chatRoomData  = 43;
    optional  string  headImgMd5  = 44;
    optional  string  encryptUserName  = 45;
    optional  string  idcardNum  = 46;
    optional  string  realName  = 47;
    optional  string  mobileHash  = 48;
    optional  string  mobileFullHash  = 49;
    optional  AdditionalContactList  additionalContactList  = 50;
    optional  uint32  chatroomVersion  = 53;
    optional  string  extInfo  = 54;
    optional  uint32  chatroomMaxCount  = 55;
    optional  uint32  chatroomAccessType  = 56;
    optional  ChatRoomMemberData  newChatroomData  = 57;
    optional  int32  deleteFlag  = 58;
    optional  string  description  = 59;
    optional  string  cardImgUrl  = 60;
    optional  string  labelIdlist  = 61;
    optional  PhoneNumListInfo  phoneNumListInfo  = 62;
    optional  string  weiDianInfo  = 63;
    optional  uint32  chatroomInfoVersion  = 64;
    optional  uint32  deleteContactScene  = 65;
    optional  uint32  chatroomStatus  = 66;
    optional  uint32  extFlag  = 67;
    optional  string  sourceExtInfo  = 68;
    optional  uint64  chatRoomBusinessType  = 70;
    optional  string  friendUserName  = 71;
}

message ModContactTypeInfo {
    optional  string  userName  = 1;
    optional  uint32  modType  = 2;
    optional  uint32  modOperation  = 3;
}

message ModContactTypeResInfo {
    optional  int32  ret  = 1;
    optional  ModContactTypeInfo  modOperation  = 2;
    optional  uint32  resInfo  = 3;
}

message ModDescription {
    optional  string  contactUsername  = 1;
    optional  string  desc  = 2;
}

message ModDisturbSetting {
    required  DisturbSetting  disturbSetting  = 1;
}

message ModEmotionPackRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    required  uint32  opCode  = 3;
}

message ModEmotionPackResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ModFavIndex {
    required  uint32  modField  = 1;
    required  uint32  modValue  = 2;
}

message ModFavItemMeta {
    required  uint32  favId  = 1;
    repeated  ModFavIndex  indexList  = 2;
    repeated  ModFavObject  objectList  = 3;
}

message ModFavItemRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  favId  = 2;
    required  uint32  indexCount  = 3;
    repeated  ModFavIndex  indexList  = 4;
    required  uint32  objectCount  = 5;
    repeated  ModFavObject  objectList  = 6;
    optional  string  replaceObject  = 7;
    optional  uint32  scene  = 8;
}

message ModFavItemResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ModFavItemRspInfo {
    required  uint32  favId  = 1;
    required  int32  ret  = 2;
}

message ModFavObject {
    optional  string  tagName  = 1;
    optional  string  attrName  = 2;
    optional  string  value  = 3;
    optional  uint32  type  = 4;
}

message ModHardDevice {
    required  HardDevice  hardDevice  = 1;
    required  HardDeviceAttr  hardDeviceAttr  = 2;
    required  uint32  bindFlag  = 3;
}

message ModLiveMicModeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  uint32  liveMicMode  = 4;
}

message ModLiveMicModeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ModNoReceivePersonalMsg {
    optional  uint32  optype  = 1;
}

message ModOpenIMChatRoomOwnerReq {
    optional  string  roomName  = 1;
    optional  OpenIMChatRoomMemberInReq  newOwner  = 2;
}

message ModOpenIMChatRoomOwnerResp {
    optional  BaseResponse  baseResponse  = 1;
}

message ModPatSuffixOplog {
    optional  string  patSuffix  = 1;
}

message ModPayF2FSynthesizeSpeech {
    required  uint32  value  = 1;
}

message ModPaySetting {
    optional  uint64  setBitmask  = 1;
    optional  uint64  clearBitmask  = 2;
}

message ModPayTransferDelay {
    required  uint32  value  = 1;
}

message ModPhoneNumList {
    optional  string  contactUsername  = 1;
    required  PhoneNumListInfo  phoneNumListInfo  = 2;
}

message ModPushSwitch {
    required  uint32  functionId  = 1;
    required  uint32  switchValue  = 2;
}

message ModSingleField {
    required  uint32  opType  = 1;
    optional  string  value  = 2;
}

message ModSnsBlackList {
    optional  string  contactUsername  = 1;
    required  uint32  modType  = 2;
}

message ModSocialBlackList {
    optional  string  contactUsername  = 1;
    required  uint32  modType  = 2;
}

message ModUserAuthReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  optScope  = 3;
    optional  uint32  optState  = 4;
    optional  uint32  allscopeOptFlag  = 5;
    optional  uint32  allscopeState  = 6;
    optional  uint32  fromScene  = 7;
}

message ModUserAuthResp {
    required  BaseResponse  baseResponse  = 1;
    optional  UserMgrBaseResponse  usermgrBaseresp  = 2;
}

message ModUserImg {
    required  uint32  imgType  = 1;
    required  uint32  imgLen  = 2;
    optional  bytes  imgBuf  = 3;
    optional  string  imgMd5  = 4;
    optional  string  bigHeadImgUrl  = 5;
    optional  string  smallHeadImgUrl  = 6;
}

message ModUserInfo {
    required  uint32  bitFlag  = 1;
    required  SKBuiltinString_t  userName  = 2;
    required  SKBuiltinString_t  nickName  = 3;
    required  uint32  bindUin  = 4;
    required  SKBuiltinString_t  bindEmail  = 5;
    required  SKBuiltinString_t  bindMobile  = 6;
    required  uint32  status  = 7;
    required  uint32  imgLen  = 8;
    optional  bytes  imgBuf  = 9;
    optional  int32  sex  = 10;
    optional  string  province  = 11;
    optional  string  city  = 12;
    optional  string  signature  = 13;
    optional  uint32  personalCard  = 14;
    optional  DisturbSetting  disturbSetting  = 15;
    optional  uint32  pluginFlag  = 16;
    optional  uint32  verifyFlag  = 17;
    optional  string  verifyInfo  = 18;
    optional  int32  point  = 19;
    optional  int32  experience  = 20;
    optional  int32  level  = 21;
    optional  int32  levelLowExp  = 22;
    optional  int32  levelHighExp  = 23;
    optional  string  weibo  = 24;
    optional  uint32  pluginSwitch  = 25;
    optional  GmailList  gmailList  = 26;
    optional  string  alias  = 27;
    optional  string  weiboNickname  = 28;
    optional  uint32  weiboFlag  = 29;
    optional  uint32  faceBookFlag  = 30;
    optional  uint64  fbuserId  = 31;
    optional  string  fbuserName  = 32;
    optional  int32  albumStyle  = 33;
    optional  int32  albumFlag  = 34;
    optional  string  albumBgimgId  = 35;
    optional  uint32  txnewsCategory  = 36;
    optional  string  fbtoken  = 37;
    optional  string  country  = 38;
}

message ModifyContactLabelListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  userCount  = 2;
    repeated  UserLabelInfo  userLabelInfoList  = 3;
}

message ModifyContactLabelListResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ModifyExplainReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bankCardSeqno  = 2;
    optional  string  explain  = 3;
}

message ModifyExplainRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message ModifyHoneyPayerCreditLineReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  creditLine  = 2;
    optional  string  authToken  = 3;
    optional  string  cardNo  = 4;
}

message ModifyHoneyPayerCreditLineResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint64  newCreditLine  = 4;
}

message ModifyHoneyPayerNotifyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  notifyFlag  = 2;
    optional  string  cardNo  = 3;
}

message ModifyHoneyPayerNotifyResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message ModifyHoneyPayerPayWayReq {
    required  BaseRequest  baseRequest  = 1;
    optional  PayWay  payWay  = 2;
    optional  string  cardNo  = 3;
}

message ModifyHoneyPayerPayWayResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  PayWay  newPayWay  = 4;
}

message ModifyPlanReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  usrPlanId  = 2;
    optional  string  bankType  = 3;
    optional  string  cardTail  = 4;
    optional  string  bindSerialNo  = 5;
    optional  uint64  amount  = 6;
    optional  uint32  day  = 7;
    optional  string  wxpEncPasswd  = 8;
}

message ModifyPlanResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message ModifyTimeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  timeStamp  = 2;
    optional  string  payPasswdEnc  = 3;
    optional  TimeSpan  time  = 4;
    optional  string  traceInfo  = 100;
}

message ModifyTimeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message MonitorIdMapStrategyInterval {
    required  uint32  originalId  = 1;
    required  uint32  heavyUserId  = 2;
}

message MoreGameInfo {
    optional  string  moreGameTitle  = 1;
    optional  string  webUrl  = 2;
}

message MoreTransRecord {
    optional  string  title  = 1;
    optional  string  url  = 2;
}

message MsgRemindExtInfo {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  userName  = 3;
    optional  uint64  newMsgId  = 4;
    optional  string  chatName  = 5;
}

message MsgReport {
    optional  int32  msgType  = 1;
    optional  string  externInfo  = 2;
}

message MulMediaInfo {
    optional  uint64  mediaid  = 1;
    optional  int32  mtype  = 2;
    optional  int32  source  = 3;
    optional  uint64  chatroomId  = 4;
    optional  string  toUsername  = 5;
    optional  string  snsUrl  = 6;
    optional  string  fileid  = 7;
    optional  string  filekey  = 8;
    optional  string  md5  = 9;
    optional  uint64  createtime  = 10;
    optional  uint32  mediaWidth  = 11;
    optional  uint32  mediaHeight  = 12;
    optional  string  thumbUrl  = 13;
    optional  uint32  videoLen  = 14;
    optional  uint32  videoFps  = 15;
    optional  uint32  audioSampleRate  = 16;
    optional  string  videoCodec  = 17;
    optional  string  audioCodec  = 18;
    optional  string  qrcodeUrl  = 19;
    optional  uint32  chatroomSize  = 20;
    optional  string  uuid  = 21;
    optional  bytes  secInfo  = 22;
    repeated  ExtItem  extNew  = 23;
}

message MulMediaReportReq {
    optional  BaseRequest  baserequest  = 1;
    optional  uint64  fromUin  = 2;
    optional  uint64  timestamp  = 3;
    optional  int32  scene  = 4;
    optional  MulMediaInfo  media  = 5;
    repeated  ExtItem  extNew  = 6;
}

message MulMediaReportResp {
    optional  BaseResponse  baseresp  = 1;
}

message MultiLang {
    required  string  lang  = 1;
    required  string  content  = 2;
}

message MultiLineTextViewData {
    optional  TextViewData  leftText  = 1;
    repeated  RightTextViewData  rightText  = 2;
    optional  int32  type  = 3;
    optional  string  viewId  = 4;
}

message MultiTalkRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  buffer  = 2;
}

message MultiTalkResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  buffer  = 2;
}

message MusicInfo {
    optional  string  musicid  = 1;
    optional  string  playDuration  = 2;
    optional  string  playLastTime  = 3;
}

message NICInfo {
    optional  string  nicDeviceId  = 1;
    optional  int32  nicRole  = 2;
    optional  string  nicIspInfo  = 3;
    optional  int32  netType  = 4;
    optional  string  wanIp  = 5;
}

message NavigationBarViewData {
    optional  TextViewData  title  = 1;
    optional  NavigationSubItemViewData  subItem  = 2;
    optional  NavigationCtrlItem  rightItem  = 3;
    optional  NavigationCtrlItem  leftItem  = 4;
}

message NavigationCtrlItem {
    optional  ImageViewData  image  = 1;
    optional  TextViewData  text  = 2;
    optional  int32  type  = 3;
}

message NavigationSubItemViewData {
    optional  ImageViewData  image  = 1;
    optional  TextViewData  text  = 2;
}

message NetworkControl {
    optional  string  portList  = 1;
    optional  string  timeoutList  = 2;
    optional  uint32  minNoopInterval  = 3;
    optional  uint32  maxNoopInterval  = 4;
    optional  int32  typingInterval  = 5;
    optional  int32  noopIntervalTime  = 7;
}

message NetworkSectResp {
    optional  HostList  newHostList  = 1;
    optional  NetworkControl  networkControl  = 2;
    optional  BuiltinIPList  builtinIplist  = 3;
}

message NewApp {
    repeated  NewAppItem  newAppList  = 1;
    optional  string  moreUrl  = 2;
    optional  string  moreWording  = 3;
}

message NewAppItem {
    required  AppItem  appItem  = 1;
    optional  string  noticeId  = 2;
    optional  bool  isSubscribed  = 3;
    repeated  string  label  = 4;
}

message NewCardItemViewData {
    optional  TextViewData  title  = 1;
    repeated  TextViewData  subTitle  = 2;
    optional  string  viewId  = 3;
    optional  string  jumpSafariUrl  = 4;
}

message NewDelMsg {
    optional  string  fromUserName  = 1;
    optional  string  toUserName  = 2;
    required  int32  msgId  = 3;
    required  uint32  msgType  = 4;
    optional  int64  newMsgId  = 5;
}

message NewDocumentItem {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  directUrl  = 3;
    optional  uint32  cellId  = 4;
    optional  uint32  urlType  = 5;
    optional  string  appUsername  = 6;
    optional  string  icon  = 7;
}

message NewHot {
    required  string  title  = 1;
    repeated  NewHotItem  hotList  = 2;
    optional  string  externInfo  = 3;
}

message NewHotItem {
    optional  uint32  type  = 1;
    optional  NewHotItem_AppInfo  app  = 2;
    repeated  NewHotItem_HotAd  adList  = 3;
    optional  string  externInfo  = 4;
}

message NewHotItem_AppInfo {
    optional  AppItem  appItem  = 1;
    repeated  SummaryFeedItem  summaryFeedList  = 2;
    optional  string  noticeId  = 3;
}

message NewHotItem_HotAd {
    optional  string  picUrl  = 1;
    optional  string  jumpUrl  = 2;
    optional  string  noticeId  = 3;
}

message NewInitRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  SKBuiltinBuffer_t  currentSynckey  = 3;
    required  SKBuiltinBuffer_t  maxSynckey  = 4;
    optional  string  language  = 5;
}

message NewInitResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  currentSynckey  = 2;
    required  SKBuiltinBuffer_t  maxSynckey  = 3;
    required  uint32  continueFlag  = 4;
    required  uint32  selectBitmap  = 5;
    required  uint32  cmdCount  = 6;
    repeated  CmdItem  cmdList  = 7;
    required  uint32  ratio  = 8;
}

message NewOCRTranslationRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint32  sessionId  = 2;
    optional  uint32  imageSize  = 3;
    optional  bytes  imageData  = 4;
    optional  uint32  imageDataOffset  = 5;
    optional  bytes  ctx  = 6;
    optional  string  imageUrl  = 7;
    optional  string  imageFileId  = 8;
    optional  string  imageAeskey  = 9;
    optional  uint32  scene  = 10;
}

message NewOCRTranslationResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  endFlag  = 2;
    repeated  TranslationInfo  info  = 3;
    optional  bytes  ctx  = 4;
    optional  float  angle  = 5;
    optional  string  fromLanguage  = 6;
    optional  string  toLanguage  = 7;
    optional  string  brandWording  = 8;
}

message NewRegRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  string  pwd  = 3;
    optional  string  nickName  = 4;
    optional  uint32  bindUin  = 5;
    optional  string  bindEmail  = 6;
    optional  string  bindMobile  = 7;
    optional  string  ticket  = 8;
    optional  uint32  builtinIpseq  = 12;
    optional  uint32  dlsrc  = 13;
    optional  uint32  regMode  = 14;
    optional  string  timeZone  = 15;
    optional  string  language  = 16;
    optional  uint32  forceReg  = 17;
    optional  string  realCountry  = 18;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 19;
    optional  string  alias  = 20;
    optional  string  verifySignature  = 21;
    optional  string  verifyContent  = 22;
    optional  uint32  hasHeadImg  = 23;
    optional  uint32  suggestRet  = 24;
    optional  string  clientSeqId  = 31;
    optional  string  adSource  = 32;
    optional  string  androidId  = 33;
    optional  string  macAddr  = 34;
    optional  string  androidInstallRef  = 35;
    optional  string  clientFingerprint  = 36;
    optional  ECDHKey  cliPubEcdhkey  = 37;
    optional  string  googleAid  = 38;
    optional  string  bundleId  = 39;
    optional  string  bioSigTicket  = 41;
    optional  uint32  bioSigCheckType  = 42;
    optional  SKBuiltinBuffer_t  clientCheckData  = 43;
    optional  uint32  mobileCheckType  = 44;
    optional  string  regSessionId  = 45;
    optional  string  privacyPolicyCountry  = 46;
    optional  string  thirdAppAuthTicket  = 47;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 48;
    optional  string  appleIdTicket  = 49;
    optional  PubKeyInfo  pubKey  = 52;
}

message NewRegResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  uin  = 2;
    optional  string  sessionKey  = 3;
    optional  string  officialUserName  = 4;
    optional  string  officialNickName  = 5;
    optional  string  qqmicroBlogUserName  = 6;
    optional  string  bindEmail  = 7;
    required  uint32  pushMailStatus  = 8;
    optional  uint32  sendCardBitFlag  = 9;
    optional  string  pushMailSettingTicket  = 10;
    optional  BuiltinIPList  builtinIplist  = 14;
    optional  string  fsurl  = 15;
    optional  string  userName  = 16;
    optional  uint32  status  = 17;
    optional  NetworkControl  networkControl  = 18;
    optional  uint32  returnFlag  = 19;
    optional  uint32  regType  = 20;
    optional  string  authKey  = 21;
    optional  PluginKeyList  pluginKeyList  = 22;
    optional  string  password  = 23;
    optional  uint32  profileFlag  = 24;
    optional  HostList  newHostList  = 25;
    optional  string  autoAuthTicket  = 26;
    optional  CDNDnsInfo  dnsInfo  = 27;
    optional  string  stepTicket  = 28;
    optional  string  verifySignature  = 29;
    optional  SKBuiltinBuffer_t  verifyBuff  = 30;
    optional  ShowStyleKey  showStyle  = 31;
    optional  CDNDnsInfo  snsDnsInfo  = 32;
    optional  CDNDnsInfo  appDnsInfo  = 33;
    optional  SecAuthRegKeySect  secAuthRegKeySect  = 34;
    optional  uint32  mmtlsControlBitFlag  = 35;
    optional  uint32  serverTime  = 36;
    optional  uint32  userXagreementId  = 37;
    optional  XAgreementWordingSetting  xagreementWordingSetting  = 38;
    optional  XAgreementDmSetting  xagreementDmSetting  = 39;
}

message NewRegVoicePrintRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  step  = 2;
    required  uint32  voiceTicket  = 3;
    required  VoicePieceCtx  pieceData  = 4;
    optional  string  mobileVerifyTicket  = 5;
    optional  string  voiceKey  = 6;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 7;
}

message NewRegVoicePrintResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  resgisterRet  = 2;
    required  uint32  nextStep  = 3;
    required  VoicePieceCtx  nextPiece  = 4;
    required  uint32  voiceTicket  = 5;
    optional  string  biosigTicket  = 6;
}

message NewStrategyItem {
    required  uint32  logId  = 1;
    required  uint32  reportCycle  = 2;
    required  uint32  reportFlag  = 3;
    required  uint32  sampleRatio  = 4;
    required  uint32  sampleMode  = 5;
    required  uint32  sampleValidInterval  = 6;
    optional  uint32  monitorFlag  = 7;
    optional  uint32  type  = 8;
}

message NewSyncRequest {
    required  CmdList  oplog  = 1;
    required  uint32  selector  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
    optional  uint32  scene  = 4;
    optional  string  deviceType  = 5;
    optional  uint32  syncMsgDigest  = 6;
}

message NewSyncResponse {
    required  int32  ret  = 1;
    required  CmdList  cmdList  = 2;
    required  uint32  continueFlag  = 3;
    required  SKBuiltinBuffer_t  keyBuf  = 4;
    optional  uint32  status  = 5;
    optional  uint32  onlineVersion  = 6;
    optional  uint32  svrTime  = 7;
}

message NextPageData {
    optional  uint32  nextIndex  = 2;
}

message NotAutoSucceedReq {
    optional  string  originTpusername  = 1;
    optional  string  heirTpusername  = 2;
    optional  string  succeedTicket  = 3;
    optional  int32  action  = 4;
}

message NotAutoSucceedResp {
    optional  BaseResponse  baseResponse  = 1;
}

message NotInterestedConfig {
    optional  uint32  subType  = 1;
    optional  string  wording  = 2;
}

message NotifyVideoInfo {
    optional  string  coverUrl  = 1;
    optional  uint32  duration  = 2;
    optional  string  bizUsername  = 3;
    optional  string  bizNickname  = 4;
    optional  string  title  = 5;
    optional  string  digest  = 6;
    optional  uint32  publishTime  = 7;
    optional  uint32  width  = 8;
    optional  uint32  height  = 9;
    optional  string  pageUrl  = 10;
    optional  string  vid  = 11;
    optional  string  bizHeadimg  = 12;
    optional  uint32  bizuin  = 13;
}

message NumCondition {
    required  uint32  field  = 1;
    optional  uint64  from  = 2;
    optional  uint64  to  = 3;
}

message OCRTranslationRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  clientScanId  = 2;
    required  SKBuiltinBuffer_t  imageBuffer  = 3;
    required  uint32  imageType  = 4;
    optional  string  fromLanguage  = 5;
    optional  string  toLanguage  = 6;
    optional  uint32  sessionId  = 7;
}

message OCRTranslationResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  clientScanId  = 2;
    optional  string  source  = 3;
    optional  string  translation  = 4;
    required  uint32  imageType  = 5;
}

message OauthAuthorizeConfirmReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  oauthUrl  = 2;
    optional  uint32  opt  = 3;
    repeated  string  scope  = 4;
    optional  uint32  avatarId  = 5;
}

message OauthAuthorizeConfirmResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  redirectUrl  = 3;
}

message OauthAuthorizeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  oauthUrl  = 2;
    optional  string  bizUsername  = 3;
    optional  uint32  scene  = 4;
}

message OauthAuthorizeResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  OauthScopeInfo  scopeList  = 3;
    optional  string  appname  = 4;
    optional  string  appiconUrl  = 5;
    optional  string  redirectUrl  = 6;
    optional  bool  isRecentHasAuth  = 8;
    optional  bool  isSlienctAuth  = 9;
    optional  bool  isCallServerWhenConfirm  = 10;
    repeated  OauthAvatarInfo  avatarList  = 11;
    optional  bool  isUseNewpage  = 12;
    optional  bool  isBanModifyAvatar  = 13;
    optional  uint32  avatarLimit  = 14;
    optional  uint32  defaultAvatarId  = 15;
    optional  string  defaultHeadimgUrl  = 16;
    optional  string  defaultHeadimgFileid  = 17;
}

message OauthAvatarInfo {
    optional  uint32  id  = 1;
    optional  string  nickname  = 2;
    optional  string  avatarurl  = 3;
    optional  string  desc  = 4;
}

message OauthCheckGrantResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  status  = 2;
}

message OauthScopeInfo {
    optional  string  scope  = 1;
    optional  string  desc  = 2;
    optional  uint32  authState  = 3;
}

message OcrItem {
    optional  string  text  = 1;
    optional  Position  pos  = 2;
    optional  double  confidence  = 3;
    repeated  double  label  = 4;
}

message OfficialSyncReq {
    optional  string  wishItemsStr  = 1;
}

message OfficialSyncResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  wishItemsJson  = 2;
}

message OfflinePayConfirmRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  buttonType  = 2;
    optional  string  id  = 3;
    optional  string  passwd  = 4;
    optional  ActionLocation  actionLocation  = 5;
}

message OfflinePayConfirmResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  retText  = 2;
}

message OftenReadBarClick {
    optional  string  bizUsername  = 1;
    optional  uint32  isGreenPoint  = 2;
    optional  uint32  rank  = 3;
    optional  uint32  showTime  = 4;
    optional  uint32  type  = 5;
    optional  string  logoUrl  = 6;
    optional  string  syncBuf  = 7;
    optional  uint32  isIconCache  = 8;
    optional  uint32  isDefaultIcon  = 9;
    optional  uint64  clickTimeMs  = 10;
}

message OftenReadBarReportRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  reportType  = 2;
    optional  uint32  sessionid  = 3;
    repeated  OftenReadBarShow  showList  = 4;
    repeated  OftenReadBarClick  clickList  = 5;
    optional  uint32  source  = 6;
}

message OftenReadBarReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message OftenReadBarShow {
    optional  string  bizUsername  = 1;
    optional  uint32  isGreenPoint  = 2;
    optional  uint32  rank  = 3;
    optional  uint32  showTime  = 4;
    optional  uint32  showCount  = 5;
    optional  uint32  type  = 6;
    optional  string  logoUrl  = 7;
    optional  string  syncBuf  = 8;
    optional  uint32  isIconCache  = 9;
    optional  uint32  isDefaultIcon  = 10;
    optional  uint32  seqId  = 11;
    optional  uint64  showTimeMs  = 12;
}

message OldAcctFriend {
    optional  string  userName  = 1;
    optional  string  ticket  = 2;
    optional  uint32  seq  = 3;
    optional  string  nickName  = 4;
    optional  string  encryptedUserName  = 5;
}

message OnClickPurchaseReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  accountType  = 2;
    optional  uint32  entranceType  = 3;
    optional  string  bindSerial  = 4;
    optional  string  newBindSerial  = 5;
    optional  string  traceInfo  = 100;
}

message OnClickPurchaseRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  LqtBindQueryInfo  lqtBindQueryInfo  = 4;
    optional  string  exceedingWording  = 5;
    optional  string  upgradeLinkWording  = 6;
    optional  string  upgradeUrl  = 7;
    optional  uint32  remainingBalance  = 8;
    optional  string  bottomWording  = 9;
    optional  string  realNameInfo  = 10;
    optional  FaultControlInfo  faultControlInfo  = 11;
    optional  string  daeAuthorizationPromptWording  = 12;
    optional  string  traceInfo  = 100;
}

message OnClickRedeemReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  accountType  = 2;
    optional  string  newBindSerial  = 3;
    optional  string  traceInfo  = 100;
}

message OnClickRedeemRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  balance  = 4;
    optional  uint32  lqBalance  = 5;
    optional  uint32  bankBalance  = 6;
    repeated  DocumentItem  informationLst  = 8;
    optional  LqtBindQueryInfo  lqtBindQueryInfo  = 9;
    repeated  RedeemTypeList  lqRedeemTypeList  = 10;
    repeated  BankRedeemTypeInfo  bankRedeemTypeInfo  = 11;
    optional  bool  isShowPopups  = 12;
    optional  PopUpsItem  popupsItem  = 13;
    optional  string  realNameInfo  = 14;
    optional  FaultControlInfo  faultControlInfo  = 15;
    optional  uint32  fastRedeemFeeLimit  = 16;
    optional  string  redeemToBankWording  = 17;
    optional  PopUpWithHalfDialog  redeemToLqExceedGuide  = 18;
    optional  PopUpWithHalfDialog  redeemToLqExceedDetail  = 19;
    optional  string  redeemToBankExceedWording  = 20;
    optional  ComonPromptInfo  redeemToBankExceedSecondLineMsg  = 21;
    optional  PopUpWithHalfDialog  redeemToBankExceedDetail  = 22;
    optional  string  traceInfo  = 100;
}

message OnlineInfo {
    required  uint32  deviceType  = 1;
    optional  bytes  deviceId  = 2;
    optional  string  wordingXml  = 3;
    required  SKBuiltinBuffer_t  clientKey  = 4;
    required  uint32  onlineStatus  = 5;
    required  uint32  deviceHelperType  = 6;
    optional  uint32  clientVersion  = 7;
}

message OpLogClientCheckConsistency {
    optional  string  fileName  = 1;
    optional  uint32  fileOffset  = 2;
    optional  uint32  checkBufferSize  = 3;
    optional  uint32  seq  = 4;
    optional  string  checkBufferHash  = 5;
    optional  uint32  fileSize  = 6;
    optional  uint32  isRoot  = 7;
    optional  uint32  netType  = 8;
    optional  string  checkSum  = 9;
    optional  string  deviceType  = 10;
    optional  string  osversion  = 11;
}

message OpLogClientCheckGetAppList {
    optional  uint32  seq  = 1;
    optional  string  appList  = 3;
    optional  int32  isRoot  = 4;
    optional  uint32  netType  = 5;
    optional  string  checkSum  = 6;
}

message OpLogClientCheckHook {
    optional  uint32  seq  = 1;
    optional  string  fileList  = 3;
    optional  int32  isRoot  = 4;
    optional  uint32  netType  = 5;
    optional  string  checkSum  = 6;
}

message OpPatternLockRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  cmd  = 2;
    optional  SKBuiltinBuffer_t  nowpatternhash  = 3;
    optional  SKBuiltinBuffer_t  newpatternhash  = 4;
}

message OpPatternLockResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  PatternLockBuffer  patternlockbuf  = 2;
}

message OpTvHistRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opType  = 2;
    optional  string  brandUserName  = 3;
}

message OpTvHistResponse {
    required  BaseResponse  baseResponse  = 1;
}

message OpVoiceReminderReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  opCode  = 2;
    required  uint32  remindInfoNum  = 3;
    repeated  VoiceRemindInfo  remindInfoList  = 4;
}

message OpVoiceReminderResp {
    required  BaseResponse  baseResponse  = 1;
}

message OpenAppInfo {
    optional  string  appId  = 1;
    optional  string  appName  = 2;
    optional  string  appDescription  = 3;
    optional  string  appIconUrl  = 4;
    optional  string  appStoreUrl  = 5;
    required  uint32  appVersion  = 6;
    optional  string  appWatermarkUrl  = 7;
    optional  string  androidPackageName  = 8;
    optional  string  androidSignature  = 9;
    optional  string  appName4EnUs  = 10;
    optional  string  appDescription4EnUs  = 11;
    optional  string  appName4ZhTw  = 12;
    optional  string  appDescription4ZhTw  = 13;
    optional  uint32  appInfoFlag  = 14;
}

message OpenECardAuthReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ecardType  = 2;
    optional  string  wxpPasswdEnc  = 3;
    optional  uint32  openScene  = 4;
    optional  string  token  = 5;
}

message OpenECardAuthRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  rettext  = 4;
    optional  string  reqSerial  = 7;
    optional  PopItem  guideInfo  = 8;
    optional  bool  isTokenInvalid  = 9;
    optional  bool  isReuseExistingEcard  = 10;
}

message OpenECardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ecardType  = 2;
    optional  string  reqSerial  = 3;
    optional  string  parentBindSerialno  = 4;
    optional  string  bankCardNoEnc  = 5;
    optional  string  mobileNo  = 6;
    optional  string  bankType  = 7;
    optional  uint32  openScene  = 8;
    optional  int32  isRepeatSend  = 9;
    optional  bool  isReuseExistingEcard  = 10;
    optional  uint32  fromScene  = 11;
    optional  string  bankCardInfo  = 12;
}

message OpenECardRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  rettext  = 4;
    optional  string  bindToken  = 5;
    optional  string  verifyMsgDesc  = 6;
    optional  PopItem  guideInfo  = 7;
    optional  OpenSuccItem  succTips  = 8;
    optional  InputMobileItem  inputTips  = 9;
}

message OpenIMChatRoomContact {
    optional  string  roomName  = 1;
    optional  uint32  svrChatroomVersion  = 2;
    optional  OpenIMChatRoomData  chatRoom  = 3;
    optional  uint32  svrMemberVersion  = 4;
    optional  OpenIMChatRoomMemberData  memberData  = 5;
    optional  uint32  chatRoomNotify  = 7;
    optional  uint32  bitVal  = 8;
    optional  uint32  bitMask  = 9;
    optional  string  appId  = 10;
    optional  uint32  contactType  = 11;
}

message OpenIMChatRoomData {
    optional  string  owner  = 1;
    optional  string  bigHeadimg  = 2;
    optional  string  smallHeadimg  = 3;
    optional  uint32  imgFlag  = 4;
    optional  string  topic  = 5;
    optional  string  topicPyinit  = 6;
    optional  string  topicQuanpin  = 7;
    optional  string  announcement  = 8;
    optional  string  announcementEditor  = 9;
    optional  uint32  announcementPublishTime  = 10;
    optional  uint32  chatRoomMaxCount  = 11;
    optional  uint64  extFlag  = 12;
    optional  uint64  chatRoomBusinessType  = 13;
}

message OpenIMChatRoomMemberData {
    repeated  OpenIMChatRoomMemberInfo  memberList  = 1;
    optional  uint32  isBasicInfo  = 2;
}

message OpenIMChatRoomMemberInReq {
    optional  string  userName  = 1;
}

message OpenIMChatRoomMemberInResp {
    optional  string  userName  = 1;
    optional  uint32  status  = 2;
    optional  string  nickName  = 3;
}

message OpenIMChatRoomMemberInfo {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  displayName  = 3;
    optional  string  bigHeadimgUrl  = 4;
    optional  string  smallHeadimgUrl  = 5;
    optional  uint32  chatroomMemberFlag  = 6;
    optional  string  appId  = 7;
    optional  string  descWordingId  = 8;
    optional  string  inviterUserName  = 9;
}

message OpenIMContact {
    optional  string  tpUsername  = 1;
    optional  string  nickname  = 2;
    optional  uint32  type  = 3;
    optional  string  remark  = 4;
    optional  string  bigHeadimg  = 5;
    optional  string  smallHeadimg  = 6;
    optional  uint32  source  = 7;
    optional  string  nicknamePyinit  = 8;
    optional  string  nicknameQuanpin  = 9;
    optional  string  remarkPyinit  = 10;
    optional  string  remarkQuanpin  = 11;
    optional  OpenIMContactCustomInfo  customInfo  = 12;
    optional  string  antispamTicket  = 13;
    optional  string  appId  = 14;
    optional  uint32  sex  = 15;
    optional  string  descWordingId  = 16;
}

message OpenIMContactCustomInfo {
    optional  uint32  detailVisible  = 1;
    optional  string  detail  = 2;
}

message OpenIMDelContactOplog {
    optional  string  tpUsername  = 1;
}

message OpenIMModChatRoomAnnouncementOplog {
    optional  string  roomName  = 1;
    optional  string  announcement  = 2;
}

message OpenIMModChatRoomMuteOplog {
    optional  string  roomName  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModChatRoomSelfDisplaynameOplog {
    optional  string  roomName  = 1;
    optional  string  displayName  = 2;
}

message OpenIMModChatRoomShowMemberDisplaynameOplog {
    optional  string  roomName  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModChatRoomTopOplog {
    optional  string  roomName  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModChatRoomTopicOplog {
    optional  string  roomName  = 1;
    optional  string  topic  = 2;
}

message OpenIMModContactBlackListOplog {
    optional  string  tpUsername  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModContactMuteOplog {
    optional  string  tpUsername  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModContactRemarkOplog {
    optional  string  tpUsername  = 1;
    optional  string  remark  = 2;
}

message OpenIMModContactStarOplog {
    optional  string  tpUsername  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModContactTopOplog {
    optional  string  tpUsername  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMModStatusOplog {
    optional  uint32  functionType  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMOplogReq {
    required  uint32  type  = 1;
    required  bytes  buf  = 2;
}

message OpenIMOplogResp {
    optional  BaseResponse  baseResponse  = 1;
}

message OpenIMQuitChatRoomOplog {
    optional  string  roomName  = 1;
}

message OpenIMSaveChatRoomContactOplog {
    optional  string  roomName  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMSetAddChatRoomMemberNeddApprovalOplog {
    optional  string  roomName  = 1;
    optional  uint32  switchFlag  = 2;
}

message OpenIMStatusColumn {
    optional  string  column  = 1;
    repeated  OpenIMStatusDesc  desc  = 2;
}

message OpenIMStatusDesc {
    optional  string  key  = 1;
    optional  uint32  status  = 2;
    optional  uint32  functionType  = 3;
}

message OpenIMSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  selector  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
}

message OpenIMSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    required  CmdList  cmdList  = 2;
    required  uint32  continueFlag  = 3;
    required  SKBuiltinBuffer_t  keyBuf  = 4;
}

message OpenIMUrl {
    optional  string  key  = 1;
    optional  string  url  = 2;
}

message OpenIMWording {
    optional  string  key  = 1;
    optional  string  wording  = 2;
}

message OpenLiveReplayRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  bool  enableLiveReplay  = 4;
}

message OpenLiveReplayResponse {
    required  BaseResponse  baseResponse  = 1;
}

message OpenLqbAccountReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ecardType  = 2;
    optional  string  extraData  = 3;
    optional  string  traceInfo  = 100;
}

message OpenLqbAccountRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  traceInfo  = 100;
}

message OpenReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  timeStamp  = 2;
    optional  string  payPasswdEnc  = 3;
    optional  string  traceInfo  = 100;
}

message OpenResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message OpenSuccItem {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  directUrl  = 3;
    optional  string  detail  = 4;
}

message OpenWxaHBRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  sendid  = 3;
    optional  bytes  signature  = 4;
}

message OpenWxaHBResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  wxahbStatus  = 2;
    optional  int32  hbStatus  = 3;
    optional  int32  receiveStatus  = 4;
    optional  uint64  amount  = 5;
    optional  uint32  rcvdNum  = 6;
    optional  uint64  rcvdAmount  = 7;
    optional  uint32  totalNum  = 8;
    optional  uint64  totalAmount  = 9;
    optional  int32  hbType  = 10;
    repeated  HBReceiveUser  rcvdUserList  = 11;
    optional  string  wishing  = 12;
    optional  string  sendUsername  = 13;
    optional  string  sendNickname  = 14;
    optional  string  sendHeadimg  = 15;
    optional  int32  isSender  = 16;
    optional  string  headTitle  = 17;
    optional  int32  isContinue  = 18;
    optional  string  amountTitle  = 19;
    optional  RealNameInfo  realNameInfo  = 20;
    optional  string  errorwording  = 21;
}

message OperateAction {
    optional  string  cardId  = 1;
    optional  string  codeId  = 2;
    optional  uint32  operateTimestamp  = 3;
    optional  uint32  operateType  = 4;
}

message OperationInfo {
    optional  string  jsonInfo  = 1;
}

message OperationReq {
    required  BaseRequest  baseRequest  = 1;
}

message OperationResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  minPoundage  = 4;
    optional  uint32  maxTransferAmt  = 5;
    optional  string  notice  = 6;
    optional  string  noticeUrl  = 7;
    optional  string  paylistUrl  = 8;
    optional  string  uniqueId  = 9;
    optional  uint32  nameLenLimit  = 10;
    optional  uint32  reasonLenLimit  = 11;
}

message OplogErrMsg {
    optional  string  content  = 1;
    optional  string  title  = 2;
}

message OplogRequest {
    required  CmdList  oplog  = 1;
}

message OplogResponse {
    required  int32  ret  = 1;
    required  OplogRet  oplogRet  = 2;
}

message OplogRet {
    required  uint32  count  = 1;
    repeated  int32  ret  = 2[packed=true];
    repeated  OplogErrMsg  errMsg  = 3;
}

message OrderDetailViewData {
    optional  PriceAndFavorViewData  priceAndFavor  = 1;
    repeated  SingleLineTextViewData  otherDetail  = 2;
    optional  string  viewId  = 3;
}

message OriginVal {
    optional  uint32  pageturn  = 1;
    optional  uint32  maxVidPlayProgress  = 2;
    optional  uint32  feedStayTime  = 3;
    optional  uint32  vidReplayTimes  = 4;
    optional  uint32  forwardTimes  = 5;
    optional  uint32  clickComment  = 6;
    optional  uint32  clickHead  = 7;
    optional  uint32  share  = 8;
    optional  uint32  followStatus  = 9;
    optional  uint32  likeStatus  = 10;
    optional  uint32  commentTimes  = 11;
    optional  uint32  favStatus  = 12;
    optional  uint32  fastSlip  = 13;
    optional  uint32  sortId  = 14;
    optional  uint32  maxVidPlayLen  = 15;
    optional  uint32  notInterestAction  = 16;
    optional  uint32  clickTopicTimes  = 17;
    optional  uint32  expandTextTimes  = 18;
    optional  uint32  shareMomentTimes  = 19;
    optional  uint32  clickPoiTimes  = 20;
    optional  uint32  collapseTextTimes  = 21;
    optional  uint32  commentLikeTimes  = 22;
    optional  uint32  clickFeedMenu  = 23;
    optional  uint32  complainTimes  = 24;
    optional  uint32  clickColumnCard  = 25;
    optional  uint32  dragProgressBar  = 26;
}

message OriginalEntranceInfo {
    optional  string  authorStatement  = 1;
}

message POIItem {
    optional  string  name  = 1;
    optional  string  addr  = 2;
    required  double  longitude  = 3;
    required  double  latitude  = 4;
    optional  string  typeId  = 5;
    optional  string  link  = 6;
    optional  string  nation  = 7;
    optional  string  province  = 8;
    optional  string  city  = 9;
    optional  string  district  = 10;
    optional  string  street  = 11;
    optional  string  subAddr  = 12;
}

message PRCondition {
    required  string  key  = 1;
    required  string  value  = 2;
    optional  string  op  = 3;
    repeated  string  values  = 4;
}

message PRConfigRequest {
    optional  string  baseid  = 1;
    optional  string  pid  = 2;
    repeated  PRCondition  condition  = 3;
    optional  uint32  timestamp  = 4;
    optional  string  type  = 5;
    repeated  PRConfigRequest  reqlist  = 6;
    optional  uint32  protover  = 7;
    optional  uint32  sceneflag  = 8;
}

message PRConfigResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  PRRespNode  pr  = 2;
    optional  string  baseid  = 3;
    optional  string  pid  = 4;
    optional  string  type  = 5;
    repeated  PRConfigResponse  resplist  = 6;
    optional  uint32  prerrcode  = 7;
}

message PRMsg {
    required  string  key  = 1;
    required  string  value  = 2;
}

message PRNotice {
    required  uint32  type  = 1;
    repeated  MultiLang  msgs  = 2;
}

message PRRespNode {
    required  string  pid  = 1;
    optional  uint32  state  = 2;
    repeated  PRNotice  notice  = 3;
    optional  uint32  ptype  = 4;
    optional  uint32  network  = 5;
    optional  ResourceMeta  info  = 6;
    optional  uint32  maxdown  = 7;
    repeated  PRMsg  custom  = 8;
    optional  bool  releaseall  = 9;
    repeated  ResourceMeta  infolist  = 10;
}

message PackThumbExt {
    optional  string  previewUrl  = 1;
    optional  string  desc  = 2;
    optional  string  md5  = 3;
    optional  string  aesKey  = 4;
    optional  string  cdnurl  = 5;
    optional  string  thumbUrl  = 6;
    optional  string  encryptUrl  = 7;
    optional  string  externUrl  = 8;
    optional  string  externMd5  = 9;
    optional  string  activityId  = 10;
}

message Package {
    required  int32  id  = 1;
    required  int32  version  = 2;
    optional  string  name  = 3;
    optional  uint32  size  = 4;
    optional  SKBuiltinBuffer_t  thumb  = 5;
    optional  string  packName  = 6;
    optional  SKBuiltinBuffer_t  ext  = 7;
    optional  string  md5  = 8;
}

message PackagePreprocess {
    optional  int32  compress  = 1;
    optional  int32  encrypt  = 2;
}

message PackageUrlInfo {
    optional  string  appid  = 1;
    optional  string  moduleName  = 2;
    optional  uint32  packageType  = 3;
    optional  uint32  version  = 4;
    optional  string  url  = 5;
    optional  string  md5  = 6;
    optional  bool  isPatch  = 20;
    optional  bool  isZstd  = 21;
    optional  uint32  encryptVersion  = 22;
}

message PacketAuthenticateRequest {
    required  int32  step  = 1;
    required  string  id  = 2;
    optional  bytes  data  = 3;
    optional  int32  version  = 4;
    optional  int32  type  = 5;
    optional  int32  supportExt  = 6;
    optional  int32  needToken  = 7;
}

message PacketAuthenticateResponse {
    required  int32  step  = 1;
    required  int32  status  = 2;
    required  string  id  = 3;
    optional  bytes  data  = 4;
    optional  int32  version  = 5;
    optional  int32  type  = 6;
    optional  int32  supportExt  = 7;
    optional  bytes  token  = 8;
}

message PacketBackupDataPush {
    required  string  dataId  = 1;
    required  int32  dataType  = 2;
    required  int32  dataSize  = 3;
    required  int32  startOffset  = 4;
    required  int32  endOffset  = 5;
    optional  int32  checkSum  = 6;
    optional  bytes  data  = 7;
    optional  int32  progress  = 8;
}

message PacketBackupDataResponse {
    required  string  dataId  = 1;
    required  int32  dataType  = 2;
    required  int32  startOffset  = 3;
    required  int32  endOffset  = 4;
    required  int32  status  = 5;
}

message PacketBackupDataTag {
    required  string  bakChatName  = 1;
    required  int64  startTime  = 2;
    required  int64  endTime  = 3;
    required  string  msgDataId  = 4;
    required  string  nickName  = 5;
    repeated  string  mediaIdlist  = 6;
}

message PacketBackupDataTagResponse {
    required  string  bakChatName  = 1;
    required  int64  startTime  = 2;
    required  int64  endTime  = 3;
    required  string  msgDataId  = 4;
}

message PacketSvrIDRequest {
    repeated  uint64  svrId  = 1;
    repeated  string  mediaId  = 2;
    repeated  string  md5  = 3;
    required  string  bakChatName  = 4;
}

message PacketSvrIDResponse {
    repeated  uint64  svrId  = 1;
    repeated  string  mediaId  = 2;
    repeated  string  md5  = 3;
    required  string  bakChatName  = 4;
}

message PaddingStyle {
    optional  float  top  = 1;
    optional  float  bottom  = 2;
    optional  float  left  = 3;
    optional  float  right  = 4;
}

message PageInfo {
    optional  BaseEvent  baseEvent  = 1;
    optional  string  pagename  = 2;
    optional  int32  action  = 3;
    optional  int32  outType  = 4;
}

message PageTicketElement {
    optional  string  userCardId  = 1;
    optional  string  ticketMchName  = 2;
    optional  string  ticketName  = 3;
    optional  string  ticketIcon  = 4;
    optional  uint32  ticketType  = 5;
    repeated  CardElementCouponLabel  ticketLabel  = 6;
    optional  string  ticketColor  = 7;
    optional  string  ticketBackUrl  = 8;
}

message PageTicketJumpElement {
    optional  string  pageTicketJumpElementWording  = 1;
    optional  string  pageTicketJumpElementIcon  = 2;
    optional  string  pageTicketJumpElementSkipWording  = 3;
    optional  int32  pageTicketJumpElementOpType  = 4;
    optional  string  pageTicketJumpElementUrl  = 5;
    optional  CardMiniAppInfo  pageTicketJumpElementMiniAppInfo  = 6;
    optional  string  pageTicketJumpElementNativeUrl  = 7;
}

message PageTicketJumpList {
    repeated  PageTicketJumpElement  pageTicketJumpElement  = 1;
}

message PageTicketList {
    repeated  PageTicketElement  pageTicketElement  = 1;
}

message PageUnderList {
    optional  MedicareAndSocialSecurityCardTips  medicareAndSocialSecurityElement  = 1;
}

message PanelEmojiCtx {
    optional  uint32  messageType  = 1;
    optional  uint32  appMessageInnerType  = 2;
    optional  uint32  payInfoScene  = 3;
    optional  string  extInfo  = 4;
    optional  uint64  timeStamp  = 5;
    optional  uint32  isSelf  = 6;
    optional  string  lensId  = 7;
    optional  uint32  isRelatedEmoticon  = 8;
}

message PanelEmojiCtxs {
    repeated  PanelEmojiCtx  ctxs  = 1;
}

message ParallelUploadRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uploadId  = 2;
    optional  ParallelUploadRequest_Param  initialParam  = 3;
    optional  uint32  partId  = 4;
    optional  bytes  partBuffer  = 5;
}

message ParallelUploadRequest_Param {
    required  uint32  scene  = 1;
    required  uint32  fileType  = 2;
    required  uint32  fileSize  = 3;
    required  string  fileMd5  = 4;
    required  uint32  partSize  = 5;
    optional  string  thumbFileId  = 6;
    optional  string  thumbAesKey  = 7;
    optional  string  lastUploadId  = 8;
    optional  string  midFileId  = 10;
    optional  string  midAesKey  = 11;
    optional  uint32  midImgType  = 12;
    optional  string  signature  = 13;
    optional  string  bigFileAesKey  = 14;
}

message ParallelUploadResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  uploadId  = 2;
    optional  string  fileId  = 3;
    optional  string  aesKey  = 4;
    optional  uint32  retryDelaySeconds  = 6;
    optional  string  imgInfo  = 8;
    optional  uint32  currentPartIdlimit  = 9;
}

message ParallelUploadResponse_ParallelUploadImgInfo {
    optional  uint32  bigLen  = 1;
    optional  uint32  midLen  = 2;
    optional  uint32  thumbLen  = 3;
    optional  uint32  hevcMidLen  = 6;
}

message PardusPreSearchRequest {
    optional  LbsLocationNew  location  = 1;
    optional  ChildMode  childMode  = 2;
}

message PardusPreSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  cacheExpireTime  = 2;
}

message PardusResult {
    optional  PardusResultShowInfo  showInfo  = 1;
    optional  PardusResultActionInfo  actionInfo  = 2;
}

message PardusResultActionInfo {
    optional  uint32  actionType  = 1;
    optional  string  jumpUrl  = 2;
    optional  string  userName  = 3;
    optional  string  weappPath  = 4;
    optional  uint32  weappVersion  = 5;
    optional  string  sceneNote  = 6;
    optional  string  ctrlInfo  = 7;
    optional  string  musicObjectXmlDesc  = 8;
}

message PardusResultShowInfo {
    optional  string  docId  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  iconUrl  = 4;
    optional  string  source  = 5;
    optional  uint32  duration  = 6;
}

message PardusSearchRequest {
    optional  string  query  = 1;
    optional  LbsLocationNew  location  = 2;
    optional  string  sessionId  = 3;
    optional  string  requestId  = 4;
    optional  string  source  = 5;
    optional  int32  pardusSwitch  = 6;
    optional  uint32  h5Version  = 7;
    optional  uint32  darkMode  = 8;
    optional  uint32  scene  = 9;
    optional  uint32  businessType  = 10;
    optional  ChildMode  childMode  = 11;
}

message PardusSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  searchId  = 2;
    optional  SugResult  sugResult  = 3;
    repeated  BusinessResult  businessResults  = 4;
    optional  string  moreText  = 5;
    optional  string  guideText  = 6;
    optional  string  pardusInfo  = 7;
    optional  SugResult  relatedResult  = 8;
    optional  string  jsonResult  = 9;
}

message PatternLockBuffer {
    optional  uint32  uin  = 1;
    optional  uint32  version  = 2;
    optional  SKBuiltinBuffer_t  svrpatternhash  = 3;
    optional  uint32  lockstatus  = 4;
    optional  SKBuiltinBuffer_t  sign  = 5;
}

message PatternLockInfo {
    optional  uint32  patternVersion  = 1;
    optional  SKBuiltinBuffer_t  sign  = 2;
    optional  uint32  lockStatus  = 3;
}

message PayAuthAppRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  partnerId  = 3;
    optional  string  prepayId  = 4;
    optional  string  nonceStr  = 5;
    optional  string  timeStamp  = 6;
    optional  string  package  = 7;
    optional  string  sign  = 8;
    optional  string  signType  = 9;
    optional  string  scence  = 10;
    optional  ActionLocation  actionLocation  = 11;
    optional  string  bundleId  = 12;
    optional  string  packageName  = 13;
    optional  string  appName  = 14;
    optional  string  appSign  = 15;
}

message PayAuthAppResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appSource  = 2;
    optional  int32  errCode  = 3;
    optional  string  errMsg  = 4;
    optional  string  prepayId  = 5;
    optional  string  callbackUrl  = 6;
    optional  WalletMixSpGenprepayResp  walletMixSpGenprepayResp  = 7;
}

message PayChargeProxyRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  cmdId  = 2;
    optional  string  reqData  = 3;
}

message PayChargeProxyResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  respData  = 2;
}

message PayDelUserRollRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  delType  = 2;
    optional  string  transid  = 3;
    optional  uint32  payType  = 4;
    optional  string  billId  = 5;
    optional  ActionLocation  actionLocation  = 6;
}

message PayDelUserRollResponse {
    required  BaseResponse  baseResponse  = 1;
}

message PayFunctionCell {
    optional  string  funcId  = 1;
    optional  uint32  status  = 2;
    optional  string  funcName  = 3;
    optional  string  funcIconUrl  = 4;
    optional  string  funcExtDesc  = 5;
    optional  uint32  funcType  = 6;
    optional  string  funcTypeName  = 7;
    optional  string  funcIconUrlDark  = 8;
}

message PayGenActionLocation {
    optional  string  province  = 1;
    optional  string  city  = 2;
    optional  double  latitude  = 3;
    optional  double  longitude  = 4;
    optional  uint64  locationTimestamp  = 5;
    optional  string  encryptLatitude  = 6;
    optional  string  encryptLongitude  = 7;
    optional  string  encryptUserinfo  = 8;
    optional  string  encryptKey  = 9;
}

message PayIBGActivityInfo {
    optional  string  url  = 1;
    optional  string  wording  = 2;
    optional  string  icon  = 3;
    optional  string  btnText  = 4;
    optional  string  linkUrl  = 5;
    optional  string  linkText  = 6;
    optional  string  type  = 7;
    optional  string  title  = 8;
    optional  uint64  activityId  = 9;
    optional  uint64  activityType  = 10;
    optional  string  smallTitle  = 11;
    optional  uint64  awardId  = 12;
    optional  uint32  sendRecordId  = 13;
    optional  uint32  userRecordId  = 14;
    optional  string  activityTinyappUsername  = 15;
    optional  string  activityTinyappPath  = 16;
    optional  uint64  activityMchId  = 17;
    optional  int32  activityTinyappVersion  = 18;
}

message PayIBGBizInfo {
    optional  string  appid  = 1;
    optional  uint32  recommendLevel  = 2;
    optional  string  recommendNote  = 3;
    optional  string  appNickname  = 4;
    optional  string  appUsername  = 5;
    optional  string  logoUrl  = 6;
}

message PayIBGCheckJsapiSignReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
}

message PayIBGCheckJsapiSignResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  errCode  = 2;
    optional  string  errMsg  = 3;
}

message PayIBGDiscountInfo {
    optional  string  discountDesc  = 1;
}

message PayIBGGenPrepayReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
    optional  string  contactAppUsername  = 9;
    optional  int32  channel  = 10;
    optional  string  extInfo  = 11;
}

message PayIBGGenPrepayResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  prepayId  = 2;
    optional  string  jumpUrl  = 3;
    optional  string  appSource  = 4;
    optional  int32  errCode  = 5;
    optional  string  errMsg  = 6;
    optional  string  jsInjectCode  = 7;
}

message PayIBGGetJumpUrlReq {
    required  BaseRequest  baseRequest  = 1;
    optional  int32  isShowTips  = 2;
}

message PayIBGGetJumpUrlResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    optional  string  jumpUrl  = 4;
}

message PayIBGGetOverseaWalletReq {
    required  BaseRequest  baseRequest  = 1;
    optional  int32  isShowTips  = 2;
    optional  string  language  = 3;
    optional  string  wxgVer  = 4;
    optional  string  osVer  = 5;
    optional  string  phoneType  = 6;
}

message PayIBGGetOverseaWalletResp {
    required  BaseResponse  baseresponse  = 1;
    required  int32  errcode  = 2;
    optional  string  errmsg  = 3;
    optional  WalletTitle  walletTitle  = 4;
    optional  WalletNotice  walletNotice  = 5;
    optional  WalletGrayArea  walletGrayArea  = 6;
    optional  WalletThreePointArea  walletThreepointArea  = 7;
    optional  uint32  walletRegion  = 8;
    optional  bool  canSwitchWallet  = 9;
    optional  string  walletRegionDesc  = 10;
    repeated  string  walletRegionDescArray  = 11;
    optional  WalletKeyInfo  walletKeyInfo  = 12;
}

message PayIBGGetUserOpenIdReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  string  appId  = 3;
}

message PayIBGGetUserOpenIdResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
}

message PayIBGJsGetTransactionReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  string  nonceStr  = 3;
    optional  string  timestamp  = 4;
    optional  string  package  = 5;
    optional  string  sign  = 6;
    optional  string  signType  = 7;
    optional  string  webViewUrl  = 8;
}

message PayIBGJsGetTransactionResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    optional  PayIBGTransaction  transactionDetail  = 4;
    optional  PayIBGBizInfo  bizInfo  = 5;
    repeated  PayIBGActivityInfo  activityInfo  = 6;
    optional  int32  isUseNewPage  = 7;
    repeated  ShowInfo  showInfo  = 8;
    optional  int32  isUseShowInfo  = 9;
}

message PayIBGQuickGetOverseaWalletReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  walletTpaCountryMask  = 2;
}

message PayIBGQuickGetOverseaWalletResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    optional  string  payWalletWxappH5Url  = 4;
    optional  uint32  cacheTime  = 5;
    optional  uint32  localStorageTime  = 232;
}

message PayIBGTransaction {
    optional  uint32  modifyTimestamp  = 1;
    optional  string  buyBankName  = 2;
    optional  string  prepayId  = 3;
    optional  uint32  totalFee  = 4;
    optional  string  feeType  = 5;
    optional  string  spName  = 6;
    optional  string  transactionId  = 7;
    optional  uint32  tradeStatus  = 8;
    optional  string  des  = 9;
    optional  string  payStatusName  = 10;
    optional  uint64  originalTotalFee  = 11;
    repeated  PayIBGDiscountInfo  discountArray  = 12;
}

message PayJsApiAuthenPageMsgInfo {
    optional  string  title  = 1;
    optional  string  paypwdDesc  = 2;
    optional  string  touchDesc  = 3;
    optional  string  appId  = 4;
    optional  string  busiName  = 5;
    optional  string  busiPurpose  = 6;
    optional  string  busiUsage  = 7;
    optional  string  faceidDesc  = 8;
}

message PayMenuLabel {
    optional  string  name  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  logoUrl  = 4;
    optional  uint32  jumpType  = 5;
    optional  string  jumpH5Url  = 6;
    optional  string  tinyappUsername  = 7;
    optional  string  tinyappPath  = 8;
    optional  RedDotStyle  redDotStyle  = 9;
}

message PayMenuSector {
    optional  string  title  = 1;
    repeated  PayMenuLabel  labels  = 2;
}

message PayPluginRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  timestamp  = 2;
}

message PayPluginResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  TablePageData  pluginPage  = 2;
}

message PayQueryUserRollRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  limit  = 2;
    required  uint32  offset  = 3;
    optional  string  extbuf  = 4;
    optional  ActionLocation  actionLocation  = 5;
}

message PayQueryUserRollResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  totalNum  = 2;
    required  uint32  recNum  = 3;
    repeated  PaySimpleUserRoll  userRollList  = 4;
    optional  string  extbuf  = 5;
}

message PaySimpleUserRoll {
    optional  string  transid  = 1;
    required  int32  totalFee  = 2;
    optional  string  goodsName  = 3;
    required  uint32  createTime  = 4;
    optional  string  tradeStateName  = 5;
    required  uint32  modifyTime  = 6;
    optional  string  feeType  = 7;
    optional  int32  statusType  = 8;
    optional  uint32  payType  = 9;
    optional  string  iapTotalFee  = 10;
    optional  string  appName  = 11;
    optional  string  appNickName  = 12;
    optional  string  appThumbUrl  = 13;
    optional  string  statusHead  = 14;
    optional  string  statusBody  = 15;
    optional  uint32  productCount  = 16;
    repeated  SimpleProduct  products  = 17;
}

message PaySubscribeInfo {
    optional  uint32  hasPaySubscribeEntry  = 1;
    optional  string  paySubscribeEntryUrl  = 2;
    optional  string  friendPayCountStr  = 3;
}

message PaySubscribeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appServiceUserName  = 2;
    optional  string  transactionId  = 3;
    optional  bytes  reqKey  = 4;
    optional  int32  payScene  = 5;
    optional  int32  channel  = 6;
    optional  int32  subscribeLevel  = 7;
    optional  ActionLocation  actionLocation  = 8;
}

message PaySubscribeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message PayWay {
    optional  string  showWording  = 1;
    optional  string  wordColor  = 2;
    optional  string  bankType  = 3;
    optional  string  bindCardSeqno  = 4;
    optional  string  cardSuffix  = 5;
}

message PaymentSelectPageData {
    optional  ImageViewData  backImage  = 1;
    optional  TextViewData  title  = 2;
    optional  TextViewData  subTitle  = 3;
    repeated  CardRecordViewData  card  = 4;
    optional  NewCardItemViewData  newCard  = 5;
}

message PersonalDesigner {
    required  uint32  designerUin  = 1;
    optional  string  name  = 2;
    optional  string  headUrl  = 3;
}

message PfmTestInfo {
    optional  uint32  sceneType  = 1;
    optional  bytes  checkData  = 2;
}

message PhoneNumItem {
    optional  string  phoneNum  = 1;
}

message PhoneNumListInfo {
    optional  uint32  count  = 1;
    repeated  PhoneNumItem  phoneNumList  = 2;
}

message PlanIndexReq {
    required  BaseRequest  baseRequest  = 1;
}

message PlanIndexResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    repeated  PlanIndexResp_PlanItem  planList  = 4;
    optional  uint64  limitCnt  = 5;
    optional  string  indexDesc  = 6;
    optional  PlanIndexResp_Banner  banner  = 7;
    optional  string  overPlanlimitDesc  = 8;
    optional  string  productDesc  = 9;
    optional  int32  redirectPage  = 10;
}

message PlanIndexResp_Banner {
    optional  string  title  = 1;
    optional  string  url  = 2;
}

message PlanIndexResp_MngPlanItem {
    optional  bool  isMngGrey  = 1;
    optional  string  mngGreyTips  = 2;
    repeated  uint32  mngTypeList  = 3;
}

message PlanIndexResp_MoreRecords {
    optional  string  title  = 1;
    optional  string  url  = 2;
}

message PlanIndexResp_PlanItem {
    optional  uint32  day  = 1;
    optional  uint64  amount  = 2;
    optional  string  bankType  = 3;
    optional  string  cardTail  = 4;
    optional  string  bindSerialNo  = 5;
    optional  string  transDst  = 6;
    optional  PlanIndexResp_TransTipsItem  transTips  = 7;
    optional  PlanIndexResp_MoreRecords  records  = 8;
    optional  PlanIndexResp_MngPlanItem  mngPlan  = 9;
    optional  uint32  usrPlanId  = 10;
    optional  uint32  state  = 11;
    optional  string  bankName  = 12;
    optional  string  bankLogo  = 13;
    optional  string  cardCategoryName  = 14;
}

message PlanIndexResp_TransTipsItem {
    optional  string  transDesc  = 1;
    optional  string  color  = 2;
}

message PluginInstall {
    required  uint32  pluginFlag  = 1;
    required  uint32  isUnInstall  = 2;
}

message PluginKey {
    optional  string  key  = 1;
    optional  uint32  id  = 2;
}

message PluginKeyList {
    required  uint32  count  = 1;
    repeated  PluginKey  list  = 2;
}

message PluginSwitchInfo {
    optional  int32  pluginSwitchId  = 1;
    optional  bool  switchValue  = 2;
}

message PluginSwitchInfoList {
    repeated  PluginSwitchInfo  list  = 1;
}

message PoiCtrlInfo {
    optional  string  poiId  = 1;
    optional  string  country  = 2;
    optional  string  city  = 3;
    optional  string  poiName  = 4;
    optional  float  latitude  = 5;
    optional  float  longitude  = 6;
    optional  string  poiQuery  = 7;
    optional  uint64  snsId  = 8;
}

message PoiLocation {
    required  float  longitude  = 1;
    required  float  latitude  = 2;
    optional  int32  precision  = 3;
    optional  string  macAddr  = 4;
    optional  string  cellId  = 5;
    optional  int32  gpssource  = 6;
    optional  uint32  distance  = 7;
}

message PoiTopicSubTitle {
    optional  string  titleName  = 1;
}

message PopItem {
    optional  string  errorWording  = 1;
    optional  string  cancelButtonWording  = 2;
    optional  string  confirmButtonWording  = 3;
    optional  string  directUrl  = 4;
    optional  uint32  actionCode  = 5;
}

message PopUpJumpInfo {
    optional  string  wording  = 1;
    optional  uint32  action  = 2;
    optional  string  url  = 3;
    optional  string  username  = 4;
    optional  string  pagepath  = 5;
}

message PopUpWindowInfo {
    optional  string  popUpTitle  = 1;
    optional  string  popUpText  = 2;
    optional  string  popUpImageUrl  = 3;
    optional  string  popUpButtonText  = 4;
}

message PopUpWithHalfDialog {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  uint32  iconType  = 3;
    optional  ComonPromptInfo  content  = 4;
    optional  ButtomJumpInfo  firstButton  = 5;
    optional  ButtomJumpInfo  secondButton  = 6;
}

message PopUpsItem {
    optional  string  wording  = 1;
    optional  uint32  type  = 2;
    optional  string  jumpH5Url  = 3;
    optional  string  tinyappUsername  = 4;
    optional  string  tinyappPath  = 5;
    optional  string  cancelButtonWording  = 6;
    optional  string  confirmButtonWording  = 7;
}

message PopupInfo {
    optional  string  templateId  = 1;
    optional  uint32  templateType  = 2;
    optional  uint32  operType  = 3;
    optional  uint32  isShow  = 4;
    optional  uint32  chooseStatus  = 5;
    optional  uint32  isBan  = 6;
}

message PopupInfoList {
    repeated  PopupInfo  list  = 1;
    optional  uint32  showStyle  = 2;
}

message PopupItem {
    optional  string  mainTitleWording  = 1;
    optional  string  subtitleWording  = 2;
    repeated  TimeSpan  timeList  = 3;
}

message PopupUIData {
    optional  uint32  opType  = 1;
    optional  uint32  isAlways  = 2;
    repeated  SubscribeMsgUIItem  uiitem  = 3;
}

message Position {
    optional  uint32  left  = 1;
    optional  uint32  top  = 2;
    optional  uint32  right  = 3;
    optional  uint32  bottom  = 4;
    optional  Coordinate  leftTop  = 5;
    optional  Coordinate  rightTop  = 6;
    optional  Coordinate  rightBottom  = 7;
    optional  Coordinate  leftBottom  = 8;
    optional  uint32  type  = 100;
}

message PositionInfo {
    required  float  longitude  = 1;
    required  float  latitude  = 2;
    required  int32  precision  = 3;
    optional  string  macAddr  = 4;
    optional  string  cellId  = 5;
    required  int32  gpssource  = 6;
}

message PositionItem {
    required  double  latitude  = 1;
    required  double  longitude  = 2;
    required  double  heading  = 3;
}

message PostActionSheet {
    optional  string  title  = 1;
    optional  string  icon  = 2;
    optional  string  desc  = 3;
    optional  uint32  type  = 4;
    optional  string  value  = 5;
    optional  string  universalLink  = 6;
    optional  string  appstoreScheme  = 7;
    optional  string  androidUniversalLink  = 8;
    optional  string  androidAppstoreScheme  = 9;
    optional  string  androidPackage  = 10;
    optional  string  androidAppPublicKey  = 11;
}

message PostActionSheetList {
    repeated  PostActionSheet  sheets  = 1;
}

message PostInviteFriendsMsgReq {
    required  uint32  inviteFlags  = 1;
    optional  string  msgTitle  = 2;
    optional  string  msgContent  = 3;
    optional  TwitterInfo  twitterInfo  = 4;
    optional  string  inviteUrl  = 5;
}

message PostInviteFriendsMsgResp {
    required  BaseResponse  baseResponse  = 1;
}

message PostLiveMessageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  liveCookies  = 2;
    optional  uint32  msgType  = 3;
    optional  string  content  = 4;
    optional  uint64  liveId  = 5;
    optional  string  roomId  = 6;
    optional  string  cliMsgId  = 7;
}

message PostLiveMessageResponse {
    required  BaseResponse  baseResponse  = 1;
}

message PreAcceptGiftCardRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint32  bizUin  = 2;
    optional  string  orderId  = 3;
    optional  string  chatroomName  = 4;
}

message PreAcceptGiftCardResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  fromUserName  = 2;
    optional  string  fromUserHeadImgUrl  = 3;
    optional  uint32  status  = 4;
    optional  string  content  = 5;
    optional  string  buttonWording  = 6;
    optional  string  backgroundColor  = 7;
    optional  bool  ignore  = 8;
    optional  string  packageUrl  = 9;
    optional  string  buttonColor  = 10;
    optional  string  outOfCardWording  = 11;
    optional  string  seeOtherWording  = 12;
}

message PreAddPlanReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
    optional  uint32  usrPlanId  = 3;
}

message PreAddPlanResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  PreAddPlanResp_IncomeTipsItem  tips  = 4;
    optional  PreAddPlanResp_ProtocolItem  protocol  = 5;
    optional  string  defaultCardBindSerial  = 6;
    repeated  CgiBindQueryRecord  array  = 7;
    optional  bool  isHideBankCard  = 8;
    optional  uint32  usrPlanId  = 9;
    optional  string  dayQuota3Tips  = 10;
    optional  uint32  defaultTransDay  = 11;
    optional  uint64  defaultAmount  = 12;
    optional  string  productDesc  = 13;
    optional  string  marketingWording  = 14;
    optional  string  balanceWarningWording  = 15;
    optional  string  chooseTransTimeTitle  = 16;
    optional  string  chooseAmountTitle  = 17;
    repeated  PreAddPlanResp_RecommendedAmtItem  recommendedAmtList  = 18;
}

message PreAddPlanResp_IncomeTipsItem {
    optional  string  title  = 1;
    optional  string  rateOfReturn  = 2;
}

message PreAddPlanResp_ProtocolItem {
    optional  string  title  = 1;
    optional  string  url  = 2;
    optional  bool  isSilentCheck  = 3;
}

message PreAddPlanResp_RecommendedAmtItem {
    optional  uint64  recommendAmt  = 1;
}

message PreDownloadCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  SyncVersionSingleReqInfo  req  = 2;
    optional  bool  separate  = 3;
    optional  uint32  scene  = 4;
}

message PreDownloadCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  SyncVersionSingleRespInfo  resp  = 2;
    repeated  SyncVersionSingleRespInfo  listResp  = 3;
}

message PreDownloadInfo {
    optional  uint32  preDownloadPercent  = 1;
    optional  uint32  preDownloadNetType  = 2;
    optional  string  noPreDownloadRange  = 3;
}

message PreGetDownloadUrlRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  username  = 2;
    optional  string  appid  = 3;
    optional  uint32  oldAppVersion  = 4;
    optional  string  path  = 5;
    optional  uint32  supportedEncryptVersion  = 6;
    optional  bool  isSupportWithoutLib  = 7;
}

message PreGetDownloadUrlResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appid  = 2;
    optional  uint32  version  = 3;
    repeated  PackageUrlInfo  packageInfoList  = 4;
}

message PreRedeemFundReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  redeemFee  = 2;
    optional  uint32  redeemDest  = 3;
    optional  BankCardInfo  bankCardInfo  = 4;
    optional  uint32  accountType  = 5;
    optional  uint32  redeemType  = 6;
    optional  string  operateId  = 7;
    optional  string  traceInfo  = 100;
}

message PreRedeemFundRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  redeemListid  = 4;
    optional  string  traceInfo  = 100;
}

message PreSubmitOrderRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  productCount  = 2;
    repeated  SampleProduct  product  = 3;
    optional  uint32  fromScene  = 4;
}

message PreSubmitOrderResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  expressCount  = 2;
    repeated  Express  express  = 3;
    optional  string  lockId  = 4;
    optional  int32  retCode  = 5;
    optional  string  retMsg  = 6;
    repeated  ActionAttr  actionAttrs  = 7;
    optional  uint32  actionAttrCount  = 8;
}

message Preload {
    optional  uint32  layerid  = 1;
    optional  uint32  expid  = 2;
    optional  string  info  = 3;
}

message PrepareBindXmailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  defaultMailAddr  = 2;
}

message PrepareBindXmailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  loginCallbackUrl  = 2;
    optional  string  wxRegMailAddr  = 3;
    optional  string  wxLoginUrl  = 4;
    optional  string  wxHeadUrl  = 5;
}

message PrepareIncomeEncashRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  requestId  = 2;
    optional  uint64  amount  = 3;
    optional  string  reportSessionId  = 101;
}

message PrepareIncomeEncashResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  ctxBuff  = 2;
    optional  WxPayUserTokenParams  tokenParams  = 3;
    optional  InterceptPopUp  interceptInfo  = 100;
}

message PreparePurchaseRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
    optional  string  price  = 3;
    optional  string  currencyType  = 4;
    required  uint32  payType  = 5;
    optional  string  extInfo  = 7;
    optional  uint32  quantity  = 8;
}

message PreparePurchaseResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  billNo  = 2;
    optional  string  tradeToken4TenPay  = 3;
    optional  string  partner4TenPay  = 4;
    optional  string  sign4TenPay  = 5;
}

message PrepareWecoinConsumeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  requestId  = 2;
    optional  int32  businessId  = 3;
    optional  string  toUsername  = 4;
    optional  string  consumeProductId  = 5;
    optional  uint32  count  = 6;
    optional  bytes  extReq  = 7;
    optional  string  reportSessionId  = 101;
}

message PrepareWecoinConsumeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  ctxBuff  = 2;
    optional  InterceptPopUp  interceptInfo  = 100;
}

message PrepareWecoinRechargeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  requestId  = 2;
    optional  string  rechargeProductId  = 3;
    optional  uint32  agreementVersion  = 4;
    optional  uint32  scene  = 100;
    optional  string  reportSessionId  = 101;
}

message PrepareWecoinRechargeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  MidasSdkInfo  sdkInfo  = 2;
    optional  string  billNo  = 3;
    optional  string  urlParams  = 4;
    optional  string  saveValue  = 5;
    optional  InterceptPopUp  interceptInfo  = 100;
}

message PriceAndFavorViewData {
    optional  bool  isShowPrice  = 1;
    optional  SingleLineTextViewData  price  = 2;
    optional  SingleLineTextViewData  favor  = 3;
    optional  string  viewId  = 4;
}

message PrivacyPolicyChoiseRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  choise  = 2;
    optional  string  privacyPolicyCountry  = 3;
}

message PrivacyPolicyChoiseResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ProductPageInfo {
    optional  uint32  itemIndex  = 1;
    optional  uint64  recId  = 2;
    optional  uint64  sessionid  = 3;
}

message Production {
    required  uint32  skuCount  = 1;
    repeated  KVItem  skus  = 2;
    required  uint32  count  = 3;
    required  uint32  realPrice  = 4;
    optional  string  priceType  = 5;
    optional  string  pid  = 6;
    optional  string  safeUrl  = 7;
    optional  string  skuId  = 8;
    optional  uint32  type  = 9;
    optional  string  name  = 10;
    optional  string  thumbUrl  = 11;
    optional  uint32  subType  = 12;
    optional  uint32  scene  = 13;
    optional  string  preferentialPrice  = 14;
    optional  uint32  discountCount  = 15;
    repeated  Discount  discounts  = 16;
}

message ProfessionInfo {
    optional  int32  professionType  = 1;
    optional  string  professionName  = 2;
}

message ProfessionInfoList {
    repeated  ProfessionInfo  professionList  = 1;
}

message Profile {
    required  bool  showProfile  = 1;
    optional  string  message  = 2;
    optional  string  webUrl  = 3;
}

message ProfilePreloadInfo {
    optional  uint32  preloadMaxCount  = 1;
}

message PromptButton {
    optional  string  wording  = 1;
    optional  string  url  = 2;
    optional  string  urlWording  = 3;
    optional  uint32  checkStatus  = 4;
}

message PromptInfo {
    optional  string  promptText  = 1;
    optional  string  jumpText  = 2;
    optional  string  jumpUrl  = 3;
}

message ProofImgItem {
    required  string  fileId  = 1;
    required  string  aesKey  = 2;
    required  uint32  fileLength  = 3;
}

message ProofItem {
    required  uint64  newMsgId  = 1;
    optional  string  content  = 2;
    required  string  sender  = 3;
    optional  uint32  msgType  = 4;
    optional  uint32  msgTime  = 5;
}

message PstnAddr {
    required  string  ip  = 1;
    required  int32  port  = 2;
}

message PstnCancelInviteRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  roomId  = 2;
    required  uint64  roomKey  = 3;
    optional  string  toUserName  = 4;
    required  uint64  timestamp  = 5;
    required  uint32  inviteId  = 6;
    optional  string  toUserPhoneNum  = 7;
    optional  uint64  callSeq  = 8;
}

message PstnCancelInviteResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  roomId  = 2;
    required  uint64  roomKey  = 3;
}

message PstnCheckNumberRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  pureNumber  = 2;
    optional  string  clientCountry  = 3;
    optional  string  lastCountry  = 4;
    optional  string  simCountry  = 5;
    optional  string  osCountry  = 6;
    optional  uint32  dialScene  = 7;
}

message PstnCheckNumberResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  pureNumber  = 2;
    optional  string  countryCode  = 3;
    optional  uint32  result  = 4;
}

message PstnHeartBeatRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  roomId  = 2;
    required  uint64  roomKey  = 3;
    required  uint64  timestamp  = 4;
    optional  uint64  callSeq  = 5;
}

message PstnHeartBeatResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
}

message PstnInviteRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUserName  = 2;
    optional  string  toUserPhoneNum  = 3;
    required  int32  netType  = 4;
    required  uint64  timestamp  = 5;
    required  uint32  inviteId  = 6;
    optional  string  toUserName  = 7;
    optional  uint32  sipMedia  = 8;
    optional  uint32  dialScene  = 9;
    optional  uint32  countryType  = 10;
}

message PstnInviteResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  roomId  = 2;
    required  uint64  roomKey  = 3;
    required  int32  roomMemberId  = 4;
    repeated  PstnAddr  addrList  = 5;
    required  int32  pstnSyncInterval  = 6;
    required  int32  checkPeerCnt  = 7;
    required  int32  checkPeerInterval  = 8;
    optional  uint64  callSeq  = 9;
    optional  uint32  protoEncryptLength  = 10;
    optional  bytes  clientHeadSigns  = 11;
    optional  uint32  nextInvite  = 12;
    optional  uint32  errLevel  = 13;
    optional  string  errTitle  = 14;
    optional  int32  encryptStrategy  = 15;
    repeated  PstnAddr  addrListTcp  = 16;
    optional  int32  switchTcpPktCnt  = 17;
    optional  string  retPhoneNumber  = 18;
    optional  bytes  encryptKeyBuf  = 19;
    optional  uint32  callFlag  = 20;
}

message PstnNotify {
    required  uint32  roomId  = 1;
    required  uint64  roomKey  = 2;
    repeated  PstnUserStatus  userStatusList  = 3;
    optional  uint32  dtmfPayloadType  = 4;
}

message PstnRedirectRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  roomId  = 2;
    optional  uint64  roomKey  = 3;
    optional  uint64  callSeq  = 4;
}

message PstnRedirectResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  roomId  = 2;
    optional  uint64  roomKey  = 3;
    repeated  PstnAddr  addrList  = 4;
    repeated  PstnAddr  addrListTcp  = 5;
}

message PstnReportRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinString_t  clientReport  = 2;
    required  SKBuiltinString_t  channelReport  = 3;
    required  SKBuiltinString_t  engineReport  = 4;
    optional  uint32  roomId  = 5;
    optional  uint64  callSeq  = 6;
    optional  uint32  gotAnswer  = 7;
}

message PstnReportResponse {
    required  BaseResponse  baseResponse  = 1;
}

message PstnShutDownRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  fromUserName  = 2;
    required  uint32  roomId  = 3;
    required  uint64  roomKey  = 4;
    required  uint64  timestamp  = 5;
    optional  uint64  callSeq  = 6;
    optional  uint32  status  = 7;
}

message PstnShutDownResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  roomId  = 2;
    required  uint64  roomKey  = 3;
}

message PstnSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  fromUsername  = 2;
    required  uint32  roomId  = 3;
    required  uint64  roomKey  = 4;
    required  uint64  timestamp  = 5;
    required  uint32  calledStatusSyncKey  = 6;
    optional  uint64  callSeq  = 7;
    optional  uint32  dataFlag  = 8;
}

message PstnSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  roomId  = 3;
    required  uint64  roomKey  = 4;
    required  uint32  calledStatus  = 5;
    required  uint32  calledStatusSyncKey  = 6;
    optional  uint32  dtmfPayloadType  = 7;
    optional  uint32  memberId  = 8;
    optional  uint32  errCode  = 9;
    optional  string  errMsg  = 10;
    optional  uint32  errLevel  = 11;
    optional  string  errTitle  = 12;
}

message PstnUserStatus {
    required  uint32  userStatus  = 1;
    required  uint32  userStatusKey  = 2;
    required  uint32  memberId  = 3;
    optional  uint32  errCode  = 4;
    optional  string  errMsg  = 5;
    optional  uint32  errLevel  = 6;
    optional  string  errTitle  = 7;
}

message PubKeyInfo {
    required  int32  nid  = 1;
    required  SKBuiltinBuffer_t  key  = 2;
}

message PublicLibUpdateInfo {
    optional  bool  needUpdate  = 1;
    optional  string  url  = 2;
    optional  string  md5  = 3;
    optional  uint32  version  = 4;
    optional  uint32  forceUpdate  = 5;
    optional  string  patchUrl  = 6;
}

message PublishUGCToGameCenterRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  source  = 2;
    repeated  PublishUGCToGameCenterRequest_MediaInfo  mediaList  = 3;
    optional  string  businessData  = 4;
    optional  string  taskId  = 5;
}

message PublishUGCToGameCenterRequest_BusinessInfo {
    optional  string  title  = 1;
    optional  uint32  videoWidth  = 2;
    optional  uint32  videoHeight  = 3;
    optional  uint32  videoDuration  = 4;
    optional  string  gameAppid  = 5;
    repeated  string  groupOpenidList  = 6;
    optional  string  battleId  = 7;
    optional  PublishUGCToGameCenterRequest_VideoInfo  videoInfo  = 8;
    repeated  string  picList  = 9;
    repeated  PublishUGCToGameCenterRequest_PictureMeta  picMetaList  = 10;
    optional  uint32  controlFlag  = 11;
    repeated  string  gameOpenidList  = 12;
    optional  uint32  testFlag  = 13;
    optional  string  originalVid  = 14;
}

message PublishUGCToGameCenterRequest_MediaInfo {
    optional  int32  mediaType  = 1;
    optional  string  mediaUrl  = 2;
    optional  string  thumbPicUrl  = 3;
    optional  uint32  width  = 4;
    optional  uint32  height  = 5;
    optional  bool  isGif  = 6;
    optional  uint32  duration  = 7;
    optional  int64  size  = 8;
    optional  uint32  editFlag  = 9;
}

message PublishUGCToGameCenterRequest_PictureMeta {
    optional  uint32  height  = 1;
    optional  uint32  width  = 2;
    optional  bool  isGif  = 3;
}

message PublishUGCToGameCenterRequest_VideoInfo {
    optional  string  vid  = 1;
    optional  string  snapshot  = 2;
    optional  string  playUrl  = 3;
}

message PublishUGCToGameCenterResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  ret  = 2;
    optional  string  errMsg  = 3;
    optional  string  jsonData  = 4;
    optional  uint32  topicId  = 5;
    optional  uint64  videoId  = 6;
}

message PurchaseFundReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fundCode  = 2;
    optional  uint32  purchaseFee  = 3;
    optional  uint32  accountType  = 4;
    optional  string  spid  = 5;
    optional  string  operateId  = 7;
    optional  uint32  entranceType  = 8;
    optional  string  bankType  = 9;
    optional  string  bankSerial  = 10;
    optional  uint32  supportCrossPlatformCashier  = 11;
    optional  uint32  supportJointCashier  = 12;
    optional  string  traceInfo  = 100;
}

message PurchaseFundRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  prepayid  = 4;
    optional  string  outTradeNo  = 5;
    optional  int32  payScene  = 6;
    optional  uint32  cashierType  = 7;
    optional  string  traceInfo  = 100;
}

message PushLoginURLRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  string  autoAuthTicket  = 3;
    optional  string  clientId  = 4;
    required  SKBuiltinBuffer_t  randomEncryKey  = 5;
    required  uint32  opcode  = 6;
    optional  string  deviceName  = 7;
    optional  SKBuiltinBuffer_t  autoAuthKey  = 8;
    optional  string  hardwareExtra  = 9;
    optional  SKBuiltinBuffer_t  msgContextPubKey  = 10;
}

message PushLoginURLResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  uuid  = 2;
    required  SKBuiltinBuffer_t  notifyKey  = 3;
    required  uint32  checkTime  = 4;
    required  uint32  expiredTime  = 5;
    optional  string  blueToothBroadCastUuid  = 6;
    optional  SKBuiltinBuffer_t  blueToothBroadCastContent  = 7;
}

message PushNewTipsReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  tipsId  = 2;
    optional  uint32  tipsVersion  = 3;
    optional  string  key  = 4;
    optional  string  uniqueId  = 5;
}

message PushNewTipsResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  isReject  = 2;
}

message PushWxPluginStatInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  statType  = 2;
    optional  uint64  wwCorpid  = 3;
    optional  uint64  appid  = 4;
    optional  uint64  vid  = 5;
    optional  uint32  wxuin  = 6;
    optional  uint32  scene  = 7;
    optional  uint32  operation  = 8;
    optional  uint64  flag  = 9;
    optional  uint64  reportTime  = 10;
    optional  uint32  platform  = 11;
    optional  string  osVer  = 12;
}

message PushWxPluginStatInfoResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
}

message QQFriendInGroup {
    required  uint32  qquin  = 1;
    optional  string  userName  = 2;
    optional  string  nickName  = 3;
    optional  string  qqnickName  = 4;
    required  uint32  weixinStatus  = 5;
    optional  string  qqremarkName  = 6;
    optional  int32  sex  = 7;
    optional  string  province  = 8;
    optional  string  city  = 9;
    optional  string  signature  = 10;
    optional  uint32  personalCard  = 11;
    optional  string  alias  = 12;
    optional  uint32  albumFlag  = 13;
    optional  uint32  albumStyle  = 14;
    optional  string  albumBgimgId  = 15;
    optional  SnsUserInfo  snsUserInfo  = 16;
    optional  string  country  = 17;
    optional  string  myBrandList  = 18;
    optional  CustomizedInfo  customizedInfo  = 19;
    optional  string  bigHeadImgUrl  = 20;
    optional  string  smallHeadImgUrl  = 21;
    optional  string  antispamTicket  = 22;
}

message QQFriendList {
    required  uint32  groupId  = 1;
    required  uint32  count  = 2;
    repeated  QQFriendInGroup  qqfriends  = 3;
}

message QQGroup {
    required  uint32  groupId  = 1;
    optional  string  groupName  = 2;
    optional  string  md5  = 3;
    required  uint32  memberNum  = 4;
    required  uint32  weixinNum  = 5;
}

message QQGroupList {
    required  uint32  count  = 1;
    repeated  QQGroup  qqgroups  = 2;
}

message QRActionInfo {
    optional  uint32  actionType  = 1;
    optional  HalfPage  halfPageInfo  = 2;
    optional  CoverInfo  coverInfo  = 3;
    optional  BottomCell  bottomCellInfo  = 4;
}

message QRButtonInfo {
    optional  string  wording  = 1;
    optional  uint32  type  = 2;
    optional  string  jumpUrl  = 3;
    optional  MiniProgramInfo  jumpMiniprogram  = 4;
    optional  CoverInfo  coverInfo  = 5;
}

message QRConnectAuthorizeConfirmReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  oauthUrl  = 2;
    optional  uint32  opt  = 3;
    repeated  string  scope  = 4;
    optional  uint32  avatarId  = 5;
}

message QRConnectAuthorizeConfirmResp {
    required  BaseResponse  baseResponse  = 1;
}

message QRConnectAuthorizeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  oauthUrl  = 2;
}

message QRConnectAuthorizeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  isReturnH5  = 2;
    repeated  OauthScopeInfo  scopeList  = 3;
    optional  string  appid  = 4;
    optional  string  appname  = 5;
    optional  string  appiconUrl  = 6;
    repeated  OauthAvatarInfo  avatarList  = 7;
    optional  bool  isBanModifyAvatar  = 8;
    optional  uint32  avatarLimit  = 9;
    optional  uint32  defaultAvatarId  = 10;
    optional  string  defaultHeadimgUrl  = 11;
    optional  string  defaultHeadimgFileid  = 12;
}

message QrCodeData {
    optional  string  codeId  = 1;
    optional  string  data  = 2;
}

message QrCodeItem {
    optional  string  cardId  = 1;
    optional  uint32  lowerBound  = 2;
    optional  bool  needInsertShowTimestamp  = 3;
    optional  string  showTimestampEncryptKey  = 4;
    optional  uint32  expireTimeInterval  = 5;
    optional  uint32  showExpireInterval  = 6;
    repeated  QrCodeData  qrCodeDataList  = 7;
}

message QryAutoPlanOrderListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  usrPlanId  = 2;
    optional  uint64  offset  = 3;
    optional  uint64  limit  = 4;
}

message QryAutoPlanOrderListResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  succWithholdStatisticsWording  = 4;
    repeated  QryAutoPlanOrderListResp_PlanOrderInfo  planOrderList  = 5;
}

message QryAutoPlanOrderListResp_PlanOrderInfo {
    optional  string  date  = 1;
    optional  uint64  amount  = 2;
    optional  uint32  state  = 3;
    optional  string  wording  = 4;
}

message QryBankList4BindReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ecardType  = 2;
    optional  uint32  openScene  = 3;
}

message QryBankList4BindRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  bindCardDesc  = 4;
    repeated  BankInfoItem  banklist  = 5;
    optional  PopItem  guideInfo  = 6;
    optional  string  trueName  = 7;
}

message QryCancelECardDescReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  busScene  = 2;
}

message QryCancelECardDescRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  pageTitle  = 4;
    optional  string  logoUrl  = 5;
    optional  string  cancelTitle  = 6;
    optional  CancelDescItem  cancelDescItem  = 7;
    optional  string  cancelTips  = 8;
    optional  string  bindSerial  = 9;
    optional  string  bankType  = 10;
    optional  string  cancelSuccDesc  = 11;
    optional  TradeDetailItem  tradeDetailItem  = 12;
}

message QryHoneyPayCardDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardNo  = 2;
}

message QryHoneyPayCardDetailResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  payerUsername  = 4;
    optional  uint64  remainCreditLine  = 5;
    optional  uint64  creditLine  = 6;
    optional  RightCorner  rightCorner  = 7;
    optional  TokeMess  tokeMess  = 8;
    optional  string  cardTypeName  = 9;
    optional  uint32  cardType  = 10;
    optional  string  icon  = 11;
}

message QryHoneyPayerDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardNo  = 2;
}

message QryHoneyPayerDetailResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  HoneyPayerDetail  detail  = 4;
    repeated  QryHoneyPayerDetailResp_PayCreditLine  record  = 5;
    optional  uint64  minCreditLine  = 6;
    optional  uint64  maxCreditLine  = 7;
    optional  RightCorner  rightCorner  = 8;
    optional  C2CMsgNode  c2Cmsg  = 9;
    optional  TokeMess  tokeMess  = 10;
    optional  MoreTransRecord  moreRecords  = 11;
}

message QryHoneyPayerDetailResp_PayCreditLine {
    optional  string  date  = 1;
    optional  uint64  totalAmt  = 2;
    optional  string  url  = 3;
}

message QryHoneyUserDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardNo  = 2;
}

message QryHoneyUserDetailResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  HoneyUserDetail  detail  = 4;
    optional  string  helpWord  = 5;
    optional  string  helpUrl  = 6;
    optional  C2CMsgNode  c2Cmsg  = 7;
}

message QryPurchaseResultReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  tradeNo  = 2;
    optional  string  transactionId  = 3;
    optional  uint32  purchaseFee  = 4;
    optional  uint32  accountType  = 5;
    optional  string  operateId  = 6;
    optional  uint32  entranceType  = 7;
    optional  uint32  payChannel  = 8;
    optional  string  traceInfo  = 100;
}

message QryPurchaseResultRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  purchaseState  = 4;
    optional  string  upgradeWording  = 5;
    optional  string  profitDate  = 6;
    optional  GuideCellItem  guideCell  = 7;
    optional  string  traceInfo  = 100;
}

message QrySettingReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  timeStamp  = 2;
    optional  string  traceInfo  = 100;
}

message QrySettingResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  mainTitleWording  = 4;
    optional  string  subtitleWording  = 5;
    optional  AccountStatusItem  accountStatusItem  = 6;
    optional  TimeItem  timeItem  = 7;
    optional  PopupItem  popupItem  = 8;
    optional  string  closeTipsWording  = 9;
    optional  string  traceInfo  = 100;
}

message QryUsrFundDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  timeStamp  = 2;
    optional  string  traceInfo  = 100;
}

message QryUsrFundDetailRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  balance  = 4;
    optional  string  gainRateDesc  = 5;
    optional  string  gainRateVal  = 6;
    optional  string  totalGainDesc  = 7;
    optional  uint32  totalGainVal  = 8;
    repeated  DocumentItem  infoNodeLst  = 9;
    optional  int32  isShowProtocol  = 10;
    optional  int32  isProtocolDefault  = 11;
    repeated  DocumentItem  protocolLst  = 12;
    optional  string  fundCode  = 13;
    optional  DocumentItem  bottomFaqDesc  = 14;
    repeated  DocumentItem  actionSheet  = 15;
    optional  DocumentItem  banner  = 16;
    optional  MiniAppsItem  miniapps  = 17;
    optional  string  blockUrl  = 18;
    optional  uint32  maxAmountPerRedeem  = 19;
    optional  string  invalidAmountHint  = 20;
    optional  string  profitDate  = 21;
    optional  uint32  buyValid  = 22;
    optional  bool  isHideCloseAccountBtn  = 23;
    optional  uint32  accountType  = 24;
    optional  string  spid  = 25;
    optional  string  gainRateUrl  = 26;
    optional  string  totalGainUrl  = 27;
    repeated  NewDocumentItem  newInfoNodeLst  = 28;
    optional  string  fundName  = 29;
    optional  string  closeLqtTips  = 30;
    optional  string  greyCloseLqtTips  = 31;
    optional  string  bottomWording  = 32;
    optional  NewDocumentItem  activityBtn  = 33;
    optional  LQTDetailButton  transferIn  = 34;
    optional  LQTDetailButton  transferOut  = 35;
    optional  string  yesterdayGainDesc  = 36;
    optional  string  financialInfoWording  = 37;
    optional  FinancialInfo  financialInfo  = 38;
    optional  bool  isShowPopups  = 39;
    optional  PopUpsItem  popupsItem  = 40;
    repeated  NewDocumentItem  newActionSheet  = 41;
    optional  string  realnameGuideInfo  = 42;
    optional  string  balanceUrl  = 43;
    optional  LctOperationInfo  lctOperationInfo  = 45;
    optional  NewDocumentItem  subtitleBanner  = 46;
    optional  string  traceInfo  = 100;
}

message QstrInfo {
    optional  string  ssid  = 1;
    optional  uint32  protocolType  = 2;
    optional  string  passWord  = 3;
}

message QueryDetailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  transferBillId  = 2;
    optional  bool  enterFromHistoryRecord  = 3;
    optional  uint32  historyRecordState  = 4;
}

message QueryDetailResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  state  = 4;
    optional  string  stateDesc  = 5;
    optional  uint32  amount  = 6;
    optional  uint32  commission  = 7;
    optional  string  payeeName  = 8;
    optional  string  payeeAccount  = 9;
    optional  string  explain  = 10;
    optional  string  paySuccTime  = 11;
    optional  string  estimatedWithdrawTime  = 12;
    optional  string  withdrawSuccTime  = 14;
    optional  string  tip  = 15;
}

message QueryHasPswdRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  scene  = 2;
}

message QueryHasPswdResponse {
    required  BaseResponse  baseResponse  = 1;
}

message QueryHistoryListReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  limit  = 2;
    optional  uint32  offset  = 3;
}

message QueryHistoryListRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    repeated  TransToBankHistoryItem  historyList  = 4;
}

message QueryPfInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  pfOrderNo  = 2;
    optional  string  appid  = 3;
}

message QueryPfInfoRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint64  amount  = 4;
    optional  string  receiverUsername  = 5;
    repeated  AALaunchItem  payerList  = 6;
    optional  string  picUrl  = 7;
    optional  string  remark  = 8;
    optional  SessionIdList  sessionidList  = 9;
    optional  string  picSign  = 10;
    optional  AAOperationInfo  operationInfo  = 11;
}

message QueryQRConnectUUIDReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uuid  = 2;
    optional  uint32  lastErrcode  = 3;
    optional  uint32  opt  = 4;
    optional  string  sdkToken  = 5;
}

message QueryQRConnectUUIDResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  errcode  = 2;
    optional  string  redirectUrl  = 3;
    optional  string  nickname  = 4;
    optional  string  wxToken  = 5;
    optional  string  userConfirmRedirectUrl  = 6;
    optional  string  userConfirmWording  = 7;
}

message QueryRedpktStateReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  redpktId  = 2;
}

message QueryRedpktStateResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  state  = 2;
    optional  uint64  expireTime  = 3;
}

message QueryResCtx {
    required  uint32  interval  = 1;
}

message QueryTransferListReq {
    required  BaseRequest  baseRequest  = 1;
}

message QueryTransferListRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    repeated  TransferRecord  othersTransferRecords  = 4;
    repeated  TransferRecord  myTransferRecords  = 5;
    optional  string  timingId  = 6;
}

message QueryWalletEntranceBalanceSwitchReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint64  operationTimestamp  = 2;
}

message QueryWalletEntranceBalanceSwitchResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  switchState  = 4;
    optional  WalletBalancePrivacyVO  pageData  = 5;
}

message QueryWeChatWalletRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  BaseEvent  baseEvent  = 2;
    optional  uint32  balanceVersion  = 3;
    optional  string  bindTypeCond  = 4;
    optional  string  province  = 5;
    optional  string  city  = 6;
    optional  int32  isDeviceOpenTouch  = 7;
    optional  int32  isRoot  = 8;
    optional  int32  isRealTime  = 9;
    optional  uint64  timestamp  = 10;
    optional  QueryWeChatWalletResponse  cacheResp  = 11;
}

message QueryWeChatWalletResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  TablePageData  walletPage  = 2;
    optional  RouteInfo  routeInfo  = 3;
    optional  WeChatWalletInfo  walletInfo  = 4;
    optional  uint64  timeStamp  = 5;
}

message QueryWxaHBDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  sendid  = 3;
    optional  int32  offset  = 4;
}

message QueryWxaHBDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint64  amount  = 2;
    optional  uint32  rcvdNum  = 3;
    optional  uint64  rcvdAmount  = 4;
    optional  uint32  totalNum  = 5;
    optional  uint64  totalAmount  = 6;
    optional  int32  hbType  = 9;
    repeated  HBReceiveUser  rcvdUserList  = 10;
    optional  string  wishing  = 11;
    optional  string  sendUsername  = 12;
    optional  string  sendNickname  = 13;
    optional  string  sendHeadimg  = 14;
    optional  int32  isSender  = 15;
    optional  string  headTitle  = 16;
    optional  int32  isContinue  = 17;
    optional  string  amountTitle  = 18;
    optional  int32  hbStatus  = 19;
    optional  int32  receiveStatus  = 20;
    optional  uint32  wxahbStatus  = 21;
    optional  string  errorwording  = 22;
}

message QueryWxaHBSendStateResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  state  = 2;
}

message QuestionBar {
    optional  uint32  layerid  = 1;
    optional  uint32  expid  = 2;
    optional  string  info  = 3;
}

message QuitBizChatReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  string  bizchatId  = 3;
}

message QuitBizChatResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
}

message QuitChatRoom {
    required  SKBuiltinString_t  chatRoomName  = 1;
    required  SKBuiltinString_t  userName  = 2;
}

message QyBaseResponse {
    optional  int32  ret  = 1;
    optional  string  errmsg  = 2;
}

message QyMsgStateNotifyReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  string  bizchatId  = 3;
    required  uint32  timeStamp  = 4;
}

message QyMsgStateNotifyResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
}

message RSACert {
    optional  string  keyN  = 1;
    optional  string  keyE  = 2;
}

message RadarSearchMember {
    optional  string  userName  = 1;
    required  uint32  distance  = 2;
    optional  string  nickName  = 3;
    optional  string  smallImgUrl  = 4;
    optional  string  encodeUserName  = 5;
    optional  string  antispamTicket  = 6;
}

message RadarSearchRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    required  float  longitude  = 3;
    required  float  latitude  = 4;
    required  int32  precision  = 5;
    optional  string  macAddr  = 6;
    optional  string  cellId  = 7;
    optional  int32  gpssource  = 8;
}

message RadarSearchResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  ticket  = 2;
    required  uint32  opCode  = 3;
    required  uint32  memberCount  = 4;
    repeated  RadarSearchMember  memberList  = 5;
}

message Rank {
    required  string  title  = 1;
    repeated  RankItem  rankList  = 2;
    optional  string  moreTitle  = 3;
    optional  string  moreUrl  = 4;
    optional  string  rankTitle  = 5;
    optional  string  myDesc  = 6;
}

message RankItem {
    required  string  userName  = 1;
    required  uint32  rank  = 2;
    required  uint64  score  = 3;
    optional  string  label  = 4;
    optional  bool  upedByMe  = 5;
    optional  int32  upedCount  = 6;
    optional  string  timeScoreDesc  = 7;
}

message RankSummary {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  topUserName  = 3;
    optional  string  jumpUrl  = 4;
    optional  uint32  actionId  = 5;
    optional  uint32  positionId  = 6;
    optional  string  externInfo  = 7;
}

message RcAppList {
    optional  string  appId  = 1;
    optional  string  appName  = 2;
    optional  string  appIconUrl  = 3;
    optional  string  appDesc  = 4;
    optional  string  appDownloadUrl  = 5;
    optional  string  appCoverUrl  = 6;
    optional  string  appDevInfo  = 7;
    required  int32  appScreenShotCount  = 8;
    repeated  SKBuiltinString_t  appScreenShotList  = 9;
    optional  string  appSnsDesc  = 10;
    optional  string  appSnapshotUrl  = 11;
    optional  string  appDetailDesc  = 12;
    optional  uint32  friendCount  = 13;
    optional  string  appType  = 14;
    optional  string  androidApkMd5  = 15;
    optional  string  androidPackageName  = 16;
    optional  string  appNamezhTw  = 17;
    optional  string  appNameEnUs  = 18;
    optional  string  googlePlayDownloadUrl  = 19;
    optional  string  appSuggestionIconUrl  = 20;
    optional  string  appSuggestionIntroUrl  = 21;
    optional  YYBStruct  syyb  = 22;
    optional  string  appLaunchScheme  = 23;
    optional  uint32  googlePlayDownloadFlag  = 24;
    optional  uint32  appInfoFlag  = 25;
}

message RcptInfoAddRequest {
    required  BaseRequest  baseRequest  = 1;
    required  RcptInfoNode  rcptinfo  = 2;
}

message RcptInfoAddResponse {
    required  RcptInfoList  rcptinfolist  = 1;
    required  BaseResponse  baseResponse  = 2;
}

message RcptInfoImportYiXunRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  qq  = 2;
    optional  SKBuiltinBuffer_t  a2Key  = 3;
    optional  SKBuiltinBuffer_t  newA2Key  = 4;
}

message RcptInfoImportYiXunResponse {
    required  RcptInfoList  rcptinfolist  = 1;
    required  int32  rcptinfoimportstatus  = 2;
    required  BaseResponse  baseResponse  = 3;
}

message RcptInfoList {
    required  uint32  count  = 1;
    repeated  RcptInfoNode  rcptinfolist  = 2;
    required  uint32  timestamp  = 3;
}

message RcptInfoNode {
    optional  uint32  id  = 1;
    optional  SKBuiltinString_t  country  = 2;
    required  SKBuiltinString_t  province  = 3;
    required  SKBuiltinString_t  city  = 4;
    required  SKBuiltinString_t  district  = 5;
    required  SKBuiltinString_t  zipcode  = 6;
    required  SKBuiltinString_t  detail  = 7;
    required  SKBuiltinString_t  name  = 8;
    required  SKBuiltinString_t  phone  = 9;
    optional  SKBuiltinString_t  nationalcodeGbt2260  = 10;
}

message RcptInfoQueryRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  timestamp  = 2;
    optional  string  webviewurl  = 3;
    optional  string  appid  = 4;
    optional  uint32  scene  = 5;
}

message RcptInfoQueryResponse {
    required  RcptInfoList  rcptinfolist  = 1;
    required  uint32  islatest  = 2;
    required  BaseResponse  baseResponse  = 3;
    optional  string  appusername  = 4;
    optional  uint32  isauthority  = 5;
    optional  string  appnickname  = 6;
}

message RcptInfoRemoveRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  id  = 2;
}

message RcptInfoRemoveResponse {
    required  uint32  id  = 1;
    required  RcptInfoList  rcptinfolist  = 2;
    required  BaseResponse  baseResponse  = 3;
}

message RcptInfoTouchRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  id  = 2;
}

message RcptInfoTouchResponse {
    required  RcptInfoList  rcptinfolist  = 1;
    required  BaseResponse  baseResponse  = 2;
}

message RcptInfoUpdateRequest {
    required  BaseRequest  baseRequest  = 1;
    required  RcptInfoNode  rcptinfo  = 2;
}

message RcptInfoUpdateResponse {
    required  RcptInfoList  rcptinfolist  = 1;
    required  BaseResponse  baseResponse  = 2;
}

message ReadItLaterResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message RealNameAuthInfo {
    optional  string  appid  = 1;
    repeated  uint32  categoryId  = 2;
    optional  int32  authType  = 3;
    optional  string  applyInfo  = 4;
    optional  string  protocolUrl  = 5;
    optional  uint32  status  = 100;
}

message RealNameInfo {
    optional  uint32  guideFlag  = 1;
    optional  string  guideWording  = 2;
    optional  string  leftButtonWording  = 3;
    optional  string  rightButtonWording  = 4;
    optional  string  uploadCreditUrl  = 5;
    optional  string  schemaUrl  = 6;
}

message RealNameNewWordingSection {
    optional  CreditType  cretype  = 1;
    optional  bool  needProfessionName  = 2;
    optional  bool  needAddress  = 3;
    optional  bool  needCreExpireDate  = 4;
    optional  bool  needCreidRenewal  = 5;
    optional  bool  needBirthDate  = 6;
    optional  bool  needNationality  = 7;
    optional  bool  needCreEffectDate  = 8;
    optional  bool  needPhoneNo  = 9;
    optional  bool  needSex  = 10;
}

message RealNameSendSmsReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  mobileNo  = 2;
    optional  string  mobileArea  = 3;
    optional  uint32  isRetry  = 4;
    optional  string  reqKey  = 5;
}

message RealNameSendSmsResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message RealNameVerifySmsReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqKey  = 2;
    optional  string  mobileNo  = 3;
    optional  string  mobileArea  = 4;
    optional  string  verifyCode  = 5;
}

message RealNameVerifySmsResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message RealTimeKVReportReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  deviceModel  = 2;
    optional  string  deviceBrand  = 3;
    optional  string  osName  = 4;
    optional  string  osVersion  = 5;
    optional  string  languageVer  = 6;
    required  uint32  logId  = 7;
    optional  string  value  = 8;
}

message RealTimeKVReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message RealTimeWordInfo {
    optional  uint32  version  = 1;
    optional  WordMatchConfig  config  = 2;
    optional  WordList  whiteList  = 3;
    optional  WordList  blackList  = 4;
}

message RealnameGuideInfo {
    optional  string  title  = 1;
    optional  string  subtitle  = 2;
    repeated  string  reason  = 3;
    optional  string  uploadWording  = 4;
    optional  string  uploadUrl  = 5;
    optional  uint32  showTimesPerDay  = 6;
    optional  bool  isShowProtocol  = 7;
    optional  string  leftProtocolWording  = 8;
    optional  string  rightProtocolWording  = 9;
    optional  string  protocolUrl  = 10;
}

message RecObject {
    required  SnsRecommendObject  snsRecommendObject  = 1;
    optional  SKBuiltinString_t  recommendInfo  = 2;
}

message RecPluginMsg {
    optional  string  conversationTips  = 1;
    optional  string  redPointMsgId  = 2;
    optional  uint32  redPointExpireTime  = 3;
    optional  uint32  needCacheResult  = 4;
}

message Receipt {
    required  uint32  isNeed  = 1;
    optional  string  detail  = 2;
}

message ReceiveWxaHBRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  sendid  = 3;
}

message ReceiveWxaHBResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  wxahbStatus  = 2;
    optional  string  wishing  = 3;
    optional  string  sendNickname  = 4;
    optional  string  sendHeadimg  = 5;
    optional  bytes  signature  = 6;
    optional  int32  hbStatus  = 7;
    optional  int32  receiveStatus  = 8;
    optional  int32  isSender  = 9;
    optional  int32  hbType  = 10;
    optional  string  tips  = 11;
    optional  string  errorwording  = 12;
    optional  string  sendUsername  = 13;
}

message RecentPlayCommText {
    optional  string  moduleTitle  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  picUrl  = 4;
    optional  uint32  picStyle  = 5;
    optional  bool  needCrown  = 6;
    optional  string  jumpUrl  = 7;
    optional  uint32  positionId  = 8;
    optional  string  externInfo  = 9;
    optional  string  bizId  = 10;
    optional  string  coverPicUrl  = 11;
}

message RecentPlayGameInfo {
    required  AppItem  appItem  = 1;
    optional  string  appUserDesc  = 2;
    repeated  RecentPlayGameInfo_SubItem  subList  = 3;
}

message RecentPlayGameInfo_SubItem {
    optional  uint32  type  = 1;
    optional  RecentPlayRecommendBanner  recommendBanner  = 2;
    optional  GiftCenter  giftCenter  = 3;
    optional  RecommendTopic  recommendTopic  = 4;
    optional  RankSummary  rankSummary  = 5;
    optional  RecentPlayCommText  commText  = 6;
}

message RecentPlayInfo {
    optional  string  moduleTitle  = 1;
    optional  RecentPlayInfo_LaunchPrivilege  launch  = 2;
    repeated  RecentPlayGameInfo  infoList  = 3;
    optional  RecentPlayInfo_RecentPlayMore  more  = 4;
}

message RecentPlayInfo_LaunchPrivilege {
    optional  string  title  = 1;
    optional  string  jumpUrl  = 2;
}

message RecentPlayInfo_RecentPlayMore {
    required  string  title  = 1;
    optional  string  jumpUrl  = 2;
}

message RecentPlayRecommendBanner {
    optional  RecentPlayRecommendBanner_BannerA  bannerA  = 1;
    optional  RecentPlayRecommendBanner_BannerB  bannerB  = 2;
}

message RecentPlayRecommendBanner_BannerA {
    optional  string  bigPicUrl  = 1;
    optional  string  jumpUrl  = 2;
    optional  uint32  positionId  = 3;
    optional  string  externInfo  = 4;
}

message RecentPlayRecommendBanner_BannerB {
    optional  string  moduleTitle  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  thumbImgUrl  = 4;
    optional  string  jumpUrl  = 5;
    optional  uint32  positionId  = 6;
    optional  string  externInfo  = 7;
}

message RecommendEmoji {
    optional  EmojiInfo  info  = 1;
    optional  string  meaning  = 2;
    optional  uint32  type  = 3;
    optional  string  tabWording  = 4;
    optional  uint32  emojiFrom  = 5;
}

message RecommendGetVideoUrlRequest {
    repeated  ContentId  contentId  = 1;
}

message RecommendGetVideoUrlResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  VideoUrlInfo  videoUrlInfo  = 2;
}

message RecommendGroup {
    required  SKBuiltinString_t  groupName  = 1;
    required  uint32  memCount  = 2;
    repeated  SearchOrRecommendItem  members  = 3;
}

message RecommendGroups {
    required  uint32  groupCount  = 1;
    repeated  RecommendGroup  groups  = 2;
}

message RecommendPanelEmojiRequest {
    optional  string  query  = 1;
    optional  string  chatId  = 2;
    optional  string  sessionId  = 3;
    optional  bytes  ctx  = 4;
    optional  bytes  pageBuff  = 5;
    optional  uint32  scene  = 6;
    optional  bytes  localEmoji  = 7;
}

message RecommendPanelEmojiResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  RecommendEmoji  emoji  = 2;
    optional  string  sessionId  = 3;
    optional  bytes  pageBuff  = 4;
}

message RecommendPoiItem {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  string  subTitle  = 3;
    optional  string  poiDesc  = 4;
    optional  string  poiLink  = 5;
    optional  string  signature  = 6;
    repeated  string  adIconUrlList  = 7;
}

message RecommendTopic {
    optional  string  moduleTitle  = 1;
    optional  string  topicId  = 2;
    optional  string  title  = 3;
    optional  string  desc  = 4;
    optional  string  thumbImgUrl  = 5;
    optional  string  jumpUrl  = 6;
    optional  uint32  positionId  = 7;
    optional  string  externInfo  = 8;
}

message RecommendWxa {
    optional  string  appid  = 1;
    optional  string  username  = 2;
    optional  string  nickname  = 3;
    optional  string  logo  = 4;
    optional  uint64  sessionId  = 5;
    optional  string  descInfo  = 6;
    optional  double  evaluateScore  = 7;
    repeated  RecommendWxa_CategoryInfo  cateList  = 16;
    optional  string  words  = 17;
    repeated  RecommendWxa_RichMediaInfo  richInfo  = 19;
}

message RecommendWxa_CategoryInfo {
    optional  uint32  cateId  = 1;
    optional  string  cateName  = 2;
}

message RecommendWxa_RichMediaInfo {
    optional  uint32  type  = 1;
    optional  RecommendWxa_RichMediaInfo_PicInfo  picInfo  = 2;
    optional  RecommendWxa_RichMediaInfo_VideoInfo  videoInfo  = 3;
}

message RecommendWxa_RichMediaInfo_PicInfo {
}

message RecommendWxa_RichMediaInfo_VideoInfo {
}

message RecommendedMusicFeedback {
    optional  uint32  musidSid  = 1;
    optional  uint32  behaviorType  = 2;
    optional  uint32  behaviorValue  = 3;
    optional  uint32  behaviorTimestamp  = 4;
}

message RecommendedMusicInfo {
    required  uint32  musicSid  = 1;
    required  float  emotionScore  = 2;
    required  float  tempoScore  = 3;
    required  string  musicUrl  = 4;
    repeated  string  colorList  = 5;
    optional  string  songName  = 6;
    repeated  string  singerName  = 7;
    repeated  RecommendedMusicLyricInfo  lyrics  = 8;
    optional  string  picUrl  = 9;
    optional  string  playUrl  = 10;
    repeated  HitInfo  hitInfo  = 11;
    optional  uint32  fid  = 12;
    optional  uint32  duration  = 13;
}

message RecommendedMusicLyricInfo {
    optional  uint32  startPlayTime  = 1;
    optional  string  lyricsContent  = 2;
}

message RecycleCard {
    optional  string  extraData  = 1;
    optional  uint64  clientmsgid  = 2;
    optional  uint32  flag  = 3;
    optional  string  reportData  = 4;
}

message RecycleCardReport {
    optional  string  extraData  = 1;
    optional  uint64  clientmsgid  = 2;
    optional  uint32  satus  = 3;
    optional  string  reportData  = 4;
}

message RecycleCardReportReq {
    optional  BaseRequest  baseRequest  = 1;
    repeated  RecycleCardReport  list  = 2;
}

message RecycleCardReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message RecycleCardReq {
    optional  BaseRequest  baseRequest  = 1;
    repeated  RecycleCard  list  = 2;
    optional  uint32  scene  = 3;
}

message RecycleCardResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  RecycleCard  list  = 2;
    optional  uint64  nextReqTime  = 3;
    optional  uint32  maxMsgCount  = 4;
}

message RedDot {
    optional  int32  type  = 1;
    optional  string  redDotId  = 2;
    optional  TextViewData  text  = 3;
}

message RedDotStyle {
    optional  string  type  = 1;
    optional  string  wording  = 2;
    optional  uint32  number  = 3;
}

message RedPacketPreviewMessage {
    optional  string  content  = 1;
    optional  string  aboutUrl  = 2;
    optional  string  authorId  = 3;
    optional  RedPacketStoryInfo  info  = 4;
}

message RedPacketStoryInfo {
    optional  string  title  = 1;
    optional  string  logoUrl  = 2;
    optional  string  logoMd5  = 3;
    optional  string  description  = 4;
    optional  string  corpName  = 9;
    repeated  RedPacketStoryInfo_StoryDetail  detailList  = 10;
    optional  uint32  actionType  = 11;
    optional  string  actionUrl  = 12;
    optional  string  actionAppUsername  = 13;
    optional  string  actionAppNickname  = 14;
    optional  string  packetId  = 15;
    optional  CoverInfoDetail  coverInfo  = 16;
    optional  string  actionButtonText  = 17;
    optional  uint32  actionEmotionDesignerUin  = 18;
}

message RedPacketStoryInfo_StoryDetail {
    optional  int32  mediaType  = 1;
    optional  string  mediaUrl  = 2;
    optional  string  mediaMd5  = 3;
    optional  uint32  height  = 4;
    optional  uint32  width  = 5;
    optional  string  mediaFuzzyThumbnailUrl  = 6;
    optional  string  mediaFuzzyThumbnailMd5  = 7;
}

message RedeemFundReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  redeemFee  = 2;
    optional  string  redeemListid  = 3;
    optional  string  payPasswdEnc  = 4;
    optional  uint32  accountType  = 5;
    optional  string  operateId  = 6;
    optional  string  traceInfo  = 100;
}

message RedeemFundRes {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bool  isRealtimeArrivial  = 4;
    optional  bool  isRedeemIntoPocket  = 5;
    optional  uint32  status  = 6;
    optional  string  wordingForStatus2  = 7;
    optional  string  preArriveTimeWording  = 8;
    optional  uint32  redeemFee  = 9;
    optional  string  bankName  = 10;
    optional  string  bankTail  = 11;
    optional  string  failureWording  = 12;
    optional  string  preArrivalTimeHeadline  = 13;
    optional  string  traceInfo  = 100;
}

message RedeemTypeList {
    optional  uint32  redeemType  = 1;
    optional  string  arriveTimeWording  = 2;
    optional  string  hintWording  = 3;
    optional  uint32  redeemFeeLimit  = 4;
}

message RedirectUrl {
    optional  uint32  type  = 1;
    optional  string  appid  = 2;
    optional  string  appVersion  = 3;
    optional  string  path  = 4;
    optional  string  buttonName  = 5;
}

message RefreshLiveMicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
    optional  string  liveMicId  = 4;
}

message RefreshLiveMicResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  LiveSdkInfo  liveSdkInfo  = 2;
}

message RefreshTrackRoomRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  trackRoomId  = 2;
    required  int32  type  = 3;
    required  UserPositionItem  userPosition  = 4;
    optional  uint32  timeStamp  = 5;
    optional  TrackPOIItem  userPoi  = 6;
}

message RefreshTrackRoomResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  UserPositionItem  positions  = 3;
    optional  string  retMsg  = 4;
    optional  uint32  refreshTime  = 5;
    optional  TrackPOIItem  roomPoi  = 6;
}

message RegApInfo {
    optional  string  ssid  = 1;
    optional  string  mac  = 2;
    optional  uint32  protocolType  = 3;
    optional  int32  signal  = 4;
    optional  string  passWord  = 5;
    optional  string  url  = 6;
}

message RegUserAttrInfo {
    optional  string  nickName  = 1;
    optional  string  pwdHash  = 2;
    optional  string  headImgMd5  = 3;
    optional  string  phoneNumber  = 4;
    optional  string  timeZone  = 5;
    optional  string  timeZoneName  = 6;
}

message RegisterFaceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  bioId  = 2;
    optional  string  cdnFileId  = 3;
    optional  string  cdnKey  = 4;
    optional  string  userTicket  = 5;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 6;
    optional  uint32  scene  = 7;
}

message RegisterFaceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  passTicket  = 2;
    optional  NetworkSectResp  netWork  = 3;
    optional  int32  detailRet  = 4;
}

message RegisterNewPatternLockRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  SKBuiltinBuffer_t  paytoken  = 2;
    optional  SKBuiltinBuffer_t  patternhash  = 3;
    optional  uint32  cmd  = 4;
}

message RegisterNewPatternLockResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  PatternLockBuffer  patternlockbuf  = 2;
}

message RegisterVoicePrintRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  step  = 2;
    required  uint32  voiceTicket  = 3;
    required  VoicePieceCtx  pieceData  = 4;
    required  uint32  resId  = 5;
}

message RegisterVoicePrintResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  resgisterRet  = 2;
    required  uint32  nextStep  = 3;
    required  VoicePieceCtx  nextPiece  = 4;
    required  uint32  voiceTicket  = 5;
}

message RelatedTopic {
    repeated  FinderTopicInfo  topicList  = 1;
}

message RelayConnInfo {
    optional  int32  connId  = 1;
    optional  string  localNicDeviceId  = 2;
    optional  string  remoteNicDeviceId  = 3;
    optional  int32  localNetType  = 4;
    optional  int32  remoteNetType  = 5;
    optional  int32  statInterval  = 6;
    optional  VoipAddrSet  relaySvr  = 7;
    optional  VoipAddrSet  relayTcpSvr  = 8;
    optional  int32  localNicType  = 9;
    optional  int32  remoteNicType  = 10;
}

message RelayConnSet {
    optional  int32  relayConnCnt  = 1;
    repeated  RelayConnInfo  relayConns  = 2;
}

message RelevantSearchResult {
    optional  string  title  = 1;
    repeated  RelevantSearchResult_ResultItem  items  = 2;
}

message RelevantSearchResult_ResultItem {
    optional  string  word  = 1;
    optional  uint32  opType  = 2;
    optional  string  jumpUrl  = 3;
}

message Remind {
    optional  string  remindId  = 1;
    optional  uint32  type  = 2;
    optional  uint32  time  = 3;
    optional  uint32  subType  = 4;
    optional  bytes  extInfo  = 5;
}

message RemindFriendsInfo {
    optional  uint32  adgroupId  = 1;
    optional  SKBuiltinBuffer_t  sourceInfo  = 2;
    optional  SKBuiltinBuffer_t  selfInfo  = 3;
    optional  SKBuiltinBuffer_t  paidInfo  = 4;
    optional  SKBuiltinBuffer_t  extraInfo  = 5;
    optional  uint64  adgroupId64  = 6;
}

message RemindWin {
    optional  string  wording  = 1;
    optional  JumpItem  rightButton  = 2;
}

message RemindWin3 {
    optional  string  wording  = 1;
    optional  JumpItem  button1  = 2;
    optional  JumpItem  button2  = 3;
}

message RemoveCardInRecentlyUsedListRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardId  = 2;
    optional  string  userCardId  = 3;
}

message RemoveCardInRecentlyUsedListResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message RemoveCouponRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userCardId  = 2;
}

message RemoveCouponResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message RemoveTrustedFriendsResp {
    required  BaseResponse  baseResponse  = 1;
}

message RemoveVirtualBankCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  cardId  = 2;
    optional  string  bankType  = 3;
    optional  ActionLocation  actionLocation  = 4;
}

message RemoveVirtualBankCardResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message RepeatUrl {
    optional  uint32  layerid  = 1;
    optional  uint32  expid  = 2;
    optional  string  info  = 3;
}

message RepeatUrlOperRequest {
    required  uint32  opertype  = 1;
    required  string  docid  = 2;
    required  uint64  objectid  = 3;
    optional  string  shareusername  = 4;
    optional  uint32  exposuretimes  = 5;
    optional  uint32  likenum  = 6;
    optional  uint32  commentnum  = 7;
    optional  uint32  haswords  = 8;
    optional  uint32  isshowmenu  = 9;
}

message RepeatUrlOperResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportBizListShowInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  BizListShowInfo  reportList  = 2;
    optional  uint32  enterPos  = 3;
    optional  uint32  exitPos  = 4;
    optional  uint32  sessionid  = 5;
    optional  uint64  enterTimestampMs  = 6;
}

message ReportBizListShowInfoResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportBrandSessionMsgInfo {
    optional  string  bizUserName  = 1;
    optional  uint64  mid  = 2;
    optional  uint32  idx  = 3;
    optional  bool  top  = 4;
    optional  bool  click  = 5;
    optional  uint32  ts  = 6;
    optional  uint32  rank  = 7;
    optional  bool  redDot  = 8;
}

message ReportBrandSessionRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  ReportBrandSessionMsgInfo  msgReport  = 5;
}

message ReportBrandSessionResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportDeviceInfo {
    optional  string  manufacturer  = 1;
    optional  uint32  device  = 2;
    optional  string  deviceModel  = 3;
    optional  string  deviceBrand  = 4;
    optional  uint32  screenWidth  = 5;
    optional  uint32  screenHeight  = 6;
    optional  string  osName  = 7;
    optional  string  osVersion  = 8;
    optional  string  languageVersion  = 9;
}

message ReportDynamicCardCodeActionReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  OperateAction  operateList  = 2;
}

message ReportDynamicCardCodeActionResp {
    optional  BaseResponse  baseResponse  = 1;
}

message ReportExptAppInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  opBeginMs  = 2;
    required  uint64  opEndMs  = 3;
    repeated  ExptAppReportItem  reportItems  = 4;
    required  ExptAppDeviceType  exptAppDeviceType  = 5;
}

message ReportExptAppInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  intervalSecond  = 2;
    optional  uint32  pullSecond  = 3;
    repeated  ExptAppItem  replaceExptList  = 4;
    repeated  uint32  deleteExptList  = 5;
}

message ReportHBReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  sendId  = 2;
    optional  string  uniqueId  = 3;
    optional  int32  reportType  = 4;
    optional  string  sendUserName  = 5;
    optional  string  recvUserName  = 6;
}

message ReportHBResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message ReportIdKeyReq {
    required  uint32  genstgver  = 1;
    required  uint32  specstgver  = 2;
    repeated  IdKeyDataPkg  datapkg  = 3;
    optional  bytes  encryptkey  = 4;
}

message ReportIdKeyResp {
    required  int32  ret  = 1;
    required  uint32  genstgver  = 2;
    required  uint32  clistgver  = 3;
    optional  StrategyTable  genstgtable  = 4;
    optional  StrategyTable  clistgtable  = 5;
    optional  uint32  datavalidtime  = 6;
    optional  uint32  banreporttime  = 7;
    optional  uint32  pollingtime  = 8;
}

message ReportImageInfo {
    required  string  fileId  = 1;
    required  string  aesKey  = 2;
    required  string  md5  = 3;
    required  string  originFileId  = 4;
    required  string  originAesKey  = 5;
    required  string  originMd5  = 6;
}

message ReportKvReq {
    required  uint32  genstgver  = 1;
    required  uint32  specstgver  = 2;
    required  uint32  uinstgver  = 3;
    repeated  KvDataPkg  datapkg  = 4;
    optional  bytes  encryptkey  = 5;
}

message ReportKvResp {
    required  int32  ret  = 1;
    required  uint32  genstgver  = 2;
    required  uint32  clistgver  = 3;
    required  uint32  uinstgver  = 4;
    optional  StrategyTable  genstgtable  = 5;
    optional  StrategyTable  clistgtable  = 6;
    optional  StrategyTable  uinstgtable  = 7;
    optional  uint32  datavalidtime  = 8;
    optional  uint32  banreporttime  = 9;
    optional  uint32  pollingtime  = 10;
}

message ReportLocationReq {
    required  BaseRequest  baseRequest  = 1;
    optional  double  longitude  = 2;
    optional  double  latitude  = 3;
    optional  uint32  reportScene  = 4;
    optional  string  cardTpId  = 5;
    optional  string  cardId  = 6;
}

message ReportLocationResp {
    required  BaseResponse  baseResponse  = 1;
}

message ReportLotionOrBluetoothInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  float  longitude  = 2;
    optional  float  latitude  = 3;
    optional  float  rssi  = 4;
    optional  bytes  customManuFacturerData  = 5;
    optional  string  cardId  = 6;
    optional  bool  hasTurnedOnBluetooth  = 7;
    optional  bool  authorizeLocation  = 8;
}

message ReportLotionOrBluetoothInfoResp {
    optional  BaseResponse  baseResponse  = 1;
}

message ReportMediaInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  type  = 2;
    optional  ReportImageInfo  imageInfo  = 3;
    optional  ReportVideoInfo  videoInfo  = 4;
    optional  string  text  = 5;
    repeated  string  emotionList  = 6;
}

message ReportMediaInfoResp {
    required  BaseResponse  baseResponse  = 1;
}

message ReportMusicRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  MusicInfo  currentMusicInfo  = 2;
    optional  string  reportList  = 3;
}

message ReportMusicResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportOpenWxaOrderReq {
    required  BaseRequest  baseRequest  = 1;
    optional  bool  destroyRedSpots  = 2;
}

message ReportOpenWxaOrderResp {
    required  BaseResponse  baseResponse  = 1;
}

message ReportPayResReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  transferBillId  = 2;
    optional  string  uniqueId  = 3;
    optional  uint32  unpayType  = 4;
}

message ReportPayResResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
}

message ReportRecommendWxaRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  sessionId  = 2;
    repeated  ReportRecommendWxaRequest_ExposureNode  exposureList  = 3;
    optional  ReportRecommendWxaRequest_ClickNode  clickNode  = 4;
    optional  uint32  actionScene  = 5;
    optional  uint32  stayTime  = 6;
    optional  ReportRecommendWxaRequest_ClientInfo  clientInfo  = 7;
}

message ReportRecommendWxaRequest_ClickNode {
    optional  string  username  = 1;
}

message ReportRecommendWxaRequest_ClientInfo {
    optional  string  netType  = 1;
    optional  double  longitude  = 2;
    optional  double  latitude  = 3;
}

message ReportRecommendWxaRequest_ExposureNode {
    optional  string  username  = 1;
    optional  uint32  count  = 2;
}

message ReportRecommendWxaResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportRecommendedMusicFeedbackRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  requestId  = 2;
    repeated  RecommendedMusicFeedback  feedbacks  = 3;
}

message ReportRecommendedMusicFeedbackResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportRequest {
    optional  uint32  scene  = 1;
    optional  string  searchId  = 2;
    optional  string  recommendId  = 3;
    optional  uint64  businessType  = 4;
    optional  string  docId  = 5;
    optional  uint32  docPos  = 6;
    optional  uint32  typePos  = 7;
    optional  uint32  isHomePage  = 8;
    optional  uint64  timestamp  = 9;
    optional  uint32  expand1  = 10;
    optional  string  suggestionId  = 11;
    optional  uint32  clickType  = 12;
    optional  string  expand2  = 13;
    optional  string  logString  = 14;
    optional  uint32  clickSource  = 15;
    optional  uint32  sceneActionType  = 16;
    optional  uint32  h5Version  = 17;
    optional  string  query  = 18;
    optional  uint32  resultType  = 19;
    optional  uint32  weAppH5Version  = 20;
    optional  bytes  jumpUrl  = 21;
    optional  string  sessionId  = 22;
    optional  uint32  itemType  = 23;
    optional  string  expand  = 24;
    optional  string  title  = 25;
    optional  string  bizName  = 26;
    optional  string  clickZone  = 27;
    optional  string  netType  = 28;
    optional  bytes  requestId  = 29;
    optional  uint32  channelid  = 30;
    optional  bytes  clickContent  = 31;
    optional  uint32  reqSubType  = 32;
    optional  uint32  resultSubType  = 33;
    optional  bytes  parentSearchId  = 34;
    optional  uint32  reqBusinessType  = 35;
    optional  bytes  boxId  = 36;
    optional  string  cdnHttpHead  = 37;
    optional  string  videoUrl  = 38;
    optional  string  byPass  = 39;
    optional  uint32  source  = 40;
}

message ReportResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message ReportSearchWxaRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  searchId  = 2;
    optional  bytes  searchBuf  = 3;
    optional  int32  scene  = 4;
    optional  uint32  exposure  = 5;
    optional  uint32  stayTime  = 6;
    optional  int32  click  = 7;
    optional  uint64  clickTimestamp  = 8;
    optional  uint32  pos  = 9;
    optional  string  appId  = 10;
    optional  uint64  sessionId  = 11;
}

message ReportSearchWxaResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportServerDataRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  ReportServerDataRequest_GameServerData  dataList  = 2;
}

message ReportServerDataRequest_GameServerData {
    required  string  appId  = 1;
    required  uint32  appVersion  = 2;
    required  uint32  appState  = 3;
    required  bytes  data  = 4;
    optional  string  compiledMd5  = 5;
    required  string  eventInfo  = 6;
}

message ReportServerDataResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportVideoInfo {
    required  string  fileId  = 1;
    required  string  aesKey  = 2;
    optional  string  md5  = 3;
    optional  string  newMd5  = 4;
    required  float  duration  = 5;
    required  string  thumbFileId  = 6;
    required  string  thumbAesKey  = 7;
    required  string  thumbMd5  = 8;
    optional  string  originMd5  = 9;
    optional  string  originNewMd5  = 10;
    required  string  originThumbFileId  = 11;
    required  string  originThumbAesKey  = 12;
    required  string  originThumbMd5  = 13;
    required  float  originDuration  = 14;
}

message ReportVoiceSendResultReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  voiceIdCount  = 2;
    repeated  SKBuiltinString_t  voiceIdList  = 3;
    optional  SKBuiltinString_t  voiceResult  = 4;
    optional  SKBuiltinString_t  vadVersion  = 5;
    optional  int32  scene  = 6;
}

message ReportVoiceSendResultResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ReportWxaAppExposeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  MMBizWxaAppBaseInfo  wxaAppBaseInfo  = 2;
    optional  string  jsonData  = 3;
}

message ReportWxaAppExposeResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  recordId  = 2;
}

message RequestPackageInfo {
    optional  string  appid  = 1;
    optional  string  username  = 2;
    optional  string  moduleName  = 3;
    optional  uint32  packageType  = 4;
    optional  uint32  versionType  = 5;
}

message RequestWxaHBRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  int32  hbType  = 3;
    optional  int32  totalNum  = 4;
    optional  uint64  totalAmount  = 5;
    optional  uint32  perValue  = 6;
    optional  string  wishing  = 7;
    optional  uint32  hbScope  = 8;
}

message RequestWxaHBResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  reqkey  = 2;
    optional  string  sendid  = 3;
    optional  uint32  pollingTimesPerSecond  = 4;
    optional  uint32  pollingTotalSeconds  = 5;
    optional  uint32  wxahbStatus  = 6;
    optional  string  errorwording  = 7;
}

message Resource {
    required  uint32  subType  = 1;
    optional  ResourceMeta  info  = 2;
    optional  ResourceKey  key  = 3;
    required  uint32  oper  = 4;
    required  uint32  reportId  = 5;
    required  string  sampleId  = 6;
    required  uint32  expireTime  = 7;
    required  uint32  retryTime  = 8;
    optional  uint32  eid  = 9;
    required  uint32  downloadNetType  = 10;
    optional  uint32  retryInterval  = 11;
    optional  uint32  priority  = 12;
}

message ResourceCtx {
    required  uint32  resId  = 1;
    required  SKBuiltinBuffer_t  resData  = 2;
}

message ResourceKey {
    required  uint32  keyVersion  = 1;
    required  string  resKey  = 2;
}

message ResourceMeta {
    required  string  md5  = 1;
    required  uint32  resVersion  = 2;
    required  string  url  = 3;
    required  uint32  fileFlag  = 4;
    repeated  SignatureInfo  eccmd5SignatureList  = 5;
    optional  bytes  data  = 6;
    required  string  originalMd5  = 7;
    required  uint32  fileSize  = 8;
    optional  string  desc  = 9;
    optional  string  originalSha1  = 10;
}

message ResourceReq {
    required  uint32  subType  = 1;
    optional  uint32  resVersion  = 2;
    optional  uint32  keyVersion  = 3;
    optional  uint32  eid  = 4;
}

message ResourceType {
    required  uint32  type  = 1;
    repeated  Resource  resources  = 2;
}

message ResourceTypeReq {
    required  uint32  type  = 1;
    repeated  ResourceReq  subTypeVector  = 2;
}

message ResultCommContent {
    optional  string  docId  = 1;
    optional  string  title  = 2;
    optional  string  desc  = 3;
    optional  string  iconUrl  = 4;
    optional  string  source  = 5;
}

message RetryInfo {
    optional  uint32  delayMs  = 1;
}

message RetryStrategy {
    optional  string  failMessage  = 1;
    optional  uint32  interval  = 2;
    optional  uint32  maxRetryCount  = 3;
    optional  uint32  retryStep  = 4;
}

message RevokeChatRoomQRCodeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  qrcode  = 2;
    optional  string  chatRoomUserName  = 3;
}

message RevokeChatRoomQRCodeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message RevokeMsgRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientMsgId  = 2;
    required  uint32  newClientMsgId  = 3;
    required  uint32  createTime  = 4;
    required  uint32  svrMsgId  = 5;
    optional  string  fromUserName  = 6;
    optional  string  toUserName  = 7;
    required  uint32  indexOfRequest  = 8;
    optional  uint64  svrNewMsgId  = 9;
}

message RevokeMsgResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  introduction  = 2;
    optional  string  sysWording  = 3;
}

message RevokeOpenIMChatRoomQRCodeReq {
    optional  string  roomName  = 1;
    optional  string  qrcode  = 2;
}

message RevokeOpenIMChatRoomQRCodeResp {
    optional  BaseResponse  baseResponse  = 1;
}

message RightCorner {
    repeated  RightCorner_MenuNode  menuNodeList  = 1;
    optional  string  title  = 2;
}

message RightCorner_MenuNode {
    optional  string  word  = 1;
    optional  string  color  = 2;
    optional  string  url  = 4;
}

message RightTextViewData {
    optional  int32  imageType  = 1;
    optional  int32  clickRegion  = 2;
    optional  RouteInfo  routeInfo  = 3;
    optional  TextViewData  text  = 4;
    optional  string  viewId  = 5;
}

message RoomInfo {
    required  SKBuiltinString_t  userName  = 1;
    required  SKBuiltinString_t  nickName  = 2;
}

message RoomTools {
    optional  uint32  roomToolsWxAppCount  = 1;
    repeated  RoomToolsWxApp  roomToolsWxApps  = 2;
}

message RoomToolsAlterTodoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
    optional  uint32  op  = 3;
    optional  RoomToolsTodo  roomToolsTodo  = 4;
}

message RoomToolsAlterTodoResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message RoomToolsAlterWxAppRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
    optional  RoomTools  roomTools  = 3;
}

message RoomToolsAlterWxAppResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message RoomToolsReplyTodoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
    optional  string  creator  = 3;
    optional  string  todoId  = 4;
    optional  RoomToolsTodo  roomToolsTodo  = 5;
}

message RoomToolsReplyTodoResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message RoomToolsTodo {
    optional  string  todoId  = 1;
    optional  string  username  = 2;
    optional  string  path  = 3;
    optional  uint32  time  = 4;
    optional  bytes  customInfo  = 5;
    optional  string  title  = 6;
    optional  string  creator  = 7;
    optional  uint64  relatedMsgId  = 8;
    optional  string  manager  = 9;
}

message RoomToolsWxApp {
    optional  string  username  = 1;
    optional  string  path  = 2;
}

message RoundTextViewData {
    optional  string  viewId  = 1;
    optional  TextViewData  text  = 2;
    optional  PaddingStyle  padding  = 3;
    optional  float  cornerRadius  = 4;
    optional  int64  bgColor  = 5;
}

message RouteInfo {
    optional  int32  type  = 1;
    optional  string  url  = 2;
    optional  TinyAppUri  tinyAppUri  = 3;
    optional  Dialog  dialog  = 4;
    optional  uint32  subpageIndex  = 5;
    optional  bool  isIntercepted  = 6;
    repeated  DialogAction  action  = 7;
    optional  CustomModal  modal  = 8;
    optional  ActionSheetViewData  actionSheet  = 9;
}

message RouteRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaRealTimeReportInfo  infos  = 2;
}

message RouteResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SKBuiltinBuffer_t {
    required  uint32  iLen  = 1;
    optional  bytes  buffer  = 2;
}

message SKBuiltinChar_t {
    required  int32  iVal  = 1;
}

message SKBuiltinDouble64_t {
    required  double  dVal  = 1;
}

message SKBuiltinFloat32_t {
    required  float  fVal  = 1;
}

message SKBuiltinInt16_t {
    required  int32  iVal  = 1;
}

message SKBuiltinInt32_t {
    required  uint32  iVal  = 1;
}

message SKBuiltinInt64_t {
    required  int64  llVal  = 1;
}

message SKBuiltinInt8_t {
    required  int32  iVal  = 1;
}

message SKBuiltinString_t {
    optional  string  string  = 1;
}

message SKBuiltinUchar_t {
    required  uint32  uiVal  = 1;
}

message SKBuiltinUint16_t {
    required  uint32  uiVal  = 1;
}

message SKBuiltinUint32_t {
    required  uint32  uiVal  = 1;
}

message SKBuiltinUint64_t {
    required  uint64  ullVal  = 1;
}

message SKBuiltinUint8_t {
    required  uint32  uiVal  = 1;
}

message SafeDevice {
    optional  string  name  = 1;
    optional  string  uuid  = 2;
    optional  string  deviceType  = 3;
    required  uint32  createTime  = 4;
}

message SafeDeviceList {
    required  uint32  count  = 1;
    repeated  SafeDevice  list  = 2;
}

message SafetyInfo {
    repeated  LoginDevice  devicelist  = 1;
    optional  bool  bHasVoice  = 2;
    optional  bool  bSwitchVoice  = 3;
    optional  bool  bHasFace  = 4;
    optional  bool  bSwitchFace  = 5;
    optional  bool  bHasWxPwd  = 6;
}

message SampleProduct {
    optional  string  pid  = 1;
    optional  string  skuId  = 2;
    optional  uint32  count  = 3;
    optional  string  safeUrl  = 4;
}

message SaveUserAutoFillInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  userInfoJson  = 3;
    optional  uint32  source  = 4;
    optional  uint32  clientVersion  = 5;
}

message SaveUserAutoFillInfoResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  GroupItem  groupItemList  = 2;
}

message ScanAppForcePushRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  qrCode  = 2;
}

message ScanAppForcePushResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  ForcePushItem  forcePushItem  = 2;
}

message ScanF2fMaterialCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqUrl  = 2;
    optional  uint32  scene  = 3;
}

message ScanF2fMaterialCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  actionType  = 4;
    optional  string  respUrl  = 5;
}

message ScanInfo {
    repeated  ApInfo  apInfo  = 1;
    optional  string  ip  = 2;
}

message ScanRewardMaterialCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqUrl  = 2;
    optional  uint32  scene  = 3;
}

message ScanRewardMaterialCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  actionType  = 4;
    optional  string  respUrl  = 5;
}

message ScanStreetViewRequest {
    required  BaseRequest  baseRequest  = 1;
    required  PositionInfo  userPos  = 2;
    optional  uint32  scene  = 3;
    optional  float  heading  = 4;
    optional  float  pitch  = 5;
}

message ScanStreetViewResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  type  = 2;
    optional  string  descriptionXml  = 3;
}

message ScopeInfo {
    optional  string  scope  = 1;
    optional  string  desc  = 2;
    optional  uint32  authState  = 3;
    optional  string  extDesc  = 4;
    optional  string  authDesc  = 5;
    optional  string  subDesc  = 6;
}

message ScopeRiskInfo {
    optional  string  scope  = 1;
    optional  ScopeRiskPopUpInfo  riskPopupInfo  = 2;
}

message ScopeRiskPopUpInfo {
    optional  int32  routeType  = 1;
    optional  bytes  wording  = 2;
    optional  bytes  leftButtonWording  = 3;
    optional  bytes  rightButtonWording  = 4;
    optional  bytes  rightButtonH5Url  = 5;
    optional  ScopeRiskWxaAppInfo  wxaAppInfo  = 6;
}

message ScopeRiskWxaAppInfo {
    optional  string  username  = 1;
    optional  string  path  = 2;
    optional  uint32  version  = 3;
    optional  uint32  scene  = 4;
    optional  uint32  type  = 5;
}

message ScopeWording {
    optional  string  wording  = 1;
    optional  string  title  = 2;
}

message SdkOauthAuthorizeConfirmReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  opt  = 3;
    repeated  string  scope  = 4;
    optional  string  appid  = 5;
    optional  string  state  = 6;
    optional  string  bundleid  = 7;
    optional  uint32  avatarId  = 8;
    optional  string  universalLink  = 9;
    optional  string  opensdkVersion  = 10;
    optional  string  sdkToken  = 11;
    optional  string  opensdkBundleid  = 12;
    optional  uint32  sdkTokenChk  = 13;
    optional  string  sdkExtdata  = 14;
    optional  bytes  ilinkSpamBuffer  = 15;
}

message SdkOauthAuthorizeConfirmResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  redirectUrl  = 3;
    optional  string  wxToken  = 4;
    optional  string  userConfirmRedirectUrl  = 5;
    optional  string  userConfirmWording  = 6;
    optional  bytes  ilinkAuthBuffer  = 7;
}

message SdkOauthAuthorizeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  scope  = 3;
    optional  string  state  = 4;
    optional  string  bundleid  = 5;
    optional  string  androidPackageName  = 6;
    optional  string  androidSignature  = 7;
    optional  string  universalLink  = 8;
    optional  string  opensdkVersion  = 9;
    optional  string  sdkToken  = 10;
    optional  string  opensdkBundleid  = 11;
    optional  uint32  sdkTokenChk  = 12;
    optional  string  sdkExtdata  = 13;
    optional  bytes  ilinkSpamBuffer  = 14;
}

message SdkOauthAuthorizeResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  OauthScopeInfo  scopeList  = 3;
    optional  string  appname  = 4;
    optional  string  appiconUrl  = 5;
    optional  string  redirectUrl  = 6;
    optional  bool  isRecentHasAuth  = 8;
    optional  bool  isSlienctAuth  = 9;
    optional  bool  isCallServerWhenConfirm  = 10;
    repeated  OauthAvatarInfo  avatarList  = 11;
    optional  bool  isUseNewpage  = 12;
    optional  bool  isBanModifyAvatar  = 13;
    optional  uint32  avatarLimit  = 14;
    optional  uint32  defaultAvatarId  = 15;
    optional  string  defaultHeadimgUrl  = 16;
    optional  string  defaultHeadimgFileid  = 17;
    optional  string  wxToken  = 18;
    optional  string  userConfirmRedirectUrl  = 19;
    optional  string  userConfirmWording  = 20;
    optional  string  cloudGameScopeWording  = 21;
    optional  bytes  ilinkAuthBuffer  = 22;
}

message SearchBLEHardDeviceReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  mac  = 2;
    required  string  userName  = 3;
    optional  string  category  = 4;
}

message SearchBLEHardDeviceResp {
    required  BaseResponse  baseResponse  = 1;
    required  HardDevice  hardDevice  = 2;
    required  HardDeviceAttr  hardDeviceAttr  = 3;
    optional  string  bindTicket  = 4;
    optional  ModContact  contact  = 5;
}

message SearchBrandContactShare {
    optional  string  username  = 1;
    optional  string  nickName  = 2;
    optional  string  fullpy  = 3;
    optional  string  aliasName  = 4;
    optional  string  country  = 5;
    optional  string  province  = 6;
    optional  string  city  = 7;
    optional  string  signature  = 8;
    optional  int32  sex  = 9;
    optional  uint32  verifyFlag  = 10;
    optional  bytes  certInfo  = 11;
    optional  string  brandIconUrl  = 12;
    optional  bytes  externalInfo  = 13;
    optional  bytes  brandInfo  = 14;
    optional  uint32  brandFlag  = 15;
    optional  string  headImgUrl  = 16;
}

message SearchBrandFeedsShare {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  thumbUrl  = 3;
    optional  string  link  = 4;
    optional  uint32  itemShowType  = 5;
    optional  string  sourceUsername  = 6;
    optional  string  sourceDisplayName  = 7;
    optional  string  vid  = 8;
    optional  uint32  duraion  = 9;
    optional  uint32  width  = 10;
    optional  uint32  height  = 11;
}

message SearchConfirmRequest {
    optional  uint32  entry  = 1;
    optional  uint32  timestamp  = 2;
    optional  uint32  opType  = 3;
}

message SearchConfirmResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message SearchContactItem {
    required  SKBuiltinString_t  userName  = 1;
    required  SKBuiltinString_t  nickName  = 2;
    required  SKBuiltinString_t  pyinitial  = 3;
    required  SKBuiltinString_t  quanPin  = 4;
    required  int32  sex  = 5;
    required  SKBuiltinBuffer_t  imgBuf  = 6;
    optional  string  province  = 7;
    optional  string  city  = 8;
    optional  string  signature  = 9;
    optional  uint32  personalCard  = 10;
    optional  uint32  verifyFlag  = 11;
    optional  string  verifyInfo  = 12;
    optional  string  weibo  = 13;
    optional  string  alias  = 14;
    optional  string  weiboNickname  = 15;
    optional  uint32  weiboFlag  = 16;
    optional  int32  albumStyle  = 17;
    optional  int32  albumFlag  = 18;
    optional  string  albumBgimgId  = 19;
    optional  SnsUserInfo  snsUserInfo  = 20;
    optional  string  country  = 21;
    optional  string  myBrandList  = 22;
    optional  CustomizedInfo  customizedInfo  = 23;
    optional  string  bigHeadImgUrl  = 24;
    optional  string  smallHeadImgUrl  = 25;
    optional  string  antispamTicket  = 26;
    optional  uint32  matchType  = 27;
}

message SearchContactRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinString_t  userName  = 2;
    optional  uint32  opCode  = 3;
    optional  SKBuiltinBuffer_t  reqBuf  = 4;
    optional  uint32  fromScene  = 5;
    optional  uint32  searchScene  = 6;
}

message SearchContactResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinString_t  userName  = 2;
    required  SKBuiltinString_t  nickName  = 3;
    required  SKBuiltinString_t  pyinitial  = 4;
    required  SKBuiltinString_t  quanPin  = 5;
    required  int32  sex  = 6;
    required  SKBuiltinBuffer_t  imgBuf  = 7;
    optional  string  province  = 8;
    optional  string  city  = 9;
    optional  string  signature  = 10;
    optional  uint32  personalCard  = 11;
    optional  uint32  verifyFlag  = 12;
    optional  string  verifyInfo  = 13;
    optional  string  weibo  = 14;
    optional  string  alias  = 15;
    optional  string  weiboNickname  = 16;
    optional  uint32  weiboFlag  = 17;
    optional  int32  albumStyle  = 18;
    optional  int32  albumFlag  = 19;
    optional  string  albumBgimgId  = 20;
    optional  SnsUserInfo  snsUserInfo  = 21;
    optional  string  country  = 22;
    optional  string  myBrandList  = 23;
    optional  CustomizedInfo  customizedInfo  = 24;
    optional  uint32  contactCount  = 25;
    repeated  SearchContactItem  contactList  = 26;
    optional  string  bigHeadImgUrl  = 27;
    optional  string  smallHeadImgUrl  = 28;
    optional  SKBuiltinBuffer_t  resBuf  = 29;
    optional  string  antispamTicket  = 30;
    optional  string  kfworkerId  = 31;
    optional  uint32  matchType  = 32;
    optional  string  popupInfoMsg  = 33;
    optional  uint32  openImcontactCount  = 34;
    repeated  SearchOpenIMContactItem  openImcontactList  = 35;
}

message SearchDetailPageRequest {
    required  uint64  businessType  = 1;
    required  string  keyWord  = 2;
    required  uint32  offset  = 3;
    optional  LbsLocationNew  location  = 4;
    optional  uint32  requestSrc  = 5;
    repeated  UserItem  matchUserList  = 6;
    optional  uint32  scene  = 7;
    optional  string  searchId  = 8;
}

message SearchDetailPageResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  BusinessContent  content  = 2;
    optional  uint32  offset  = 3;
}

message SearchEmoticonShare {
    optional  string  emoticonMd5  = 1;
    optional  uint32  emoticonType  = 2;
    optional  string  emoticonProductId  = 3;
    optional  string  thumbImgUrl  = 4;
    optional  string  designerId  = 5;
    optional  string  activityId  = 6;
    optional  string  attachedText  = 7;
    optional  string  attachedTextColor  = 8;
    optional  string  lensId  = 9;
    optional  uint32  emoticonWidth  = 10;
    optional  uint32  emoticonHeight  = 11;
}

message SearchFinderAccountShare {
    optional  string  title  = 1;
    optional  string  userName  = 2;
    optional  string  headUrl  = 3;
    optional  string  nickName  = 4;
    optional  string  authJob  = 5;
    optional  string  authIcon  = 6;
}

message SearchFinderFeedsShare {
    optional  string  title  = 1;
    optional  string  tid  = 2;
    optional  uint32  feedType  = 3;
    optional  string  nickName  = 4;
    optional  string  avatar  = 5;
    optional  string  nonceId  = 6;
    optional  uint32  mediaCount  = 7;
    repeated  SearchFinderMediaItem  mediaList  = 8;
}

message SearchFinderMediaItem {
    optional  uint32  mediaType  = 1;
    optional  string  url  = 2;
    optional  uint32  width  = 3;
    optional  uint32  height  = 4;
    optional  string  thumbUrl  = 5;
    optional  uint32  videoPlayDuration  = 6;
}

message SearchGameListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  offSet  = 2;
    required  uint32  limit  = 3;
    optional  string  country  = 4;
}

message SearchGameListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  string  jsonData  = 2;
}

message SearchGuideRequest {
    required  uint32  scene  = 1;
    required  uint32  h5Version  = 2;
    optional  LbsLocationNew  location  = 3;
    optional  uint64  businessType  = 4;
    optional  string  language  = 5;
    optional  uint64  configParam  = 6;
    optional  string  sessionId  = 7;
    optional  string  guideInfo  = 8;
    optional  ChildMode  childMode  = 9;
}

message SearchGuideResponse {
    optional  BaseResponse  baseResponse  = 1;
    required  string  json  = 2;
    optional  uint32  timevalSec  = 3;
    optional  string  searchId  = 4;
}

message SearchHardDeviceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  hardDeviceQrcode  = 2;
}

message SearchHardDeviceResponse {
    required  BaseResponse  baseResponse  = 1;
    required  ModContact  contact  = 2;
    required  HardDevice  hardDevice  = 3;
    required  HardDeviceAttr  hardDeviceAttr  = 4;
    optional  string  bindTicket  = 5;
    optional  uint32  fliterStatus  = 6;
    optional  AirKissConfData  conf  = 7;
}

message SearchHomePageResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint64  businessType  = 2;
    repeated  BusinessContent  contentList  = 3;
}

message SearchLocalPageResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  RelevantSearchResult  relevantResult  = 2;
    optional  string  searchId  = 3;
}

message SearchOpenIMContactItem {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  pyinitial  = 3;
    optional  string  quanPin  = 4;
    optional  uint32  sex  = 5;
    optional  string  bigHeadImgUrl  = 6;
    optional  string  smallHeadImgUrl  = 7;
    optional  string  appId  = 8;
    optional  uint32  matchType  = 9;
    optional  OpenIMContactCustomInfo  customInfo  = 10;
    optional  string  antispamTicket  = 11;
}

message SearchOpenIMContactReq {
    optional  string  tpQrcode  = 1;
    optional  string  mobile  = 2;
    optional  uint32  tpType  = 3;
}

message SearchOpenIMContactResp {
    required  BaseResponse  baseResponse  = 1;
    optional  SearchOpenIMContactItem  contact  = 2;
    optional  string  url  = 3;
}

message SearchOrRecommendBizResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  bizCount  = 2;
    repeated  SearchOrRecommendItem  bizList  = 3;
    required  uint32  showFlag  = 4;
    required  uint32  isEnd  = 5;
    required  SKBuiltinBuffer_t  resBuf  = 6;
}

message SearchOrRecommendItem {
    required  SKBuiltinString_t  userName  = 1;
    required  SKBuiltinString_t  nickName  = 2;
    required  int32  sex  = 3;
    optional  string  province  = 4;
    optional  string  city  = 5;
    optional  string  signature  = 6;
    optional  uint32  personalCard  = 7;
    optional  uint32  verifyFlag  = 8;
    optional  string  verifyInfo  = 9;
    optional  string  weibo  = 10;
    optional  string  alias  = 11;
    optional  string  weiboNickname  = 12;
    optional  uint32  weiboFlag  = 13;
    optional  string  country  = 14;
    optional  CustomizedInfo  customizedInfo  = 15;
    optional  string  bigHeadImgUrl  = 16;
    optional  string  smallHeadImgUrl  = 17;
}

message SearchOrRecommendItemNew {
    required  SKBuiltinString_t  userName  = 1;
    required  SKBuiltinString_t  nickName  = 2;
    optional  int32  sex  = 3;
    optional  string  province  = 4;
    optional  string  city  = 5;
    optional  string  signature  = 6;
    optional  uint32  personalCard  = 7;
    optional  uint32  verifyFlag  = 8;
    optional  string  verifyInfo  = 9;
    optional  string  weibo  = 10;
    optional  string  alias  = 11;
    optional  string  weiboNickname  = 12;
    optional  uint32  weiboFlag  = 13;
    optional  string  country  = 14;
    optional  CustomizedInfoNew  customizedInfo  = 15;
    optional  string  bigHeadImgUrl  = 16;
    optional  string  smallHeadImgUrl  = 17;
}

message SearchUserAuthReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  keyword  = 2;
    optional  bytes  nextPageData  = 3;
}

message SearchUserAuthResp {
    required  BaseResponse  baseResponse  = 1;
    optional  UserMgrBaseResponse  usermgrBaseresp  = 2;
    repeated  AuthApp  authApp  = 3;
    optional  bytes  nextPageData  = 4;
    optional  uint32  nextPageFlag  = 5;
}

message SearchWeappFeedsShare {
    optional  string  title  = 1;
    optional  string  desc  = 2;
    optional  string  thumbUrl  = 3;
    optional  string  appId  = 4;
    optional  string  userName  = 5;
    optional  string  path  = 6;
    optional  string  weappIconUrl  = 7;
    optional  uint32  version  = 8;
}

message SearchWeappShare {
    optional  string  userName  = 1;
    optional  string  sourceDisplayName  = 2;
    optional  string  thumbUrl  = 3;
    optional  string  appId  = 4;
    optional  uint32  tradingGuaranteeFlag  = 5;
    optional  uint32  brandOfficialFlag  = 6;
}

message SearchWebQueryRequest {
    optional  string  commReq  = 1;
    optional  string  requestId  = 2;
}

message SearchWebQueryResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  commResp  = 2;
    optional  string  requestId  = 3;
}

message SearchWiFiHardDeviceReq {
    required  BaseRequest  baseRequest  = 1;
    required  HardDevice  hardDevice  = 2;
    optional  string  extraParams  = 3;
}

message SearchWiFiHardDeviceResp {
    required  BaseResponse  baseResponse  = 1;
    required  ModContact  contact  = 2;
    required  HardDevice  hardDevice  = 3;
    required  HardDeviceAttr  hardDeviceAttr  = 4;
    optional  string  bindTicket  = 5;
}

message SearchWxaRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  query  = 2;
    optional  uint64  searchId  = 3;
    optional  uint32  begId  = 4;
    optional  uint64  scene  = 5;
    optional  bool  isHomePage  = 6;
    optional  WxaLocation  wxaLocation  = 7;
    optional  uint64  sessionId  = 8;
}

message SearchWxaResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  totalCount  = 2;
    optional  uint32  type  = 3;
    optional  uint32  subType  = 4;
    optional  uint32  count  = 5;
    optional  string  title  = 6;
    optional  WxaPage  moreAction  = 7;
    repeated  WxaResult  items  = 8;
    optional  uint32  resultType  = 9;
    optional  uint32  nextId  = 10;
    optional  bool  continueFlag  = 11;
    optional  bytes  debugBuf  = 12;
    optional  int32  errCode  = 13;
    optional  string  msg  = 14;
}

message SecAuthRegKeySect {
    required  SKBuiltinBuffer_t  autoAuthKey  = 1;
    required  ECDHKey  svrPubEcdhkey  = 2;
    required  SKBuiltinBuffer_t  sessionKey  = 3;
    required  uint32  authResultFlag  = 4;
    optional  SKBuiltinBuffer_t  clientSessionKey  = 5;
    optional  SKBuiltinBuffer_t  serverSessionKey  = 6;
}

message SecEntranceCard {
    optional  uint32  cardHomePageId  = 1;
    repeated  CardSecondaryPkgElement  cardSecondaryPkgElement  = 2;
}

message SecEntranceCardList {
    repeated  SecEntranceCard  secEntranceCard  = 1;
}

message SecureNotifyData {
    required  uint32  encryptAlgo  = 1;
    required  uint32  encryptVer  = 2;
    required  uint32  encryptSalt  = 3;
    required  uint32  compressAlgo  = 4;
    required  uint32  compressVer  = 5;
    required  uint32  compressLen  = 6;
    required  uint32  checkSum  = 7;
    required  bytes  data  = 8;
}

message SecureTunnelRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cmd  = 2;
    optional  string  appid  = 3;
    optional  string  url  = 4;
    optional  string  reqbuf  = 5;
    optional  uint32  scene  = 6;
    optional  uint32  source  = 7;
    optional  string  appUsername  = 8;
    optional  uint32  appVersion  = 9;
}

message SecureTunnelResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  respbuf  = 2;
}

message SendAppMsgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  AppMsg  msg  = 2;
    optional  string  commentUrl  = 3;
    optional  uint32  reqTime  = 4;
    optional  string  md5  = 5;
    optional  uint32  fileType  = 6;
    optional  string  signature  = 7;
    optional  string  fromSence  = 8;
    optional  uint32  hitMd5  = 9;
    optional  uint32  crc32  = 10;
    optional  uint32  msgForwardType  = 11;
    optional  uint32  directShare  = 12;
    optional  string  sendMsgTicket  = 13;
}

message SendAppMsgResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appId  = 2;
    optional  string  fromUserName  = 3;
    optional  string  toUserName  = 4;
    required  uint32  msgId  = 5;
    optional  string  clientMsgId  = 6;
    required  uint32  createTime  = 7;
    optional  uint32  type  = 8;
    optional  uint64  newMsgId  = 9;
    optional  string  aeskey  = 10;
    optional  string  msgSource  = 11;
    optional  uint32  actionFlag  = 12;
}

message SendAwardRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  bytes  getAwardParams  = 2;
}

message SendAwardResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint64  retCode  = 2;
    optional  bytes  retMsg  = 3;
}

message SendCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  string  content  = 3;
    optional  uint32  sendCardBitFlag  = 4;
    optional  uint32  style  = 5;
    optional  string  contentEx  = 6;
}

message SendCardResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SendFeedbackRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  machineType  = 2;
    optional  string  content  = 3;
    optional  uint32  reportType  = 4;
}

message SendFeedbackResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SendHardDeviceMsgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  HardDevice  hardDevice  = 2;
    required  HardDeviceMsg  hardDeviceMsg  = 3;
    required  SKBuiltinBuffer_t  sessionBuffer  = 4;
}

message SendHardDeviceMsgResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SendMsgRealTimeConfig {
    optional  uint32  sendMsgActionFlag  = 1;
}

message SendMsgRequestNew {
    required  uint32  count  = 1;
    repeated  MicroMsgRequestNew  list  = 2;
}

message SendMsgResponseNew {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  MicroMsgResponseNew  list  = 3;
    optional  uint32  actionFlag  = 4;
}

message SendMsgTicket {
    optional  string  userName  = 1;
    optional  string  ticket  = 2;
}

message SendOpenIMVerifyReplyReq {
    required  string  tpUsername  = 1;
    required  string  replyContent  = 2;
    required  string  antispamTicket  = 3;
}

message SendOpenIMVerifyReplyResp {
    required  BaseResponse  baseResponse  = 1;
}

message SendOpenIMVerifyRequestReq {
    required  string  tpUsername  = 1;
    required  string  verifyContent  = 2;
    required  string  antispamTicket  = 3;
    optional  uint64  friendFlag  = 4;
}

message SendOpenIMVerifyRequestResp {
    required  BaseResponse  baseResponse  = 1;
}

message SendPatRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    optional  string  chatUsername  = 3;
    optional  string  pattedUsername  = 4;
    optional  string  clientMsgId  = 5;
    optional  uint32  scene  = 6;
}

message SendPatResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  tmpl  = 2;
    optional  string  selfMsg  = 3;
    optional  string  patSuffix  = 4;
    optional  uint64  msgId  = 5;
    optional  uint32  patSuffixVersion  = 6;
}

message SendPhoto2FBWallRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  message  = 2;
    optional  string  picture  = 3;
    optional  string  name  = 4;
    optional  string  link  = 5;
    optional  string  description  = 6;
    optional  string  caption  = 7;
}

message SendPhoto2FBWallResp {
    required  BaseResponse  baseResponse  = 1;
}

message SendQRCodeByEmailReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  qrcodeUserName  = 2;
    required  uint32  toCount  = 3;
    repeated  SKBuiltinString_t  toList  = 4;
    optional  string  tittle  = 5;
    optional  string  content  = 6;
}

message SendQRCodeByEmailResp {
    required  BaseResponse  baseResponse  = 1;
}

message SendSightResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  SendSightResponse_Result  results  = 2;
}

message SendSightResponse_Result {
    required  string  username  = 1;
    required  int32  ret  = 2;
}

message SendSmsReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  uint32  categoryId  = 3;
    optional  string  payToken  = 4;
    optional  string  phoneId  = 5;
    optional  string  ticket  = 6;
    optional  string  bankType  = 7;
    optional  string  optionalMobile  = 8;
}

message SendSmsResp {
    required  BaseResponse  baseResponse  = 1;
    optional  AuthorizeUserIDBaseResponse  authBaseResponse  = 2;
    optional  string  verifyToken  = 3;
}

message SendSmsToMFriendResp {
    required  BaseResponse  baseResponse  = 1;
}

message SendSubscriptionMsgReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  wxaUsername  = 2;
    optional  string  uxinfo  = 3;
    optional  uint64  aid  = 4;
    optional  string  appType  = 5;
}

message SendSubscriptionMsgResp {
    required  BaseResponse  baseResponse  = 1;
}

message SendVerifyCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  mobile  = 3;
}

message SendVerifyCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  status  = 2;
}

message SendVerifyEmailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinString_t  userName  = 2;
}

message SendVerifyEmailResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SendWCOFeedbackRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  level  = 2;
    required  int32  fbcount  = 3;
    repeated  WCOFeedbackCell  fblist  = 4;
    required  uint32  roomId  = 5;
}

message SendWCOFeedbackResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SendYoRequest {
    optional  string  toUserName  = 1;
    required  uint32  type  = 2;
    required  uint32  count  = 3;
    required  uint32  createTime  = 4;
    required  uint32  clientMsgId  = 5;
    optional  string  msgSource  = 6;
    optional  uint32  yoType  = 7;
}

message SendYoResponse {
    required  int32  ret  = 1;
    required  uint32  serverTime  = 2;
    required  uint64  msgId  = 3;
}

message SensorData {
    optional  int32  type  = 1;
    optional  int64  captureTime  = 2;
    repeated  float  sensorData  = 3;
}

message ServiceItemField {
    required  bytes  name  = 1;
    required  bytes  value  = 2;
}

message ServiceNotifyItem {
    optional  string  username  = 1;
    optional  bool  isOpen  = 2;
    optional  string  nickname  = 3;
    optional  string  avatarurl  = 4;
}

message SessionData {
    optional  uint64  sessionFlag  = 1;
}

message SessionFriendCommentInfo {
    optional  string  lastFriendUsername  = 1;
    optional  uint32  lastFriendLikeTime  = 2;
}

message SessionIdList {
    repeated  string  username  = 1;
    repeated  string  groupid  = 2;
}

message SessionInfo {
    optional  string  sessionId  = 1;
    optional  SessionData  sessionData  = 2;
    optional  string  myUsername  = 3;
    optional  string  toUsername  = 4;
    optional  BlackListInfo  blackListInfo  = 5;
}

message SessionObjects {
    optional  uint64  objectId  = 1;
    repeated  SessionObjects  subSessionObjects  = 2;
    optional  bytes  reportItemBuff  = 3;
}

message SessionStat {
    optional  uint32  stayDuration  = 1;
    optional  uint32  unreadDuration  = 2;
    optional  uint32  totalUnreadCount  = 3;
    optional  uint32  latestMsgType  = 4;
    optional  uint32  indexInSessionList  = 5;
    optional  uint32  massSendUnreadCount  = 6;
    optional  uint32  templateUnreadCount  = 7;
}

message SetAnchorStatusRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  bytes  anchorStatusBuffer  = 3;
}

message SetAnchorStatusResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SetAppSettingRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    required  uint32  cmdId  = 3;
    optional  string  cmdValue  = 4;
}

message SetAppSettingResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appId  = 2;
    required  uint32  appFlag  = 3;
    required  uint32  cmdId  = 4;
}

message SetBizEnterpriseAttrReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  brandType  = 2;
    required  uint32  mask  = 3;
    required  BizEnterpriseAttr  attr  = 4;
}

message SetBizEnterpriseAttrResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    required  BizEnterpriseAttr  attr  = 3;
}

message SetBlackListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  BlackListInfo  blackListInfo  = 2;
    optional  bool  associateWxgameAccount  = 3;
}

message SetBlackListResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message SetBrandFlagReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  uint32  bitValue  = 3;
    required  uint32  bitMask  = 4;
}

message SetBrandFlagResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  BizChatUser  user  = 3;
}

message SetChatRoomAnnouncementRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
    optional  string  announcement  = 3;
    required  uint32  setAnnouncementFlag  = 4;
}

message SetChatRoomAnnouncementResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SetChatSessionDataRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  sessionId  = 2;
    optional  uint64  sessionFlagMask  = 3;
    optional  bool  switchB  = 4;
}

message SetChatSessionDataResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message SetEmailPwdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  pwd  = 2;
    optional  string  ticket  = 3;
}

message SetEmailPwdResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SetGDRPAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  opt  = 4;
}

message SetGDRPAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  businessResp  = 2;
}

message SetMainBankCardRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bindSerial  = 2;
    optional  ActionLocation  actionLocation  = 3;
    optional  string  jsapiReqkey  = 4;
}

message SetMainBankCardResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SetMsgRemindRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  opType  = 2;
    optional  Remind  remind  = 3;
    optional  uint32  scene  = 4;
}

message SetMsgRemindResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  remindId  = 2;
}

message SetOAuthScopeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    required  uint32  scopeCount  = 3;
    repeated  BizScopeInfo  scopeList  = 4;
}

message SetOAuthScopeResponse {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  scopeCount  = 2;
    repeated  BizScopeInfo  scopeList  = 3;
}

message SetPcLoginUserInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  shopId  = 3;
    optional  string  ticket  = 4;
}

message SetPcLoginUserInfoResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SetPushMuteTimeReq {
    required  uint32  muteInterval  = 1;
}

message SetPushMuteTimeResp {
    required  BaseResponse  baseResponse  = 1;
}

message SetPushSoundReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  type  = 2;
    optional  string  sound  = 3;
}

message SetPushSoundResp {
    required  BaseResponse  baseResponse  = 1;
}

message SetPwdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  password  = 2;
    optional  string  ticket  = 3;
    optional  SKBuiltinBuffer_t  autoAuthKey  = 4;
    optional  uint32  ticketType  = 5;
}

message SetPwdResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  SKBuiltinBuffer_t  autoAuthKey  = 2;
}

message SetWalletEntranceBalanceSwitchReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  uint32  operationType  = 2;
    optional  uint64  operationTimestamp  = 3;
}

message SetWalletEntranceBalanceSwitchResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  uint32  switchState  = 4;
}

message SetWxaMsgConfigRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaMsgConfigItem  wxaMsgConfigList  = 2;
    optional  uint32  scene  = 3;
}

message SetWxaMsgConfigResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
}

message SettingPageInfo {
    optional  uint32  scene  = 1;
    optional  uint32  isServiceWuRaoOpen  = 2;
}

message ShakeGetItem {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  string  province  = 3;
    optional  string  city  = 4;
    optional  string  signature  = 5;
    optional  string  distance  = 6;
    required  int32  sex  = 7;
    required  uint32  imgStatus  = 8;
    required  uint32  hasHdimg  = 9;
    required  SKBuiltinBuffer_t  imgBuffer  = 10;
    required  uint32  numDistance  = 11;
    optional  string  weibo  = 12;
    optional  string  weiboNickname  = 13;
    optional  uint32  weiboFlag  = 14;
    optional  uint32  verifyFlag  = 15;
    optional  string  verifyInfo  = 16;
    optional  string  verifyContent  = 17;
    optional  int32  headImgVersion  = 21;
    optional  SnsUserInfo  snsUserInfo  = 22;
    optional  string  country  = 23;
    optional  string  bigHeadImgUrl  = 24;
    optional  string  smallHeadImgUrl  = 25;
    optional  string  myBrandList  = 26;
    optional  CustomizedInfo  customizedInfo  = 27;
    optional  string  antispamTicket  = 28;
}

message ShakeGetRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  buffer  = 2;
    optional  int32  isNewVerson  = 3;
    optional  SKBuiltinBuffer_t  clientCheckData  = 4;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 5;
}

message ShakeGetResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  count  = 2;
    repeated  ShakeGetItem  shakeGetList  = 3;
    optional  string  tips  = 4;
    required  uint32  scence  = 5;
    required  int32  ret  = 6;
}

message ShakeImgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  imgId  = 2;
    required  uint32  startPos  = 3;
    required  uint32  totalLen  = 4;
}

message ShakeImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  imgId  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    required  SKBuiltinBuffer_t  buffer  = 5;
}

message ShakeMusicRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  data  = 2;
    required  uint32  dataId  = 3;
    required  uint32  endFlag  = 4;
    required  float  voiceLen  = 5;
    required  uint32  netType  = 6;
    required  uint32  sdkVersion  = 7;
    optional  float  longtitude  = 8;
    optional  float  latitude  = 9;
    optional  uint32  isOutsideGfw  = 10;
    optional  uint32  shakeMusicGlobalSwitch  = 11;
}

message ShakeMusicResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  endFlag  = 2;
    required  uint32  musicId  = 3;
    required  float  offset  = 4;
    required  SKBuiltinBuffer_t  songName  = 5;
    required  SKBuiltinBuffer_t  songSinger  = 6;
    required  SKBuiltinBuffer_t  songAlbum  = 7;
    required  SKBuiltinBuffer_t  songAlbumUrl  = 8;
    required  SKBuiltinBuffer_t  songWifiUrl  = 9;
    required  SKBuiltinBuffer_t  songWapLinkUrl  = 10;
    required  SKBuiltinBuffer_t  songWebUrl  = 11;
    required  SKBuiltinBuffer_t  songLyric  = 12;
    optional  uint32  resultType  = 13;
    optional  uint32  tvtype  = 14;
    optional  string  tvdescriptionXml  = 15;
}

message ShakeReportRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    required  float  longitude  = 3;
    required  float  latitude  = 4;
    required  int32  precision  = 5;
    optional  string  macAddr  = 6;
    optional  string  cellId  = 7;
    required  uint32  imgId  = 8;
    required  uint32  times  = 9;
    optional  int32  gpssource  = 10;
    optional  SKBuiltinBuffer_t  clientCheckData  = 11;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 12;
}

message ShakeReportResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  buffer  = 2;
    required  int32  ret  = 3;
    required  uint32  imgId  = 4;
    optional  uint32  imgTotoalLen  = 5;
}

message ShakeTVRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  data  = 2;
    required  uint32  dataId  = 3;
    required  uint32  endFlag  = 4;
    required  float  voiceLen  = 5;
    required  uint32  netType  = 6;
    required  uint32  sdkVersion  = 7;
    optional  float  longtitude  = 8;
    optional  float  latitude  = 9;
}

message ShakeTVResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  endFlag  = 2;
    required  uint32  type  = 3;
    optional  string  descriptionXml  = 4;
}

message ShakeTranImgGetItem {
    optional  string  webUrl  = 1;
    optional  string  thumbUrl  = 2;
    optional  string  imgUrl  = 3;
}

message ShakeTranImgGetResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  pageUrl  = 2;
    required  uint32  count  = 3;
    repeated  ShakeTranImgGetItem  imgUrlList  = 4;
    optional  SKBuiltinBuffer_t  buffer  = 5;
    optional  string  title  = 6;
}

message ShakeTranImgReportResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  buffer  = 2;
}

message ShakeTranImgUnBindResponse {
    required  BaseResponse  baseResponse  = 1;
}

message Share {
    optional  string  iconUrl  = 1;
    optional  string  messageTitle  = 2;
    optional  string  messageDetail  = 3;
    optional  string  timelineDetail  = 4;
    optional  string  webUrl  = 5;
    optional  bool  toMessage  = 6;
    optional  bool  toTimeline  = 7;
}

message ShareCardItemRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  isShareOwncard  = 2;
    repeated  ShareCardReqItem  items  = 3;
    optional  string  appUserName  = 4;
    optional  string  consumedboxCardId  = 5;
    optional  ShareTag  shareTag  = 6;
    optional  uint32  fromScene  = 7;
    optional  StatisticInfo  statisticInfo  = 8;
}

message ShareCardItemResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  jsonRet  = 4;
}

message ShareCardReqItem {
    optional  string  cardId  = 1;
    optional  string  cardTpId  = 2;
    optional  string  cardExt  = 3;
    optional  string  jsCheckinfoUrl  = 4;
    optional  string  jsCheckinfoSessionUsername  = 5;
    optional  uint32  statisticScene  = 6;
    optional  string  comment  = 7;
}

message ShareCardSyncItem {
    optional  string  cardId  = 1;
    optional  uint32  stateFlag  = 2;
    optional  uint32  updateTime  = 3;
    optional  uint64  seq  = 4;
}

message ShareCardSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  maxSeq  = 2;
}

message ShareCardSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  ShareCardSyncItem  items  = 2;
    required  uint32  continueflag  = 3;
    optional  uint64  seq  = 4;
    optional  int32  waitTime  = 5;
}

message ShareFavResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  urlCount  = 2;
    repeated  SKBuiltinString_t  urlList  = 3;
}

message ShareLiveRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  liveId  = 2;
    optional  string  roomId  = 3;
}

message ShareLiveResponse {
    required  BaseResponse  baseResponse  = 1;
}

message ShareTag {
    repeated  string  shareUser  = 1;
    repeated  string  unshareUser  = 2;
    repeated  uint32  shareUins  = 3;
    repeated  uint32  unshareUins  = 4;
}

message ShareTransIdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  openid  = 3;
}

message ShareTransIdResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaBusinessBaseResponse  businessResp  = 2;
    optional  string  username  = 3;
}

message ShowAuthorizeUserIDReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  uint32  categoryId  = 3;
    optional  uint32  authType  = 4;
}

message ShowAuthorizeUserIDResp {
    required  BaseResponse  baseResponse  = 1;
    optional  AuthorizeUserIDBaseResponse  authBaseResponse  = 2;
    optional  uint32  showStatus  = 3;
    optional  AuthorizeUserIDAlarm  alarmBox  = 4;
    optional  string  title  = 5;
    optional  string  appiconUrl  = 6;
    optional  string  appname  = 7;
    optional  string  authWording  = 8;
    repeated  AuthorizeUserIDItem  userIdList  = 9;
    optional  string  businessWording  = 10;
    optional  string  confirmWording  = 11;
    optional  AuthorizeUserIDJumpItem  protocolJump  = 12;
    repeated  AuthorizeUserIDJumpItem  jumpList  = 13;
    optional  string  ticket  = 14;
    optional  VerifyWxPayReq  verifyPayReq  = 15;
    optional  bool  authChecked  = 16;
    optional  string  protocolPrefix  = 17;
    repeated  AuthorizeUserIDItem  newUserIdList  = 18;
    optional  AuthorizeInfoWithPhone  authorizeInfo  = 19;
}

message ShowInfo {
    optional  string  name  = 1;
    optional  string  value  = 2;
    optional  ValueAttr  valueAttr  = 3;
    optional  string  nameColor  = 4;
    optional  string  valueColor  = 5;
}

message ShowMessage {
    optional  string  leftButtonWording  = 1;
    optional  string  rightButtonWording  = 2;
    optional  string  rightButtonUrl  = 3;
}

message ShowOutItem {
    optional  string  username  = 1;
    optional  uint32  versionType  = 2;
    optional  uint32  appVersion  = 3;
    optional  string  appid  = 4;
}

message ShowStyleKey {
    required  uint32  keyCount  = 1;
    repeated  StyleKeyVal  key  = 2;
}

message ShowWordsInfo {
    optional  string  respShowWordsEn  = 1;
    optional  string  respShowWordsZhcn  = 2;
    optional  string  respShowWordsZhtw  = 3;
}

message SignatureInfo {
    required  uint32  version  = 1;
    required  bytes  signature  = 2;
}

message SimilarEmoticonRequest {
    optional  string  md5  = 1;
    optional  uint32  offset  = 2;
    optional  uint32  scene  = 3;
    optional  string  searchId  = 4;
    optional  string  sessionId  = 5;
    optional  uint32  h5Version  = 6;
    optional  LbsLocationNew  location  = 7;
    optional  uint32  tab  = 8;
    optional  string  requestId  = 9;
    optional  uint32  requestType  = 10;
    optional  string  emojiUrl  = 11;
    optional  string  aesKey  = 12;
    optional  ChildMode  childMode  = 13;
}

message SimilarEmoticonResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  json  = 2;
}

message SimpleProduct {
    optional  string  thumbUrl  = 1;
    optional  string  productName  = 2;
}

message SingleExposureInfo {
    optional  string  logo  = 1;
    optional  string  awardName  = 2;
    optional  string  awardDescription  = 3;
    optional  string  backgroundImg  = 4;
    optional  string  awardNameColor  = 5;
    optional  string  awardDescriptionColor  = 6;
}

message SingleLineTextViewData {
    optional  TextViewData  leftText  = 1;
    optional  RightTextViewData  rightText  = 2;
    optional  int32  type  = 3;
    optional  string  viewId  = 4;
}

message SlowRedeemDisplayInfo {
    optional  string  preArriveTimeWording  = 1;
    repeated  DocumentItem  redeemDisplayList  = 2;
}

message SmcSelfMonitor {
    required  uint32  itemcount  = 1;
    repeated  SmcSelfMonitorItem  itemlist  = 2;
}

message SmcSelfMonitorItem {
    required  uint32  dataid  = 1;
    required  uint32  action  = 2;
    required  uint32  collectdate  = 3;
    required  uint32  reportdate  = 4;
    required  uint32  datacount  = 5;
    required  uint32  uuid  = 6;
    optional  uint32  expand1  = 7;
    optional  uint32  expand2  = 8;
}

message SmcStrategyInterval {
    required  uint32  logidbegin  = 1;
    required  uint32  logidend  = 2;
    repeated  SmcStrategyItem  stgitems  = 3;
}

message SmcStrategyItem {
    required  uint32  logid  = 1;
    required  uint32  sampleratio  = 2;
    optional  uint32  reportcycle  = 3;
    optional  uint32  reportflag  = 4;
    optional  uint32  samplemode  = 5;
    optional  uint32  samplevalidinterval  = 6;
    optional  uint32  selfmonitor  = 7;
}

message SmsUpCheckExtInfo {
    optional  uint32  checkCount  = 1;
    optional  uint32  isFinalCheck  = 2;
}

message Snapshot {
    required  uint32  productCount  = 1;
    repeated  Production  productions  = 2;
    optional  Express  express  = 3;
    optional  Address  address  = 4;
    repeated  Receipt  receipt  = 5;
    optional  uint32  receiptCount  = 6;
    optional  string  lockId  = 7;
}

message SnsADCancelHeart {
    optional  SKBuiltinString_t  snsAduxInfo  = 1;
    optional  uint32  source  = 2;
    optional  SKBuiltinString_t  snsStatExt  = 3;
}

message SnsADCommentRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SnsActionGroup  action  = 2;
    optional  string  clientId  = 3;
    optional  SKBuiltinString_t  snsAduxInfo  = 4;
    optional  uint32  source  = 5;
    optional  SKBuiltinString_t  snsStatExt  = 6;
    optional  uint32  scene  = 7;
}

message SnsADCommentResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  SnsADObject  snsAdobject  = 2;
    optional  SnsRecommendObject  snsRecommendObject  = 3;
}

message SnsADHate {
    optional  SKBuiltinString_t  snsAduxInfo  = 1;
    optional  uint32  source  = 2;
    optional  SKBuiltinString_t  snsStatExt  = 3;
    optional  uint32  dislikeReasonId  = 4;
}

message SnsADObject {
    required  SnsObject  snsObject  = 1;
    optional  SKBuiltinString_t  adxml  = 2;
}

message SnsADObjectDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  id  = 2;
    optional  uint32  scene  = 3;
    optional  SKBuiltinBuffer_t  session  = 4;
    optional  uint32  source  = 5;
    optional  SKBuiltinBuffer_t  adInfoSyncBuffer  = 6;
    optional  uint32  networkType  = 7;
    optional  RemindFriendsInfo  remindFriendsInfo  = 8;
}

message SnsADObjectDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  SnsADObject  object  = 2;
    optional  SKBuiltinBuffer_t  session  = 3;
    optional  SnsRecommendObject  snsRecommendObject  = 4;
    optional  SKBuiltinBuffer_t  adDynamicInfoBuffer  = 5;
    optional  AdvertiseObject  remindAdobject  = 6;
}

message SnsADObjectDynamicInfo {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message SnsADObjectOpDeleteComment {
    required  uint64  commentId  = 1;
    optional  SKBuiltinString_t  snsAduxInfo  = 2;
    optional  uint32  source  = 3;
    optional  SKBuiltinString_t  snsStatExt  = 4;
}

message SnsAction {
    optional  string  fromUsername  = 1;
    optional  string  toUsername  = 2;
    optional  string  fromNickname  = 3;
    optional  string  toNickname  = 4;
    required  uint32  type  = 5;
    required  uint32  source  = 6;
    optional  uint32  createTime  = 7;
    optional  string  content  = 8;
    optional  int32  replyCommentId  = 9;
    optional  int32  commentId  = 10;
    optional  uint32  isNotRichText  = 11;
    optional  uint64  replyCommentId2  = 12;
    optional  uint64  commentId2  = 13;
    optional  SKBuiltinBuffer_t  hbbuffer  = 14;
    optional  uint32  commentFlag  = 15;
    optional  RemindFriendsInfo  remindFriendsInfo  = 16;
    repeated  SnsEmojiInfo  snsEmojiInfo  = 17;
    optional  uint32  snsEmojiInfoCount  = 18;
}

message SnsActionGroup {
    required  uint64  id  = 1;
    optional  uint64  parentId  = 2;
    required  SnsAction  currentAction  = 3;
    optional  SnsAction  referAction  = 4;
    optional  string  clientId  = 5;
    optional  uint32  objectCreateTime  = 6;
}

message SnsAdExpInfo {
    optional  uint64  hateFeedid  = 1;
    optional  uint32  hateTimestamp  = 2;
}

message SnsBufferUrl {
    optional  string  url  = 1;
    required  uint32  type  = 2;
}

message SnsCommentInfo {
    optional  string  username  = 1;
    optional  string  nickname  = 2;
    required  uint32  source  = 3;
    required  uint32  type  = 4;
    optional  string  content  = 5;
    required  uint32  createTime  = 6;
    optional  int32  commentId  = 7;
    optional  int32  replyCommentId  = 8;
    optional  string  replyUsername  = 9;
    optional  uint32  isNotRichText  = 10;
    optional  uint64  replyCommentId2  = 11;
    optional  uint64  commentId2  = 12;
    optional  uint32  deleteFlag  = 13;
    optional  uint32  commentFlag  = 14;
    repeated  SnsEmojiInfo  snsEmojiInfo  = 15;
    optional  uint32  snsEmojiInfoCount  = 16;
}

message SnsCommentRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SnsActionGroup  action  = 2;
    optional  string  clientId  = 3;
}

message SnsCommentResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SnsObject  snsObject  = 2;
}

message SnsCtrlInfo {
    optional  uint32  matchContactNum  = 1;
}

message SnsEmojiInfo {
    optional  string  md5  = 1;
    optional  SKBuiltinBuffer_t  emojiInfoBuf  = 2;
    optional  uint32  width  = 3;
    optional  uint32  height  = 4;
    optional  uint32  size  = 5;
}

message SnsGroup {
    required  uint64  groupId  = 1;
}

message SnsHBUserInfo {
    optional  string  username  = 1;
    required  uint32  createTime  = 2;
    required  SKBuiltinBuffer_t  hbbuffer  = 3;
}

message SnsMentionBlockOp {
    optional  uint32  blockSwitch  = 1;
}

message SnsObject {
    required  uint64  id  = 1;
    optional  string  username  = 2;
    optional  string  nickname  = 3;
    required  uint32  createTime  = 4;
    required  SKBuiltinBuffer_t  objectDesc  = 5;
    required  uint32  likeFlag  = 6;
    required  uint32  likeCount  = 7;
    required  uint32  likeUserListCount  = 8;
    repeated  SnsCommentInfo  likeUserList  = 9;
    required  uint32  commentCount  = 10;
    required  uint32  commentUserListCount  = 11;
    repeated  SnsCommentInfo  commentUserList  = 12;
    required  uint32  withUserCount  = 13;
    required  uint32  withUserListCount  = 14;
    repeated  SnsCommentInfo  withUserList  = 15;
    optional  uint32  extFlag  = 16;
    optional  uint32  noChange  = 17;
    optional  uint32  groupCount  = 18;
    repeated  SnsGroup  groupList  = 19;
    optional  uint32  isNotRichText  = 20;
    optional  string  referUsername  = 21;
    optional  uint64  referId  = 22;
    optional  uint32  blackListCount  = 23;
    repeated  SKBuiltinString_t  blackList  = 24;
    optional  uint32  deleteFlag  = 25;
    optional  uint32  groupUserCount  = 26;
    repeated  SKBuiltinString_t  groupUser  = 27;
    optional  SKBuiltinBuffer_t  objectOperations  = 28;
    optional  SnsRedEnvelops  snsRedEnvelops  = 29;
    optional  PreDownloadInfo  preDownloadInfo  = 30;
    optional  SnsWeAppInfo  weAppInfo  = 31;
}

message SnsObjectDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  id  = 2;
    optional  uint32  groupDetail  = 3;
}

message SnsObjectDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SnsObject  object  = 2;
}

message SnsObjectOp {
    required  uint64  id  = 1;
    required  uint32  opType  = 2;
    optional  SKBuiltinBuffer_t  ext  = 3;
}

message SnsObjectOpDeleteComment {
    required  int32  commentId  = 1;
}

message SnsObjectOpRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCount  = 2;
    repeated  SnsObjectOp  opList  = 3;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 4;
}

message SnsObjectOpResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  opCount  = 2;
    repeated  int32  opRetList  = 3[packed=true];
    optional  uint32  updateYearMonthInfo  = 4;
    optional  uint32  yearMonthInfoCount  = 5;
    repeated  SnsYearMonthInfo  yearMonthInfoList  = 6;
}

message SnsOperations {
    optional  uint32  snsOperationsFlag  = 1;
    optional  SocialInfluenceInfo  socialInfluenceInfo  = 2;
    optional  QuestionBar  bar  = 3;
    optional  DelayInfo  delayinfo  = 4;
    optional  Preload  preload  = 5;
    optional  RepeatUrl  repeaturl  = 6;
}

message SnsPostCtocUploadInfo {
    required  uint32  flag  = 1;
    required  uint32  photoCount  = 2;
}

message SnsPostOperationFields {
    optional  string  shareUrlOriginal  = 1;
    optional  string  shareUrlOpen  = 2;
    optional  string  jsAppId  = 3;
    optional  uint32  contactTagCount  = 4;
    optional  uint32  tempUserCount  = 5;
}

message SnsPostRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  objectDesc  = 2;
    optional  uint32  withUserListCount  = 3;
    repeated  SKBuiltinString_t  withUserList  = 4;
    optional  uint32  privacy  = 5;
    optional  uint32  syncFlag  = 6;
    optional  string  clientId  = 7;
    optional  uint32  postBgimgType  = 8;
    optional  uint32  groupCount  = 9;
    repeated  SnsGroup  groupIds  = 10;
    optional  uint32  objectSource  = 11;
    optional  uint64  referId  = 12;
    optional  uint32  blackListCount  = 13;
    repeated  SKBuiltinString_t  blackList  = 14;
    optional  TwitterInfo  twitterInfo  = 15;
    optional  uint32  groupUserCount  = 16;
    repeated  SKBuiltinString_t  groupUser  = 17;
    optional  SnsPostCtocUploadInfo  ctocUploadInfo  = 18;
    optional  SnsPostOperationFields  snsPostOperationFields  = 19;
    optional  SnsRedEnvelops  snsRedEnvelops  = 20;
    optional  SKBuiltinBuffer_t  poiInfo  = 21;
    optional  string  fromScene  = 22;
    optional  CanvasInfo  canvasInfo  = 23;
    optional  uint32  mediaInfoCount  = 24;
    repeated  MediaInfo  mediaInfo  = 25;
    optional  SnsWeAppInfo  weAppInfo  = 26;
    optional  SKBuiltinBuffer_t  clientCheckData  = 27;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 28;
}

message SnsPostResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SnsObject  snsObject  = 2;
    required  string  spamTips  = 3;
}

message SnsRecommendObject {
    required  SnsObject  snsObject  = 1;
    optional  SKBuiltinString_t  recommendXml  = 2;
}

message SnsRedEnvelops {
    required  uint32  rewardCount  = 1;
    repeated  SnsHBUserInfo  rewardUserList  = 2;
    optional  uint32  resourceId  = 3;
    optional  uint32  reportId  = 4;
    optional  uint32  reportKey  = 5;
}

message SnsServerConfig {
    optional  int32  postMentionLimit  = 1;
    optional  int32  copyAndPasteWordLimit  = 2;
}

message SnsSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  selector  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
}

message SnsSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    required  CmdList  cmdList  = 2;
    required  uint32  continueFlag  = 3;
    required  SKBuiltinBuffer_t  keyBuf  = 4;
}

message SnsTag {
    required  uint64  tagId  = 1;
    optional  string  tagName  = 2;
    required  uint32  count  = 3;
    repeated  SKBuiltinString_t  list  = 4;
}

message SnsTagListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    optional  string  tagListMd5  = 3;
}

message SnsTagListResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  opCode  = 2;
    optional  string  tagListMd5  = 3;
    required  uint32  count  = 4;
    repeated  SnsTag  list  = 5;
    optional  uint32  state  = 6;
}

message SnsTagMemMutilSetRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  modUserName  = 2;
    required  uint32  count  = 3;
    repeated  SKBuiltinUint64_t  tagIdList  = 4;
}

message SnsTagMemMutilSetResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  modUserName  = 2;
    required  uint32  count  = 3;
    repeated  SKBuiltinUint64_t  tagIdList  = 4;
}

message SnsTagMemberOptionRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    required  uint64  tagId  = 3;
    optional  string  tagName  = 4;
    required  uint32  count  = 5;
    repeated  SKBuiltinString_t  list  = 6;
    optional  uint32  scene  = 7;
}

message SnsTagMemberOptionResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SnsTag  snsTag  = 2;
}

message SnsTagOptionRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    required  uint64  tagId  = 3;
    optional  string  tagName  = 4;
}

message SnsTagOptionResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SnsTag  snsTag  = 2;
}

message SnsTimeLineRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  firstPageMd5  = 2;
    required  uint64  maxId  = 3;
    optional  uint64  minFilterId  = 4;
    optional  uint32  lastRequestTime  = 5;
    optional  uint64  clientLatestId  = 6;
    optional  SKBuiltinBuffer_t  session  = 7;
    optional  uint32  networkType  = 8;
    optional  SnsAdExpInfo  adexpinfo  = 10;
    optional  uint32  realFeedExposureIdsCount  = 11;
    repeated  uint64  realFeedExposureIds  = 12[packed=true];
    optional  uint32  updateTimelineScene  = 13;
    optional  uint32  pullType  = 14;
    optional  uint64  minIdForGetPrePage  = 15;
    optional  uint64  minIdForCheckUnread  = 16;
    optional  uint64  nearbyFoldId  = 17;
    optional  uint32  foldSectionSize  = 18;
    optional  uint64  getTimeLineIdxMinId  = 19;
}

message SnsTimeLineResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  firstPageMd5  = 2;
    required  uint32  objectCount  = 3;
    repeated  SnsObject  objectList  = 4;
    optional  uint32  newRequestTime  = 5;
    optional  uint32  objectCountForSameMd5  = 6;
    optional  uint32  controlFlag  = 7;
    optional  SnsServerConfig  serverConfig  = 8;
    optional  uint32  advertiseCount  = 9;
    repeated  AdvertiseObject  advertiseList  = 10;
    optional  SKBuiltinBuffer_t  session  = 11;
    optional  uint32  recCount  = 12;
    repeated  RecObject  recList  = 13;
    optional  uint32  delAdvertiseCount  = 14;
    repeated  DelAdvertiseObject  delAdvertiseList  = 15;
    optional  uint32  countForCheckUnread  = 16;
    repeated  uint64  idListForCheckUnread  = 17[packed=true];
    repeated  uint32  idFlagListForCheckUnread  = 18[packed=true];
    optional  SKBuiltinBuffer_t  weiShangInfo  = 19;
}

message SnsTimeLineWithTypeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint64  selectType  = 2;
}

message SnsTimeLineWithTypeResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  objectCount  = 2;
    repeated  SnsObject  objectList  = 3;
}

message SnsTimelineBrief {
    optional  uint64  feedId  = 1;
    optional  string  username  = 2;
    optional  uint32  weishangFlag  = 3;
    optional  uint32  createtime  = 4;
}

message SnsUploadRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  type  = 2;
    required  uint32  startPos  = 3;
    required  uint32  totalLen  = 4;
    required  SKBuiltinBuffer_t  buffer  = 5;
    optional  string  clientId  = 6;
    optional  uint32  filterStype  = 7;
    optional  uint32  syncFlag  = 8;
    optional  string  description  = 9;
    optional  int32  photoFrom  = 10;
    optional  int32  netType  = 11;
    optional  TwitterInfo  twitterInfo  = 12;
    optional  string  appId  = 13;
    optional  uint32  extFlag  = 14;
    optional  string  md5  = 15;
    optional  uint32  objectType  = 16;
}

message SnsUploadResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  startPos  = 2;
    required  uint32  totalLen  = 3;
    optional  string  clientId  = 4;
    required  SnsBufferUrl  bufferUrl  = 5;
    required  uint32  thumbUrlCount  = 6;
    repeated  SnsBufferUrl  thumbUrls  = 7;
    required  uint64  id  = 8;
    required  uint32  type  = 9;
}

message SnsUserInfo {
    required  uint32  snsFlag  = 1;
    optional  string  snsBgimgId  = 2;
    optional  uint64  snsBgobjectId  = 3;
    optional  uint32  snsFlagEx  = 4;
    optional  uint32  snsPrivacyRecent  = 5;
}

message SnsUserPageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  firstPageMd5  = 2;
    optional  string  username  = 3;
    required  uint64  maxId  = 4;
    optional  uint32  source  = 5;
    optional  uint64  minFilterId  = 6;
    optional  uint32  lastRequestTime  = 7;
    optional  uint32  filterType  = 8;
    optional  uint32  pullType  = 9;
}

message SnsUserPageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  firstPageMd5  = 2;
    required  uint32  objectCount  = 3;
    repeated  SnsObject  objectList  = 4;
    required  uint32  objectTotalCount  = 5;
    optional  SnsUserInfo  snsUserInfo  = 6;
    optional  uint32  newRequestTime  = 7;
    optional  uint32  objectCountForSameMd5  = 8;
    optional  SnsServerConfig  serverConfig  = 9;
    optional  uint64  limitedId  = 10;
    optional  uint64  continueId  = 11;
    optional  string  retTips  = 12;
    optional  uint32  yearMonthInfoCount  = 13;
    repeated  SnsYearMonthInfo  yearMonthInfoList  = 14;
    optional  bool  prePageDayEndFlag  = 15;
}

message SnsWeAppInfo {
    optional  string  mapPoiId  = 1;
    optional  uint32  appId  = 2;
    optional  string  userName  = 3;
    optional  string  redirectUrl  = 4;
    optional  uint32  showType  = 5;
    optional  uint32  score  = 6;
}

message SnsYearMonthInfo {
    required  uint32  year  = 1;
    required  uint32  month  = 2;
    required  uint64  lastId  = 3;
}

message SocialInfluenceInfo {
    optional  uint32  layerid  = 1;
    optional  uint32  expId  = 2;
    optional  int32  likeMax  = 3;
    optional  int32  commentMax  = 4;
}

message SortItem {
    required  uint32  sortId  = 1;
    required  string  name  = 2;
}

message SpecialFindPwdInfo {
    optional  string  assignName  = 1;
    optional  string  dialogTitle  = 2;
    optional  string  dialogContent  = 3;
    optional  string  renameBtnWording  = 4;
    optional  string  renameBtnUrl  = 5;
    optional  string  iKnowBtnWording  = 6;
}

message SpeedResult {
    required  uint32  clientIp  = 1;
    required  uint32  testPktSize  = 2;
    required  uint32  testCnt  = 3;
    required  VoipAddr  addr  = 4;
    required  uint32  avgRtt  = 5;
    required  uint32  minRtt  = 6;
    required  uint32  maxRtt  = 7;
    required  uint32  rttCnt  = 8;
    repeated  uint32  rtt  = 9[packed=true];
    required  uint32  downSeqCnt  = 10;
    repeated  uint32  downSeq  = 11[packed=true];
    required  uint32  upSeqCnt  = 12;
    repeated  uint32  upSeq  = 13[packed=true];
    optional  string  clientIpStr  = 14;
}

message SpeedTestAddr {
    required  string  ip  = 1;
    required  uint32  port  = 2;
}

message SpeedTestReportReq {
    required  BaseRequest  baseRequest  = 1;
    required  bytes  ctx  = 2;
    required  string  networkType  = 3;
    required  string  networkInfo  = 4;
    required  string  deviceInfo  = 5;
    required  uint32  connTime  = 6;
    required  uint32  connRetcode  = 7;
    required  uint32  transTime  = 8;
    required  int32  transRetcode  = 9;
    optional  SpeedTestAddr  serverAddr  = 10;
    optional  SpeedTestAddr  clientAddr  = 11;
}

message SpeedTestReportResp {
    required  BaseResponse  baseResp  = 1;
}

message SpeedTestSvr {
    required  VoipAddr  addr  = 1;
    required  uint32  testCnt  = 2;
    required  uint32  testGap  = 3;
    required  uint32  timeout  = 4;
    required  uint32  pktSize  = 5;
}

message SportDeviceInfo {
    optional  string  bundleId  = 1;
    optional  string  appName  = 2;
    optional  uint32  stepCount  = 3;
    optional  bool  isAppleWatch  = 4;
    optional  bool  isWhiteList  = 5;
    optional  bool  isLocalIphone  = 6;
}

message SportRecord {
    optional  string  appid  = 1;
    optional  string  appName  = 2;
    optional  string  appShortName  = 3;
    optional  string  sportName  = 4;
    optional  uint32  sportNum  = 5;
    optional  string  sportUnit  = 6;
    optional  string  sportUrl  = 7;
}

message SportRecordUpload {
    optional  uint32  sportTypeId  = 1;
    optional  uint32  sportTime  = 2;
    optional  uint32  sportDistance  = 3;
    optional  uint32  sportNumber  = 4;
    optional  uint32  sportCalorie  = 5;
    optional  string  sportUrl  = 6;
    optional  uint32  startTime  = 7;
    optional  uint32  duration  = 8;
}

message StatReportResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  nextReportTime  = 2;
    required  uint32  reportFlag  = 3;
}

message StatisticInfo {
    optional  string  templateMsgId  = 1;
    optional  string  recommendCardId  = 2;
}

message StatisticsAppInfo {
    optional  string  sourceAppId  = 1;
}

message StatisticsBrandVideoAdInfo {
    optional  string  jsReportArgs  = 1;
}

message StatisticsExtInfo {
    optional  StatisticsSnsAdInfo  snsAdInfo  = 1;
    optional  StatisticsBrandVideoAdInfo  brandVideoAdInfo  = 2;
    optional  StatisticsAppInfo  sourceAppInfo  = 3;
}

message StatisticsSnsAdInfo {
    optional  uint32  adType  = 1;
    optional  string  adPublishId  = 2;
    optional  string  adUxInfo  = 3;
    optional  uint32  source  = 4;
    optional  string  snsStatExt  = 5;
}

message Stats {
    optional  uint64  objectid  = 1;
    optional  BitFeature  bitFeature  = 2;
    optional  ValFeature  valFeature  = 3;
    optional  OriginVal  orgVal  = 4;
    optional  string  objectNonceId  = 5;
    optional  string  finderUsername  = 6;
    optional  uint64  actionTimeMs  = 7;
    optional  uint32  feedScene  = 8;
    optional  string  sessionBuffer  = 9;
    optional  uint64  finderUin  = 10;
    optional  uint32  commentScene  = 11;
    optional  uint64  recvTimeMs  = 12;
    optional  bytes  statExtData  = 13;
    optional  uint32  mediaType  = 14;
    optional  uint64  megavideoId  = 15;
    optional  string  megavideoNonceId  = 16;
    optional  uint64  exposeStartTimeMs  = 17;
    optional  uint32  uin  = 18;
}

message StatusBarStyleControl {
    optional  string  color  = 1;
    optional  string  style  = 2;
    optional  string  darkModeColor  = 3;
}

message StatusNotifyFunction {
    optional  string  name  = 1;
    optional  string  arg  = 2;
}

message StatusNotifyRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  code  = 2;
    optional  string  fromUserName  = 3;
    optional  string  toUserName  = 4;
    optional  string  clientMsgId  = 5;
    optional  uint32  unreadChatListCount  = 6;
    repeated  StatusNotifyUnreadChat  unreadChatList  = 7;
    optional  StatusNotifyFunction  function  = 8;
    optional  uint32  unreadFunctionCount  = 9;
    repeated  StatusNotifyFunction  unreadFunctionList  = 10;
}

message StatusNotifyResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  msgId  = 2;
    optional  uint64  newMsgId  = 3;
    optional  uint32  chatContactCount  = 4;
    repeated  ChatContact  chatContactList  = 5;
}

message StatusNotifyUnreadChat {
    optional  string  userName  = 1;
    required  uint32  lastReadTime  = 2;
}

message StepItem {
    optional  uint32  timestamp  = 1;
    optional  uint32  step  = 2;
}

message StoreWXaRedirectInfoItem {
    optional  uint32  appid  = 1;
    optional  string  username  = 2;
    optional  string  redirectUrl  = 3;
}

message StoryChatRoomSyncInfo {
    optional  string  userName  = 1;
    required  uint64  objId  = 2;
    optional  uint32  objPostTime  = 3;
    optional  string  thumbUrl  = 4;
    optional  uint32  storyCount  = 5;
    optional  string  videoUrl  = 6;
}

message StoryChatRoomSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  string  chatRoomName  = 3;
    optional  SKBuiltinBuffer_t  extBuf  = 4;
}

message StoryChatRoomSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  syncCount  = 2;
    repeated  StoryChatRoomSyncInfo  syncInfoList  = 3;
    required  uint32  syncInterval  = 4;
    optional  SKBuiltinBuffer_t  extBuf  = 5;
}

message StoryCommentDetail {
    required  uint64  id  = 1;
    optional  string  fromUserName  = 2;
    optional  string  toUserName  = 3;
    optional  string  fromNickName  = 4;
    optional  string  toNickName  = 5;
    required  uint32  createTime  = 6;
    optional  string  content  = 7;
    optional  uint32  fontColor  = 8;
    required  uint32  commentFlag  = 9;
    optional  int32  replyCommentId  = 10;
    optional  int32  commentId  = 11;
    optional  uint32  isNotRichText  = 12;
    optional  string  thumbUrl  = 13;
    optional  uint32  bubbleEnhance  = 14;
    optional  uint32  doubleClickBubble  = 15;
}

message StoryCommentRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientId  = 2;
    required  StoryCommentDetail  commentDetail  = 3;
    optional  uint32  previewEnterScene  = 4;
    optional  uint32  profileSource  = 5;
    optional  StoryCommentDetail  referCommentDetail  = 6;
    optional  string  sessionId  = 7;
}

message StoryCommentResponse {
    required  BaseResponse  baseResponse  = 1;
    required  StoryObject  storyObject  = 2;
    required  uint32  commentId  = 3;
}

message StoryDateDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  int32  timeZone  = 3;
    optional  string  date  = 4;
    optional  uint64  maxId  = 5;
}

message StoryDateDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  storyCount  = 2;
    repeated  StoryObject  storyList  = 3;
    optional  uint64  limitedId  = 4;
    optional  uint32  continueFlag  = 5;
}

message StoryFeaturedPageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  featuredPageMd5  = 2;
    optional  uint32  featuredCount  = 3;
    repeated  StoryObject  featuredList  = 4;
    optional  uint32  newRequestTime  = 5;
}

message StoryHistoryItem {
    required  uint64  id  = 1;
    optional  string  date  = 2;
    optional  StoryObject  storyObject  = 3;
    optional  uint32  storyCount  = 4;
    repeated  uint32  objIdList  = 5[packed=true];
}

message StoryHistoryPageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  firstPageMd5  = 2;
    optional  string  userName  = 3;
    required  int32  timeZone  = 4;
    optional  uint64  maxId  = 5;
    optional  uint64  minFilterId  = 6;
    optional  uint32  lastRequestTime  = 7;
}

message StoryHistoryPageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  firstPageMd5  = 2;
    required  uint32  historyItemCount  = 3;
    repeated  StoryHistoryItem  historyItemList  = 4;
    optional  uint32  newRequestTime  = 5;
    optional  uint64  limitedId  = 6;
}

message StoryObjDetailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  id  = 2;
    optional  string  userName  = 3;
}

message StoryObjDetailResponse {
    required  BaseResponse  baseResponse  = 1;
    required  StoryObject  storyObject  = 2;
}

message StoryObjOpCommentDel {
    required  int32  commentId  = 1;
    optional  string  toUserName  = 2;
}

message StoryObjOpObjDel {
    required  uint64  objId  = 1;
}

message StoryObjOpObjVisibilitySet {
    required  uint64  objId  = 1;
    required  uint32  visibility  = 2;
}

message StoryObject {
    required  uint64  id  = 1;
    optional  string  userName  = 2;
    optional  string  nickName  = 3;
    required  uint32  createTime  = 4;
    required  uint32  objType  = 5;
    required  SKBuiltinBuffer_t  objDesc  = 6;
    optional  uint32  commentCount  = 7;
    repeated  StoryCommentDetail  commentList  = 8;
    optional  uint32  bubbleCount  = 9;
    repeated  StoryCommentDetail  bubbleList  = 10;
    optional  uint32  deleteFlag  = 11;
    optional  uint32  visiableSelfOnly  = 12;
    optional  uint32  isFeatured  = 13;
    optional  uint32  featuredTime  = 14;
    optional  uint32  blackListCount  = 15;
    repeated  SKBuiltinString_t  blackList  = 16;
    optional  uint32  groupUserCount  = 17;
    repeated  SKBuiltinString_t  groupUser  = 18;
    optional  uint32  visitorCount  = 19;
    repeated  StoryCommentDetail  visitorList  = 20;
}

message StoryObjectCommentsRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    optional  uint32  objIdCount  = 3;
    repeated  uint64  objIdList  = 4[packed=true];
}

message StoryObjectCommentsResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  objCount  = 2;
    repeated  StoryObject  objList  = 3;
}

message StoryOp {
    required  uint64  objId  = 1;
    required  uint32  opType  = 2;
    required  SKBuiltinBuffer_t  opContent  = 3;
}

message StoryOpRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCount  = 2;
    repeated  StoryOp  opList  = 3;
}

message StoryOpResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  opRespCount  = 2;
    repeated  int32  opRetList  = 3[packed=true];
}

message StoryPostRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  objDesc  = 2;
    optional  string  clientId  = 3;
    optional  SKBuiltinBuffer_t  clientCheckData  = 4;
    optional  uint32  visiableSelfOnly  = 5;
}

message StoryPostResponse {
    required  BaseResponse  baseResponse  = 1;
    required  StoryObject  storyObject  = 2;
    optional  uint32  postedCount  = 3;
    optional  uint32  nextPostPeriod  = 4;
}

message StorySyncInfo {
    optional  string  userName  = 1;
    optional  uint64  objId  = 2;
    optional  uint32  objPostTime  = 3;
    optional  string  thumbUrl  = 4;
    optional  uint32  chatRoomIdx  = 5;
    optional  uint32  last24HoursCount  = 6;
}

message StorySyncMsg {
    required  uint64  id  = 1;
    required  uint32  type  = 2;
    required  StorySyncMsgDetail  syncMsgDetail  = 3;
    optional  StorySyncMsgDetail  referSyncMsgDetail  = 4;
}

message StorySyncMsgDetail {
    required  uint64  id  = 1;
    optional  string  fromUserName  = 2;
    optional  string  toUserName  = 3;
    optional  string  fromNickName  = 4;
    optional  string  toNickName  = 5;
    optional  string  content  = 6;
    required  uint32  type  = 7;
    required  uint32  createTime  = 8;
    optional  int32  commentId  = 9;
    optional  int32  replyCommentId  = 10;
    optional  uint32  isNotRichText  = 11;
    optional  string  thumbUrl  = 12;
    optional  StoryObject  storyObject  = 13;
    optional  uint32  bubbleEnhance  = 14;
    optional  uint32  objCreateTime  = 15;
    optional  string  objOwner  = 16;
    optional  uint32  isFeatured  = 17;
}

message StorySyncRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  selector  = 2;
    required  SKBuiltinBuffer_t  keyBuf  = 3;
    optional  uint32  syncScene  = 4;
}

message StorySyncResponse {
    required  BaseResponse  baseResponse  = 1;
    required  CmdList  cmdList  = 2;
    required  uint32  continueFlag  = 3;
    required  SKBuiltinBuffer_t  keyBuf  = 4;
}

message StoryUserPageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  firstPageMd5  = 2;
    optional  string  userName  = 3;
    required  uint64  maxId  = 4;
    optional  uint64  minFilterId  = 5;
    optional  uint32  lastRequestTime  = 6;
    optional  uint64  roomId  = 7;
    optional  uint32  source  = 8;
    optional  string  chatRoomName  = 9;
}

message StoryUserPageResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  firstPageMd5  = 2;
    required  uint32  objCount  = 3;
    repeated  StoryObject  objList  = 4;
    required  uint32  objTotalCount  = 5;
    required  uint32  objLast24HoursCount  = 6;
    optional  uint32  newRequestTime  = 7;
    optional  uint64  limitedId  = 8;
}

message StrategyInterval {
    required  uint32  logIdbegin  = 1;
    required  uint32  logIdend  = 2;
    repeated  NewStrategyItem  strategyItem  = 3;
}

message StrategyItem {
    required  uint32  logType  = 1;
    required  uint32  enalbe  = 2;
    required  uint32  cycle  = 3;
    optional  string  extInfo  = 4;
}

message StrategyTable {
    repeated  SmcStrategyInterval  stginters  = 1;
}

message StyleKeyVal {
    required  uint32  key  = 1;
    optional  string  val  = 2;
}

message SubAppForcePushRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  qrCode  = 2;
}

message SubAppForcePushResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SubmitAuthorizeUserIDReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  uint32  categoryId  = 3;
    optional  string  payToken  = 4;
    optional  string  ticket  = 5;
    optional  string  optionalMobile  = 6;
}

message SubmitAuthorizeUserIDResp {
    required  BaseResponse  baseResponse  = 1;
    optional  AuthorizeUserIDBaseResponse  authBaseResponse  = 2;
    optional  uint32  authStatus  = 3;
    optional  AuthorizeUserIDSmsInfo  sms  = 4;
    optional  string  authToken  = 5;
}

message SubmitMallFreeOrderRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  Snapshot  snapshot  = 2;
}

message SubmitMallFreeOrderResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  prepareId  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message SubmitMallOrderRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  Snapshot  snapshot  = 2;
    optional  string  payAppid  = 3;
    optional  uint32  fromScene  = 4;
}

message SubmitMallOrderResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  prepareId  = 2;
    optional  int32  retCode  = 3;
    optional  string  retMsg  = 4;
}

message SubmitOriginalReviewRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  WxaGameBaseInfo  wxaGameInfo  = 3;
    optional  WxaGameClientPublicLibInfo  publicLib  = 6;
    optional  SubmitOriginalReviewRequest_WxaGameEnvContext  envContext  = 7;
    optional  SubmitOriginalReviewRequest_WxagGameOriginalReviewResult  result  = 8;
}

message SubmitOriginalReviewRequest_WxaGameEnvContext {
    optional  bool  isMute  = 1;
    optional  bool  isPlayMusic  = 2;
    optional  uint32  playingSeconds  = 3;
}

message SubmitOriginalReviewRequest_WxagGameOriginalReviewResult {
    optional  string  questionId  = 1;
    optional  bool  isRejectAnswer  = 2;
    optional  uint32  optionId  = 3;
}

message SubmitOriginalReviewResponse {
    required  BaseResponse  baseResponse  = 1;
}

message SubmitPayProductBuyInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  payFuncId  = 2;
    optional  string  payProductId  = 3;
    optional  string  payAppId  = 4;
    optional  string  remarks  = 5;
    optional  string  ticket  = 6;
}

message SubmitPayProductBuyInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  reqKey  = 2;
    optional  string  appSource  = 3;
    required  int32  outerErrCode  = 4;
    optional  string  outerErrMsg  = 5;
}

message SubscribeMsgItem {
    optional  string  templateId  = 1;
    optional  uint32  templateType  = 2;
    optional  uint32  chooseStatus  = 5;
    optional  string  title  = 6;
    repeated  KeyWordInfo  keyWordList  = 7;
    optional  uint32  settingStatus  = 8;
    optional  string  bizUserName  = 9;
    optional  uint32  isOpen  = 10;
    optional  uint32  isBan  = 11;
    optional  string  sceneDesc  = 12;
    optional  string  wxaSubscribeStatusString  = 13;
    optional  uint32  tid  = 14;
}

message SubscribeMsgReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bizUserName  = 2;
    optional  uint32  actionType  = 3;
    repeated  SubscribeMsgItem  itemList  = 4;
    optional  uint32  funcFlag  = 7;
    optional  uint32  isOpen  = 8;
    optional  string  subscribeUrl  = 9;
    optional  bytes  buffer  = 10;
    optional  PopupUIData  uidata  = 11;
    optional  uint32  scene  = 12;
}

message SubscribeMsgResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  SubscribeMsgItem  infoList  = 2;
    optional  SubscribeMsgWording  wording  = 3;
    optional  string  appname  = 4;
    optional  string  appiconUrl  = 5;
    optional  uint32  notShowAlways  = 6;
    optional  uint32  alwaysChooseStatus  = 9;
    optional  uint32  cacheMaxAge  = 10;
    optional  uint32  isOpen  = 11;
    optional  uint32  subscribeMsgEntry  = 15;
    optional  bytes  buffer  = 16;
    optional  uint32  wxaErrorCode  = 17;
    optional  string  wxaErrorMessage  = 18;
    optional  bool  wxaUserCancel  = 19;
    optional  string  mainDescription  = 20;
    optional  string  subDescription  = 21;
    optional  uint32  showStyle  = 22;
    optional  SubscribeMsgShowInfo  showInfo  = 23;
}

message SubscribeMsgShowInfo {
    optional  uint32  showType  = 1;
    optional  string  alertTitle  = 2;
    optional  string  alertContent  = 3;
}

message SubscribeMsgUIItem {
    optional  string  templateId  = 1;
    optional  uint32  chooseStatus  = 2;
}

message SubscribeMsgWording {
    optional  string  popupTitle  = 1;
    optional  string  popupAllow  = 2;
    optional  string  popupCancel  = 3;
    optional  string  popupBottom  = 4;
    optional  string  exampleTitle  = 5;
    optional  string  alwaysReject  = 6;
    optional  string  popupDesc  = 7;
    optional  string  sendWording  = 8;
    optional  string  multiRemind  = 9;
    optional  string  wxaMultiRemind  = 10;
    optional  string  sendBelowMsg  = 11;
    optional  string  testWording  = 12;
    optional  string  shortMultiRemind  = 13;
}

message SubscribeNewGameRequest_V2 {
    required  BaseRequest  baseRequest  = 1;
    required  string  lang  = 2;
    required  string  appId  = 3;
    optional  string  noticeId  = 4;
    optional  string  country  = 5;
    optional  bool  hasEnableChatroom  = 6;
}

message SubscribeNewGameResponse_V2 {
    required  BaseResponse  baseResponse  = 1;
    required  bool  isSubscribed  = 2;
    required  string  title  = 3;
    required  string  message  = 4;
    optional  ChatRoomInfo  chatRoomInfo  = 5;
}

message SubscribeVideoInfo {
    repeated  SubscribeVideoItem  videoList  = 1;
    repeated  SubscribeVideoItem  screenList  = 2;
}

message SubscribeVideoItem {
    required  uint32  memberid  = 1;
    required  uint32  videoLength  = 2;
}

message SugResult {
    repeated  SugResult_SugItem  items  = 1;
}

message SugResult_SugItem {
    optional  string  word  = 1;
    optional  string  docId  = 2;
    optional  bytes  debugInfo  = 3;
    optional  string  cacheJsonResult  = 4;
}

message SummaryFeedItem {
    repeated  string  userNames  = 1;
    optional  string  detail  = 2;
}

message SwitchBrandReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  bool  disable  = 3;
}

message SwitchBrandResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
}

message SwitchOpFaceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  opCode  = 2;
}

message SwitchOpFaceResonse {
    required  BaseResponse  baseResponse  = 1;
    optional  bool  hasRegisterBio  = 2;
    optional  bool  hasOpenSwitch  = 3;
}

message SwitchOpVoicePrintRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opcode  = 2;
}

message SwitchOpVoicePrintResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  userSwitch  = 2;
    required  uint32  userStatus  = 3;
}

message SwitchPushMailRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  switchValue  = 2;
    optional  string  secPwdMd5  = 3;
}

message SwitchPushMailResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  switchValue  = 2;
}

message SwitchServiceNotifyOptionItem {
    optional  uint32  type  = 2;
    optional  uint32  switchType  = 3;
    optional  string  wxaUsername  = 4;
}

message SwitchViewData {
    optional  int32  switchState  = 1;
    optional  int32  switchType  = 2;
    optional  string  viewId  = 3;
}

message SyncControl {
    required  uint32  useInitContact  = 1;
}

message SyncKey {
    required  uint32  keyCount  = 1;
    repeated  KeyVal  key  = 2;
}

message SyncVersionSingleReqInfo {
    optional  string  wxaUserName  = 1;
    optional  uint32  localAppVersion  = 2;
    optional  uint32  codePackageVersion  = 3;
    optional  string  path  = 4;
}

message SyncVersionSingleRespInfo {
    required  string  wxaUserName  = 1;
    optional  WxaSyncCmds  cmds  = 2;
    optional  string  appid  = 3;
}

message SyncWxagGameListRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  offSet  = 2;
    optional  string  country  = 4;
}

message SyncWxagGameListResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  SyncWxagGameListResponse_WxagGameInfo  gameList  = 2;
    optional  bool  remaining  = 3;
    optional  uint32  nextOffSet  = 4;
}

message SyncWxagGameListResponse_WxagGameInfo {
    required  string  appId  = 1;
    required  string  appName  = 2;
    required  string  userName  = 3;
    required  string  iconUrl  = 4;
    optional  string  briefIntro  = 5;
}

message SystemCookieFinderData {
    optional  uint32  debug  = 1;
}

message TLRecArticleWrapper {
    optional  string  recSummary  = 1;
    optional  string  aggregationUrl  = 2;
    optional  string  aggregationTitle  = 3;
    optional  string  event  = 4;
    optional  BizRecArticleCard  articleCard  = 5;
    optional  string  cardId  = 20;
    optional  string  exptType  = 21;
}

message TLRecCard {
    optional  string  cardTitle  = 1;
    optional  TLRecCardBizInfo  bizInfo  = 2;
    optional  string  appMsgRecReason  = 3;
    repeated  TLRecCardAppMsg  appMsg  = 4;
    optional  string  versionInfo  = 5;
    optional  uint64  clientId  = 6;
    optional  TLRecCardUserInfo  recCardUserInfo  = 7;
}

message TLRecCardAppMsg {
    optional  uint32  flag  = 1;
    optional  string  title  = 2;
    optional  string  digest  = 3;
    optional  string  contentUrl  = 6;
    optional  string  coverImgUrl  = 8;
    optional  string  coverImgUrl11  = 9;
    optional  string  coverImgUrl2351  = 10;
    optional  uint32  itemShowType  = 11;
    optional  string  videoId  = 15;
    optional  uint32  videoWidth  = 16;
    optional  uint32  videoHeight  = 17;
    optional  uint32  videoDuration  = 18;
    optional  uint32  createTime  = 19;
}

message TLRecCardBizInfo {
    optional  string  userName  = 1;
    optional  string  nickName  = 2;
    optional  uint32  flag  = 3;
    optional  string  recReason  = 4;
    optional  string  signature  = 5;
    optional  string  brandIconUrl  = 6;
}

message TLRecCardLite {
    optional  uint64  clientId  = 1;
    optional  string  bizUserName  = 2;
    repeated  string  appMsgUrl  = 3;
    optional  string  versionInfo  = 4;
    optional  string  userVersionInfo  = 5;
}

message TLRecCardUserInfo {
    optional  string  versionInfo  = 1;
    optional  TLRecCardUserInfo_FeedbackInfoMsg  feedbackInfo  = 2;
}

message TLRecCardUserInfo_FeedbackInfoMsg {
    repeated  string  negativeFeedbackReason  = 1;
    optional  uint32  showNegativeFeedbackReason  = 2;
}

message TLRecCardWrapper {
    optional  TLRecCard  recCard  = 1;
    optional  int32  pos  = 2;
    optional  int32  weight  = 3;
    optional  bool  hasWeight  = 4;
    optional  uint64  msgSvrId  = 5;
    optional  uint32  createTime  = 6;
    optional  uint64  recId  = 7;
    optional  int32  style  = 8;
    optional  TLRecArticleWrapper  articleCardWrapper  = 9;
    optional  TLRecCardUserInfo_FeedbackInfoMsg  feedbackInfo  = 10;
    optional  int32  redDotFlag  = 11;
    optional  bool  isUseServerTime  = 12;
    optional  string  extraData  = 13;
}

message TableCellViewData {
    optional  ImageViewData  icon  = 1;
    repeated  TextViewData  titles  = 2;
    repeated  TextViewData  subTitles  = 3;
    optional  ImageViewData  navIcon  = 4;
    optional  RedDot  redDot  = 5;
    optional  string  viewId  = 6;
    optional  PaddingStyle  padding  = 7;
    optional  RouteInfo  routeInfo  = 8;
    optional  RoundTextViewData  tag  = 9;
}

message TablePageData {
    optional  NavigationBarViewData  navBar  = 1;
    repeated  ItemSectionViewData  section  = 2;
    repeated  TextViewData  bottomText  = 3;
}

message TagCtrlInfo {
    optional  string  publishUsername  = 1;
    optional  string  commentUserName  = 2;
    optional  uint32  source  = 3;
    optional  uint32  contentType  = 4;
    optional  string  contentId  = 5;
}

message TagSearchInfo {
    optional  uint32  tagType  = 1;
    optional  string  tagText  = 2;
    optional  string  tagExtValue  = 3;
}

message TalkMicActionReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    required  uint32  actionType  = 4;
    optional  uint32  updateTime  = 5;
    optional  uint32  scene  = 6;
}

message TalkMicActionResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  micSeq  = 2;
    optional  uint32  channelId  = 3;
}

message TalkNoopReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  uint32  updateTime  = 4;
    optional  uint32  scene  = 5;
}

message TalkNoopResp {
    required  BaseResponse  baseResponse  = 1;
}

message TalkRelayAddr {
    required  uint32  ip  = 1;
    required  uint32  port  = 2;
    optional  string  ipStr  = 3;
}

message TalkRoomMember {
    required  int32  memberId  = 1;
    optional  string  userName  = 2;
}

message TalkStatReportData {
    required  int32  logId  = 1;
    required  SKBuiltinString_t  statReport  = 2;
}

message TalkStatReportReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  dataNum  = 2;
    repeated  TalkStatReportData  reportData  = 3;
    optional  uint32  scene  = 4;
}

message TalkStatReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message TeenagerModeBizAcctSettingOplog {
    optional  uint32  setting  = 1;
}

message TeenagerModeFinderSettingOplog {
    optional  uint32  setting  = 1;
}

message TeenagerModeMiniProgramSettingOplog {
    optional  uint32  setting  = 1;
}

message TenPayRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  cgiCmd  = 2;
    required  uint32  outPutType  = 3;
    required  SKBuiltinBuffer_t  reqText  = 4;
    optional  SKBuiltinBuffer_t  reqTextWx  = 5;
    optional  string  sign  = 6;
    optional  string  crtNo  = 7;
}

message TenPayResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinBuffer_t  retText  = 2;
    required  int32  platRet  = 3;
    optional  string  platMsg  = 4;
    required  int32  cgiCmdid  = 5;
    optional  int32  tenpayErrType  = 6;
    optional  string  tenpayErrMsg  = 7;
}

message TextAttribute {
    optional  int64  color  = 1;
    optional  string  font  = 2;
    optional  string  text  = 3;
    optional  float  size  = 4;
    optional  RouteInfo  routeInfo  = 5;
    optional  int32  textAttr  = 6;
    optional  string  viewId  = 7;
    optional  DynamicColor  dynamicColor  = 8;
}

message TextViewData {
    repeated  TextAttribute  text  = 1;
    optional  string  viewId  = 2;
}

message ThemeOpLog {
    required  uint32  key  = 1;
    optional  string  value  = 2;
}

message ThirdAppVerifyRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  thirdAppTicket  = 2;
    required  uint32  ticketType  = 3;
    optional  string  language  = 4;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 5;
}

message ThirdAppVerifyResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  thirdAppAuthTicket  = 2;
}

message ThirdNotifyData {
    optional  int32  type  = 1;
    optional  bytes  data  = 2;
}

message TimeItem {
    optional  string  title  = 1;
    optional  TimeSpan  time  = 2;
}

message TimeSpan {
    optional  uint32  beginTime  = 1;
    optional  uint32  endTime  = 2;
}

message TimelineGetCommentRewardReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  TimelineGetCommentRewardReq_AppMsg  appmsgList  = 2;
}

message TimelineGetCommentRewardReq_AppMsg {
    optional  string  bizusername  = 1;
    optional  uint64  mid  = 2;
    optional  uint64  clientMsgId  = 3;
    optional  uint64  maxIdx  = 4;
    optional  uint32  idx  = 5;
    optional  string  url  = 6;
    optional  uint64  clientIndex  = 7;
    optional  uint32  type  = 8;
    optional  uint64  commentTopicId  = 9;
}

message TimelineGetCommentRewardResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  TimelineGetCommentRewardResp_AppMsgStat  statList  = 2;
    optional  uint32  refreshIntervalSec  = 3;
}

message TimelineGetCommentRewardResp_AppMsgStat {
    optional  string  bizusername  = 1;
    optional  uint64  mid  = 2;
    optional  uint32  idx  = 3;
    optional  uint32  rewardCnt  = 4;
    optional  uint32  electedCommentCnt  = 5;
    optional  uint64  clientMsgId  = 6;
    optional  uint32  fansReadCnt  = 7;
    optional  string  url  = 8;
    optional  uint64  clientIndex  = 9;
    optional  uint32  readNum  = 10;
    optional  uint32  likeNum  = 11;
    optional  uint32  likeStatus  = 12;
    optional  uint64  commentTopicId  = 13;
    optional  uint32  isBanLike  = 14;
    optional  uint32  isBanComment  = 15;
}

message TimelineGetOftenReadBizReq {
    required  BaseRequest  baseRequest  = 1;
    repeated  TimelineGetOftenReadBizReq_OftenReadBizInfo  oftenReadBizInfo  = 2;
}

message TimelineGetOftenReadBizReq_OftenReadBizInfo {
    optional  string  bizusername  = 1;
    optional  uint32  lastRecvMsgTime  = 2;
}

message TimelineGetOftenReadBizResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  TimelineGetOftenReadBizResp_BizInfo  bizInfoList  = 2;
    optional  uint32  displayCtrlFlag  = 3;
    optional  uint32  serverRankOftenReadBiz  = 4;
    optional  uint32  greenPointStayTimeInSec  = 5;
    repeated  TimelineGetOftenReadBizResp_BizInfo  normalBizInfoList  = 6;
    repeated  TimelineGetOftenReadBizResp_BizInfo  seldomReadBizInfoList  = 7;
}

message TimelineGetOftenReadBizResp_BizInfo {
    optional  string  bizusername  = 1;
    optional  string  logoUrl  = 2;
    optional  uint32  weight  = 3;
}

message TimelineIdx {
    optional  uint64  feedId  = 1;
}

message TimelineNotifyInfo {
    repeated  NotifyVideoInfo  notifyList  = 2;
    optional  string  wording  = 3;
    optional  uint32  shouldCleanup  = 4;
    optional  string  entryTitle  = 5;
    optional  string  appid  = 6;
    optional  int32  version  = 7;
}

message TinyAppUri {
    optional  string  username  = 1;
    optional  string  path  = 2;
    optional  uint32  version  = 3;
}

message TipsItem {
    optional  string  promptText  = 1;
    optional  string  jumpText  = 2;
    optional  string  jumpUrl  = 3;
}

message TitleInfo {
    optional  uint32  type  = 1;
    optional  string  titleText  = 2;
}

message TokeMess {
    optional  string  packageex  = 4;
    optional  string  sign  = 5;
    optional  string  signType  = 6;
    optional  uint32  checkPwdScene  = 7;
    optional  string  busiId  = 8;
}

message TopRecommendBanner {
    optional  uint32  type  = 1;
    optional  string  title  = 2;
    optional  string  jumpUrl  = 3;
    optional  string  backgroundPicUrl  = 4;
    repeated  TopRecommendBanner_TopRecommendBannerGameItem  gameList  = 5;
    optional  string  externInfo  = 6;
}

message TopRecommendBanner_TopRecommendBannerGameItem {
    required  AppItem  appItem  = 1;
    optional  string  slogan  = 2;
    optional  string  customName  = 3;
    optional  string  sloganColor  = 4;
    optional  string  nameColor  = 5;
    optional  string  externInfo  = 6;
}

message TopStoryPluginPostCommentRequest {
    optional  string  requestId  = 1;
    optional  string  docId  = 2;
    optional  string  content  = 3;
    optional  string  replyId  = 4;
    optional  string  subReplyId  = 5;
    optional  string  docUrl  = 6;
    optional  string  title  = 7;
    optional  string  searchId  = 8;
    optional  uint32  scene  = 9;
    optional  uint32  subScene  = 10;
    optional  string  byPass  = 11;
    optional  string  vid  = 12;
    optional  uint32  source  = 13;
}

message TopStoryPluginPostCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  commentId  = 2;
    optional  string  requestId  = 3;
}

message TopStoryPluginSetCommentRequest {
    optional  string  docId  = 1;
    optional  string  commentId  = 2;
    optional  uint32  opType  = 3;
    optional  string  requestId  = 4;
    optional  string  content  = 5;
    optional  uint32  scene  = 6;
    optional  string  searchId  = 7;
    optional  uint32  subScene  = 8;
    optional  string  vid  = 9;
    optional  string  byPass  = 10;
    optional  uint32  source  = 11;
}

message TopStoryPluginSetCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  requestId  = 2;
    optional  bool  hasDeleteComment  = 3;
}

message TopStoryVoteRequest {
    optional  uint32  scene  = 1;
    optional  string  docid  = 2;
    optional  int32  voteType  = 3;
    optional  uint32  category  = 4;
}

message TopStoryVoteResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message TopicFilter {
    repeated  uint64  topicId  = 1;
}

message TouchInfo {
    optional  int32  canUseTouch  = 7;
    optional  bytes  touchChallenge  = 8;
    optional  int32  needChangeAuthKey  = 9;
}

message TrackPOIItem {
    required  double  latitude  = 1;
    required  double  longitude  = 2;
    optional  string  name  = 3;
    optional  string  addr  = 4;
}

message TradeDetailItem {
    optional  string  title  = 1;
    optional  string  directUrl  = 2;
}

message TransCDNItem {
    required  uint32  clientId  = 1;
    optional  string  fileId  = 2;
    optional  string  aesKey  = 3;
    required  uint32  favDataType  = 4;
    required  uint64  size  = 5;
    optional  string  clientStrId  = 6;
}

message TransIdRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  username  = 3;
    optional  string  openid  = 4;
}

message TransIdResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  openid  = 2;
    optional  string  username  = 3;
}

message TransToBankCardPayReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  bankCardSeqno  = 2;
    optional  string  bankCardTailno  = 3;
    optional  string  bankType  = 4;
    optional  uint32  enterTimeScene  = 5;
    optional  uint32  transferAmt  = 6;
    optional  string  transferExplain  = 7;
    optional  uint32  poundage  = 8;
    optional  uint32  inputType  = 9;
    optional  string  encryptData  = 10;
    optional  string  uniqueId  = 11;
    optional  string  lastTransferBillId  = 12;
    optional  uint32  unpayType  = 13;
}

message TransToBankCardPayRes {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retcode  = 2;
    optional  string  retmsg  = 3;
    optional  string  reqkey  = 4;
    optional  string  transferBillId  = 5;
    optional  string  bankCardTailno  = 6;
    optional  string  payeeName  = 7;
    optional  string  bankName  = 8;
    optional  AlertItem  alertItem  = 9;
}

message TransToBankHistoryItem {
    optional  string  transferBillId  = 1;
    optional  uint32  state  = 2;
    optional  string  title  = 3;
    optional  string  transferTime  = 4;
    optional  uint64  transferUnixtime  = 5;
    optional  string  moneyText  = 6;
    optional  string  bankLogo  = 7;
    optional  string  stateText  = 8;
    optional  string  stateColor  = 9;
}

message TransferAction {
    optional  uint32  actionCode  = 1;
    optional  TransferAction_OpenAppInfo  openAppInfo  = 2;
    optional  TransferAction_OpenUrlInfo  openUrlInfo  = 3;
    optional  TransferAction_AlertMsgInfo  alertMsgInfo  = 4;
}

message TransferAction_AlertMsgInfo {
    optional  string  alertTitle  = 1;
    optional  string  alertMsg  = 2;
}

message TransferAction_OpenAppInfo {
    optional  uint32  wxaScene  = 1;
}

message TransferAction_OpenUrlInfo {
    optional  string  url  = 1;
}

message TransferAesEncryptData {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  appData  = 2;
}

message TransferChatRoomOwnerRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
    optional  string  newOwnerUserName  = 3;
}

message TransferChatRoomOwnerResponse {
    required  BaseResponse  baseResponse  = 1;
}

message TransferCtxBusinessInfo {
    optional  string  hostAppid  = 1;
    optional  string  wxaAppid  = 2;
}

message TransferEncryptReq {
    required  TransferRsaEncryptData  rsaEncryptData  = 1;
    required  TransferAesEncryptData  aesEncryptData  = 2;
}

message TransferMsgToDeviceReq {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  deviceId  = 2;
    optional  string  deviceType  = 3;
    optional  HwDeviceMsg  deviceMsg  = 4;
    optional  int32  isThroughtServer  = 5;
}

message TransferMsgToDeviceResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  stringToDevice  = 2;
}

message TransferPhoneChangeSwitchReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  switchChangeType  = 2;
    optional  uint32  grantFlag  = 3;
}

message TransferPhoneChangeSwitchResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  RealNameInfo  realNameInfo  = 4;
    optional  RemindWin  jumpWin  = 5;
    optional  uint32  grantFlag  = 6;
    optional  string  wording  = 7;
}

message TransferPhoneCheckNameReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  reason  = 2;
    optional  string  rcvrOpenid  = 3;
    optional  string  rcvrToken  = 4;
    optional  string  inputName  = 5;
    optional  string  getRcvrExt  = 6;
    optional  string  spamInfoToken  = 7;
}

message TransferPhoneCheckNameResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  realNameToken  = 4;
    optional  string  newRealName  = 5;
    optional  RemindWin  jumpWin  = 6;
}

message TransferPhoneDelHisRcvrReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  rcvrId  = 2;
}

message TransferPhoneDelHisRcvrResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message TransferPhoneGetHisRcvrsReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  lastId  = 2;
    optional  string  homepageExt  = 3;
}

message TransferPhoneGetHisRcvrsResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    repeated  TransferPhoneGetHisRcvrsResp_HisRcvr  rcvrs  = 4;
    optional  bool  finished  = 5;
    optional  string  lastId  = 6;
}

message TransferPhoneGetHisRcvrsResp_HisRcvr {
    optional  string  id  = 1;
    optional  string  wxName  = 2;
    optional  string  realName  = 3;
    optional  string  phone  = 4;
    optional  uint32  invalid  = 5;
}

message TransferPhoneGetHisRcvrsResp_HisRcvr_RcvrId {
    optional  uint32  index  = 1;
    optional  uint32  payer  = 2;
    optional  uint32  rcvr  = 3;
    optional  uint64  lastTransTime  = 4;
    optional  uint64  ts  = 5;
}

message TransferPhoneGetRcvrReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  phone  = 2;
    optional  string  rcvrId  = 3;
    optional  string  homepageExt  = 4;
    optional  uint32  inputType  = 5;
}

message TransferPhoneGetRcvrResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  invalid  = 4;
    optional  RemindWin  wxnameChgWin  = 5;
    optional  string  rcvrOpenid  = 6;
    optional  string  rcvrToken  = 7;
    optional  string  wxName  = 8;
    optional  string  realName  = 9;
    optional  string  phone  = 10;
    optional  string  imgUrl  = 11;
    optional  uint32  amountRemindBit  = 12;
    repeated  TransferPhoneGetRcvrResp_DelayOption  delayOptions  = 13;
    optional  string  checkNameWording  = 14;
    optional  string  checkNameMask  = 15;
    optional  string  getRcvrExt  = 16;
    optional  string  timestampMs  = 17;
    optional  RemindWin  jumpWin  = 18;
}

message TransferPhoneGetRcvrResp_DelayOption {
    optional  string  option  = 1;
    optional  uint32  code  = 2;
}

message TransferPhoneGetSwitchReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  grantFlag  = 2;
}

message TransferPhoneGetSwitchResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  bool  isShow  = 4;
    optional  bool  isOpen  = 5;
    optional  string  entranceName  = 6;
    optional  string  wording  = 7;
}

message TransferPhoneHomePageReq {
    required  BaseRequest  baseRequest  = 1;
}

message TransferPhoneHomePageResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  string  title  = 4;
    optional  string  subtitle  = 5;
    optional  uint32  hasHisRcvr  = 6;
    repeated  JumpItem  menu  = 7;
    optional  JumpItem  announcement  = 8;
    optional  string  homepageExt  = 9;
}

message TransferPhonePayCheckReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  reqKey  = 2;
    required  string  transferId  = 3;
    required  string  transactionId  = 4;
    required  string  receiverOpenid  = 5;
    required  uint64  fee  = 6;
    optional  string  extendStr  = 7;
    optional  string  rcvrToken  = 8;
    optional  string  placeorderToken  = 9;
}

message TransferPhonePayCheckResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message TransferPhonePlaceOrderReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  rcvrOpenid  = 2;
    optional  string  rcvrToken  = 3;
    optional  string  getRcvrExt  = 4;
    optional  uint32  amount  = 5;
    optional  string  desc  = 6;
    optional  uint32  delayCode  = 7;
    optional  string  realNameToken  = 8;
    optional  string  timestampMs  = 9;
    optional  string  replaceorderToken  = 10;
}

message TransferPhonePlaceOrderResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  retCodeAction  = 4;
    optional  RemindWin  jumpWin  = 5;
    optional  uint32  forceCheckName  = 6;
    optional  RemindWin  remindWin  = 7;
    optional  CheckWin  checkWin  = 8;
    optional  RemindWin3  dupPayWin  = 9;
    optional  string  reqKey  = 10;
    optional  string  outTradeNo  = 11;
    optional  string  transId  = 12;
    optional  string  placeorderToken  = 13;
    optional  string  placeorderExt  = 14;
    optional  string  replaceorderToken  = 15;
    optional  string  spamInfoToken  = 16;
}

message TransferPhoneSuccPageReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  outTradeNo  = 2;
    optional  string  transId  = 3;
    optional  string  rcvrOpenid  = 4;
    optional  string  rcvrToken  = 5;
    optional  uint32  amount  = 6;
    optional  string  placeorderToken  = 7;
    optional  string  placeorderExt  = 8;
}

message TransferPhoneSuccPageResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint32  delayCode  = 4;
    repeated  KVPair  wording  = 5;
    optional  JumpItem  announcement  = 6;
}

message TransferRecord {
    optional  string  bankCardSeqno  = 1;
    optional  string  bankCardTailno  = 2;
    optional  string  bankLogo  = 3;
    optional  string  bankName  = 4;
    optional  string  bankType  = 5;
    optional  string  payeeName  = 6;
    optional  string  explain  = 7;
}

message TransferReq {
    optional  uint32  magic  = 1;
    optional  bytes  header  = 2;
    optional  bytes  body  = 3;
}

message TransferRsaEncryptData {
    required  SKBuiltinBuffer_t  randomEncryptKey  = 1;
}

message TranslateLinkReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  link  = 2;
    optional  uint32  scene  = 3;
    optional  TranslateLinkReq_iOSInfo  iosInfo  = 4;
    repeated  TranslateLinkReq_AndroidInfo  androidInfo  = 5;
    optional  string  sdkToken  = 6;
    optional  string  sdkVersion  = 7;
    optional  int32  verifyScene  = 8;
    optional  int32  verifyTokenResult  = 9;
}

message TranslateLinkReq_AndroidInfo {
    optional  string  signature  = 1;
    optional  string  packageName  = 2;
}

message TranslateLinkReq_iOSInfo {
    optional  string  bundleId  = 1;
    optional  uint32  schemeFlag  = 2;
    optional  string  universalLink  = 3;
    optional  string  sdkBundleId  = 4;
}

message TranslateLinkResp {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  errcode  = 2;
    optional  string  errmsg  = 3;
    optional  string  deeplink  = 4;
    optional  string  errWording  = 5;
    optional  TranslateLinkResp_ShareMsgInfo  shareMsgInfo  = 6;
    optional  uint32  version  = 7;
    optional  string  sdkToken  = 8;
    optional  int32  actionCode  = 9;
    optional  string  appNickname  = 10;
    optional  string  appIconUrl  = 11;
    optional  string  redirectUrl  = 12;
    optional  bytes  wxaRuntimeBuff  = 13;
}

message TranslateLinkResp_ShareMsgInfo {
    optional  string  url  = 1;
    optional  uint32  videoTime  = 2;
    optional  uint32  skipCompress  = 3;
}

message TranslateOrgMsg {
    required  uint32  clientMsgId  = 1;
    optional  string  textMsg  = 2;
    optional  string  chatRoomId  = 3;
    optional  uint32  scene  = 4;
    optional  SKBuiltinBuffer_t  cookie  = 5;
}

message TranslatedMsg {
    required  uint32  clientMsgId  = 1;
    optional  string  translatedText  = 2;
    optional  int32  ret  = 3;
    optional  string  brandWording  = 4;
    optional  SKBuiltinBuffer_t  cookie  = 5;
    optional  int32  canReTrans  = 6;
}

message TranslationInfo {
    optional  uint32  x  = 1;
    optional  uint32  y  = 2;
    optional  uint32  width  = 3;
    optional  uint32  height  = 4;
    optional  string  original  = 5;
    optional  string  translation  = 6;
    optional  uint32  mergeFlag  = 7;
    optional  uint32  groupId  = 8;
    optional  uint32  alignType  = 9;
}

message TrustedFriendContactInfo {
    optional  string  userName  = 1;
}

message TwitterInfo {
    optional  string  oauthToken  = 1;
    optional  string  oauthTokenSecret  = 2;
}

message TypeNavItem {
    optional  string  iconUrl  = 1;
    optional  string  title  = 2;
    optional  string  jumpUrl  = 3;
    optional  string  externInfo  = 4;
}

message TypeNavModule {
    repeated  TypeNavItem  itemList  = 1;
}

message ULDDInfo {
    optional  bytes  did  = 1;
    optional  string  ddstr  = 2;
    optional  bytes  ak  = 3;
    optional  uint32  uin  = 4;
}

message ULSRequest {
    optional  uint32  cliVer  = 1;
    optional  uint32  certVer  = 2;
    optional  string  deviceType  = 3;
    optional  bytes  encryptBuff  = 4;
    optional  uint32  unused1  = 5;
    optional  uint32  unused2  = 6;
}

message UnBindAppleIdReq {
    required  BaseRequest  baseRequest  = 1;
}

message UnBindAppleIdResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UnBindLinkedinContactRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opcode  = 2;
}

message UnBindLinkedinContactResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UnBindQQRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  ticket  = 2;
}

message UnBindQQResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UnBindXmailRequest {
    required  BaseRequest  baseRequest  = 1;
}

message UnBindXmailResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UnbindHardDeviceRequest {
    required  BaseRequest  baseRequest  = 1;
    required  HardDevice  hardDevice  = 2;
    optional  uint32  flag  = 4;
}

message UnbindHardDeviceResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UnbindHoneyPayCardReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  cardNo  = 2;
    optional  string  authToken  = 3;
}

message UnbindHoneyPayCardResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
}

message UncheckMchServicePosRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  followParam  = 3;
    optional  uint64  timestamp  = 4;
}

message UncheckMchServicePosResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  retCode  = 2;
    optional  string  retMsg  = 3;
    optional  uint64  timestamp  = 4;
}

message UnifyAuthResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  unifyAuthSectFlag  = 2;
    optional  AuthSectResp  authSectResp  = 3;
    optional  AcctSectResp  acctSectResp  = 4;
    optional  NetworkSectResp  networkSectResp  = 5;
    optional  AxAuthSecRespList  axAuthSecRespList  = 6;
}

message UnreadMsgReport {
    optional  string  deviceUniqueId  = 1;
    optional  uint64  seq  = 2;
    optional  bool  hasUnreadMsg  = 3;
}

message UpFriendRequest {
    required  BaseRequest  baseRequest  = 1;
    required  string  appId  = 2;
    optional  string  toUserName  = 3;
}

message UpFriendResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UpItem {
    required  string  fromUserName  = 1;
    required  string  timeDesc  = 2;
}

message UpdateBizChatMemberListReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  string  bizchatId  = 3;
    optional  BizChatMemberList  addMemberList  = 4;
    optional  BizChatMemberList  delMemberList  = 5;
}

message UpdateBizChatMemberListResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  FullBizChat  fullChat  = 3;
}

message UpdateBizChatReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  brandUserName  = 2;
    required  BizChat  chat  = 3;
}

message UpdateBizChatResp {
    required  BaseResponse  baseResponse  = 1;
    required  QyBaseResponse  qyBaseResp  = 2;
    optional  BizChat  chat  = 3;
}

message UpdateContactLabelRequest {
    required  BaseRequest  baseRequest  = 1;
    required  LabelPair  labelPair  = 2;
}

message UpdateContactLabelResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UpdateMyDeviceAttrReq {
    required  BaseRequest  baseRequest  = 1;
    required  string  devicetype  = 2;
    required  string  deviceid  = 3;
    optional  string  alias  = 4;
    optional  uint32  maindevice  = 5;
}

message UpdateMyDeviceAttrResp {
    required  BaseResponse  baseResponse  = 1;
}

message UpdateMyRankCoverRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  coverurl  = 2;
    optional  string  motto  = 3;
}

message UpdateMyRankCoverResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UpdateRankSettingRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  optype  = 2;
    optional  uint32  flag  = 3;
}

message UpdateRankSettingResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  flag  = 2;
}

message UpdateRuntimeQrcodeRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uuid  = 2;
    optional  uint32  status  = 3;
    optional  string  respData  = 4;
}

message UpdateRuntimeQrcodeResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UpdateSafeDeviceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  uuid  = 2;
    optional  string  name  = 3;
    optional  string  deviceType  = 4;
}

message UpdateSafeDeviceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  safeDevice  = 2;
}

message UpdateStatOpLog {
    required  uint32  opCode  = 1;
}

message UpdateUserPhoneReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  mobile  = 3;
    optional  uint32  type  = 4;
}

message UpdateUserPhoneResp {
    required  BaseResponse  baseResponse  = 1;
}

message UpdateUxinfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  origUxinfo  = 2;
}

message UpdateUxinfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  uxinfo  = 2;
}

message UpdateWxaEvaluateRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  username  = 2;
    optional  int32  operType  = 3;
    optional  UpdateWxaEvaluateRequest_EvaluateInfo  evaluateInfo  = 4;
}

message UpdateWxaEvaluateRequest_EvaluateInfo {
    optional  uint32  score  = 1;
    optional  string  comment  = 2;
}

message UpdateWxaEvaluateResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UpdateWxaStarRecordRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  reason  = 2;
    repeated  UpdateWxaStarRecordRequest_StarWxaSortOperation  operList  = 3;
}

message UpdateWxaStarRecordRequest_StarWxaInfo {
    optional  string  username  = 1;
    optional  uint32  versionType  = 2;
}

message UpdateWxaStarRecordRequest_StarWxaSortOperation {
    optional  UpdateWxaStarRecordRequest_StarWxaInfo  self  = 1;
    optional  UpdateWxaStarRecordRequest_StarWxaInfo  pre  = 2;
    optional  UpdateWxaStarRecordRequest_StarWxaInfo  next  = 3;
    optional  uint32  scene  = 4;
    optional  uint32  oper  = 5;
}

message UpdateWxaStarRecordResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
}

message UpdateWxaUsageRecordRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  scene  = 2;
    optional  uint32  isFromBackground  = 3;
    optional  uint32  versionType  = 4;
    optional  uint32  recordType  = 5;
    optional  uint32  opType  = 6;
    optional  string  username  = 7;
    optional  uint32  reason  = 8;
    optional  string  sessionId  = 9;
}

message UpdateWxaUsageRecordResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
}

message UpgradeAssociateChatRoomReq {
    optional  string  roomName  = 1;
    optional  string  ticket  = 2;
    optional  int32  scene  = 3;
}

message UpgradeAssociateChatRoomResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  popupWording  = 2;
}

message UpgradeChatRoomReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  chatRoomName  = 2;
}

message UpgradeChatRoomResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  chatRoomData  = 2;
    optional  string  resultMsg  = 3;
    optional  uint32  maxCount  = 4;
    required  uint32  mobileQuota  = 5;
    required  uint32  cardQuota  = 6;
    required  uint32  donateQuota  = 7;
    optional  uint32  totalQuota  = 8;
}

message UploadAppAttachRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    required  uint32  sdkVersion  = 3;
    optional  string  clientAppDataId  = 4;
    optional  string  userName  = 5;
    required  uint32  totalLen  = 6;
    required  uint32  startPos  = 7;
    required  uint32  dataLen  = 8;
    required  SKBuiltinBuffer_t  data  = 9;
    optional  uint32  type  = 10;
    optional  string  md5  = 11;
}

message UploadAppAttachResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  appId  = 2;
    optional  string  mediaId  = 3;
    optional  string  clientAppDataId  = 4;
    optional  string  userName  = 5;
    required  uint32  totalLen  = 6;
    required  uint32  startPos  = 7;
    required  uint32  dataLen  = 8;
    required  uint32  createTime  = 9;
}

message UploadCardImgRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientId  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    required  uint32  dataLen  = 5;
    required  SKBuiltinBuffer_t  data  = 6;
    optional  string  contactUserName  = 7;
}

message UploadCardImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  startPos  = 2;
    required  uint32  totalLen  = 3;
    optional  string  clientId  = 4;
    optional  string  cardImgUrl  = 5;
}

message UploadDeviceStepReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  deviceId  = 2;
    optional  string  deviceType  = 3;
    optional  uint32  fromTime  = 4;
    optional  uint32  toTime  = 5;
    optional  uint32  stepCount  = 6;
    optional  string  systemZone  = 7;
    optional  string  bundleid  = 8;
    optional  string  appname  = 9;
    optional  uint32  m7StepCount  = 10;
    optional  string  phoneModel  = 11;
    repeated  SportDeviceInfo  sourceDevice  = 12;
    optional  uint32  hkStepCount  = 13;
}

message UploadDeviceStepResp {
    required  BaseResponse  baseResponse  = 1;
    repeated  SportDeviceInfo  whiteListDevice  = 2;
}

message UploadEmojiInfoReq {
    optional  string  md5  = 1;
    required  int32  startPos  = 2;
    required  int32  totalLen  = 3;
    required  bytes  emojiBuffer  = 4;
    optional  bool  isSelfie  = 5;
    repeated  string  attachedEmojiMd5List  = 6;
    optional  string  attachedText  = 7;
    optional  string  followingEmojiMd5  = 8;
    optional  string  lensId  = 9;
    optional  string  attachedTextColor  = 10;
}

message UploadEmojiInfoResp {
    required  int32  ret  = 1;
    required  int32  startPos  = 2;
    required  int32  totalLen  = 3;
    optional  string  md5  = 4;
    optional  bool  completed  = 5;
    optional  string  activityId  = 6;
    optional  bool  isTooLarge  = 7;
}

message UploadEmojiPrepareRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  md5  = 2;
    optional  bool  isWxam  = 3;
    optional  bool  isSelfie  = 4;
    repeated  string  attachedEmojiMd5List  = 5;
    optional  string  attachedText  = 6;
    optional  string  followingEmojiMd5  = 7;
    optional  string  lensId  = 8;
    optional  string  attachedTextColor  = 9;
    optional  uint32  scene  = 10;
}

message UploadEmojiPrepareResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  extBuffer  = 2;
}

message UploadEmojiRequest {
    required  BaseRequest  baseRequest  = 1;
    required  int32  emojiItemCount  = 2;
    repeated  EmojiUploadInfoReq  emojiItem  = 3;
}

message UploadEmojiResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  emojiItemCount  = 2;
    repeated  EmojiUploadInfoResp  emojiItem  = 3;
    optional  uint32  actionFlag  = 4;
}

message UploadFileRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientId  = 2;
    required  uint32  totalLen  = 3;
    required  uint32  startPos  = 4;
    required  uint32  dataLen  = 5;
    required  SKBuiltinBuffer_t  data  = 6;
}

message UploadFileResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  startPos  = 2;
    optional  string  attachId  = 3;
    required  uint32  totalLen  = 4;
    optional  string  clientId  = 5;
}

message UploadHDHeadImgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  totalLen  = 2;
    required  uint32  startPos  = 3;
    required  uint32  headImgType  = 4;
    required  SKBuiltinBuffer_t  data  = 5;
    optional  string  imgHash  = 6;
    optional  string  userName  = 7;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 8;
}

message UploadHDHeadImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  totalLen  = 2;
    required  uint32  startPos  = 3;
    optional  string  finalImgMd5Sum  = 4;
    optional  string  bigHeadImgUrl  = 5;
    optional  string  smallHeadImgUrl  = 6;
}

message UploadInputVoiceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  SKBuiltinBuffer_t  data  = 3;
    required  uint32  offset  = 4;
    optional  string  clientVoiceId  = 5;
    required  uint32  endFlag  = 6;
    required  uint32  samplePerSec  = 7;
    required  uint32  bitsPerSample  = 8;
    required  uint32  voiceEncodeType  = 9;
    required  uint32  fileType  = 10;
}

message UploadInputVoiceResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  endFlag  = 2;
    required  SKBuiltinBuffer_t  text  = 3;
}

message UploadMContactRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  int32  opcode  = 3;
    optional  string  mobile  = 4;
    required  int32  mobileListSize  = 5;
    repeated  Mobile  mobileList  = 6;
    required  int32  emailListSize  = 7;
    repeated  MEmail  emailList  = 8;
}

message UploadMContactResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UploadMiniAppStepReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appId  = 2;
    optional  uint32  step  = 3;
    optional  bool  isAdd  = 4;
    optional  uint32  timeStamp  = 5;
}

message UploadMiniAppStepResp {
    required  BaseResponse  baseResponse  = 1;
}

message UploadMsgImgRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinString_t  clientImgId  = 2;
    required  SKBuiltinString_t  fromUserName  = 3;
    required  SKBuiltinString_t  toUserName  = 4;
    required  uint32  totalLen  = 5;
    required  uint32  startPos  = 6;
    required  uint32  dataLen  = 7;
    required  SKBuiltinBuffer_t  data  = 8;
    optional  uint32  msgType  = 9;
    optional  string  msgSource  = 10;
    optional  uint32  compressType  = 11;
    optional  int32  netType  = 12;
    optional  int32  photoFrom  = 13;
    optional  string  mediaId  = 14;
    optional  string  cdnbigImgUrl  = 15;
    optional  string  cdnmidImgUrl  = 16;
    optional  string  aeskey  = 17;
    optional  int32  encryVer  = 18;
    optional  int32  cdnbigImgSize  = 19;
    optional  int32  cdnmidImgSize  = 20;
    optional  string  cdnthumbImgUrl  = 21;
    optional  int32  cdnthumbImgSize  = 22;
    optional  int32  cdnthumbImgHeight  = 23;
    optional  int32  cdnthumbImgWidth  = 24;
    optional  string  cdnthumbAeskey  = 25;
    optional  uint32  reqTime  = 26;
    optional  string  md5  = 27;
    optional  uint32  crc32  = 28;
    optional  uint32  msgForwardType  = 29;
    optional  uint32  hitMd5  = 30;
    optional  string  appid  = 31;
    optional  string  messageAction  = 32;
    optional  string  meesageExt  = 33;
    optional  string  mediaTagName  = 34;
    optional  string  sendMsgTicket  = 35;
    optional  uint32  imgType  = 36;
    optional  string  imgInfo  = 37;
}

message UploadMsgImgResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  msgId  = 2;
    required  SKBuiltinString_t  clientImgId  = 3;
    required  SKBuiltinString_t  fromUserName  = 4;
    required  SKBuiltinString_t  toUserName  = 5;
    required  uint32  totalLen  = 6;
    required  uint32  startPos  = 7;
    required  uint32  dataLen  = 8;
    required  uint32  createTime  = 9;
    optional  uint64  newMsgId  = 10;
    optional  string  aeskey  = 11;
    optional  string  fileId  = 12;
    optional  string  msgSource  = 13;
    optional  uint32  actionFlag  = 14;
}

message UploadMyPanelListRequest {
    required  uint32  opCode  = 1;
    repeated  string  productIdlist  = 2;
}

message UploadMyPanelListResponse {
    required  BaseResponse  baseResponse  = 1;
}

message UploadSoterAuthkeyReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  elementJson  = 2;
    optional  string  elementJsonSignature  = 3;
}

message UploadSoterAuthkeyResp {
    required  BaseResponse  baseResponse  = 1;
}

message UploadSportRecordReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  SportRecordUpload  sportRecordList  = 3;
}

message UploadSportRecordResp {
    required  BaseResponse  baseResponse  = 1;
}

message UploadUserLocationInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  double  latitude  = 2;
    optional  double  longitude  = 3;
    optional  double  altitude  = 4;
    optional  double  horizontalAccuracy  = 5;
    optional  double  verticalAccuracy  = 6;
    optional  int32  floor  = 7;
}

message UploadUserLocationInfoResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message UploadVideoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  clientMsgId  = 2;
    optional  string  fromUserName  = 3;
    optional  string  toUserName  = 4;
    required  uint32  thumbTotalLen  = 5;
    required  uint32  thumbStartPos  = 6;
    required  SKBuiltinBuffer_t  thumbData  = 7;
    required  uint32  videoTotalLen  = 8;
    required  uint32  videoStartPos  = 9;
    required  SKBuiltinBuffer_t  videoData  = 10;
    required  uint32  playLength  = 11;
    optional  uint32  networkEnv  = 12;
    optional  uint32  cameraType  = 13;
    optional  uint32  funcFlag  = 14;
    optional  string  msgSource  = 15;
    optional  string  cdnvideoUrl  = 16;
    optional  string  aeskey  = 17;
    optional  int32  encryVer  = 18;
    optional  string  cdnthumbUrl  = 19;
    optional  int32  cdnthumbImgSize  = 20;
    optional  int32  cdnthumbImgHeight  = 21;
    optional  int32  cdnthumbImgWidth  = 22;
    optional  string  cdnthumbAeskey  = 23;
    optional  int32  videoFrom  = 24;
    optional  uint32  reqTime  = 25;
    optional  string  videoMd5  = 26;
    optional  string  streamVideoUrl  = 27;
    optional  uint32  streamVideoTotalTime  = 28;
    optional  string  streamVideoTitle  = 29;
    optional  string  streamVideoWording  = 30;
    optional  string  streamVideoWebUrl  = 31;
    optional  string  streamVideoThumbUrl  = 32;
    optional  string  streamVideoPublishId  = 33;
    optional  string  streamVideoAdUxInfo  = 34;
    optional  string  statExtStr  = 35;
    optional  uint32  hitMd5  = 36;
    optional  string  videoNewMd5  = 37;
    optional  uint32  crc32  = 38;
    optional  uint32  msgForwardType  = 39;
    optional  uint32  source  = 40;
    optional  string  sendMsgTicket  = 41;
}

message UploadVideoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  clientMsgId  = 2;
    required  uint32  msgId  = 3;
    required  uint32  thumbStartPos  = 4;
    required  uint32  videoStartPos  = 5;
    optional  uint64  newMsgId  = 6;
    optional  string  aeskey  = 7;
    optional  string  msgSource  = 8;
    optional  uint32  actionFlag  = 9;
}

message UploadVoiceCtx {
    required  uint32  totalLen  = 1;
    required  uint32  startPos  = 2;
    required  uint32  dataLen  = 3;
}

message UploadVoiceForTransRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  voiceId  = 2;
    required  VoiceAttr  voiceAttr  = 3;
    required  UploadVoiceCtx  uploadCtx  = 4;
    required  SKBuiltinBuffer_t  data  = 5;
    optional  int32  scene  = 6;
    optional  string  fromUserName  = 7;
    optional  string  toUserName  = 8;
}

message UploadVoiceForTransResponse {
    required  BaseResponse  baseResponse  = 1;
    required  UploadVoiceCtx  uploadCtx  = 2;
}

message UploadVoiceRequest {
    optional  string  fromUserName  = 1;
    optional  string  toUserName  = 2;
    required  uint32  offset  = 3;
    required  uint32  length  = 4;
    optional  string  clientMsgId  = 5;
    required  uint32  msgId  = 6;
    required  uint32  voiceLength  = 7;
    required  SKBuiltinBuffer_t  data  = 8;
    required  uint32  endFlag  = 9;
    required  BaseRequest  baseRequest  = 10;
    optional  uint32  cancelFlag  = 11;
    optional  string  msgSource  = 12;
    optional  uint32  voiceFormat  = 13;
    optional  uint32  uicreateTime  = 14;
    optional  uint32  forwardFlag  = 15;
    optional  uint64  newMsgId  = 16;
    optional  uint32  reqTime  = 17;
    optional  SKBuiltinBuffer_t  voiceId  = 18;
    optional  string  sendMsgTicket  = 19;
}

message UploadVoiceResponse {
    optional  string  fromUserName  = 1;
    optional  string  toUserName  = 2;
    required  uint32  offset  = 3;
    required  uint32  length  = 4;
    required  uint32  createTime  = 5;
    optional  string  clientMsgId  = 6;
    required  uint32  msgId  = 7;
    required  uint32  voiceLength  = 8;
    required  uint32  endFlag  = 9;
    required  BaseResponse  baseResponse  = 10;
    optional  uint32  cancelFlag  = 11;
    optional  uint64  newMsgId  = 12;
    optional  uint32  actionFlag  = 13;
}

message UrlJumpInfo {
    optional  string  url  = 1;
    optional  uint32  urlType  = 2;
    optional  string  appUsername  = 3;
}

message UrlPreloadControl {
    repeated  UrlPreloadControl_UrlConfig  urlList  = 1;
}

message UrlPreloadControl_UrlConfig {
    required  string  url  = 1;
}

message UserActionReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message UserAvatarInfo {
    repeated  UserAvatarItem  avatarList  = 1;
    optional  bool  isBanModifyAvatar  = 2;
    optional  uint32  avatarLimit  = 3;
    optional  uint32  defaultAvatarId  = 4;
    optional  string  defaultHeadimgUrl  = 5;
    optional  string  defaultHeadimgFileid  = 6;
    optional  string  avatarWording  = 7;
    optional  string  limitWording  = 8;
}

message UserAvatarItem {
    optional  uint32  id  = 1;
    optional  string  nickname  = 2;
    optional  string  avatarurl  = 3;
    optional  string  desc  = 4;
}

message UserInfoExt {
    required  SnsUserInfo  snsUserInfo  = 1;
    optional  string  myBrandList  = 2;
    optional  string  msgPushSound  = 3;
    optional  string  voipPushSound  = 4;
    optional  uint32  bigChatRoomSize  = 5;
    optional  uint32  bigChatRoomQuota  = 6;
    optional  uint32  bigChatRoomInvite  = 7;
    optional  string  safeMobile  = 8;
    optional  string  bigHeadImgUrl  = 9;
    optional  string  smallHeadImgUrl  = 10;
    optional  uint32  mainAcctType  = 11;
    optional  SKBuiltinString_t  extXml  = 12;
    optional  SafeDeviceList  safeDeviceList  = 13;
    optional  uint32  safeDevice  = 14;
    optional  uint32  grayscaleFlag  = 15;
    optional  string  googleContactName  = 16;
    optional  string  idcardNum  = 17;
    optional  string  realName  = 18;
    optional  string  regCountry  = 19;
    optional  string  bbppid  = 20;
    optional  string  bbpin  = 21;
    optional  string  bbmnickName  = 22;
    optional  LinkedinContactItem  linkedinContactItem  = 23;
    optional  string  kfinfo  = 24;
    optional  PatternLockInfo  patternLockInfo  = 25;
    optional  string  securityDeviceId  = 26;
    optional  uint32  payWalletType  = 27;
    optional  string  weiDianInfo  = 28;
    optional  uint32  walletRegion  = 29;
    optional  uint64  extStatus  = 30;
    optional  string  f2FpushSound  = 31;
    optional  uint32  userStatus  = 32;
    optional  uint64  paySetting  = 34;
    optional  string  bindXmail  = 37;
    optional  string  patSuffix  = 38;
    optional  uint32  patSuffixVersion  = 39;
    optional  uint32  teenagerModeFinderSetting  = 44;
    optional  uint32  teenagerModeBizAcctSetting  = 45;
    optional  uint32  teenagerModeMiniProgramSetting  = 46;
    optional  XAgreementInfo  xagreementInfo  = 47;
}

message UserItem {
    required  string  userName  = 1;
    required  string  matchWord  = 2;
    optional  string  nickName  = 3;
    optional  string  remark  = 4;
    optional  string  alias  = 5;
    optional  string  description  = 6;
}

message UserLabelInfo {
    optional  string  userName  = 1;
    optional  string  labelIdlist  = 2;
}

message UserMgrBaseResponse {
    optional  int32  errcode  = 1;
    optional  string  errmsg  = 2;
}

message UserPositionItem {
    optional  string  username  = 1;
    required  PositionItem  position  = 2;
}

message UserSensitiveInfo {
    optional  string  longitude  = 1;
    optional  string  latitude  = 2;
    optional  string  wifi  = 3;
}

message UserSportDevice {
    optional  string  deviceId  = 1;
    optional  string  deviceType  = 2;
    optional  string  bundleId  = 3;
    optional  string  appName  = 4;
    optional  string  deviceName  = 5;
    optional  string  iconUrl  = 6;
    optional  string  connProto  = 7;
    optional  int64  bleSimpleProtol  = 8;
}

message VOIPRUDPCmd {
    required  int32  cmdType  = 1;
    optional  bytes  cmdBuffer  = 2;
}

message VUserResponseItem {
    required  uint32  id  = 1;
    optional  string  desc  = 2;
    required  SKBuiltinBuffer_t  icon  = 3;
    required  SKBuiltinBuffer_t  hdicon  = 4;
}

message ValFeature {
    optional  uint32  vidPlayLen  = 1;
    optional  uint32  stayTime  = 2;
    optional  uint64  stayTimeMs  = 3;
    optional  uint64  vidPlayTimeMs  = 4;
    optional  uint64  vidPlayingTimeMs  = 5;
    optional  uint64  exposeTimeMs  = 6;
    optional  uint64  startPlayTime  = 7;
    optional  uint64  endPlayTime  = 8;
    optional  uint64  lastPlayTime  = 9;
    optional  uint64  stopTimes  = 10;
    optional  uint32  autoPlay  = 11;
}

message ValueAttr {
    optional  uint32  linkType  = 1;
    optional  string  linkWeapp  = 2;
    optional  string  linkAddr  = 3;
    optional  string  linkUrl  = 4;
    optional  uint32  textAttr  = 5;
}

message VerifyBeaconJSPermissionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  appid  = 3;
    optional  string  ticket  = 4;
}

message VerifyBeaconJSPermissionResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  int32  errCode  = 2;
    optional  string  errMsg  = 3;
    repeated  string  uuids  = 4;
}

message VerifyFaceRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userTicket  = 2;
    optional  uint64  bioId  = 3;
    optional  SKBuiltinBuffer_t  randomEncryKey  = 4;
    optional  string  cdnFileId  = 5;
    optional  string  cdnKey  = 6;
    optional  uint32  scene  = 7;
}

message VerifyFaceResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  passTicket  = 2;
    optional  NetworkSectResp  netWork  = 3;
    optional  int32  detailRet  = 4;
}

message VerifyInfo {
    optional  string  jsapiName  = 1;
    optional  uint32  state  = 2;
    optional  uint32  verifyOk  = 3;
}

message VerifyOpenIMContactReq {
    required  string  tpUsername  = 1;
    required  string  verifyTicket  = 2;
    optional  uint64  friendFlag  = 3;
}

message VerifyOpenIMContactResp {
    required  BaseResponse  baseResponse  = 1;
}

message VerifyPluginRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  extInfo  = 3;
}

message VerifyPluginResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  jsonResp  = 2;
}

message VerifyPswdRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opCode  = 2;
    optional  string  pwd1  = 3;
    optional  string  pwd2  = 4;
    optional  SKBuiltinString_t  imgSid  = 5;
    optional  SKBuiltinString_t  imgCode  = 6;
    optional  SKBuiltinString_t  imgEncryptKey  = 7;
    optional  SKBuiltinBuffer_t  ksid  = 8;
    optional  uint32  scence  = 9;
    optional  SKBuiltinBuffer_t  wtloginReqBuff  = 10;
}

message VerifyPswdResponse {
    required  BaseResponse  baseResponse  = 1;
    required  SKBuiltinString_t  imgSid  = 2;
    required  SKBuiltinBuffer_t  imgBuf  = 3;
    optional  string  ticket  = 4;
    optional  SKBuiltinString_t  imgEncryptKey  = 5;
    optional  SKBuiltinBuffer_t  a2Key  = 6;
    optional  SKBuiltinBuffer_t  ksid  = 7;
    optional  string  authKey  = 8;
    optional  SKBuiltinBuffer_t  wtloginRspBuff  = 9;
}

message VerifyPurchaseRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  receipt  = 2;
    optional  string  productId  = 3;
    required  uint32  verifyType  = 4;
    required  uint32  payType  = 5;
    optional  string  price  = 6;
    optional  string  currencyType  = 7;
    optional  string  billNo  = 8;
    required  uint32  payTime  = 9;
    optional  string  receiptSig  = 10;
    optional  uint32  quantity  = 11;
}

message VerifyPurchaseResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  seriesId  = 2;
    required  uint32  bizType  = 3;
    optional  int32  isDeleteReceipt  = 4;
}

message VerifySignatureTestRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  bytes  signData  = 2;
    optional  bytes  sign  = 3;
}

message VerifySignatureTestResponse {
    required  BaseResponse  baseResponse  = 1;
}

message VerifySmsCodeReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  uint32  categoryId  = 3;
    optional  string  payToken  = 4;
    optional  string  phoneId  = 5;
    optional  string  ticket  = 6;
    optional  string  verifyCode  = 7;
    optional  string  verifyToken  = 8;
    optional  string  bankType  = 9;
    optional  string  optionalMobile  = 10;
}

message VerifySmsCodeResp {
    required  BaseResponse  baseResponse  = 1;
    optional  AuthorizeUserIDBaseResponse  authBaseResponse  = 2;
    optional  string  authToken  = 3;
}

message VerifyUser {
    optional  string  value  = 1;
    optional  string  verifyUserTicket  = 2;
    optional  string  antispamTicket  = 3;
    optional  uint32  friendFlag  = 4;
    optional  string  chatRoomUserName  = 5;
    optional  string  sourceUserName  = 6;
    optional  string  sourceNickName  = 7;
    optional  uint32  scanQrcodeFromScene  = 8;
    optional  string  reportInfo  = 9;
    optional  uint32  shareCardForwardLevel  = 10;
    optional  SKBuiltinBuffer_t  shareCardForwardInfo  = 11;
    optional  string  outerUrl  = 12;
    optional  uint32  subScene  = 13;
    optional  SKBuiltinBuffer_t  bizReportInfo  = 14;
}

message VerifyUserBizReportInfo {
    optional  uint32  subScene  = 1;
    optional  string  sceneNote  = 2;
    optional  uint32  mpScene  = 3;
}

message VerifyUserInfo {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message VerifyUserRequest {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  opcode  = 2;
    required  uint32  verifyUserListSize  = 3;
    repeated  VerifyUser  verifyUserList  = 4;
    optional  string  verifyContent  = 5;
    optional  uint32  sceneListCount  = 6;
    repeated  uint32  sceneList  = 7[packed=true];
    optional  uint32  verifyInfoListCount  = 8;
    repeated  VerifyUserInfo  verifyInfoList  = 9;
    optional  SKBuiltinBuffer_t  clientCheckData  = 10;
    optional  SKBuiltinBuffer_t  extSpamInfo  = 11;
    optional  uint32  needConfirm  = 12;
}

message VerifyUserResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  userName  = 2;
}

message VerifyUserValidTicket {
    required  string  username  = 1;
    required  string  antispamticket  = 2;
}

message VerifyVoicePrintRequest {
    required  BaseRequest  baseRequest  = 1;
    required  VoicePieceCtx  piece  = 2;
    required  uint32  voiceTicket  = 3;
    required  uint32  resId  = 4;
    optional  string  verifyTicket  = 5;
}

message VerifyVoicePrintResponse {
    required  BaseResponse  baseResponse  = 1;
    required  VoicePieceCtx  nextPiece  = 2;
    required  uint32  result  = 3;
    required  uint32  voiceTicket  = 4;
}

message VerifyVoicePrintRsaRequest {
    required  BaseRequest  baseRequest  = 1;
    required  VoicePieceCtx  piece  = 2;
    required  uint32  voiceTicket  = 3;
    required  uint32  resId  = 4;
    optional  string  verifyTicket  = 5;
    required  SKBuiltinBuffer_t  randomEncryKey  = 6;
}

message VerifyVoicePrintRsaResponse {
    required  BaseResponse  baseResponse  = 1;
    required  VoicePieceCtx  nextPiece  = 2;
    required  uint32  result  = 3;
    required  uint32  voiceTicket  = 4;
    optional  string  authPwd  = 5;
}

message VerifyWxPayReq {
    optional  string  appid  = 1;
    optional  string  timestamp  = 2;
    optional  string  noncestr  = 3;
    optional  string  packageStr  = 4;
    optional  string  signType  = 5;
    optional  string  paySign  = 6;
}

message VideoCdnInfo {
    optional  uint32  cdnScene  = 1;
    optional  VideoCdnInfo_CdnInfo  ctnInfo  = 4;
    optional  VideoCdnInfo_CdnInfo  mpInfo  = 5;
    optional  uint32  cdnSourceType  = 6;
}

message VideoCdnInfo_CdnInfo {
    repeated  VideoCdnInfo_CdnInfo_UrlInfo  cdnUrlInfo  = 1;
    optional  bytes  coverUrl  = 2;
    optional  bytes  articleUrl  = 3;
}

message VideoCdnInfo_CdnInfo_UrlInfo {
    optional  bytes  url  = 1;
    optional  uint32  durationMs  = 2;
    optional  uint64  filesize  = 3;
    optional  uint32  width  = 4;
    optional  uint32  height  = 5;
    optional  uint32  formatId  = 6;
    optional  int32  expireAt  = 7;
}

message VideoChannelControlInfo {
    optional  int32  switchOption  = 1;
    optional  VideoChannelTopBarInfo  topBarInfo  = 2;
    optional  VideoChannelTimelineInfo  timelineNotifyInfo  = 3;
}

message VideoChannelReqInfo {
    optional  VideoChannelTopBarReqInfo  topBarInfo  = 1;
}

message VideoChannelTimelineInfo {
    repeated  VideoChannelTimelineItemInfo  itemList  = 1;
    optional  string  wording  = 2;
    optional  uint32  shouldCleanup  = 3;
    optional  string  entryTitle  = 4;
    optional  string  appid  = 5;
    optional  int32  version  = 6;
}

message VideoChannelTimelineItemInfo {
    optional  uint32  bizuin  = 1;
    optional  string  bizUsername  = 2;
    optional  string  bizHeadimg  = 3;
}

message VideoChannelTopBarInfo {
    optional  string  title  = 1;
    optional  string  appid  = 2;
    optional  int32  version  = 3;
    optional  string  logoUrl  = 4;
    optional  uint32  funcVersion  = 5;
    optional  string  defaultLogoUrl  = 6;
    optional  string  syncBuffer  = 7;
    optional  uint32  syncFlag  = 8;
    optional  string  dataBuffer  = 9;
    optional  uint32  interval  = 10;
    optional  uint32  intervalTl  = 11;
    optional  uint32  controlBits  = 12;
    optional  string  defaultTitle  = 13;
    optional  uint32  showGreenDot  = 15;
    optional  string  informMsgCnt  = 16;
    optional  uint32  showSmallIcon  = 17;
    optional  string  smallIconUrl  = 18;
    optional  string  appPath  = 21;
    optional  string  dmLogoUrl  = 22;
    optional  string  dmDefaultLogoUrl  = 23;
}

message VideoChannelTopBarReqInfo {
    optional  string  syncBuffer  = 1;
    optional  string  bizUsername  = 2;
    optional  string  detailPageUrl  = 3;
    optional  uint32  scene  = 4;
}

message VideoPlayErrorInfo {
    optional  string  errMsg  = 1;
    optional  int32  errCode  = 2;
}

message VideoPlayerConfig {
    optional  VideoPlayerConfig_iOSConfig  iosConfig  = 1;
}

message VideoPlayerConfig_iOSConfig {
    optional  bool  throttled  = 1;
    optional  float  minBufferLength  = 2;
    optional  float  maxBufferLength  = 3;
    optional  float  downloadGrading  = 4;
    optional  float  preloadSec  = 5;
    repeated  uint32  arrBufferTime  = 6;
}

message VideoUrlInfo {
    repeated  VideoUrlInfo_VideoUrlInfoItem  items  = 1;
}

message VideoUrlInfo_VideoUrlInfoItem {
    optional  ContentId  contentId  = 1;
    optional  bool  valid  = 2;
    optional  VideoCdnInfo  videoCdnInfo  = 3;
    optional  string  videoApi  = 4;
    optional  uint32  videoApiExpireTime  = 5;
}

message ViewData {
    optional  int32  type  = 1;
    optional  TextViewData  text  = 2;
    optional  RightTextViewData  rightText  = 3;
    optional  SwitchViewData  switchButton  = 4;
    optional  SingleLineTextViewData  singleLineText  = 5;
    optional  MultiLineTextViewData  multiLineText  = 6;
    optional  NewCardItemViewData  newCardRecord  = 7;
    optional  CardRecordViewData  cardRecord  = 8;
    optional  CouponItemViewData  couponItem  = 9;
    optional  BannerViewData  banner  = 10;
    optional  ButtonViewData  button  = 11;
    optional  ImageViewData  image  = 12;
    optional  ListViewData  list  = 13;
    optional  GroupViewData  group  = 14;
    optional  PriceAndFavorViewData  priceAndFavor  = 15;
    optional  OrderDetailViewData  orderDetail  = 16;
    optional  ItemListViewData  itemList  = 17;
    optional  ItemSectionViewData  itemSection  = 18;
    optional  TableCellViewData  tableCell  = 19;
    optional  ConfrimProtocalViewData  confirmProtocal  = 20;
    optional  ButtonWithConfirmProtocalViewData  btnWithProtocal  = 21;
    optional  ActionSheetViewData  actionSheet  = 22;
    optional  ViewStyle  style  = 23;
}

message ViewStyle {
    optional  PaddingStyle  padding  = 1;
    optional  MarginStyle  margin  = 2;
    optional  int32  alignSelf  = 3;
}

message VoIPMtBannerMsg {
    optional  string  wxGroupid  = 1;
    optional  uint64  roomid  = 2;
    optional  string  sdkGroupid  = 3;
    repeated  VoIPMtUserStatus  userStatusList  = 4;
    optional  uint64  msgSeq  = 5;
    optional  uint32  talkingStatus  = 6;
    optional  string  createUserName  = 7;
}

message VoIPMtGenSessionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  username  = 2;
    optional  string  appid  = 3;
}

message VoIPMtGenSessionResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  sessionInfo  = 2;
    optional  uint32  lifespan  = 3;
    optional  string  voipsdkUsername  = 4;
}

message VoIPMtGetAuthCodeRequest {
    optional  BaseRequest  baseRequest  = 1;
}

message VoIPMtGetAuthCodeResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  bytes  ilink3RdappAuthCode  = 2;
}

message VoIPMtGetSDKModeRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  wxGroupid  = 2;
    repeated  VoIPMtUserInfo  userList  = 3;
}

message VoIPMtGetSDKModeResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  int32  sdkMode  = 2;
}

message VoIPMtGetSDKUserInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  voipsdkUsername  = 2;
    optional  string  wxGroupid  = 3;
}

message VoIPMtGetSDKUserInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  VoIPMtUserInfo  users  = 2;
}

message VoIPMtGetUserInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  string  usernames  = 2;
    optional  string  appid  = 3;
}

message VoIPMtGetUserInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  VoIPMtUserInfo  users  = 2;
}

message VoIPMtInviteMsg {
    optional  string  wxGroupid  = 1;
    optional  uint64  roomid  = 2;
    optional  string  sdkGroupid  = 3;
    optional  string  fromOpenid  = 4;
    optional  string  toOpenid  = 5;
    optional  bytes  confInviteItem  = 6;
    repeated  VoIPMtUserInfo  displayUserList  = 7;
}

message VoIPMtInviteRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  wxGroupid  = 2;
    optional  VoIPMtUserInfo  fromUser  = 3;
    optional  uint64  roomid  = 4;
    optional  string  sdkGroupid  = 5;
    repeated  VoIPMtInviteUser  inviteUserList  = 6;
    repeated  VoIPMtUserInfo  displayUserList  = 7;
}

message VoIPMtInviteResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message VoIPMtInviteUser {
    optional  VoIPMtUserInfo  userInfo  = 1;
    optional  bytes  inviteData  = 2;
}

message VoIPMtLog {
    optional  uint32  logid  = 1;
    optional  string  logstr  = 2;
}

message VoIPMtReportLogRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  wxGroupid  = 2;
    optional  string  sdkGroupid  = 3;
    optional  VoIPMtUserInfo  fromUser  = 4;
    repeated  VoIPMtLog  logList  = 5;
}

message VoIPMtReportLogResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message VoIPMtSendBannerMsgRequest {
    optional  BaseRequest  baseRequest  = 1;
    optional  string  wxGroupid  = 2;
    optional  bytes  bannerMsg  = 3;
    optional  VoIPMtUserInfo  fromUser  = 4;
}

message VoIPMtSendBannerMsgResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message VoIPMtUserInfo {
    optional  string  username  = 1;
    optional  string  voipsdkUsername  = 2;
}

message VoIPMtUserStatus {
    optional  VoIPMtUserInfo  userInfo  = 1;
    optional  uint32  status  = 2;
}

message VoiceAddrRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  userName  = 2;
    required  SKBuiltinBuffer_t  data  = 3;
    required  uint32  offset  = 4;
    optional  string  clientVoiceId  = 5;
    required  uint32  endFlag  = 6;
    required  uint32  samplePerSec  = 7;
    required  uint32  bitsPerSample  = 8;
    required  uint32  voiceEncodeType  = 9;
    required  uint32  fileType  = 10;
    optional  uint32  searchType  = 11;
    optional  uint32  extraNameCount  = 12;
    repeated  SKBuiltinString_t  extraNameUserNameList  = 13;
    repeated  SKBuiltinBuffer_t  extraNameRemarkNameList  = 14;
}

message VoiceAddrResponse {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  endFlag  = 2;
    required  int32  userCount  = 3;
    repeated  SKBuiltinString_t  userNameList  = 4;
    optional  string  reportFiled  = 5;
}

message VoiceAttr {
    required  int32  fileType  = 1;
    required  int32  encodeType  = 2;
    required  int32  sampleRate  = 3;
    required  int32  bitsPerSample  = 4;
}

message VoiceInputBehavior {
    optional  int32  cancel  = 1;
    optional  int32  send  = 2;
    optional  int32  click  = 3;
    optional  int32  longClick  = 4;
    optional  int64  longClickTime  = 5;
    optional  int32  textClick  = 6;
    optional  int32  textChangeCount  = 7;
    optional  int64  textChangeTime  = 8;
    optional  int32  textChangeReturn  = 9;
    optional  int64  voiceInputTime  = 10;
    optional  int32  fail  = 11;
    optional  int32  clear  = 12;
    optional  int32  smileIconClick  = 13;
    optional  int32  voiceIconClick  = 14;
    optional  int32  fullScreenVoiceLongClick  = 15;
    optional  int64  fullScreenVoiceLongClickTime  = 16;
    optional  int32  showInit  = 17;
    optional  int64  initChoose  = 18;
    optional  int32  chooseArea  = 19;
    optional  int32  chooseCantonese  = 20;
    optional  int32  setlanguage  = 21;
    optional  int32  setSwitchCantonese  = 22;
    optional  int32  setDefaultLanguage  = 23;
}

message VoicePieceCtx {
    required  uint32  startPos  = 1;
    required  uint32  pieceLen  = 2;
    required  uint32  pieceFlag  = 3;
    required  SKBuiltinBuffer_t  pieceData  = 4;
}

message VoiceRemindInfo {
    required  uint32  remindId  = 1;
}

message VoiceTransCell {
    required  SKBuiltinBuffer_t  text  = 1;
    optional  string  voiceId  = 2;
    required  uint32  endFlag  = 3;
    required  uint32  sequence  = 4;
}

message VoiceTransRequest {
    required  BaseRequest  baseRequest  = 1;
    required  SKBuiltinBuffer_t  data  = 2;
    required  uint32  offset  = 3;
    optional  string  clientVoiceId  = 4;
    required  uint32  endFlag  = 5;
    required  uint32  voiceEncodeType  = 6;
    required  uint32  seq  = 7;
    optional  uint32  fetchVoiceIdCount  = 8;
    repeated  SKBuiltinString_t  fetchVoiceIds  = 9;
    optional  SKBuiltinString_t  vadVersion  = 10;
    optional  uint32  languageType  = 11;
    optional  int32  scene  = 12;
}

message VoiceTransRes {
    required  uint32  sequence  = 1;
    required  uint32  endFlag  = 2;
    optional  string  result  = 3;
}

message VoiceTransResponse {
    required  BaseResponse  baseResponse  = 1;
    required  int32  vtcount  = 2;
    repeated  VoiceTransCell  vtlist  = 3;
    required  uint32  interval  = 4;
    required  uint32  maxPacketSize  = 5;
}

message VoipAckReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  string  fromUsername  = 4;
    optional  int32  preConnect  = 5;
    optional  VoipRelayData  peerId  = 6;
    optional  VoipRelayData  capInfo  = 7;
    optional  int32  netType  = 8;
    optional  string  callerName  = 9;
    optional  int32  ackStatus  = 10;
    optional  uint64  timestamp64  = 11;
    optional  uint32  isWksimCard  = 12;
    optional  uint32  nicCnt  = 13;
    repeated  NICInfo  nicSet  = 14;
}

message VoipAckResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  int32  roomMemberId  = 4;
    optional  VoipMultiRelayData  relayData  = 5;
    optional  int32  preConnect  = 6;
    optional  uint32  tcpCnt  = 7;
    optional  int32  audioEnableRmioAndS3A  = 8;
    optional  uint32  switchFlag  = 9;
}

message VoipAddr {
    required  int32  ip  = 1;
    required  int32  port  = 2;
    optional  string  ipStr  = 3;
}

message VoipAddrSet {
    required  int32  cnt  = 1;
    repeated  VoipAddr  addrs  = 2;
}

message VoipAnswerReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  int32  roomId  = 3;
    required  int32  answer  = 4;
    optional  VoipRelayData  peerId  = 5;
    optional  VoipRelayData  capInfo  = 6;
    required  int64  roomKey  = 7;
    required  int32  netType  = 8;
    optional  uint64  timestamp64  = 9;
    optional  int32  onlyAudio  = 10;
    optional  uint32  isWksimCard  = 11;
    optional  uint32  nicCnt  = 12;
    repeated  NICInfo  nicSet  = 13;
}

message VoipAnswerResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  addrCount  = 2;
    repeated  VoipAddr  addrList  = 3;
    required  int32  roomId  = 4;
    required  int64  roomKey  = 5;
    required  int32  roomMemberId  = 6;
    required  VoipMultiRelayData  relayData  = 7;
    optional  int32  netQualityCnt  = 8;
    repeated  VoipNetQuality  netQualityList  = 9;
    optional  int32  audioTsdfBeyond3G  = 10;
    optional  int32  audioTsdfEdge  = 11;
    optional  int32  passthroughQosAlgorithm  = 12;
    optional  int32  fastPlayRepair  = 13;
    optional  int32  newP2S  = 14;
    optional  int32  audioDtx  = 15;
    optional  uint32  tcpCnt  = 16;
    optional  uint32  switchInterval  = 17;
    optional  int32  hw264SvrCfg  = 18;
    optional  int32  audioEnableRmioAndS3A  = 19;
    optional  int32  audioEnableSpkec  = 20;
    optional  uint32  audioAecMode5  = 21;
    optional  uint32  svrCfgListV  = 22;
    optional  uint32  audioEnableConfigMic  = 23;
    optional  uint32  switchFlag  = 24;
    optional  uint32  wifiScanInterval  = 25;
    optional  uint32  qosLocalMaxBr  = 26;
    optional  int32  audioEnableXnoiseSup  = 27;
    optional  SKBuiltinBuffer_t  intStrategyIssued  = 28;
}

message VoipAudioDevStatSyncData {
    required  uint32  audioDevOccupiedStat  = 1;
    required  uint32  audioDevOccupiedApp  = 2;
}

message VoipCSAddr {
    required  string  ip  = 1;
    required  int32  port  = 2;
}

message VoipCSHangupReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  inviteId  = 2;
    required  uint64  roomId  = 3;
    required  uint64  roomKey  = 4;
    optional  string  toBizUserName  = 5;
    optional  uint64  timestamp  = 6;
    required  uint32  reason  = 7;
}

message VoipCSHangupResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
}

message VoipCSHeartBeatReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    optional  uint64  timestamp  = 4;
}

message VoipCSHeartBeatResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
}

message VoipCSInviteReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  inviteId  = 2;
    required  string  toBizUserName  = 3;
    required  int32  netType  = 4;
    optional  bytes  callContext  = 5;
    required  bytes  capInfo  = 6;
    optional  uint64  timestamp  = 7;
    optional  string  toBizAppId  = 8;
}

message VoipCSInviteResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    repeated  VoipCSAddr  addrList  = 4;
    required  uint32  syncInterval  = 5;
    required  uint32  checkPeerCnt  = 6;
    required  uint32  checkPeerInterval  = 7;
    optional  uint32  nextInvite  = 8;
    optional  uint32  encryptStrategy  = 9;
    optional  uint32  maxBitRate  = 10;
    optional  uint32  maxFps  = 11;
    optional  bytes  encryptKeyBuf  = 12;
    optional  uint32  tcpStartCnt  = 13;
    repeated  VoipCSAddr  tcpAddrList  = 14;
}

message VoipCSNotify {
    required  uint64  roomId  = 1;
    required  uint64  roomKey  = 2;
    required  uint32  notifySeq  = 3;
    optional  uint32  calleeMemberId  = 4;
    optional  uint32  calleeStatus  = 5;
    optional  uint32  calleeSubStatus  = 6;
    optional  bytes  calleeCap  = 7;
}

message VoipCSRedirectReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    optional  uint64  timestamp  = 4;
}

message VoipCSRedirectResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    repeated  VoipCSAddr  addrList  = 4;
}

message VoipCSReportData {
    optional  uint32  type  = 1;
    optional  string  data  = 2;
}

message VoipCSReportReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    repeated  VoipCSReportData  data  = 4;
}

message VoipCSReportResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
}

message VoipCSSyncReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    optional  uint64  timestamp  = 4;
    required  uint32  notifySeq  = 5;
}

message VoipCSSyncResp {
    required  BaseResponse  baseResponse  = 1;
    required  uint64  roomId  = 2;
    required  uint64  roomKey  = 3;
    required  uint32  notifySeq  = 4;
    optional  uint32  calleeMemberId  = 5;
    optional  uint32  calleeStatus  = 6;
    optional  uint32  calleeSubStatus  = 7;
    optional  bytes  calleeCap  = 8;
}

message VoipCancelInviteReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  int32  roomId  = 3;
    required  int64  roomKey  = 4;
    optional  string  toUserName  = 6;
    required  VoipStatReportData  reportData  = 8;
    optional  uint32  inviteType  = 9;
    optional  uint64  timestamp64  = 10;
    optional  uint32  inviteId  = 11;
    optional  uint32  cancelType  = 12;
}

message VoipCancelInviteResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
}

message VoipCmdItem {
    required  int32  cmdId  = 1;
    required  SKBuiltinBuffer_t  cmdBuf  = 2;
    optional  string  fromUserName  = 3;
}

message VoipCmdList {
    required  uint32  count  = 1;
    repeated  VoipCmdItem  list  = 2;
}

message VoipCompleteStatus {
    required  int32  cmdId  = 1;
    required  uint32  uin  = 2;
    required  uint32  key  = 3;
    required  SKBuiltinBuffer_t  buffer  = 4;
}

message VoipCompleteStatusList {
    required  int32  count  = 1;
    repeated  VoipCompleteStatus  completeStatus  = 2;
    required  uint32  seq  = 3;
}

message VoipDoubleLinkSwitchReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    required  int32  roomMemberId  = 4;
    required  int32  curLinkType  = 5;
    required  int32  isRelayConnReady  = 6;
    required  int32  isDirectConnReady  = 7;
    required  int32  curStrategy  = 8;
    required  int32  bufferVersion  = 9;
    required  SKBuiltinBuffer_t  buffer  = 10;
}

message VoipDoubleLinkSwitchRsp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    required  int32  roomMemberId  = 4;
    required  int32  reportFlag  = 5;
    required  int32  switchToLinkType  = 6;
}

message VoipGetRoomInfoReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  string  callerUserName  = 4;
    optional  uint32  type  = 5;
    optional  uint64  timestamp64  = 6;
}

message VoipGetRoomInfoResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    required  uint32  createTime  = 4;
    required  int32  memberCount  = 6;
    repeated  VoipStatusItem  memberStatus  = 7;
    optional  string  callerUserName  = 8;
    optional  uint32  inviteType  = 9;
}

message VoipHeartBeatReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  uint32  timestamp  = 4;
    optional  uint64  timestamp64  = 5;
    optional  int32  connectionType  = 6;
}

message VoipHeartBeatResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  uint32  timestamp  = 4;
}

message VoipInviteRemindReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint32  listCount  = 2;
    repeated  SKBuiltinString_t  toUserNameList  = 3;
    optional  uint32  inviteType  = 4;
}

message VoipInviteRemindResp {
    required  BaseResponse  baseResponse  = 1;
}

message VoipInviteReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  int32  inviteUserCount  = 3;
    repeated  SKBuiltinString_t  toUsernameList  = 4;
    required  VoipRelayData  peerId  = 6;
    required  VoipRelayData  capInfo  = 7;
    required  int32  netType  = 8;
    required  int32  callType  = 9;
    optional  int32  roomId  = 10;
    optional  int64  roomKey  = 11;
    optional  uint32  inviteType  = 12;
    optional  uint64  timestamp64  = 13;
    optional  int32  hdvideo  = 14;
    optional  uint32  inviteId  = 15;
    optional  uint32  isWksimCard  = 16;
    optional  uint32  nicCnt  = 17;
    repeated  NICInfo  nicSet  = 18;
}

message VoipInviteResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int32  addrCount  = 3;
    repeated  VoipAddr  addrList  = 4;
    required  int64  roomKey  = 5;
    required  int32  roomMemberId  = 6;
    optional  VoipMultiRelayData  relayData  = 7;
    optional  int32  netQualityCnt  = 8;
    repeated  VoipNetQuality  netQualityList  = 9;
    optional  int32  audioTsdfBeyond3G  = 10;
    optional  int32  audioTsdfEdge  = 11;
    optional  int32  passthroughQosAlgorithm  = 12;
    optional  int32  fastPlayRepair  = 13;
    optional  int32  voipSyncInterval  = 14;
    optional  int32  newP2S  = 15;
    optional  int32  audioDtx  = 16;
    optional  uint32  tcpCnt  = 17;
    optional  uint32  switchInterval  = 18;
    optional  int32  hw264SvrCfg  = 19;
    optional  int32  audioEnableRmioAndS3A  = 20;
    optional  int32  audioEnableSpkec  = 21;
    optional  uint32  audioAecMode5  = 22;
    optional  uint32  svrCfgListV  = 23;
    optional  uint32  enableDataAccept  = 24;
    optional  uint32  audioEnableConfigMic  = 25;
    optional  uint32  reInviteInterval  = 26;
    optional  uint32  switchFlag  = 27;
    optional  uint32  wifiScanInterval  = 28;
    optional  uint32  qosLocalMaxBr  = 29;
    optional  int32  audioEnableXnoiseSup  = 30;
    optional  SKBuiltinBuffer_t  intStrategyIssued  = 31;
}

message VoipMultiRelayConnData {
    optional  RelayConnSet  relayConnSet  = 1;
    optional  DirectConnSet  directConnSet  = 2;
    optional  int32  activeConnCnt  = 3;
    repeated  int32  activeConnIdSet  = 4[packed=true];
    optional  int32  inactiveConnCnt  = 5;
    repeated  int32  inactiveConnIdSet  = 6[packed=true];
    optional  int32  connSetSeq  = 7;
    optional  RelayConnSet  redirectConnSet  = 8;
}

message VoipMultiRelayData {
    required  VoipRelayData  peerId  = 1;
    required  VoipRelayData  capInfo  = 2;
    required  int32  sendingType  = 3;
    optional  VoipAddrSet  voipSvrAddr  = 4;
    optional  VoipAddrSet  punchSvrAddr  = 5;
    optional  int32  voipNetQuality  = 6;
    optional  int32  linkDisconnectHbInterval  = 7;
    optional  int32  linkDisconnectHbCnt  = 8;
    optional  uint32  protocolEncryptLength  = 9;
    optional  SKBuiltinBuffer_t  clientHeadSigns  = 10;
    optional  uint32  oppositeClientVersion  = 11;
    optional  VoipAddrSet  tcpSvrAddr  = 12;
    optional  int32  arqstrategy  = 13;
    optional  int32  arqcacheLen  = 14;
    optional  int32  arqrttThreshold  = 15;
    optional  int32  arqusedRateThreshold  = 16;
    optional  int32  arqrespRateThreshold  = 17;
    optional  int32  encryptStrategy  = 18;
    optional  int32  fecsvrCtr  = 19;
    optional  SKBuiltinBuffer_t  feckeyPara1  = 20;
    optional  SKBuiltinBuffer_t  feckeyPara2  = 21;
    optional  int32  qosStrategy  = 22;
    optional  SKBuiltinBuffer_t  encryptKeyBuf  = 23;
    optional  uint32  oppositeDeviceType  = 24;
    optional  uint32  redirectInitThreshold  = 25;
    optional  uint32  bothSideSwitchFlag  = 26;
    optional  JbmBitrateRsParam  jbmBitrateRsConfig  = 27;
    optional  SKBuiltinBuffer_t  generalBsintStrategyBuf  = 28;
    optional  uint32  scoreIntervalDay  = 29;
    optional  string  scoreTitle  = 30;
    optional  uint32  natDetectSvrCnt  = 31;
    repeated  VoipNatDetectSvr  natDetectSvr  = 32;
    optional  RelayConnSet  relayConnSet  = 33;
    optional  DirectConnSet  directConnSet  = 34;
    optional  GetNICAddrSvrSet  getNicAddrSvrSet  = 35;
}

message VoipNatDetectSvr {
    optional  uint32  isp  = 1;
    optional  uint32  addrCnt  = 2;
    repeated  VoipAddr  addrs  = 3;
}

message VoipNetQuality {
    required  int32  type  = 1;
    required  int32  begin  = 2;
    required  int32  end  = 3;
    required  int32  hitCnt  = 4;
}

message VoipRedirectReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    required  int32  roomMemberId  = 4;
    optional  int32  redirectOrientedFlg  = 5;
    optional  int32  connSampleCnt  = 6;
    repeated  VoipRelayQualitySample  connSampleList  = 7;
    optional  int32  currentDuration  = 8;
    optional  uint32  nicCnt  = 9;
    repeated  NICInfo  nicSet  = 10;
    optional  uint32  previousNetType  = 11;
    optional  uint32  currentNetType  = 12;
}

message VoipRedirectResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int32  relayAddrCount  = 3;
    repeated  VoipAddr  relayAddrList  = 4;
    required  int32  punchAddrCount  = 5;
    repeated  VoipAddr  punchAddrList  = 6;
    required  int64  roomKey  = 7;
    required  int32  roomMemberId  = 8;
    optional  int32  tcpAddrCount  = 9;
    repeated  VoipAddr  tcpAddrList  = 10;
    optional  int32  redirectThreshold  = 11;
    optional  int32  redirectDecision  = 12;
    optional  VoipMultiRelayConnData  newConnSet  = 13;
}

message VoipRelayData {
    required  int32  type  = 1;
    required  SKBuiltinBuffer_t  buffer  = 2;
}

message VoipRelayQualitySample {
    required  int32  upLossRate  = 1;
    required  int32  downLossRate  = 2;
    required  int32  connRtt  = 3;
    required  int32  dcrecvCnt  = 4;
    required  int32  relayRecvCnt  = 5;
}

message VoipShutDownReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  int32  roomId  = 3;
    required  int64  roomKey  = 4;
    required  VoipStatReportData  reportData  = 5;
    optional  uint64  timestamp64  = 6;
    optional  uint32  duration  = 7;
}

message VoipShutDownResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
}

message VoipSpeedResultReq {
    required  BaseRequest  baseRequest  = 1;
    required  uint64  testId  = 2;
    required  uint64  roomKey  = 3;
    required  uint32  netType  = 4;
    required  SKBuiltinString_t  netName  = 5;
    required  SKBuiltinString_t  wifiName  = 6;
    required  double  longitude  = 7;
    required  double  latitude  = 8;
    required  uint32  roomId  = 9;
    required  uint32  resultCnt  = 10;
    repeated  SpeedResult  result  = 11;
}

message VoipSpeedResultRsp {
    required  BaseResponse  baseResponse  = 1;
}

message VoipSpeedTestReq {
    required  BaseRequest  baseRequest  = 1;
    required  int32  roomId  = 2;
    required  uint32  callType  = 3;
    required  uint32  netType  = 4;
    required  uint32  isConnecting  = 5;
    required  uint32  isConnected  = 6;
    required  uint32  c2Clossrate  = 7;
    required  uint32  c2CrttCnt  = 8;
    repeated  uint32  c2Crtt  = 9[packed=true];
    required  uint32  c2SdownLossRate  = 10;
    required  uint32  c2SrttCnt  = 11;
    repeated  uint32  c2Srtt  = 12[packed=true];
    required  uint32  sendPkts  = 13;
    required  uint32  rcvPkts  = 14;
}

message VoipSpeedTestRsp {
    required  BaseResponse  baseResponse  = 1;
    required  uint32  needTest  = 2;
    required  uint64  testId  = 3;
    required  uint32  svrListCnt  = 4;
    repeated  SpeedTestSvr  svrList  = 5;
}

message VoipStatReportData {
    required  SKBuiltinString_t  statReport  = 1;
}

message VoipStatReportReq {
    required  BaseRequest  baseRequest  = 1;
    required  VoipStatReportData  reportData  = 2;
    optional  VoipStatReportData  channelReportData  = 3;
    optional  VoipStatReportData  dialReportData  = 4;
    optional  VoipStatReportData  engineReportData  = 5;
    optional  uint64  timestamp64  = 6;
    optional  VoipStatReportData  engineExtReportData  = 7;
    optional  uint32  natReportCnt  = 8;
    repeated  SKBuiltinString_t  natReport  = 9;
    optional  uint32  directConnCnt  = 10;
    repeated  SKBuiltinString_t  directConnReports  = 11;
    optional  uint32  relayConnCnt  = 12;
    repeated  SKBuiltinString_t  relayConnReports  = 13;
    optional  uint32  engineMpReportCnt  = 14;
    repeated  SKBuiltinString_t  engineMpReports  = 15;
}

message VoipStatReportResp {
    required  BaseResponse  baseResponse  = 1;
}

message VoipStatusItem {
    optional  string  username  = 1;
    required  int32  status  = 2;
}

message VoipSyncReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  fromUsername  = 2;
    required  int32  roomId  = 3;
    required  SKBuiltinBuffer_t  keyBuf  = 4;
    required  VoipCmdList  opLog  = 5;
    required  int64  roomKey  = 6;
    required  int32  selector  = 7;
    optional  uint64  timestamp64  = 8;
}

message VoipSyncResp {
    required  BaseResponse  baseResponse  = 1;
    required  int32  roomId  = 3;
    required  SKBuiltinBuffer_t  keyBuf  = 4;
    required  VoipCmdList  cmdList  = 5;
    required  int32  continueFlag  = 7;
    required  int64  roomKey  = 8;
}

message WARemoteDebug_AddJsContext {
    optional  string  jscontextId  = 1;
    optional  string  jscontextName  = 2;
}

message WARemoteDebug_BaseReq {
    optional  uint32  clientVersion  = 1;
}

message WARemoteDebug_BaseResp {
    optional  int32  errcode  = 1;
    optional  string  errmsg  = 2;
}

message WARemoteDebug_Breakpoint {
    optional  bool  isHit  = 1;
}

message WARemoteDebug_CallInterface {
    optional  string  objName  = 1;
    optional  string  methodName  = 2;
    repeated  string  methodArgList  = 3;
    optional  uint32  callId  = 4;
}

message WARemoteDebug_CallInterfaceResult {
    optional  string  ret  = 1;
    optional  uint32  callId  = 2;
}

message WARemoteDebug_ChromeDevtools {
    optional  uint64  opId  = 1;
    optional  string  payload  = 2;
    optional  string  jscontextId  = 3;
}

message WARemoteDebug_ChromeDevtoolsResult {
    optional  uint64  opId  = 1;
    optional  string  payload  = 2;
    optional  string  jscontextId  = 3;
}

message WARemoteDebug_ConnectJsContext {
    optional  string  jscontextId  = 1;
}

message WARemoteDebug_DataFormat {
    optional  uint32  cmd  = 1;
    optional  string  uuid  = 2;
    optional  bytes  data  = 3;
}

message WARemoteDebug_DebugMessage {
    optional  uint32  seq  = 1;
    optional  uint32  after  = 2;
    optional  string  category  = 3;
    optional  bytes  data  = 4;
    optional  uint32  compressAlgo  = 5;
    optional  uint32  originalSize  = 6;
}

message WARemoteDebug_DeviceInfo {
    optional  string  deviceName  = 1;
    optional  string  deviceModel  = 2;
    optional  string  systemVersion  = 3;
    optional  string  wechatVersion  = 4;
    optional  uint32  publibVersion  = 5;
    optional  float  screenWidth  = 6;
    optional  float  pixelRatio  = 7;
    optional  string  userAgent  = 8;
}

message WARemoteDebug_DomEvent {
    optional  string  params  = 1;
    optional  uint32  webviewId  = 2;
}

message WARemoteDebug_DomOp {
    optional  string  params  = 1;
    optional  uint32  webviewId  = 2;
}

message WARemoteDebug_EvaluateJavascript {
    optional  string  script  = 1;
    optional  uint32  evaluateId  = 2;
}

message WARemoteDebug_EvaluateJavascriptResult {
    optional  string  ret  = 1;
    optional  uint32  evaluateId  = 2;
}

message WARemoteDebug_MessageNotify {
    repeated  WARemoteDebug_DebugMessage  debugMessageList  = 1;
}

message WARemoteDebug_MethodWithArgs {
    optional  string  methodName  = 1;
    repeated  string  methodArgList  = 2;
}

message WARemoteDebug_NetworkDebugAPI {
    optional  string  apiName  = 1;
    optional  string  taskId  = 2;
    optional  string  requestHeaders  = 3;
    optional  uint64  timestamp  = 4;
}

message WARemoteDebug_Ping {
    optional  uint64  pingId  = 1;
    optional  string  payload  = 2;
}

message WARemoteDebug_Pong {
    optional  uint64  pingId  = 1;
    optional  uint32  networkType  = 2;
    optional  string  payload  = 3;
}

message WARemoteDebug_RegisterInterface {
    optional  string  objName  = 1;
    repeated  WARemoteDebug_MethodWithArgs  objMethodList  = 2;
}

message WARemoteDebug_RemoveJsContext {
    optional  string  jscontextId  = 1;
}

message WARemoteDebug_RoomInfo {
    optional  bool  joinRoom  = 1;
    optional  string  roomId  = 2;
    optional  string  originalMd5  = 3;
    optional  uint32  roomStatus  = 4;
    optional  uint32  wxConnStatus  = 5;
    optional  uint32  devConnStatus  = 6;
}

message WARemoteDebug_SendDebugMessageReq {
    required  WARemoteDebug_BaseReq  baseRequest  = 1;
    repeated  WARemoteDebug_DebugMessage  debugMessageList  = 2;
    optional  uint32  recvAck  = 3;
}

message WARemoteDebug_SendDebugMessageResp {
    required  WARemoteDebug_BaseResp  baseResponse  = 1;
    required  uint32  sendAck  = 2;
}

message WARemoteDebug_SetupContext {
    optional  WARemoteDebug_RegisterInterface  registerInterface  = 1;
    optional  WARemoteDebug_DeviceInfo  deviceInfo  = 2;
    optional  string  configureJs  = 3;
    optional  string  publicJsMd5  = 4;
    optional  string  threeJsMd5  = 5;
    optional  uint32  supportCompressAlgo  = 6;
}

message WARemoteDebug_WxHeartBeatReq {
    required  WARemoteDebug_BaseReq  baseRequest  = 1;
    optional  uint32  recvAck  = 2;
}

message WARemoteDebug_WxHeartBeatResp {
    required  WARemoteDebug_BaseResp  baseResponse  = 1;
}

message WARemoteDebug_WxJoinRoomReq {
    required  WARemoteDebug_BaseReq  baseRequest  = 1;
    optional  string  username  = 2;
    optional  string  roomId  = 3;
    optional  string  wxpkgInfo  = 4;
}

message WARemoteDebug_WxJoinRoomResp {
    required  WARemoteDebug_BaseResp  baseResponse  = 1;
}

message WARemoteDebug_WxLoginReq {
    required  WARemoteDebug_BaseReq  baseRequest  = 1;
    optional  string  loginTicket  = 2;
}

message WARemoteDebug_WxLoginResp {
    required  WARemoteDebug_BaseResp  baseResponse  = 1;
    optional  WARemoteDebug_RoomInfo  roomInfo  = 2;
}

message WARemoteDebug_WxQuitRoomReq {
    required  WARemoteDebug_BaseReq  baseRequest  = 1;
}

message WARemoteDebug_WxQuitRoomResp {
    required  WARemoteDebug_BaseResp  baseResponse  = 1;
}

message WARemoteDebug_WxSyncMessageReq {
    required  WARemoteDebug_BaseReq  baseRequest  = 1;
    optional  uint32  minSeq  = 2;
    optional  uint32  maxSeq  = 3;
}

message WARemoteDebug_WxSyncMessageResp {
    required  WARemoteDebug_BaseResp  baseResponse  = 1;
    repeated  WARemoteDebug_DebugMessage  debugMessageList  = 2;
    optional  uint32  sendAck  = 3;
}

message WCExtInfo {
    optional  SKBuiltinBuffer_t  wcstf  = 1;
    optional  SKBuiltinBuffer_t  wcste  = 2;
    optional  SKBuiltinBuffer_t  ccData  = 3;
    optional  SKBuiltinBuffer_t  userAttrInfo  = 4;
    optional  SKBuiltinBuffer_t  acgiDeviceInfo  = 5;
    optional  SKBuiltinBuffer_t  acgiTuring  = 6;
    optional  SKBuiltinBuffer_t  deviceToken  = 7;
    optional  SKBuiltinBuffer_t  iosturingHuman  = 101;
    optional  SKBuiltinBuffer_t  iosturingOwner  = 102;
}

message WCOCell {
    optional  string  title  = 1;
    optional  string  productId  = 2;
    required  uint32  callTime  = 3;
    optional  string  sellingPrice  = 4;
    optional  string  price  = 5;
    optional  string  priceExtra  = 6;
    optional  string  discountWording  = 7;
    optional  string  discountMd5  = 8;
    optional  string  webPayUrl  = 9;
}

message WCOFeedbackCell {
    required  uint32  id  = 1;
    optional  string  content  = 2;
}

message WCOGiftCard {
    optional  string  price  = 1;
    optional  string  dateWording  = 2;
    optional  string  fromUserName  = 3;
    optional  string  headImgUrl  = 4;
    optional  string  expiredWording  = 5;
}

message WCOPackageInfo {
    optional  string  msg  = 1;
    optional  string  country  = 2;
    optional  uint32  validity  = 3;
}

message WCOPackageProduct {
    optional  string  title  = 1;
    optional  string  price  = 2;
    optional  string  wording  = 3;
    optional  string  desc  = 4;
    optional  string  countryFlagImgUrl  = 5;
    optional  uint32  flag  = 6;
    optional  string  productId  = 7;
}

message WCOPrepareExtInfo {
    optional  string  discountMd5  = 1;
}

message WCOPurchasePackageRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  productId  = 2;
}

message WCOPurchasePackageResponse {
    required  BaseResponse  baseResponse  = 1;
}

message WCOSharedItem {
    required  int32  itemType  = 1;
}

message WCOSharedList {
    repeated  WCOSharedItem  item  = 1;
    required  uint32  count  = 2;
}

message WCPayJumpActionItem {
    optional  uint32  actionType  = 1;
    optional  string  actionUrl  = 2;
    optional  string  actionAppUsername  = 13;
    optional  string  actionAppNickname  = 14;
    optional  uint32  designerUin  = 15;
}

message WSGroup {
    optional  uint64  groupId  = 1;
    optional  uint32  groupTime  = 2;
    optional  SnsObject  topObject  = 3;
    repeated  uint64  feedIdList  = 4;
}

message WSReportInfo {
    optional  uint32  clientType  = 1;
    optional  uint32  subType  = 2;
}

message WTLoginImgReqInfo {
    optional  string  imgSid  = 1;
    optional  string  imgCode  = 2;
    optional  string  imgEncryptKey  = 3;
    required  SKBuiltinBuffer_t  ksid  = 4;
}

message WTLoginImgRespInfo {
    optional  string  imgEncryptKey  = 1;
    required  SKBuiltinBuffer_t  ksid  = 2;
    optional  string  imgSid  = 3;
    required  SKBuiltinBuffer_t  imgBuf  = 4;
}

message WWGetInviteReq {
    optional  uint32  debugShareType  = 1;
}

message WWGetInviteResp {
    optional  WWShareInvite  info  = 1;
}

message WWHomeContactInfo {
    optional  uint32  type  = 1;
    optional  string  displayName  = 2;
    optional  string  iconUrl  = 3;
    optional  string  jumpUrl  = 4;
}

message WWShareInvite {
    optional  uint32  shareType  = 1;
    optional  WWShareTypeImage  contentImage  = 2;
    optional  WWShareTypeLink  contentLink  = 3;
}

message WWShareTypeImage {
    optional  string  imgUrl  = 1;
}

message WWShareTypeLink {
    optional  string  shareUrl  = 1;
    optional  bytes  base64ThumbData  = 2;
    optional  string  title  = 3;
    optional  string  description  = 4;
}

message WXAPhoneInfo {
    optional  string  mobile  = 1;
    optional  string  showMobile  = 2;
    optional  bool  needAuth  = 3;
    optional  bool  allowSendSms  = 4;
    optional  string  encryptedData  = 5;
    optional  string  iv  = 6;
    optional  string  cloudId  = 7;
}

message WXCPbCSAddVoiceGroupMemberReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    repeated  uint32  members  = 4;
    repeated  string  wxUserNames  = 100;
}

message WXCPbCSCancelCreateVoiceGroupReq {
    optional  string  clientGroupId  = 1;
    optional  int32  reason  = 2;
}

message WXCPbCSClientReportReq {
    repeated  WXCPbReportItem  reportList  = 1;
}

message WXCPbCSCreateVoiceGroupReq {
    optional  WXCPbVoiceGroupInfo  groupInfo  = 1;
    repeated  uint32  users  = 2;
    optional  WXCPbVoipRelayData  capInfo  = 3;
    optional  uint32  routeId  = 4;
    optional  uint32  userAbility  = 5;
    optional  WXCPbVoiceSingle2MultiInfo  single2Multi  = 6;
    optional  string  clientGroupId  = 7;
    optional  string  openGroupId  = 8;
    optional  uint32  netType  = 9;
    repeated  string  userNames  = 100;
    repeated  WXCPbClientGroupUsrProfile  profileList  = 202;
}

message WXCPbCSEnterVoiceRoomReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  WXCPbVoipRelayData  capInfo  = 4;
    optional  int32  enterType  = 5;
    optional  uint32  userAbility  = 6;
    optional  uint32  netType  = 8;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 200;
}

message WXCPbCSExitVoiceRoomReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  int32  reason  = 4;
}

message WXCPbCSModifyVoiceGroupInfoReq {
    optional  string  groupId  = 1;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 2;
}

message WXCPbCSRejectEnterVoiceRoomReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  int32  reason  = 4;
    optional  string  clientGroupId  = 5;
}

message WXCPbCSSubscribeLargeVideoReq {
    required  int32  roomId  = 1;
    required  int64  roomKey  = 2;
    required  string  ownerUserName  = 3;
    optional  string  groupId  = 4;
    optional  uint64  timestamp  = 5;
}

message WXCPbCSSubscribeScreenSharingReq {
    required  int32  roomId  = 1;
    required  int64  roomKey  = 2;
    optional  string  groupId  = 3;
    repeated  WXCPbSubscribeScreenSharingMember  memberList  = 4;
    optional  uint64  timestamp  = 5;
}

message WXCPbCSSubscribeVideoReq {
    required  int32  roomId  = 1;
    required  int64  roomKey  = 2;
    optional  string  groupId  = 3;
    repeated  WXCPbSubscribeVideoMember  memberList  = 4;
    optional  uint64  timestamp  = 5;
}

message WXCPbCSSwitchVideoGroupReq {
    required  uint32  action  = 1;
    required  int32  roomId  = 2;
    required  int64  roomKey  = 3;
    optional  string  groupId  = 4;
    optional  uint64  timestamp  = 5;
}

message WXCPbCSVoiceAckReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  WXCPbVoipRelayData  capInfo  = 4;
    optional  uint32  userAbility  = 5;
    optional  bytes  mailAuthBuf  = 200;
}

message WXCPbCSVoiceClientSceneReportReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  int32  memberId  = 4;
    optional  WXCPbVoiceClientScene  clientScene  = 5;
    repeated  WXCPbVoiceClientSceneExt  clientSceneExtList  = 6;
}

message WXCPbCSVoiceGetGroupInfoBatchReq {
    repeated  string  groupIdList  = 1;
}

message WXCPbCSVoiceMemberWhisperReq {
    optional  string  groupId  = 1;
    repeated  string  whisperToUsernames  = 2;
    optional  bytes  whisperBuf  = 3;
}

message WXCPbCSVoiceRedirectReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  int32  memberId  = 4;
    optional  uint32  userAbility  = 5;
    optional  uint32  netType  = 6;
    optional  int32  redirectType  = 7;
}

message WXCPbCSVoiceRoomHelloReq {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  int32  memberId  = 4;
    optional  int32  callData  = 5;
    optional  bytes  memoryCost  = 6;
    repeated  WXCPbVoipDataReport  relayReport  = 7;
}

message WXCPbClientGroupUsrProfile {
    optional  uint32  uuid  = 1;
    optional  string  nickname  = 2;
    optional  string  headurl  = 3;
}

message WXCPbMVRelayAddr {
    optional  uint32  ip  = 1;
    optional  int32  port  = 2;
    optional  bytes  ipstr  = 3;
}

message WXCPbMsgYTVoiceGroupChg {
    optional  int32  chgType  = 1;
    optional  string  groupId  = 2;
    optional  int32  roomid  = 3;
    optional  int64  roomkey  = 4;
    optional  uint32  routeId  = 5;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 6;
    repeated  WXCPbVoiceGroupUsrProfile  usrProfileList  = 7;
    repeated  WXCPbVoiceGroupMem  grpMemList  = 8;
    optional  WXCPbVoiceConf  conf  = 9;
    optional  WXCPbVoiceSingle2MultiInfo  single2Multi  = 10;
    optional  uint32  audioencrypttype  = 11;
    optional  uint32  videoencrypttype  = 12;
    optional  uint32  seq  = 13;
    optional  uint64  msgId  = 101;
    optional  uint32  svrTime  = 102;
    optional  bytes  whisperBuf  = 103;
    optional  bytes  mailUuidSession  = 200;
    repeated  WXCPbVoiceGroupMem  exitMembers  = 201;
    optional  int32  audioStreamType  = 202;
}

message WXCPbNotifyLargeVideoSubscribersChange {
    required  uint32  largeVideoSubscribersCnt  = 1;
}

message WXCPbNotifyVideoMembersChange {
    repeated  WXCPbVideoGroupMember  videoMemList  = 1;
}

message WXCPbPlayItemInfo {
    optional  uint32  playItemId  = 1;
    optional  bytes  name  = 2;
    optional  string  iconUrl  = 3;
    optional  bytes  introduction  = 4;
    optional  bytes  detailWording  = 5;
    optional  uint32  playType  = 6;
    optional  bytes  data  = 7;
    optional  uint32  isTiming  = 8;
    optional  bytes  apnspushWording  = 9;
    optional  string  shareUrl  = 10;
    optional  bytes  playTips  = 11;
    optional  bytes  cusHostPushWroding  = 12;
    optional  bytes  cusGuestPushWroding  = 13;
    optional  bytes  cusRecallPushWroding  = 14;
    optional  bytes  missTvTiming  = 15;
    optional  bytes  missTvRecall  = 16;
    optional  bytes  missGame  = 17;
    optional  bytes  missCusTvTimingHost  = 18;
    optional  bytes  missCusTvOther  = 19;
    optional  uint32  status  = 20;
}

message WXCPbQcwxtalkHead {
    optional  string  userName  = 2;
    optional  int32  cmd  = 3;
    optional  uint32  seqNo  = 4;
    optional  int32  ret  = 5;
    optional  int32  debugCode  = 6;
    optional  uint32  routeId  = 7;
    optional  uint32  uuid  = 8;
}

message WXCPbQcwxtalkPackage {
    optional  WXCPbQcwxtalkHead  head  = 1;
    optional  bytes  body  = 2;
}

message WXCPbReportItem {
    optional  string  reportKey  = 1;
    optional  string  reportValue  = 2;
}

message WXCPbSCAddVoiceGroupMemberResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    repeated  WXCPbVoiceGroupMem  members  = 4;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 5;
}

message WXCPbSCCancelCreateVoiceGroupResp {
    optional  string  clientGroupId  = 1;
}

message WXCPbSCCreateVoiceGroupResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  uint32  routeId  = 4;
    repeated  WXCPbMVRelayAddr  addrlist  = 5;
    repeated  WXCPbVoiceGroupUsrProfile  grpUsrProfileList  = 6;
    optional  WXCPbVoiceConf  conf  = 7;
    optional  string  clientGroupId  = 8;
    repeated  WXCPbVoiceGroupMem  grpMemList  = 9;
    optional  int32  encryptSwitch  = 10;
    repeated  int32  headSigns  = 11;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 12;
    optional  uint32  businessid  = 13;
    repeated  WXCPbMVRelayAddr  liveaddrlist  = 14;
    optional  uint32  retrySeconds  = 15;
    optional  uint32  helloFreqSeconds  = 16;
    repeated  WXCPbVoiceGroupMem  exitMembers  = 17;
    repeated  WXCPbMVRelayAddr  tcpaddrlist  = 18;
    optional  int32  tcpstarttime  = 19;
    optional  int32  encrypttype  = 20;
    optional  int32  audioencodetype  = 21;
    optional  bytes  encryptkeybuf  = 22;
    optional  int32  memberid  = 23;
    repeated  uint32  generalpolicys  = 24;
    optional  uint32  videoencrypttype  = 25;
}

message WXCPbSCEnterVoiceRoomResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    repeated  WXCPbMVRelayAddr  addrlist  = 4;
    repeated  WXCPbVoiceGroupMem  members  = 5;
    optional  WXCPbVoiceConf  conf  = 6;
    optional  int32  encryptSwitch  = 7;
    repeated  int32  headSigns  = 8;
    optional  int32  enterType  = 9;
    repeated  WXCPbVoiceGroupUsrProfile  grpUsrProfileList  = 10;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 11;
    optional  uint32  businessid  = 12;
    repeated  WXCPbMVRelayAddr  liveaddrlist  = 13;
    repeated  WXCPbMVRelayAddr  tcpaddrlist  = 14;
    optional  int32  tcpstarttime  = 15;
    optional  int32  encrypttype  = 16;
    optional  int32  audioencodetype  = 17;
    optional  bytes  encryptkeybuf  = 18;
    optional  int32  memberid  = 19;
    repeated  uint32  generalpolicys  = 20;
    optional  uint32  videoencrypttype  = 21;
    optional  uint32  retrySeconds  = 100;
    optional  uint32  helloFreqSeconds  = 101;
    repeated  WXCPbVoiceGroupMem  exitMembers  = 102;
}

message WXCPbSCExitVoiceRoomResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
}

message WXCPbSCModifyVoiceGroupInfoResp {
    optional  string  groupId  = 1;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 2;
    optional  int32  reserved  = 3;
}

message WXCPbSCSubscribeLargeVideoResp {
    optional  int32  roomId  = 1;
    optional  int64  roomKey  = 2;
}

message WXCPbSCSubscribeScreenSharingResp {
    optional  int32  roomId  = 1;
    optional  int64  roomKey  = 2;
}

message WXCPbSCSubscribeVideoResp {
    optional  int32  roomId  = 1;
    optional  int64  roomKey  = 2;
}

message WXCPbSCVoiceClientSceneReportResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  int32  memberId  = 4;
    optional  WXCPbVoiceClientScene  clientScene  = 5;
    repeated  WXCPbVoiceClientSceneExt  clientSceneExtList  = 6;
}

message WXCPbSCVoiceGetGroupInfoBatchResp {
    repeated  WXCPbVoiceGroupInfoItem  groupInfoList  = 1;
}

message WXCPbSCVoiceMemberWhisperResp {
    optional  int32  ret  = 1;
}

message WXCPbSCVoiceRedirectResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    repeated  WXCPbMVRelayAddr  addrlist  = 4;
    repeated  WXCPbVoiceGroupMem  members  = 5;
    optional  WXCPbVoiceConf  conf  = 6;
    optional  int32  encryptSwitch  = 7;
    repeated  int32  headSigns  = 8;
    repeated  WXCPbVoiceGroupUsrProfile  grpUsrProfileList  = 9;
    optional  WXCPbVoiceGroupInfo  groupInfo  = 10;
    repeated  WXCPbMVRelayAddr  liveaddrlist  = 11;
    repeated  WXCPbVoiceGroupMem  exitMembers  = 12;
    repeated  WXCPbMVRelayAddr  tcpaddrlist  = 13;
    optional  int32  tcpstarttime  = 14;
    optional  int32  encrypttype  = 15;
    optional  int32  audioencodetype  = 16;
    optional  bytes  encryptkeybuf  = 17;
    optional  int32  memberid  = 18;
    repeated  uint32  generalpolicys  = 19;
    optional  uint32  videoencrypttype  = 20;
}

message WXCPbSCVoiceRoomHelloResp {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
}

message WXCPbSKBuiltinBuffer_t {
    required  uint32  iLen  = 1;
    optional  bytes  buffer  = 2;
}

message WXCPbSubscribeScreenSharingMember {
    optional  uint32  memberId  = 1;
}

message WXCPbSubscribeVideoMember {
    optional  uint32  memberId  = 1;
}

message WXCPbSwitchVideoGroupResp {
    optional  uint32  bitRate  = 1;
    optional  int32  roomId  = 2;
    optional  int64  roomKey  = 3;
    optional  uint32  videoSizeSmall  = 4;
    optional  uint32  videoFpsSmall  = 5;
    optional  uint32  bitRateBig  = 6;
    optional  uint32  videoSizeBig  = 7;
    optional  uint32  videoFpsBig  = 8;
    optional  int32  memberIdId  = 9;
    optional  int32  disableTime  = 10;
}

message WXCPbVideoGroupMember {
    optional  uint32  memberId  = 1;
    optional  string  wxUserName  = 2;
    optional  uint32  uuid  = 3;
    optional  uint32  videoStatus  = 4;
    optional  uint32  videoScreenSharingStatus  = 5;
    optional  uint32  memberRole  = 6;
}

message WXCPbVoiceClientScene {
    optional  int32  sceneType  = 1;
}

message WXCPbVoiceClientSceneExt {
    optional  int32  sceneExtType  = 1;
    optional  int32  sceneExtStatus  = 2;
    optional  bytes  sceneExtData  = 3;
}

message WXCPbVoiceConf {
    optional  int32  nDisableVideo  = 1;
    optional  int32  nWidth  = 2;
    optional  int32  nHeight  = 3;
    optional  int32  nInFps  = 4;
    optional  int32  nOutFmt  = 5;
    optional  int32  nOstype  = 6;
    optional  int32  nNetKbps  = 7;
    optional  int32  nNetType  = 8;
    optional  int32  nMtusize  = 9;
    optional  int32  nCpuflag  = 10;
    optional  int32  nDispRate  = 11;
    optional  int32  nVcodecType  = 12;
}

message WXCPbVoiceGroupInfo {
    optional  string  name  = 1;
    optional  bytes  authCookie  = 2;
    optional  int32  voiceType  = 3;
    optional  uint64  playItemId  = 4;
    optional  bytes  playItemInfo  = 5;
    optional  bytes  shareUrl  = 6;
    optional  bytes  msgShareUrl  = 7;
    optional  string  groupHostUserName  = 100;
    optional  string  wxGroupid  = 101;
    optional  uint64  mailId  = 200;
    optional  bytes  mailSubject  = 201;
    optional  bytes  singleTalkBuf  = 202;
    optional  bytes  mailappVid  = 203;
    optional  bytes  mailappEncryptInfo  = 204;
}

message WXCPbVoiceGroupInfoItem {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    repeated  WXCPbVoiceGroupMem  members  = 4;
    optional  uint32  routeId  = 5;
    optional  string  wxchatroom  = 6;
}

message WXCPbVoiceGroupMem {
    optional  uint32  uuid  = 1;
    optional  uint32  inviteuuid  = 2;
    optional  uint32  status  = 3;
    optional  uint32  reason  = 4;
    optional  int32  memberId  = 5;
    optional  uint32  inviteTime  = 6;
    optional  WXCPbVoiceClientScene  clientScene  = 7;
    optional  uint32  memberSession  = 8;
    optional  string  openClientId  = 9;
    repeated  WXCPbVoiceClientSceneExt  clientSceneExtList  = 10;
    optional  string  wxUserName  = 100;
    optional  string  wxInviteUserName  = 101;
    optional  bytes  mailAuthBuf  = 200;
}

message WXCPbVoiceGroupUsrProfile {
    optional  uint32  uuid  = 1;
    optional  string  username  = 2;
    optional  string  headUrl  = 3;
    optional  uint64  abilityFlags  = 4;
}

message WXCPbVoiceSingle2MultiInfo {
    optional  int32  roomid  = 1;
    optional  int64  roomkey  = 2;
    optional  uint32  singleUuid  = 3;
}

message WXCPbVoipDataReport {
    optional  int32  timestamp  = 1;
    optional  int32  rtt  = 2;
    optional  int32  downLossRate  = 3;
    optional  int32  upLossRate  = 4;
    optional  int32  signalLevel  = 5;
}

message WXCPbVoipRelayData {
    optional  int32  type  = 1;
    optional  WXCPbSKBuiltinBuffer_t  buffer  = 2;
}

message WXCPbWxBannerVoiceInfo {
    optional  string  groupId  = 1;
    optional  int32  roomid  = 2;
    optional  int64  roomkey  = 3;
    optional  uint32  routeId  = 4;
    optional  int32  voicestatus  = 5;
    optional  string  wxchatroom  = 6;
    repeated  WXCPbVoiceGroupMem  members  = 7;
    optional  string  talkcreateuser  = 8;
    repeated  string  notfrienduserlist  = 9;
    optional  uint64  millsecond  = 10;
}

message WalletActivity {
    optional  uint32  activityId  = 1;
    optional  WalletIcon  activityIcon  = 2;
}

message WalletBalancePrivacyVO {
    optional  string  title  = 1;
    optional  string  titleIcon  = 2;
    optional  string  switchTitle  = 3;
    optional  string  switchDesc  = 4;
}

message WalletEntrance {
    optional  string  urlnative  = 1;
    optional  string  urlhtml  = 2;
    optional  WalletWeAppInfo  urlweApp  = 3;
    optional  uint32  type  = 4;
}

message WalletFunction {
    optional  uint32  funcId  = 1;
    optional  string  name  = 2;
    optional  WalletIcon  icon  = 3;
}

message WalletGrayArea {
    repeated  WalletGrayAreaItem  array  = 1;
}

message WalletGrayAreaItem {
    optional  bytes  name  = 1;
    optional  bytes  logoUrl  = 2;
    optional  bytes  clickUrl  = 3;
    optional  bytes  extraInfo  = 4;
}

message WalletGroupInfo {
    optional  uint32  groupId  = 1;
    optional  string  groupName  = 2;
}

message WalletIcon {
    optional  string  urldefault  = 1;
    optional  string  urldark  = 2;
}

message WalletKeyInfo {
    optional  uint32  keyFlag  = 1;
    optional  string  url  = 2;
}

message WalletLockReportReq {
    optional  uint32  protectscene  = 1;
    optional  uint32  verifytype  = 2;
    optional  int32  verifyresult  = 3;
    optional  uint32  failreason  = 4;
}

message WalletMixSpGenprepayResp {
    optional  string  payGateUrl  = 1;
    optional  CallbackRetryConf  callbackRetryConf  = 2;
    optional  uint32  needDialog  = 3;
    optional  string  dialogText  = 4;
}

message WalletNotice {
    optional  bytes  conent  = 1;
    optional  bytes  url  = 2;
}

message WalletThreePointArea {
    repeated  WalletThreePointItem  array  = 1;
}

message WalletThreePointItem {
    optional  bytes  name  = 1;
    optional  bytes  url  = 2;
}

message WalletTitle {
    optional  bytes  main  = 1;
    optional  bytes  sub  = 2;
}

message WalletWeAppInfo {
    optional  string  username  = 1;
    optional  string  pagepath  = 2;
    optional  uint32  version  = 3;
}

message WeAppComment {
    optional  string  logoUrl  = 1;
    optional  string  nickname  = 2;
    optional  string  msg  = 3;
    optional  uint32  postTime  = 4;
    optional  uint32  score  = 5;
    optional  bool  isFromFriend  = 6;
    optional  string  username  = 7;
    optional  uint32  id  = 8;
}

message WeAppOpSearchReq {
    repeated  WeAppOpSearchReq_OpCmd  opcmdlist  = 1;
}

message WeAppOpSearchReq_OpCmd {
    optional  uint32  cmdId  = 1;
    optional  bytes  buffer  = 2;
}

message WeAppOpSearchResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  templateBuffer  = 2;
}

message WeAppPostCommentRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  score  = 3;
    optional  string  msg  = 4;
}

message WeAppPostCommentResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message WeAppSearchAdClickRequest {
    optional  string  statSessionId  = 1;
    optional  string  keywordId  = 2;
    optional  string  searchId  = 3;
    optional  string  docId  = 4;
    optional  uint32  postion  = 5;
    optional  string  appUserName  = 6;
    optional  string  appVersion  = 7;
    optional  string  adBuffer  = 8;
    optional  uint32  scene  = 9;
    optional  string  clickExtInfo  = 19;
}

message WeAppSearchAdClickResponse {
    required  BaseResponse  baseResponse  = 1;
}

message WeAppSearchGuideReq {
    required  BaseRequest  baseRequest  = 1;
    optional  double  locationX  = 2;
    optional  double  locationY  = 3;
    optional  string  nettype  = 4;
    optional  uint32  h5Version  = 5;
    optional  string  sessionId  = 6;
    optional  uint32  scene  = 7;
    repeated  WeAppSearchGuideReq_CommKvItem  extReqParams  = 8;
}

message WeAppSearchGuideReq_CommKvItem {
    required  string  key  = 1;
    optional  uint64  uintValue  = 2;
    optional  string  textValue  = 3;
}

message WeAppSearchGuideResp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  json  = 2;
    optional  uint32  interval  = 3;
}

message WeAppSearchRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  keyWord  = 2;
    optional  uint32  offset  = 3;
    optional  uint32  cliVersion  = 4;
    optional  string  searchId  = 5;
    optional  uint32  displayPattern  = 6;
    optional  double  locationX  = 7;
    optional  double  locationY  = 8;
    optional  uint32  type  = 9;
    optional  uint32  subType  = 10;
    optional  string  sessionId  = 99;
    optional  string  keywordId  = 100;
    optional  string  wordingId  = 101;
    optional  string  suggestionId  = 102;
    optional  uint32  suggestionPos  = 103;
    optional  string  suggestionBuf  = 104;
}

message WeAppSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  updateCode  = 2;
    optional  uint32  offset  = 3;
    optional  string  json  = 4;
}

message WeAppSearchSuggestionRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  query  = 2;
    optional  uint32  cliVersion  = 3;
    optional  string  sessionId  = 99;
    optional  string  keywordId  = 100;
    optional  string  wordingId  = 101;
}

message WeAppSearchSuggestionResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  json  = 2;
}

message WeAppSearchWordingReq {
    required  BaseRequest  baseRequest  = 1;
}

message WeAppSearchWordingResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  WeAppSearchWordingTitle  title  = 2;
    optional  WeAppSearchWordingTitle  titleDesktop  = 3;
    optional  WeAppSearchWordingTitle  titleDesktopMore  = 4;
}

message WeAppSearchWordingTitle {
    optional  string  wording  = 1;
    optional  string  wordingId  = 2;
}

message WeAppShowCommentsRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  count  = 3;
    optional  string  ctx  = 4;
}

message WeAppShowCommentsResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  ctx  = 2;
    repeated  WeAppComment  commentList  = 3;
    optional  uint32  score  = 4;
    optional  uint32  totalCount  = 5;
}

message WeAppWidgetAlarmReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  uint32  id  = 3;
    repeated  uint32  keys  = 4;
    optional  string  query  = 5;
    optional  string  username  = 6;
}

message WeAppWidgetAlarmResponse {
    optional  BaseResponse  baseResponse  = 1;
}

message WeChatWalletInfo {
    optional  uint64  walletBalance  = 1;
    optional  uint64  lqtWalletBalance  = 2;
}

message WePkgMetaInfo {
    repeated  FileIndex  fileIndexList  = 1;
    required  string  charset  = 2;
    optional  string  desc  = 3;
}

message WeappGameStatGlobalControl {
    optional  uint32  reportMinIntervalSeconds  = 1;
    optional  uint32  customDataMaxBytes  = 2;
}

message WeappResult {
    optional  ResultCommContent  commContent  = 1;
    optional  string  userName  = 2;
}

message WebCommPrefetchReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqStr  = 2;
}

message WebCommPrefetchResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  respStr  = 2;
}

message WebCommRequest {
    optional  string  commReq  = 1;
    optional  string  requestId  = 2;
}

message WebCommResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  commResp  = 2;
    optional  string  requestId  = 3;
}

message WebComptCommCgiReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  reqStr  = 2;
}

message WebComptCommCgiResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  respStr  = 2;
}

message WebComptReportJSErrReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  errMsg  = 2;
    optional  string  errStack  = 3;
    optional  uint32  errLine  = 4;
    optional  uint32  errCol  = 5;
    optional  string  userAgent  = 6;
    optional  string  refer  = 7;
    optional  string  appid  = 8;
    optional  string  comptName  = 9;
    optional  string  libVersion  = 10;
    optional  string  bizUrl  = 11;
    optional  string  bizMd5  = 12;
}

message WebComptReportJSErrResp {
    required  BaseResponse  baseResponse  = 1;
}

message WebRecommendRequest {
    required  uint32  offset  = 1;
    required  uint32  h5Version  = 2;
    optional  uint32  isHomePage  = 3;
    optional  string  keyword  = 4;
    optional  LbsLocationNew  location  = 5;
    optional  uint32  scene  = 6;
    optional  string  searchId  = 7;
    optional  uint32  sceneActionType  = 8;
    optional  uint32  displayPattern  = 9;
    repeated  CommKvItem  extReqParams  = 10;
    optional  string  sessionId  = 11;
    optional  string  source  = 12;
    optional  uint32  channelId  = 13;
    optional  string  navigationId  = 14;
    optional  string  redPointMsgId  = 15;
    repeated  string  checkDocidList  = 16;
    optional  uint32  pos  = 17;
    optional  uint32  type  = 18;
    optional  uint32  fromPreTabChannelId  = 19;
    optional  WebRecommendRequest_WSFloatingWindow  floatingWindow  = 20;
}

message WebRecommendRequest_WSFloatingWindow {
    repeated  WebRecommendRequest_WSFloatingWindow_FloatingWindowDocInfo  docInfo  = 1;
}

message WebRecommendRequest_WSFloatingWindow_FloatingWindowDocInfo {
    optional  string  docUrl  = 1;
}

message WebRecommendResponse {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  updateCode  = 2;
    optional  uint32  offset  = 3;
    optional  string  json  = 4;
    optional  RecPluginMsg  pluginMsg  = 5;
    optional  WebRecommendResponse_RecClientCache  clientCache  = 6;
    optional  uint32  redDotTimeStamp  = 7;
}

message WebRecommendResponse_RecClientCache {
    optional  uint32  directShowTs  = 1;
    optional  uint32  showAndRefleshTs  = 2;
    optional  uint32  category  = 3;
    repeated  string  docidList  = 4;
    optional  uint32  needCache  = 5;
}

message WebSearchBoxCtrlInfo {
    optional  uint64  ctrlType  = 1;
    optional  BoxWidgetUrlInfo  widgetUrlInfo  = 2;
    optional  uint32  publiclibversion  = 3;
}

message WebSearchRequest {
    required  uint32  isHomePage  = 1;
    required  string  keyword  = 2;
    required  uint32  offset  = 3;
    optional  uint64  businessType  = 4;
    required  uint32  cliVersion  = 5;
    optional  LbsLocationNew  location  = 6;
    repeated  UserItem  matchUserList  = 7;
    required  uint32  scene  = 8;
    optional  string  searchId  = 9;
    required  uint32  sceneActionType  = 10;
    optional  string  sugId  = 11;
    optional  string  prefixSug  = 12;
    optional  uint32  sugType  = 13;
    repeated  string  prefixQuery  = 14;
    optional  uint32  displayPattern  = 15;
    optional  TagSearchInfo  tagInfo  = 16;
    repeated  CommKvItem  extReqParams  = 17;
    repeated  NumCondition  numConditions  = 18;
    optional  string  language  = 19;
    optional  bytes  weAppCtrlInfo  = 20;
    optional  string  sessionId  = 21;
    optional  bytes  boxCtrlInfo  = 22;
    optional  SnsCtrlInfo  snsInfo  = 23;
    optional  PoiCtrlInfo  poiInfo  = 25;
    optional  uint32  darkMode  = 26;
    optional  ChildMode  childMode  = 27;
    optional  TagCtrlInfo  tagExtInfo  = 28;
}

message WebSearchResponse {
    optional  BaseResponse  baseResponse  = 1;
    required  uint32  updateCode  = 2;
    required  uint32  offset  = 3;
    required  string  json  = 4;
}

message WebViewClipboardInfo {
    optional  uint32  fromscene  = 1;
    optional  string  referUsername  = 2;
}

message WebViewControl {
    optional  uint32  uinKeyExpireTime  = 1;
}

message WecoinConsumeCtx {
    optional  string  billNo  = 1;
    optional  uint64  amount  = 2;
    optional  string  urlParams  = 3;
}

message WecoinPriceInfo {
    optional  string  productId  = 1;
    optional  uint32  wecoinCount  = 2;
    optional  uint32  price  = 3;
}

message WecoinRealNameAuthRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  requestId  = 2;
    optional  string  token  = 3;
}

message WecoinRealNameAuthResponse {
    required  BaseResponse  baseResponse  = 1;
}

message WeiShangInfo {
    repeated  WSGroup  groups  = 1;
    repeated  TimelineIdx  timelineIdx  = 2;
}

message WepkgBigPackage {
    required  WepkgDownloadInfo  downloadInfo  = 4;
}

message WepkgCmd {
    optional  bool  clearAllPkgExceptCurrentEnabledVersion  = 1;
    optional  bool  reloadNow  = 2;
}

message WepkgConfig {
    optional  string  currentEnabledVersion  = 1;
    optional  bool  disableWebViewGlobalCache  = 2;
    required  uint32  pkgVersionLastUnusedSeconds  = 3;
    optional  uint32  checkIntervalSeconds  = 4;
}

message WepkgControl {
    optional  bool  disableForAll  = 1;
    repeated  WepkgControl_PreloadPkg  preloadList  = 3;
    repeated  WepkgControl_PreloadPkg  preloadIfExistsList  = 4;
}

message WepkgControl_PreloadPkg {
    required  string  pkgId  = 1;
}

message WepkgDownloadInfo {
    required  string  md5  = 1;
    required  string  downloadUrl  = 2;
    required  uint32  downloadNetworkType  = 3;
    optional  uint32  sizeInBytes  = 4;
    optional  WepkgPatchDownloadInfo  patchInfo  = 5;
}

message WepkgFileInfo {
    required  string  rid  = 1;
    required  string  mimeType  = 2;
    required  WepkgDownloadInfo  downloadInfo  = 3;
}

message WepkgInfo {
    required  string  appId  = 1;
    required  WepkgConfig  pkgConfig  = 2;
}

message WepkgPatchDownloadInfo {
    required  string  md5  = 1;
    required  string  downloadUrl  = 2;
    required  uint32  downloadNetworkType  = 3;
    optional  uint32  sizeInBytes  = 4;
}

message WepkgPreloadFiles {
    repeated  WepkgFileInfo  fileList  = 1;
    optional  bool  atomic  = 2;
}

message WepkgVersionDownloadInfo {
    required  string  entranceDomain  = 4;
    optional  string  md5  = 5;
    optional  string  downloadUrl  = 6;
    optional  uint32  downloadNetworkType  = 7;
    optional  uint32  sizeInBytes  = 8;
    optional  WepkgBigPackage  bigPackage  = 9;
    optional  WepkgPreloadFiles  preloadFiles  = 10;
    optional  string  charset  = 12;
}

message WhatsNewsResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  registTime  = 2;
    optional  uint32  fstSnstime  = 3;
    optional  uint32  count  = 4;
    repeated  SKBuiltinString_t  picUrlList  = 5;
}

message WidgetInfo {
    optional  uint32  widgetType  = 1;
    optional  uint32  versionType  = 2;
    optional  string  url  = 3;
    optional  string  md5  = 4;
}

message WidgetLaunchAction {
    optional  uint32  actionCode  = 1;
    optional  string  alertMsg  = 2;
}

message WidgetResult {
    optional  string  docId  = 1;
    optional  string  userName  = 2;
    optional  string  nickName  = 3;
    optional  string  appId  = 4;
    optional  uint32  appVersion  = 5;
    optional  string  boxInfo  = 6;
    optional  string  iconUrl  = 7;
}

message WidgetVersionInfo {
    optional  uint32  appVersion  = 1;
    optional  string  widgetVersionMd5  = 2;
    optional  string  searchWidgetVersionMd5  = 3;
}

message WordList {
    optional  uint32  version  = 1;
    repeated  string  word  = 2;
}

message WordMatchConfig {
    optional  uint32  version  = 1;
    optional  uint32  disableMatch  = 2;
    optional  uint32  minMatchLen  = 3;
    optional  uint32  maxMatchLen  = 4;
}

message WordingIdResource {
    optional  string  wordingId  = 1;
    optional  string  wording  = 2;
    optional  string  pinyin  = 3;
    optional  string  quanpin  = 4;
}

message WordingItem {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message WorkerInfo {
    optional  string  kfOpenid  = 1;
    optional  string  headImgUrl  = 2;
    optional  string  nickname  = 3;
    optional  int32  kfType  = 4;
}

message WuRaoTips {
    optional  uint32  sendWuRaoTips  = 1;
    optional  string  wuRaoWording  = 2;
    optional  string  wuRaoActionWording  = 3;
}

message WxBannerVoiceInfo {
    optional  uint64  roomid  = 1;
    optional  uint64  roomkey  = 2;
    optional  string  wxGroupid  = 3;
    repeated  MemberInfo  memberList  = 4;
    optional  uint64  memberListSeq  = 5;
    optional  string  createOpenid  = 7;
    optional  int32  voiceStatus  = 8;
}

message WxPageDataResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  data  = 2;
}

message WxPayUserTokenParams {
    optional  string  appid  = 1;
    optional  string  payPackage  = 2;
    optional  string  signType  = 3;
    optional  string  timestamp  = 4;
    optional  string  paySign  = 5;
    optional  string  nonceStr  = 6;
}

message WxVerifyCodeReqInfo {
    optional  string  verifySignature  = 1;
    optional  string  verifyContent  = 2;
}

message WxVerifyCodeRespInfo {
    optional  string  verifySignature  = 1;
    required  SKBuiltinBuffer_t  verifyBuff  = 2;
}

message WxaABTestAppInfo {
    optional  string  appid  = 1;
    optional  uint32  appType  = 2;
}

message WxaABTestInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaABTestAppInfo  appinfoList  = 2;
}

message WxaABTestInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WxaABTestInfoResponse_WxaABTestResponseAppInfo  appinfoList  = 2;
}

message WxaABTestInfoResponse_WxaABTestResponseAppInfo {
    optional  WxaABTestAppInfo  appInfo  = 1;
    optional  bytes  abtestControlBytes  = 2;
}

message WxaAppBaseInfo {
    optional  uint32  versionType  = 1;
    optional  uint32  appVersion  = 2;
    optional  uint32  scene  = 3;
    optional  string  pagePath  = 4;
    optional  uint32  backGround  = 5;
    optional  uint32  preScene  = 6;
}

message WxaAppBaseResponse {
    optional  int32  errcode  = 1;
    optional  string  errmsg  = 2;
}

message WxaAppGetAuthInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
}

message WxaAppGetAuthInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    repeated  WxaAppGetAuthItem  authItem  = 3;
}

message WxaAppGetAuthItem {
    optional  string  scope  = 1;
    optional  string  scopeDesc  = 2;
    optional  uint32  state  = 3;
    optional  UserAvatarInfo  userAvatarInfo  = 4;
    optional  string  scopeSubDesc  = 5;
    optional  ScopeRiskPopUpInfo  riskPopupInfo  = 6;
}

message WxaAppGetPublicLibInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  version  = 2;
}

message WxaAppGetPublicLibInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  url  = 2;
    optional  string  md5  = 3;
    optional  uint32  version  = 4;
    optional  uint32  forceUpdate  = 6;
    optional  uint32  needUpdate  = 7;
    optional  string  patchUrl  = 8;
}

message WxaAppGetShareInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  string  shareName  = 3;
    optional  bool  isUpdatablemsg  = 4;
    optional  string  activityInfo  = 5;
    optional  bool  isTodomsg  = 6;
    optional  string  todoActivityId  = 7;
    optional  bool  isSecretmsg  = 8;
    optional  uint32  sourceType  = 9;
}

message WxaAppGetShareInfoResponse {
    optional  BaseResponse  baseResponse  = 1;
    repeated  WxaAppGetShareInfoResponse_WxaAppShareInfo  shareInfo  = 2;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 3;
}

message WxaAppGetShareInfoResponse_WxaAppShareInfo {
    optional  string  shareName  = 1;
    optional  string  shareKey  = 2;
    optional  WxaAppGetShareInfoResponse_WxaAppShareInfo_UpdatableMsgInfo  updateablemsgInfo  = 3;
    optional  bool  isUpdatablemsg  = 4;
    optional  bool  isTodomsg  = 5;
    optional  WxaAppGetShareInfoResponse_WxaAppShareInfo_ToDoMsgInfo  todoMsgInfo  = 6;
    optional  bool  isSecretmsg  = 7;
}

message WxaAppGetShareInfoResponse_WxaAppShareInfo_ToDoMsgInfo {
    optional  bool  isLegal  = 1;
    optional  string  todoActivityId  = 2;
}

message WxaAppGetShareInfoResponse_WxaAppShareInfo_UpdatableMsgInfo {
    optional  string  content  = 1;
    optional  string  contentColor  = 2;
    optional  string  toastContent  = 3;
    optional  string  toastButtonWording  = 4;
    optional  string  remindWording  = 5;
    optional  int32  updatePeroid  = 6;
    optional  int32  state  = 7;
    optional  string  expiredSubscribeWording  = 8;
}

message WxaAppHostInfo {
    repeated  WxaAppHostInfo_PluginInfo  pluginInfo  = 1;
    repeated  WxaAppHostInfo_JumpToInfo  jumpToInfo  = 2;
}

message WxaAppHostInfo_JumpToInfo {
    optional  string  jumpToAppid  = 1;
    optional  string  jumpToUsername  = 2;
}

message WxaAppHostInfo_PluginInfo {
    optional  string  pluginAppid  = 1;
    optional  string  pluginUsername  = 2;
}

message WxaAppIDKeyBatchReportRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaAppRecord  recordList  = 2;
    optional  ReportDeviceInfo  reportDeviceInfo  = 3;
}

message WxaAppIDKeyBatchReportResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  reportFreq  = 2;
}

message WxaAppItem {
    optional  string  username  = 1;
    optional  uint32  updateTime  = 2;
    optional  uint32  versionType  = 3;
    optional  int64  order  = 4;
    optional  bool  isFromOuter  = 5;
    optional  string  appDesc  = 6;
}

message WxaAppModAuthReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    repeated  WxaAppModAuthReq_ModAuthItem  modAuthItem  = 3;
}

message WxaAppModAuthReq_ModAuthItem {
    optional  string  optScope  = 1;
    optional  uint32  optState  = 2;
    optional  uint32  optAvatarId  = 3;
}

message WxaAppModAuthResp {
    required  BaseResponse  baseResponse  = 1;
    optional  WxaAppBaseResponse  wxaappBaseresponse  = 2;
    repeated  WxaAppGetAuthItem  authItem  = 3;
}

message WxaAppRecord {
    optional  uint32  type  = 1;
    optional  string  appid  = 2;
    optional  string  nsId  = 3;
    optional  uint32  key  = 4;
    optional  uint32  time  = 5;
    optional  uint32  value  = 6;
    optional  string  ext  = 7;
    optional  int32  appstate  = 8;
    optional  string  sessionId  = 9;
    optional  string  networkType  = 10;
    optional  int32  enterScene  = 11;
    optional  int32  usedState  = 12;
    optional  string  sceneNote  = 13;
    optional  string  referPagePath  = 14;
    optional  uint32  preScene  = 15;
    optional  string  preSceneNote  = 16;
    optional  uint32  isEntrance  = 17;
}

message WxaAttrSyncRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  wxaUserName  = 2;
    optional  bytes  lastAttrVersion  = 3;
    optional  string  wxaAppId  = 4;
    optional  string  instanceId  = 5;
}

message WxaAttrSyncResp_KeyValue {
    optional  string  key  = 1;
    optional  string  value  = 2;
}

message WxaAttrSyncResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  lastAttrVersion  = 2;
    repeated  WxaAttrSyncResp_KeyValue  updateInfoList  = 3;
    optional  string  wxaUserName  = 4;
}

message WxaAttrSyncSingleReqInfo {
    optional  string  wxaUserName  = 1;
    optional  bytes  lastAttrVersion  = 2;
}

message WxaAttrSyncSingleRespInfo {
    required  string  wxaUserName  = 1;
    optional  bytes  lastAttrVersion  = 2;
    repeated  WxaAttrSyncResp_KeyValue  updateInfoList  = 3;
}

message WxaBusinessBaseResponse {
    optional  int32  errcode  = 1;
    optional  string  errmsg  = 2;
}

message WxaCerFiles {
    repeated  bytes  cers  = 1;
}

message WxaClientPublicLibInfo {
    optional  uint32  pubVersion  = 1;
    optional  uint32  updateTime  = 2;
    optional  uint32  updateScene  = 3;
}

message WxaCmdsMsg {
    repeated  SyncVersionSingleRespInfo  respInfoList  = 1;
    optional  uint32  genTime  = 2;
}

message WxaExternalInfo {
    optional  string  hostAppid  = 1;
    optional  uint32  scene  = 2;
    optional  uint32  sourceEnv  = 3;
}

message WxaGameBaseInfo {
    optional  uint32  versionType  = 1;
    optional  uint32  appVersion  = 2;
    optional  uint32  scene  = 3;
    optional  uint32  backGround  = 5;
    optional  uint32  preScene  = 6;
}

message WxaGameClientPublicLibInfo {
    optional  uint32  pubVersion  = 1;
    optional  uint64  updateTime  = 2;
    optional  uint32  updateScene  = 3;
}

message WxaGameSampleConfig {
    optional  uint32  sampleType  = 1;
    optional  uint32  sampleIntervalInSeconds  = 2;
    optional  uint32  fpsLagWindowSize  = 3;
    optional  uint32  fpsLagWindowDiff  = 4;
    optional  uint32  fpsLowThreshold  = 5;
}

message WxaGameServerSampleConfig {
    optional  bool  shouldDoSample  = 1;
    optional  string  keyEventSampleConfig  = 2;
    optional  bytes  pubKey  = 3;
    optional  uint32  sampleNetworkBits  = 4;
    optional  uint32  imageSampleLevel  = 5;
    optional  uint32  imageQuality  = 6;
}

message WxaInfo {
    required  string  appId  = 1;
    optional  string  appName  = 2;
    optional  string  iconUrl  = 3;
    optional  string  userName  = 4;
    optional  string  path  = 5;
    optional  uint32  envVersion  = 6;
}

message WxaJsApiInfoRequest {
    required  BaseRequest  baseRequest  = 1;
    repeated  WxaJsApiRequestAppInfo  appinfoList  = 2;
}

message WxaJsApiInfoResponse {
    required  BaseResponse  baseResponse  = 1;
    repeated  WxaJsApiInfoResponse_WxaJsApiResponseAppInfo  appinfoList  = 2;
}

message WxaJsApiInfoResponse_WxaJsApiResponseAppInfo {
    optional  WxaJsApiRequestAppInfo  appInfo  = 1;
    optional  CheckJsApiInfo  jsapiInfo  = 2;
}

message WxaJsApiRequestAppInfo {
    optional  string  appid  = 1;
    optional  uint32  appType  = 2;
}

message WxaJumpInfo {
    optional  string  sourceAppid  = 1;
    optional  uint32  sourceType  = 2;
    optional  string  agentId  = 3;
}

message WxaLocation {
    optional  float  longitude  = 1;
    optional  float  latitude  = 2;
}

message WxaMsgConfigItem {
    optional  string  appid  = 1;
    optional  uint32  status  = 2;
    optional  string  nickname  = 3;
    optional  string  headimg  = 4;
}

message WxaPage {
    optional  string  username  = 1;
    optional  string  path  = 2;
    optional  uint32  appVersion  = 3;
    optional  string  appid  = 4;
    optional  uint32  debugMode  = 5;
    optional  string  description  = 6;
}

message WxaPluginInfo {
    optional  string  hostAppid  = 1;
}

message WxaPushMsgInfo {
    optional  string  pushMsgId  = 1;
}

message WxaRealTimeReportInfo {
    optional  int32  type  = 1;
    optional  bytes  content  = 2;
    optional  string  appid  = 3;
}

message WxaResult {
    optional  string  docId  = 1;
    optional  string  nickName  = 2;
    optional  string  iconUrl  = 3;
    optional  string  userName  = 4;
    optional  uint32  appVersion  = 5;
    optional  string  description  = 6;
    optional  string  path  = 7;
    optional  float  scoreTfIdf  = 8;
    optional  float  scoreQuailty  = 9;
    optional  uint32  dau  = 10;
    optional  string  appId  = 11;
    optional  string  extraJson  = 12;
    optional  bytes  debugBuf  = 13;
}

message WxaRuntimeCheckWebviewUrlReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  appid  = 2;
    optional  string  reqUrl  = 3;
    optional  string  outerUrl  = 4;
}

message WxaRuntimeCheckWebviewUrlResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  openUrl  = 2;
}

message WxaRuntimeGetDeeplinkInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  deeplinkTicket  = 2;
}

message WxaRuntimeGetDeeplinkInfoResp {
    required  BaseResponse  baseResponse  = 1;
    optional  uint32  status  = 2;
    optional  bytes  respData  = 3;
}

message WxaRuntimeGetDeeplinkTicketReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  apiName  = 2;
    optional  bytes  reqData  = 3;
    optional  uint32  wxaScene  = 4;
}

message WxaRuntimeGetDeeplinkTicketResp {
    required  BaseResponse  baseResponse  = 1;
    optional  string  deeplinkTicket  = 2;
    optional  uint32  expireTime  = 3;
}

message WxaRuntimeLoginTransferReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  hostAppid  = 3;
    optional  uint32  scene  = 4;
    optional  bytes  reqData  = 5;
    optional  string  wxaAppid  = 6;
    optional  int32  cmdId  = 7;
    optional  uint32  sdkVersion  = 8;
}

message WxaRuntimeLoginTransferResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  respData  = 2;
    optional  TransferAction  transferAction  = 3;
}

message WxaRuntimeNonLoginTransferReq {
    required  BaseRequest  baseRequest  = 1;
    optional  string  url  = 2;
    optional  string  hostAppid  = 3;
    optional  uint32  scene  = 4;
    optional  bytes  reqData  = 5;
    optional  string  wxaAppid  = 6;
    optional  int32  cmdId  = 7;
    optional  string  deviceToken  = 8;
    optional  string  deviceUsername  = 9;
}

message WxaRuntimeNonLoginTransferResp {
    required  BaseResponse  baseResponse  = 1;
    optional  bytes  respData  = 2;
    optional  TransferAction  transferAction  = 3;
}

message WxaRuntimeUpdateDeeplinkInfoReq {
    required  BaseRequest  baseRequest  = 1;
    optional  uint32  status  = 2;
    optional  bytes  respData  = 3;
    optional  string  deeplinkTicket  = 4;
}

message WxaRuntimeUpdateDeeplinkInfoResp {
    required  BaseResponse  baseResponse  = 1;
}

message WxaSearchInfo {
    optional  uint32  h5Version  = 1;
    optional  uint32  subType  = 2;
    optional  string  sessionId  = 3;
    optional  string  keywordId  = 4;
    optional  string  wordingId  = 5;
    optional  uint32  sugPos  = 6;
}

message WxaSyncBaseCmd {
    optional  uint32  dealEndTime  = 1;
    optional  uint32  cmdSequnce  = 2;
    optional  uint32  reportIdKey  = 3;
    optional  uint32  reportKeyOffset  = 4;
    optional  string  cmdKey  = 5;
}

message WxaSyncBlockCgiRequestCmd {
    optional  WxaSyncBaseCmd  base  = 1;
    repeated  uint32  blockCgis  = 2;
    repeated  uint32  sceneList  = 3;
    optional  uint32  blockBeginTime  = 4;
    optional  uint32  blockEndTime  = 5;
}

message WxaSyncCmds {
    optional  WxaSyncGetContactCmd  getContact  = 1;
    optional  WxaSyncGetCodeCmd  getCode  = 2;
    optional  WxaSyncIssueContactCmd  issueContact  = 3;
    optional  WxaSyncIssueLaunchCmd  issueLaunch  = 4;
    optional  WxaSyncIssueDecryptKeyCmd  issueDecryptKey  = 5;
    optional  WxaSyncUpdateVersionCmd  updateVersion  = 6;
    optional  WxaSyncBlockCgiRequestCmd  blockCgiRequest  = 7;
    optional  WxaSyncPreLaunchCmd  preLaunch  = 8;
}

message WxaSyncGetCodeCmd {
    optional  WxaSyncBaseCmd  base  = 1;
    optional  uint32  netWork  = 2;
    optional  uint32  retryTime  = 3;
    optional  uint32  retryInterval  = 4;
    optional  bool  isEncrypt  = 5;
    optional  uint32  appVersion  = 6;
    optional  string  md5  = 7;
    optional  string  packageKey  = 8;
    optional  uint32  packageType  = 9;
    optional  bool  needRouteNewGetCdnUrlCgi  = 10;
}

message WxaSyncGetContactCmd {
    optional  WxaSyncBaseCmd  base  = 1;
}

message WxaSyncIssueContactCmd {
    optional  WxaSyncBaseCmd  base  = 1;
    optional  string  contact  = 2;
}

message WxaSyncIssueDecryptKeyCmd {
    optional  WxaSyncBaseCmd  base  = 1;
    optional  string  decryptKey  = 2;
    optional  uint32  appVersion  = 3;
    optional  string  md5  = 4;
}

message WxaSyncIssueLaunchCmd {
    optional  WxaSyncBaseCmd  base  = 1;
    optional  string  launch  = 2;
    repeated  uint32  sceneList  = 3;
    optional  uint32  useBeginTime  = 4;
    optional  uint32  useEndTime  = 5;
}

message WxaSyncPreLaunchCmd {
    optional  WxaSyncBaseCmd  base  = 1;
}

message WxaSyncUpdateVersionCmd {
    optional  WxaSyncBaseCmd  base  = 1;
    optional  uint32  lastVersion  = 2;
}

message WxaTemplateMsgEvent {
    optional  uint32  type  = 1;
    optional  string  appid  = 2;
    optional  string  formid  = 3;
    optional  string  pageid  = 4;
    optional  int32  appstate  = 5;
    optional  int32  appversion  = 6;
}

message WxaTmplComplaintRequest {
    required  BaseRequest  baseRequest  = 1;
    optional  string  messageXml  = 2;
}

message WxaTmplComplaintResponse {
    required  BaseResponse  baseResponse  = 1;
    optional  string  complaintId  = 2;
}

message WxaWebLaunchInfo {
    optional  string  appid  = 1;
    optional  string  url  = 2;
}

message WxaWidgetBaseInfo {
    optional  uint32  versionType  = 1;
    optional  uint32  appVersion  = 2;
    optional  uint32  widgetType  = 3;
    optional  uint32  publicLibVersion  = 10;
}

message WxaWidgetSetting {
    optional  uint32  drawMinInterval  = 1;
    optional  bool  timerEnabled  = 2;
    optional  bool  drawLock  = 3;
}

message WxpayTestEnvInfo {
    optional  int32  environmentId  = 1;
    optional  int32  sceneId  = 2;
    optional  int32  callstackId  = 3;
    optional  string  extensionData  = 4;
}

message XAgreementDmSetting {
    required  uint32  count  = 1;
    repeated  DmItem  items  = 2;
}

message XAgreementInfo {
    optional  uint64  funcsSwitch  = 1;
    optional  uint64  funcsUserChoiceSwitch  = 2;
}

message XAgreementWording {
    required  int32  xagreementId  = 1;
    optional  uint32  count  = 2;
    repeated  LangWording  langWordings  = 3;
}

message XAgreementWordingSetting {
    required  uint32  count  = 1;
    repeated  XAgreementWording  xagreementWording  = 2;
}

message XMBaseAttachData {
    optional  string  fileid  = 1;
    optional  string  name  = 2;
    optional  uint32  size  = 3;
    optional  string  type  = 4;
    optional  string  downloadurl  = 5;
    optional  string  key  = 6;
    optional  string  code  = 7;
}

message XMBaseContactData {
    optional  string  nickname  = 1;
    optional  string  mailaddr  = 2;
    optional  uint64  uin  = 3;
}

message XMBaseReadData {
    optional  uint32  size  = 1;
    optional  string  charset  = 2;
    optional  string  mailid  = 3;
    optional  XMBaseContactData  fromaddr  = 4;
    repeated  XMBaseContactData  tolist  = 5;
    repeated  XMBaseContactData  cclist  = 6;
    repeated  XMBaseContactData  bcclist  = 7;
    optional  string  datetime  = 8;
    optional  string  subject  = 9;
    optional  string  contenttype  = 10;
    optional  string  content  = 11;
    repeated  XMBaseAttachData  normalattachlist  = 12;
    repeated  XMBaseAttachData  bigattachkist  = 13;
    optional  XMReadMailTips  tips  = 14;
}

message XMBaseSendMailData {
    optional  int32  sendtype  = 1;
    optional  XMBaseContactData  from  = 2;
    repeated  XMBaseContactData  tolist  = 3;
    repeated  XMBaseContactData  cclist  = 4;
    repeated  XMBaseContactData  bcclist  = 5;
    optional  string  subject  = 6;
    optional  string  content  = 7;
    repeated  XMBaseAttachData  attlist  = 8;
    repeated  XMBaseAttachData  bigAttlist  = 9;
    optional  string  oldmailid  = 10;
    optional  bool  savesent  = 11;
}

message XMCreateUploadUrlReq {
    optional  uint64  uin  = 1;
    optional  string  name  = 2;
    optional  uint32  size  = 3;
    optional  string  sha  = 4;
    optional  string  md5  = 5;
}

message XMCreateUploadUrlRsp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  fileid  = 2;
    optional  bool  isExist  = 3;
    optional  string  dns  = 4;
    optional  string  uploadKey  = 5;
    optional  uint32  expiredTime  = 6;
    optional  uint32  channel  = 7;
}

message XMGetUnreadCountReq {
    optional  uint64  uin  = 1;
}

message XMGetUnreadCountRsp {
    optional  BaseResponse  baseResponse  = 1;
    optional  uint32  unreadcount  = 2;
}

message XMReadMailReq {
    optional  uint64  uin  = 1;
    optional  string  mailid  = 2;
}

message XMReadMailRsp {
    optional  BaseResponse  baseResponse  = 1;
    optional  XMBaseReadData  readdata  = 2;
    optional  XMSessionCookie  session  = 3;
}

message XMReadMailTips {
    optional  string  wording  = 1;
    optional  uint32  color  = 2;
}

message XMSearchMailAddrReq {
    optional  uint64  uin  = 1;
    optional  string  mailaddr  = 2;
}

message XMSearchMailAddrRsp {
    optional  BaseResponse  baseResponse  = 1;
    repeated  XMBaseContactData  contacts  = 2;
}

message XMSendMailReq {
    optional  uint64  uin  = 1;
    optional  XMBaseSendMailData  senddata  = 2;
}

message XMSendMailRsp {
    optional  BaseResponse  baseResponse  = 1;
    optional  string  messageid  = 2;
}

message XMSessionCookie {
    optional  uint64  xmUin  = 1;
    optional  string  xmSid  = 2;
    optional  string  xmSkey  = 3;
}

message XMUpdateMailStatusReq {
    optional  uint64  uin  = 1;
    repeated  string  mailids  = 2;
    optional  uint64  flag  = 3;
}

message XMUpdateMailStatusRsp {
    optional  BaseResponse  baseResponse  = 1;
}

message YYB {
    optional  string  downloadUrl  = 1;
    optional  string  apkMd5  = 2;
    optional  string  preemptiveUrl  = 3;
    optional  string  extInfo  = 4;
    optional  string  downloadTipsWording  = 5;
    optional  uint32  supportedVersionCode  = 6;
    optional  string  backBtnWording  = 7;
    optional  string  downloadBtnWording  = 8;
}

message YYBStruct {
    optional  uint32  androidDownloadFlag  = 1;
    optional  string  downloadUrl  = 2;
    optional  string  apkMd5  = 3;
    optional  string  preemptiveUrl  = 4;
    optional  string  extInfo  = 5;
    optional  string  downloadTipsWording  = 6;
    optional  int32  supportedVersionCode  = 7;
}

message likeItem {
    required  string  username  = 1;
    optional  uint32  score  = 2;
    optional  uint32  ranknum  = 3;
    required  uint32  likecount  = 4;
    required  uint32  likestate  = 5;
    optional  SportRecord  sportrecord  = 6;
}

message likeUserDetail {
    required  uint32  timestamp  = 1;
    required  string  username  = 2;
}

message log_13905 {
    optional  int32  importDs  = 1;
    optional  int32  ds  = 2;
    optional  int64  uin  = 3;
    optional  int32  device  = 4;
    optional  int32  clientVersion  = 5;
    optional  int64  timeStamp  = 6;
    required  VoiceInputBehavior  viOp  = 7;
}

message rankDesc {
    optional  string  title  = 1;
    optional  uint32  score  = 2;
}

message rankDetail {
    required  string  title  = 1;
    required  uint32  score  = 2;
}

message rankItem {
    required  string  rankid  = 1;
    required  string  title  = 2;
    required  uint32  ranknum  = 3;
}

