syntax = "proto2";

option java_package = "com.tencent.mm.normsg.proto";

import "base.proto";
import "safe.proto";

message ReportClientCheckReq
{
    required BaseRequest baseRequest = 1;
    required bytes clientCheckData = 2; // "".getBytes()
    
    // 一天 (86400000 ms) 至多上报一次。 if(SecInfoReporter.secInfoReporter.isTimeToReport(2, 86400000L))
    // enum ReportContext {
    //     CONTEXT_DEFAULT = 0;
    //
    //     CONTEXT_INTERCEPTED_TEXTVIEW = 0x80000000;
    //     CONTEXT_MIUI_ISSUE = 0x80000001;
    //     CONTEXT_OCR_FOUND = 0x80000002; // lib 列表
    //
    //     CONTEXT_AUTO_AUTH = 0;
    //     CONTEXT_MANUAL_AUTH = 0x203F0000;
    //     CONTEXT_REG_AUTH = 0x203F0001;
    //     CONTEXT_CLICK_INFO = 0x203F0002;
    //     CONTEXT_PAY = 0x203F0003;
    //     CONTEXT_FINDER_FINDER_TIMELINEUI = 0x203F0004;  // enterFinderTimelineUI
    //     CONTEXT_FINDER_FINDERUI = 0x203F0005;           // enterFinderUI
    //     CONTEXT_FINDER_FINDER_PROFILEUI = 0x203F0006;   // enterFinderProfileUI
    //     CONTEXT_SENSOR_DATA = 0x203F0007;
    // }
    
    optional uint32 reportContext = 3; // from sysmsg -> ReportContext
    optional SKBuiltinBuffer_t extSpamInfo = 4; // buffer = WCExtInfo
    optional uint64 timestamp = 5;
}

message ReportClientCheckResp {
  required BaseResponse baseResponse = 1;
}

message ClientCheckData2 {
  required  uint32  iLen  = 1;
  optional  ClientCheckData clientCheckData = 2;
}

message WCExtInfo2 {
  required  uint32  iLen  = 1;
  message Info {
    optional  ClientCheckData2  wcstf  = 1;
    optional  ClientCheckData2  wcste  = 2;
    optional  ClientCheckData2  ccData  = 3; // buffer = 003 clientCheckData, ReportContext：manualauth 时为 0x203F0000 ,autoauth 时为 0， 注册时为： 0x203F0001
    optional  SKBuiltinBuffer_t  regInfo  = 4; // RegUserAttrInfo
    optional  ClientCheckData2  acgiDeviceInfo  = 5; // buffer = 非 003 加密方式 ClientCheckData. ReportContext = 18446744071562067970 = 0x80000002, lib 列表压缩等, DataType = 4
    optional  ClientCheckData2  acgiTuring  = 6; // buffer = ClientCheckData
    optional  ClientCheckData2  deviceToken  = 7; // buffer = ClientCheckData
    optional  SKBuiltinBuffer_t  sensorDataContext = 8; // buffer = "Login_0feff24c-f695-44ad-8369-93729225c2c5" | ReportContext = 540999687
    optional  ClientCheckData2  sensorData = 9; // buffer = ClientCheckData ClientCheckData = devicetoken.getBytes()
    optional  ClientCheckData2  turingOwner = 10; //

    optional  ClientCheckData2  iosturingHuman  = 101;
    optional  ClientCheckData2  iosturingOwner  = 102;
  }
  optional Info info = 2;
}

message ReportClientCheckReq2
{
  required BaseRequest baseRequest = 1;
  required bytes clientCheckData = 2; // "".getBytes()
  optional uint32 reportContext = 3; // from sysmsg -> ReportContext
  optional WCExtInfo2 extSpamInfo = 4; // buffer = WCExtInfo
  optional uint64 timestamp = 5;
}

message AutoAuthAesReqData {
  required  BaseRequest  baseRequest  = 1;
  optional  SKBuiltinBuffer_t  clientCheckData  = 14;
  optional  WCExtInfo2  extSpamInfo  = 15;
  optional  string  bundleId  = 16;
  optional  string  androidPackageName  = 17;
}

message AutoAuthRequest {
  required  AutoAuthAesReqData  aesReqData  = 2;
}

message BindOpMobileRequest {
  required  BaseRequest  baseRequest  = 1;
  optional  string  userName  = 2;
  optional  string  mobile  = 3;
  required  int32  opcode  = 4;
  optional  string  verifycode  = 5;
  optional  int32  dialFlag  = 6;
  optional  string  dialLang  = 7;
  optional  string  authTicket  = 8;
  optional  uint32  forceReg  = 9;
  optional  string  safeDeviceName  = 10;
  optional  string  safeDeviceType  = 11;
  optional  SKBuiltinBuffer_t  randomEncryKey  = 12;
  optional  string  language  = 13;
  optional  uint32  inputMobileRetrys  = 14;
  optional  uint32  adjustRet  = 15;
  optional  string  clientSeqId  = 16;
  optional  uint32  mobileCheckType  = 17;
  optional  string  regSessionId  = 18;
  optional  SKBuiltinBuffer_t  spamBuffer  = 19;
  optional  WCExtInfo2  extSpamInfo  = 20;
  optional  string  thirdAppAuthTicket  = 21;
}

message LbsRequest {
  required  BaseRequest  baseRequest  = 1;
  required  uint32  opCode  = 2;
  required  float  longitude  = 3;
  required  float  latitude  = 4;
  required  int32  precision  = 5;
  optional  string  macAddr  = 6;
  optional  string  cellId  = 7;
  optional  int32  gpssource  = 8;
  optional  SKBuiltinBuffer_t  clientCheckData  = 9;
  optional  WCExtInfo2  extSpamInfo  = 10;
}

message ManualAuthAesReqData {
  required  BaseRequest  baseRequest  = 1;
  optional  string  imei  = 3;
  optional  string  softType  = 4;
  required  uint32  builtinIpseq  = 5;
  optional  string  clientSeqId  = 6;
  optional  string  signature  = 7;
  optional  string  deviceName  = 8;
  optional  string  deviceType  = 9;
  optional  string  language  = 10;
  optional  string  timeZone  = 11;
  optional  int32  channel  = 13;
  optional  uint32  timeStamp  = 14;
  optional  string  deviceBrand  = 15;
  optional  string  deviceModel  = 16;
  optional  string  ostype  = 17;
  optional  string  realCountry  = 18;
  optional  string  bundleId  = 19;
  optional  string  adSource  = 20;
  optional  string  iphoneVer  = 21;
  required  uint32  inputType  = 22;
  optional  SKBuiltinBuffer_t  clientCheckData  = 23;
  optional  WCExtInfo2  extSpamInfo  = 24;
}

message ManualAuthRequest {
  required  ManualAuthAesReqData  aesReqData  = 2;
}

message NewRegRequest {
  required  BaseRequest  baseRequest  = 1;
  optional  string  userName  = 2;
  optional  string  pwd  = 3;
  optional  string  nickName  = 4;
  optional  uint32  bindUin  = 5;
  optional  string  bindEmail  = 6;
  optional  string  bindMobile  = 7;
  optional  string  ticket  = 8;
  optional  uint32  builtinIpseq  = 12;
  optional  uint32  dlsrc  = 13;
  optional  uint32  regMode  = 14;
  optional  string  timeZone  = 15;
  optional  string  language  = 16;
  optional  uint32  forceReg  = 17;
  optional  string  realCountry  = 18;
  optional  SKBuiltinBuffer_t  randomEncryKey  = 19;
  optional  string  alias  = 20;
  optional  string  verifySignature  = 21;
  optional  string  verifyContent  = 22;
  optional  uint32  hasHeadImg  = 23;
  optional  uint32  suggestRet  = 24;
  optional  string  clientSeqId  = 31;
  optional  string  adSource  = 32;
  optional  string  androidId  = 33;
  optional  string  macAddr  = 34;
  optional  string  androidInstallRef  = 35;
  optional  string  clientFingerprint  = 36;
  optional  string  googleAid  = 38;
  optional  string  bundleId  = 39;
  optional  string  bioSigTicket  = 41;
  optional  uint32  bioSigCheckType  = 42;
  optional  SKBuiltinBuffer_t  clientCheckData  = 43;
  optional  uint32  mobileCheckType  = 44;
  optional  string  regSessionId  = 45;
  optional  string  privacyPolicyCountry  = 46;
  optional  string  thirdAppAuthTicket  = 47;
  optional  WCExtInfo2  extSpamInfo  = 48;
  optional  string  appleIdTicket  = 49;
}

message ShakeGetRequest {
  required  BaseRequest  baseRequest  = 1;
  required  SKBuiltinBuffer_t  buffer  = 2;
  optional  int32  isNewVerson  = 3;
  optional  SKBuiltinBuffer_t  clientCheckData  = 4;
  optional  WCExtInfo2  extSpamInfo  = 5;
}

message ShakeReportRequest {
  required  BaseRequest  baseRequest  = 1;
  required  uint32  opCode  = 2;
  required  float  longitude  = 3;
  required  float  latitude  = 4;
  required  int32  precision  = 5;
  optional  string  macAddr  = 6;
  optional  string  cellId  = 7;
  required  uint32  imgId  = 8;
  required  uint32  times  = 9;
  optional  int32  gpssource  = 10;
  optional  SKBuiltinBuffer_t  clientCheckData  = 11;
  optional  WCExtInfo2  extSpamInfo  = 12;
}

message SnsPostRequest {
  required  BaseRequest  baseRequest  = 1;
  required  SKBuiltinBuffer_t  objectDesc  = 2;
  optional  uint32  withUserListCount  = 3;
  repeated  SKBuiltinString_t  withUserList  = 4;
  optional  uint32  privacy  = 5;
  optional  uint32  syncFlag  = 6;
  optional  string  clientId  = 7;
  optional  uint32  postBgimgType  = 8;
  optional  uint32  groupCount  = 9;
  optional  uint32  objectSource  = 11;
  optional  uint64  referId  = 12;
  optional  uint32  blackListCount  = 13;
  repeated  SKBuiltinString_t  blackList  = 14;
  optional  uint32  groupUserCount  = 16;
  repeated  SKBuiltinString_t  groupUser  = 17;
  optional  SKBuiltinBuffer_t  poiInfo  = 21;
  optional  string  fromScene  = 22;
  optional  uint32  mediaInfoCount  = 24;
  optional  SKBuiltinBuffer_t  clientCheckData  = 27;
  optional  WCExtInfo2  extSpamInfo  = 28;
}

message VerifyUserRequest {
  required  BaseRequest  baseRequest  = 1;
  required  uint32  opcode  = 2;
  required  uint32  verifyUserListSize  = 3;
  optional  string  verifyContent  = 5;
  optional  uint32  sceneListCount  = 6;
  repeated  uint32  sceneList  = 7[packed=true];
  optional  uint32  verifyInfoListCount  = 8;
  optional  SKBuiltinBuffer_t  clientCheckData  = 10;
  optional  WCExtInfo2  extSpamInfo  = 11;
  optional  uint32  needConfirm  = 12;
}

message FPInitRequest {
  required  BaseRequest  baseRequest  = 1;
  optional  bytes  randomkey  = 2;
  optional  ClientCheckData  spamBuff  = 3;
}

message FPFreshRequest {
  required  BaseRequest  baseRequest  = 1;
  optional  bytes  randomkey  = 2;
  optional  ClientCheckData  spamBuff  = 3;
}

message CmdItem {
    required  int32  cmdId  = 1;
    required  SKBuiltinBuffer_t  cmdBuf  = 2;
}

message CmdList {
    required  uint32  count  = 1;
    repeated  CmdItem  list  = 2;
}

message OplogRequest {
    required  CmdList  oplog  = 1;
}
