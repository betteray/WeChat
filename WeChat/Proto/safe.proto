syntax = "proto2";

//option optimize_for = LITE_RUNTIME;
//option optimize_for = CODE_SIZE;

option java_package = "com.tencent.mm.normsg.proto";

import "base.proto";

message InstalledPackageInfo {
    optional string packageName = 1;
    optional string Label = 2;
    optional string sigMD5 = 3;
    optional uint32 fileSize = 4;
    optional uint32 applicationFlag = 5;
}

message ST {
    optional uint32 IsMorkLocOpen = 1;
    optional uint32 MsgLevel = 2;
    optional uint32 IsDbgConnected = 3;
    optional string PkgHash3 = 4;
    optional string RatioFwVer = 5;
    optional string OsRelVer = 6;
    optional string IMEI = 7;
    optional string AndroidID = 8;
    optional string PhoneSerial = 9;
    optional string PhoneModel = 10;
    optional uint32 CpuCoreCount = 11;
    optional string CpuHW = 12;
    optional string CpuFeatures = 13;
    optional string SelfMAC = 14;
    optional string SSID = 15;
    optional string BSSID = 16;
    optional string SpInfo = 17;
    optional string APNInfo = 18;
    optional string BuildFP = 19;
    optional string BuildBoard = 20;
    optional string BuildBootloader = 21;
    optional string BuildBrand = 22;
    optional string BuildDevice = 23;
    optional string BuildHW = 24;
    optional string BuildProduct = 25;
    optional string Manufacturer = 26;
    optional string PhoneNum = 27;
    optional string NetType = 28;
    optional uint32 IsQemuEnv = 29;
    optional uint32 HasDupPkg = 30;
    optional uint32 HasQikuShadow = 31;
    optional string PkgName = 32;
    optional string AppName = 33;
    optional string DataRoot = 34;
    optional string EntranceClassLoaderName = 35;
    repeated string MMProcLoadedFiles = 36;
    optional string RiskScanReqBuffer = 37;
    optional uint32 EnvBits = 38;
    optional string EnabledAccessibilityServiceIds = 39;
    repeated InstalledPackageInfo InstalledPackageInfos = 40;
    optional uint32 AccessibilityClickCount = 41;
    optional string APKLeadingMD5 = 42; // APK 前 102400 字节MD5
    optional string ClientVersion = 43;
    optional string WXTag = 44;
    optional string ClientIP = 45;
    optional string Language = 46;
    optional uint32 IsInCalling = 47;
    optional uint32 IsSetScreenLock = 48;
    repeated string NeighborBSSIDList = 49;
    optional uint32 IsWifiOpen = 50;
    optional uint32 HasXposedStackTrace = 51;
    optional string XposedHookedMethods = 52;
    optional uint32 IsADBSwitchEnabled = 53;
    optional uint32 IsRunningByMonkey = 54;
    optional string AppInstrumentationClassName = 55;
    optional string AMSBinderClassName = 56;
    optional string AMSSingletonClassName = 57;
    optional uint32 IsVPNUsed = 58;
    optional uint32 IsVPNConnected = 59;
    optional string PCodes = 60;
    optional string HasQCodes = 61;
    optional string RCodes0 = 62;
    optional string RCodes1 = 63;
    optional string STID = 64;

    // 707 之前是xml格式，之后是protobuf格式
    // ===================== 707 ========================

    optional string KernelReleaseNumber = 65; // uname -r //65: "4.4.153-perf+"  // uname获取   和/proc/version 数据有关联
    optional uint32 UsbState = 66; //66: 0 //sys/class/android_usb/android0/state  usb连上为2，未连接为1, c8方法false时为0。 【0：啥都没连，1是充电。可选择0、1都算比较真实。】
    optional string ApkSignatureMd5 = 67; //67: "18c867f0717aa67b2ab7347505ba07ed"    //签名md5
    //68: 14 //目前测试情况： com.android.vending     8
    //       //com.google.android.gsf.login          1
    //       //com.google.android.gsf         2
    //       //com.google.android.gms         4
    //       //这四个包微信会去单独检测，如果存在则加上对应的数据， 测试miui11 （不包含com.google.android.gsf.login）为14  zui11也为14
    optional uint32 GoogleServiceState = 68; // 取设备包PackageManager里根据上述包进行计算。1？ + 2？ + 4？ + 8？ = ？
    optional uint32 timeval1 = 69; //69: 954783 // struct timeval 中微秒数值, gettimeofday获取. 0xffffff -> 4294963711 4294963711 4294963711
    optional uint32 SpamInfoVersionSeq = 70; // 708 、709 、【7010｜7011】 分别对应 123。 7012是4. 7015=6
    optional uint32 TbVersionCrc = 71; //71: 556011293 //   可能与资源下载有关，不做pm clear 数据不会变化 不清楚，需另看。？
    optional string SystemFrameworkMD5 = 72; //72: "a8de294f819234ee723148f6f3d003a6"//根据目录生成的md5 /system/framework/
    optional string SystemFrameworkArmMD5 = 73; //73: "a7cae61554b3c3596c073782ac5d69d1"//根据目录生成的md5 /system/framework/arm
    optional string SystemFrameworkArm64MD5 = 74; //74: "0d922e4d36ecfdce95da6257798320ab"//根据目录生成的md5 /system/framework/arm64
    optional string SystemBinMD5 = 75; //75: "22bb890943c1c673ccc5246b8a888819"//根据目录生成的md5 /system/bin
    optional string SoterUid = 76; //76: "" //soteruid 暂时写 "" 字符串。
    optional string WidevineDeviceID = 77; //77: "304334a25f546b42df65319978c5dbd2f8b42a3899f0973b0813735dd71795ad"  //java/util/UUID mediaDrm  getPropertyByteArray      => WidevineDeviceID //皖南会生成。
    //78: "1535763623|1535763679@664854922a684596|fa114cb9f80068d980d8d89e708bbddd@8b1106cd1d6c932a|1b295f3b9b7ba7f5f8e0275a9a3c1c32"
    // stat -c "%X|%Y" /storage/emulated
    // stat -f -c "%i" /system/etc
    // stat -f -c "%i %b %f %a %c %d" /system/etc  => md5
    // stat -f -c "%i" /storage/emulated
    // stat -f -c "%i %b %f %a %c %d" /storage/emulated  => md5  以@和|连接
    optional string StorageID = 78;
    optional string OAID = 79; //79: ""// c14 ?    OAID
    optional uint32 UnknownTag80 = 80; //80: 0 // 一直为0 不知道是啥
    optional uint32 MagiskBitCheck = 81; //81: 242379 // struct timeval 中微秒数值, gettimeofday获取. 0xffffffff -> 4294966271 4294966271 4294966271 第二遍 4294967295
    repeated string FilesModifiedInFramework = 82; //82: 检测framework中文件修改时间是否有变化   fstatat64获取修改时间判断。不该有此值，只有非法时才设置。
    optional uint32 WeChatInstallTime = 83; // 微信安装时间.

    // ===================== 7015 ========================

    optional bytes SoftConfig = 84; // 7015 开始
    optional bytes SoftData = 85;
    optional uint32 Tag86 = 86; // 7014 struct timeval 中微秒数值, gettimeofday获取. 开始 0xffffffff -> 4294966955 4294966955 4294966955
    optional string NetWorkInterface = 87;

    // ===================== 7016 ========================

    optional uint32 tv_sec_88 = 88; // key
    optional uint32 tv_usec_89 = 89; //

    optional uint32 Tag90 = 90;

    optional bytes PkgHash3Encrypt = 91;
    optional uint32 PkgHash3Crc = 92;
    optional bytes EntranceClassLoaderNameEncrypt = 93;
    optional uint32 EntranceClassLoaderNameCrc = 94;
    optional bytes  APKLeadingMD5Encrypt = 95;
    optional uint32 APKLeadingMD5Crc = 96;
    optional bytes AppInstrumentationClassNameEncrypt = 97;
    optional uint32 AppInstrumentationClassNameCrc = 98;
    optional bytes AMSBinderClassNameEncrypt = 99;
    optional uint32 AMSBinderClassNameCrc = 100;
    optional bytes AMSSingletonClassNameEncrypt = 101;
    optional uint32 AMSSingletonClassNameCrc = 102;
    optional bytes ApkSignatureMd5Encrypt = 103;
    optional uint32 ApkSignatureMd5Crc = 104;
    optional bytes SystemFrameworkMD5Encrypt = 105;
    optional uint32 SystemFrameworkMD5Crc = 106;
    optional bytes SystemFrameworkArmMD5Encrypt = 107;
    optional uint32 SystemFrameworkArmMD5Crc = 108;
    optional bytes SystemFrameworkArm64MD5Encrypt = 109;
    optional uint32 SystemFrameworkArm64MD5Crc = 110;
    optional bytes SystemBinMD5Encrypt = 111;
    optional uint32 SystemBinMD5Crc = 112;
    optional bytes StorageIDEncrypt = 113;
    optional uint32 StorageIDCrc = 114;

    optional uint32 tv_usec_115 = 115;
    optional uint32 uid = 116; // getuid32()
    optional uint32 Tag117 = 117; // 

    // ===================== 7017 ========================

    optional bytes SourceDirEncrypt = 118;
    optional uint32 SourceDirCrc = 119;
    optional bytes SourceDir2Encrypt = 120;
    optional uint32 SourceDir2Crc = 121;

    // ===================== 7018 ==========================
    repeated bytes IllegalLibEncrypt = 122; // hook用的so（frigum.so），只用看怎么检测的，不用给值。应该是一个列表
    optional uint32 IllegalLibCrc = 123; // 0

    // ===================== 7019 ==========================
    optional bytes StackTraceEncrypt = 124; // 明文为
    optional uint32 StackTraceCrc = 125;
    message CheckAddIn7019 {
        optional bytes ServiceListMd5Encrypt = 1; // ServiceManager->listServices 拼接做md5，再做加密
        optional uint32 ServiceListMd5Crc = 2;
        optional bytes SystemAppMD5Encrypt = 3;
        optional uint32 SystemAppMD5Crc = 4;
        optional bytes SystemPrivAppMD5Encrypt = 5;
        optional uint32 SystemPrivAppMD5Crc = 6;
        optional bytes VendorAppMD5Encrypt = 7;
        optional uint32 VendorAppMD5Crc = 8;
        optional bytes ProductAppMD5Encrypt = 9;
        optional uint32 ProductAppMD5Crc = 10;
        optional bytes SystemBinLsEncrypt = 11;
        optional uint32 SystemBinLsCrc = 12;
        optional bytes SystemFrameworkFrameworkResEncrypt = 13;
        optional uint32 SystemFrameworkFrameworkResCrc = 14;
        optional bytes SystemLibLibcPlusPlusEncrypt = 15;
        optional uint32 SystemLibLibcPlusPlusCrc = 16;
        optional bytes SystemBinLinkerEncrypt = 17;
        optional uint32 SystemBinLinkerCrc = 18;

        optional bytes RootEncrypt = 19;
        optional uint32 RootCrc = 20;
        optional bytes SystemEncrypt = 21;
        optional uint32 SystemCrc = 22;
        optional bytes DataEncrypt = 23;
        optional uint32 DataCrc = 24;

        optional bytes BuildFinderPrintEncrypt = 25;
        optional uint32 BuildFinderPrintCrc = 26;
        optional bytes ProcVersionEncrypt = 27;
        optional uint32 ProcVersionCrc = 28;

        // add in 7.0.21
        optional bytes AllPkgNameMD5Encrypt = 29; // md5("com.tencent.mm" + "com.tencent.qq" + "" + ...) -> enc;
        optional uint32 AllPkgNameMD5Crc = 30;
    }
    optional CheckAddIn7019 check7019 = 126;
    optional uint32 ProcSelfMountsCheck = 127;
    optional uint32 tag128 = 128;
    repeated bytes InlineHookingLibsEncrypt = 129; // /proc/self/maps  带rwxp的so  /apex/com.android.runtime/bin/linker, /apex/com.android.runtime/lib/bionic/libc.so, /apex/com.android.runtime/lib/libart.so, /data/app/com.tencent.mm-9wf3arIby_cU-KqdRQ2LOQ==/lib/arm/libwechatnormsg.so, /system/lib/libandroid_runtime.so
    optional uint32 InlineHookingLibsCrc = 130;

}

message ClientSpamInfo {
    required uint32 ccdcc = 1;
    required uint32 ccdts = 2;
    required ST st = 3;
}

message WCSTF {
    optional uint64 st = 1;
    optional uint64 et = 2;
    optional uint64 cc = 3;
    repeated uint64 ct = 4;
}

message WCSTE {
    optional string context = 1;
    optional uint32 st = 2;
    optional uint32 et = 3;
    optional uint32 iec = 4;
    optional uint32 tec = 5;
    optional uint32 asst = 6;
    optional uint64 pss = 7;
    optional uint64 tlmj = 8;
    optional uint64 tlmn = 9;
    optional uint64 thmj = 10;
    optional uint64 thmn = 11;
    optional uint64 sz = 12;
}

// 传感器数据结构, reportclientcheck 接口，分别与 登陆注册加好友时上报

message SensorData {
    message SensorEvent {
        optional float value1 = 1;
        optional float value2 = 2;
        optional float value3 = 3;
        optional uint32 timestamp = 4;
    }

    message GroupItem {
        optional uint32 sensorType = 1; // 1->1, 4->2, 9->3, 10->4, 11->5. | {1, 4, 9, 10, 11};  TYPE_ACCELEROMETER, TYPE_GYROSCOPE, TYPE_GRAVITY, TYPE_LINEAR_ACCELERATION ,TYPE_ROTATION_VECTOR
        repeated SensorEvent events = 2;
    }

    optional uint32 where = 1; // com.tencent.mm.normsg.c$p::fa(Login_f5f5be2e-e287-4338-af84-945236c6fa58,2,200) 第二个参数：//reg:1, login:2, sayhi:3
    optional string context = 2; // Login_a10c3d0e-25ab-4a4e-b038-c170b5e818f7 为 Login_ + uuid.
    optional uint32 count = 3;  // 固定 200。 com.tencent.mm.normsg.c$p::fa(Login_f5f5be2e-e287-4338-af84-945236c6fa58,2,200) 第三个参数，代码里写死的 200。 //每组收集的个数？
    optional uint64 startTime = 4; // tv.sec * 1000 + tv.usec / 1000
    optional uint64 endTime = 5; // tv.sec * 1000 + tv.usec / 1000
    optional uint64 collectTime = 6; // tv.sec * 1000 + tv.usec / 1000
    optional uint32 tag7 = 7;
    repeated GroupItem groupItems = 10;
    optional uint32 tag11 = 11;
}

// *********************** FP ********************

message FPKeyVal {
    optional string key = 1;
    optional string value = 2;
}

message FPKeyVals {
    repeated FPKeyVal keyVal = 1;
}

message FPDevice {
    optional FPKeyVals keyvals = 1;
    optional string unknown2 = 2; // 未知
}

// **********************03加密结果***************************

//  用于加密完填充字端用。
message ClientCheckData {
    optional string version = 1;
    optional uint32 type = 2;
    optional bytes clientCheckData = 3;
    optional uint64 timeStamp = 4; // 706没有 , 7011有 System.currentTimeMillis() / 1000L;
    optional uint32 dataType = 5;
    optional uint32 status = 6; // 0 = 成功， 1 = 失败 定位字符串：ae.d("MicroMsg.SecInfoReporterImpl", "compressed and base64 result is still too large with length " + v0_3.length);
}

message SpamBuff {
    message Soft {
        optional bytes soft_data = 1;
        optional bytes soft_config = 2;
    }
    optional Soft soft = 2; //还不清楚这个数据是干啥用的，下次刷新token会用吗? 是的，用来计算类似于md5之类的那个东西。
    optional string devicetoken = 3;
    optional uint32 timestamp = 4;
}

message ClientSpamInfo_IOS {
    required uint32 ccdcc = 1;
    required uint32 ccdts = 2;
    message Content {
        optional bytes tag3 = 3;
        optional bytes tag51 = 11;
    }
    required Content content = 3;
}

message wcaes {
    optional bytes type = 1;
    optional bytes IV =2;
    optional int32 len = 3;
    optional bytes mztkey =4;
    optional bytes mztkeyvalue =5;
    optional bytes unkown6 =6;
    optional bytes unkown7 =7;
    optional bytes unkown8 =8;
    optional bytes unkown9 =9;
    optional bytes tablekey =10;
    optional bytes unkown11 =11;
    optional bytes tablevalue =12;
    optional bytes unkown13 =13;
    optional bytes unkown14 =14;
    optional bytes unkown15 =15;
    optional bytes unkown16 =16;
    optional bytes unkown17 =17;
    optional bytes unkown18 =18;
    optional bytes unkown19 =19;
    optional bytes unkown20 =20;
    optional bytes unkown21 =21;
    optional bytes unkown22 =22;
    optional bytes unkown23 =23;
    optional bytes unkown24 =24;
    optional bytes unkown25 =25;
}

//

message RegUserAttrInfo {
    optional  string  nickName  = 1;
    optional  string  pwdHash  = 2;
    optional  string  headImgMd5  = 3;
    optional  string  phoneNumber  = 4;
    optional  string  timeZone  = 5;
    optional  string  timeZoneName  = 6;
}

message WCExtInfo {
    optional  SKBuiltinBuffer_t  wcstf  = 1;
    optional  SKBuiltinBuffer_t  wcste  = 2;
    optional  SKBuiltinBuffer_t  ccData  = 3; // buffer = 003 clientCheckData, ReportContext：manualauth 时为 0x203F0000 ,autoauth 时为 0， 注册时为： 0x203F0001
    optional  SKBuiltinBuffer_t  regInfo  = 4; // RegUserAttrInfo
    optional  SKBuiltinBuffer_t  acgiDeviceInfo  = 5; // buffer = 非 003 加密方式 ClientCheckData. ReportContext = 18446744071562067970 = 0x80000002, lib 列表压缩等, DataType = 4
    optional  SKBuiltinBuffer_t  acgiTuring  = 6; // buffer = ClientCheckData
    optional  SKBuiltinBuffer_t  deviceToken  = 7; // buffer = ClientCheckData
    optional  SKBuiltinBuffer_t  sensorDataContext = 8; // buffer = "Login_0feff24c-f695-44ad-8369-93729225c2c5" | ReportContext = 540999687
    optional  SKBuiltinBuffer_t  sensorData = 9; // buffer = ClientCheckData ClientCheckData = devicetoken.getBytes()
    optional  SKBuiltinBuffer_t  turingOwner = 10; //

    optional  SKBuiltinBuffer_t  iosturingHuman  = 101;
    optional  SKBuiltinBuffer_t  iosturingOwner  = 102;
}

message ReportClientCheckReq
{
    required BaseRequest baseRequest = 1;
    required bytes clientCheckData = 2; //后边版本均为"".getBytes(), 之前是 buffer = 003("<st><IsMorkLocOpen>0</IsMorkLocOpen><MsgLevel>1</MsgLevel><IsDbgConnected>0</IsDbgConnected><PkgHash3>18c867f0717aa67b2ab7347505ba07ed</PkgHash3><RatioFwVer>angler-03.87</RatioFwVer><OsRelVer>8.1.0</OsRelVer><IMEI>867979021665986</IMEI><AndroidID>0f2e799e321a92a0</AndroidID><PhoneSerial>8XV7N16125001121</PhoneSerial><PhoneModel>Nexus&#32;6P</PhoneModel><CpuCoreCount>8</CpuCoreCount><CpuHW>Qualcomm&#32;Technologies,&#32;Inc&#32;MSM8994</CpuHW><CpuFeatures>half&#32;thumb&#32;fastmult&#32;vfp&#32;edsp&#32;neon&#32;vfpv3&#32;tls&#32;vfpv4&#32;idiva&#32;idivt&#32;evtstrm&#32;aes&#32;pmull&#32;sha1&#32;sha2&#32;crc32</CpuFeatures><SelfMAC>dc:ee:06:fe:8e:93</SelfMAC><SSID>&lt;unknown&#32;ssid&gt;</SSID><BSSID>02:00:00:00:00:00</BSSID><SpInfo></SpInfo><APNInfo>&quot;ray&#8217;s&#32;Mac&#32;Pro&quot;</APNInfo><BuildFP>google/angler/angler:8.1.0/OPM7.181205.001/5080180:user/release-keys</BuildFP><BuildBoard>angler</BuildBoard><BuildBootloader>angler-03.79</BuildBootloader><BuildBrand>google</BuildBrand><BuildDevice>angler</BuildDevice><BuildHW>angler</BuildHW><BuildProduct>angler</BuildProduct><Manufacturer>Huawei</Manufacturer><PhoneNum></PhoneNum><NetType>wifi</NetType><IsQemuEnv>0</IsQemuEnv><HasDupPkg>0</HasDupPkg><HasQikuShadow>0</HasQikuShadow><PkgName>com.tencent.mm</PkgName><AppName>&#24494;&#20449;</AppName><DataRoot>/data/user/0/com.tencent.mm</DataRoot><EntranceClassLoaderName>dalvik.system.PathClassLoader</EntranceClassLoaderName><MMProcLoadedFiles>/system/framework/arm/boot.oat,/system/framework/arm/boot-core-libart.oat,/system/framework/arm/boot-conscrypt.oat,/system/framework/arm/boot-okhttp.oat,/system/framework/arm/boot-bouncycastle.oat,/system/framework/arm/boot-apache-xml.oat,/system/framework/arm/boot-legacy-test.oat,/system/framework/arm/boot-ext.oat,/system/framework/arm/boot-framework.oat,/system/framework/arm/boot-telephony-common.oat,/system/framework/arm/boot-voip-common.oat,/system/framework/arm/boot-ims-common.oat,/system/framework/arm/boot-org.apache.http.legacy.boot.oat,/system/framework/arm/boot-android.hidl.base-V1.0-java.oat,/system/framework/arm/boot-android.hidl.manager-V1.0-java.oat,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libvoipCodec.so,/system/bin/app_process32,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libdynamicBg.so,/data/dalvik-cache/arm/system@app@webview@webview.apk@classes.dex,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libaudio_common.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libNLog.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libmmimgcodec.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libtenpay_utils.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libpitu_tools.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libalgo_youtu_jni.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libnnpack.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libYTFaceTrackPro.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libformat_convert.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libimage_filter_gpu.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatvoicesilk_v7a.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libimage_filter_common.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libYTCommon.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libvoipChannel.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libvoipMain.so,/data/local/tmp/re.frida.server/frida-agent-32.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libvoipComm.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libkinda_android.so,/system/lib/libmemalloc.so,/system/lib/libqservice.so,/vendor/lib/hw/gralloc.msm8994.so,/system/lib/libqdMetaData.so,/system/lib/libqdutils.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatzstd.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatsight_v7a.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libtxmapengine.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatpack.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libFFmpeg.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libMMProtocalJni.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatcommon.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libcommonimgdec.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatnormsg.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libhardcoder.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatmm.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libio-canary.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libSqliteLint-lib.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwcdb.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libmatrixmrs.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatCrashForJni.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/oat/arm/base.odex,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libappbrandcommon.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libtencentloc.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libc++_shared.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libstlport_shared.so,/dev/ashmem/dalvik-jit-code-cache,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatvoicereco.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libwechatxlog.so,/data/app/com.tencent.mm-K01YL1D0BBSmN1t3ThubLw==/lib/arm/libmmkv.so,/system/app/webview/webview.apk,/vendor/lib/egl/libGLESv2_adreno.so,/vendor/lib/libllvm-glnext.so,/data/app/com.llb.wechathooks-bA4onxSecezu3uBx2YWzOA==/oat/arm/base.odex,/system/lib/libsandhook.edxp.so,/system/lib/libwebviewchromium_loader.so,/system/lib/libcompiler_rt.so,/vendor/lib/egl/eglSubDriverAndroid.so,/vendor/lib/egl/libGLESv1_CM_adreno.so,/vendor/lib/egl/libEGL_adreno.so,/vendor/lib/libgsl.so,/vendor/lib/libadreno_utils.so,/system/lib/hw/android.hardware.graphics.mapper@2.0-impl.so,/vendor/lib/hw/android.hardware.graphics.mapper@2.0-impl.so,/system/lib/libjavacrypto.so,/system/lib/libsoundpool.so,/data/dalvik-cache/arm/system@framework@edxp.jar@classes.dex,/system/lib/libvixl-arm.so,/system/lib/libart-dexlayout.so,/system/lib/libart-compiler.so,/system/lib/libvixl-arm64.so,/system/lib/libopenjdk.so,/system/lib/libopenjdkjvm.so,/system/lib/libssl.so,/system/lib/libjavacore.so,/system/lib/libwebviewchromium_plat_support.so,/system/lib/libRS.so,/system/lib/android.hardware.renderscript@1.0.so,/system/lib/libOpenSLES.so,/system/lib/libOpenMAXAL.so,/system/lib/android.hardware.neuralnetworks@1.0.so,/system/lib/libtextclassifier_hash.so,/system/lib/libneuralnetworks.so,/system/lib/libjnigraphics.so,/system/lib/libGLESv3.so,/system/lib/libmedia_jni.so,/system/lib/libcamera2ndk.so,/system/lib/libmtp.so,/system/lib/libexif.so,/system/lib/libmediandk.so,/system/lib/libmidi.so,/system/lib/libaaudio.so,/system/lib/libandroid.so,/system/lib/libmemtrack_real.so,/system/lib/libtombstoned_client.so,/system/lib/libart.so,/system/lib/libsigchain.so,/system/lib/liblz4.so,/system/lib/android.hardware.memtrack@1.0.so,/system/lib/libriru_edxp.so,/system/lib/android.hardware.configstore@1.0.so,/system/lib/libusbhost.so,/system/lib/libaudiomanager.so,/system/lib/libstagefright_http_support.so,/system/lib/libnetd_client.so,/system/lib/libhwbinder.so,/system/lib/libmediautils.so,/system/lib/libminikin.so,/system/lib/libmemtrack.so,/system/lib/libsync.so,/system/lib/libdng_sdk.so,/system/lib/libstagefright_flacdec.so,/system/lib/libstagefright_xmlparser.so,/system/lib/android.hardware.media@1.0.so,/system/lib/android.hardware.graphics.allocator@2.0.so,/system/lib/libnativehelper.so,/system/lib/libsensor.so,/system/lib/android.hardware.graphics.bufferqueue@1.0.so,/system/lib/libharfbuzz_ng.so,/system/lib/libhwui.so,/system/lib/libcamera_client.so,/system/lib/libimg_utils.so,/system/lib/libGLESv1_CM.so,/system/lib/android.hardware.media.omx@1.0.so,/system/lib/libbacktrace.so,/system/lib/android.hardware.cas.native@1.0.so,/system/lib/android.hardware.graphics.common@1.0.so,/system/lib/libdl.so,/system/lib/libz.so,/system/lib/libEGL.so,/system/lib/libhardware.so,/system/lib/libpcre2.so,/system/lib/libui.so,/system/lib/libsonivox.so,/system/lib/libvorbisidec.so,/system/lib/android.hidl.memory@1.0.so,/system/lib/libsoundtrigger.so,/system/lib/libstdc++.so,/system/lib/libicui18n.so,/system/lib/liblzma.so,/system/lib/libtinyxml2.so,/system/lib/libmediametrics.so,/system/lib/android.hardware.cas@1.0.so,/system/lib/libvndksupport.so,/system/lib/libvulkan.so,/system/lib/libcutils.so,/system/lib/libETC1.so,/system/lib/libheif.so,/system/lib/libprocessgroup.so,/system/lib/libGLESv2.so,/system/lib/libaudioclient.so,/system/lib/libprotobuf-cpp-lite.so,/system/lib/libdebuggerd_client.so,/system/lib/libvintf.so,/system/lib/libc.so,/system/lib/libexpat.so,/system/lib/liblog.so,/system/lib/libandroid_runtime.so,/system/lib/libpackagelistparser.so,/system/lib/libskia.so,/system/lib/libpdfium.so,/system/lib/libjpeg.so,/system/lib/android.hidl.token@1.0-utils.so,/system/lib/libappfuse.so,/system/lib/libmediadrm.so,/system/lib/libnativebridge.so,/system/lib/libhidlmemory.so,/system/lib/libstagefright.so,/system/lib/libdrmframework.so,/system/lib/libselinux.so,/system/lib/libunwind.so,/system/lib/libicuuc.so,/system/lib/libstagefright_omx_utils.so,/system/lib/libnativewindow.so,/system/lib/libhardware_legacy.so,/system/lib/android.hardware.drm@1.0.so,/system/lib/libmedia_omx.so,/system/lib/libsqlite.so,/system/lib/libmedia.so,/system/lib/libspeexresampler.so,/system/lib/libm.so,/system/lib/libRScpp.so,/system/lib/libft2.so,/system/lib/libutils.so,/system/lib/libc++.so,/system
    optional uint64 reportContext = 3; // from sysmsg -> ReportContext
    optional SKBuiltinBuffer_t extSpamInfo = 4; // buffer = WCExtInfo
}

message ReportClientCheckResp {
    required BaseResponse baseResponse = 1;
}

/*
    static void access$000(PluginSecInfoReport pluginSecInfoReport) {
AppMethodBeat.i(89163);
    pluginSecInfoReport.TrustIdRequestAsync();
    AppMethodBeat.o(89163);
    }

static void access$100(PluginSecInfoReport pluginSecInfoReport, int i2) {
AppMethodBeat.i(89164);
    pluginSecInfoReport.reportSecurityInfoAsync(i2);
    AppMethodBeat.o(89164);
    }

static void access$200(PluginSecInfoReport pluginSecInfoReport) {
AppMethodBeat.i(89165);
    pluginSecInfoReport.asyncReportPaySecurityInfoThroughCgi();
    AppMethodBeat.o(89165);
    }

static void access$300(PluginSecInfoReport pluginSecInfoReport, int i2) {
AppMethodBeat.i(227356);
    pluginSecInfoReport.asyncReportFinderSecurityInfoThroughCgi(i2);
    AppMethodBeat.o(227356);
    }

static void access$400(PluginSecInfoReport pluginSecInfoReport, String str, byte[] bArr) {
AppMethodBeat.i(227357);
    pluginSecInfoReport.asyncReportSensorSceneInfoThroughCgi(str, bArr);
    AppMethodBeat.o(227357);
    }

static void access$500(PluginSecInfoReport pluginSecInfoReport, byte[] bArr) {
AppMethodBeat.i(227358);
    pluginSecInfoReport.asyncReportTuringOwnerThroughCgi(bArr);
    AppMethodBeat.o(227358);
    }

PluginSecInfoReport:
### pluginSecInfoReport.TrustIdRequestAsync();
- onAppForeground (条件判断）

### pluginSecInfoReport.reportSecurityInfoAsync(i2); DisableRiskScanSdkProb | DisableInstalledPkgInfoReportProb
- addHandleAuthResponse
    1. manualauth
    2. autoauth
    3. reg
- 138 完之后 (会是sysmsg的动态下发吗138响应 <sysmsg type="ClientCheckGetExtInfo"><ClientCheckGetExtInfo><ReportContext>539033600</ReportContext><Basic>0</Basic></ClientCheckGetExtInfo></sysmsg>)
- 进入到后台

### pluginSecInfoReport.asyncReportPaySecurityInfoThroughCgi();
### pluginSecInfoReport.asyncReportFinderSecurityInfoThroughCgi(i2);


### pluginSecInfoReport.asyncReportSensorSceneInfoThroughCgi(str, bArr);
- addHandleAuthResponse
    1. manualauth
    x. autoauth
    3. reg
- NormsgSensorEngine stop 时触发

### pluginSecInfoReport.asyncReportTuringOwnerThroughCgi(bArr);
 */

