// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UtileJni.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "UtileJni.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UtileJniRoot

@implementation UtileJniRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - UtileJniRoot_FileDescriptor

static GPBFileDescriptor *UtileJniRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - UtileJniECDHKey

@implementation UtileJniECDHKey

@dynamic hasNid, nid;
@dynamic hasKey, key;

typedef struct UtileJniECDHKey__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nid;
  NSData *key;
} UtileJniECDHKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nid",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniECDHKey_FieldNumber_Nid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UtileJniECDHKey__storage_, nid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniECDHKey_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UtileJniECDHKey__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UtileJniECDHKey class]
                                     rootClass:[UtileJniRoot class]
                                          file:UtileJniRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UtileJniECDHKey__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UtileJniSendPackage

@implementation UtileJniSendPackage

@dynamic hasTag1, tag1;
@dynamic hasEcdhkey, ecdhkey;
@dynamic hasData1, data1;
@dynamic hasTag4, tag4;
@dynamic hasData2, data2;

typedef struct UtileJniSendPackage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tag1;
  UtileJniECDHKey *ecdhkey;
  NSData *data1;
  NSData *tag4;
  NSData *data2;
} UtileJniSendPackage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag1",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniSendPackage_FieldNumber_Tag1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UtileJniSendPackage__storage_, tag1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ecdhkey",
        .dataTypeSpecific.className = GPBStringifySymbol(UtileJniECDHKey),
        .number = UtileJniSendPackage_FieldNumber_Ecdhkey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UtileJniSendPackage__storage_, ecdhkey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data1",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniSendPackage_FieldNumber_Data1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UtileJniSendPackage__storage_, data1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tag4",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniSendPackage_FieldNumber_Tag4,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UtileJniSendPackage__storage_, tag4),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "data2",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniSendPackage_FieldNumber_Data2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UtileJniSendPackage__storage_, data2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UtileJniSendPackage class]
                                     rootClass:[UtileJniRoot class]
                                          file:UtileJniRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UtileJniSendPackage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002e\002\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UtileJniReceivePackage

@implementation UtileJniReceivePackage

@dynamic hasEcdhkey, ecdhkey;
@dynamic hasTag2, tag2;
@dynamic hasTag3, tag3;
@dynamic hasTag4, tag4;

typedef struct UtileJniReceivePackage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tag2;
  UtileJniECDHKey *ecdhkey;
  NSData *tag3;
  NSData *tag4;
} UtileJniReceivePackage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ecdhkey",
        .dataTypeSpecific.className = GPBStringifySymbol(UtileJniECDHKey),
        .number = UtileJniReceivePackage_FieldNumber_Ecdhkey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UtileJniReceivePackage__storage_, ecdhkey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tag2",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniReceivePackage_FieldNumber_Tag2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UtileJniReceivePackage__storage_, tag2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tag3",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniReceivePackage_FieldNumber_Tag3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UtileJniReceivePackage__storage_, tag3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tag4",
        .dataTypeSpecific.className = NULL,
        .number = UtileJniReceivePackage_FieldNumber_Tag4,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UtileJniReceivePackage__storage_, tag4),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UtileJniReceivePackage class]
                                     rootClass:[UtileJniRoot class]
                                          file:UtileJniRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UtileJniReceivePackage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001e\002\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
